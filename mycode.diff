diff --git a/_cat b/_cat
index 32aa545..7872ec4 100755
Binary files a/_cat and b/_cat differ
diff --git a/_echo b/_echo
index f460f09..1a2ccf9 100755
Binary files a/_echo and b/_echo differ
diff --git a/_forktest b/_forktest
index 8410a51..9aa28ca 100755
Binary files a/_forktest and b/_forktest differ
diff --git a/_grep b/_grep
index 6e188d8..a2f04d3 100755
Binary files a/_grep and b/_grep differ
diff --git a/_hello b/_hello
index 3320189..d47354b 100755
Binary files a/_hello and b/_hello differ
diff --git a/_init b/_init
index 8f5a2b2..132022a 100755
Binary files a/_init and b/_init differ
diff --git a/_kill b/_kill
index 85d6836..03a9c80 100755
Binary files a/_kill and b/_kill differ
diff --git a/_ln b/_ln
index 9e2214b..b7a1501 100755
Binary files a/_ln and b/_ln differ
diff --git a/_ls b/_ls
index 821e5e0..9effa31 100755
Binary files a/_ls and b/_ls differ
diff --git a/_mkdir b/_mkdir
index 4c18164..9231b10 100755
Binary files a/_mkdir and b/_mkdir differ
diff --git a/_rm b/_rm
index 95a9b00..6aae6f3 100755
Binary files a/_rm and b/_rm differ
diff --git a/_sh b/_sh
index 932b63a..66b7fc6 100755
Binary files a/_sh and b/_sh differ
diff --git a/_stressfs b/_stressfs
index 0badf81..5b1fde4 100755
Binary files a/_stressfs and b/_stressfs differ
diff --git a/_usertests b/_usertests
index 0313e2b..2b9dd12 100755
Binary files a/_usertests and b/_usertests differ
diff --git a/_wc b/_wc
index e7578be..6a5a851 100755
Binary files a/_wc and b/_wc differ
diff --git a/_zombie b/_zombie
index 0e12d23..27b905a 100755
Binary files a/_zombie and b/_zombie differ
diff --git a/bio.o b/bio.o
index e6fdfba..a90f710 100644
Binary files a/bio.o and b/bio.o differ
diff --git a/cat.asm b/cat.asm
index cc9e0c2..f8e847a 100644
--- a/cat.asm
+++ b/cat.asm
@@ -525,132 +525,106 @@ memmove(void *vdst, const void *vsrc, int n)
  359:	c3                   	ret    
 
 0000035a <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
  35a:	b8 01 00 00 00       	mov    $0x1,%eax
  35f:	cd 40                	int    $0x40
  361:	c3                   	ret    
 
 00000362 <exit>:
-SYSCALL(exit)
  362:	b8 02 00 00 00       	mov    $0x2,%eax
  367:	cd 40                	int    $0x40
  369:	c3                   	ret    
 
 0000036a <wait>:
-SYSCALL(wait)
  36a:	b8 03 00 00 00       	mov    $0x3,%eax
  36f:	cd 40                	int    $0x40
  371:	c3                   	ret    
 
 00000372 <pipe>:
-SYSCALL(pipe)
  372:	b8 04 00 00 00       	mov    $0x4,%eax
  377:	cd 40                	int    $0x40
  379:	c3                   	ret    
 
 0000037a <read>:
-SYSCALL(read)
  37a:	b8 05 00 00 00       	mov    $0x5,%eax
  37f:	cd 40                	int    $0x40
  381:	c3                   	ret    
 
 00000382 <write>:
-SYSCALL(write)
  382:	b8 10 00 00 00       	mov    $0x10,%eax
  387:	cd 40                	int    $0x40
  389:	c3                   	ret    
 
 0000038a <close>:
-SYSCALL(close)
  38a:	b8 15 00 00 00       	mov    $0x15,%eax
  38f:	cd 40                	int    $0x40
  391:	c3                   	ret    
 
 00000392 <kill>:
-SYSCALL(kill)
  392:	b8 06 00 00 00       	mov    $0x6,%eax
  397:	cd 40                	int    $0x40
  399:	c3                   	ret    
 
 0000039a <exec>:
-SYSCALL(exec)
  39a:	b8 07 00 00 00       	mov    $0x7,%eax
  39f:	cd 40                	int    $0x40
  3a1:	c3                   	ret    
 
 000003a2 <open>:
-SYSCALL(open)
  3a2:	b8 0f 00 00 00       	mov    $0xf,%eax
  3a7:	cd 40                	int    $0x40
  3a9:	c3                   	ret    
 
 000003aa <mknod>:
-SYSCALL(mknod)
  3aa:	b8 11 00 00 00       	mov    $0x11,%eax
  3af:	cd 40                	int    $0x40
  3b1:	c3                   	ret    
 
 000003b2 <unlink>:
-SYSCALL(unlink)
  3b2:	b8 12 00 00 00       	mov    $0x12,%eax
  3b7:	cd 40                	int    $0x40
  3b9:	c3                   	ret    
 
 000003ba <fstat>:
-SYSCALL(fstat)
  3ba:	b8 08 00 00 00       	mov    $0x8,%eax
  3bf:	cd 40                	int    $0x40
  3c1:	c3                   	ret    
 
 000003c2 <link>:
-SYSCALL(link)
  3c2:	b8 13 00 00 00       	mov    $0x13,%eax
  3c7:	cd 40                	int    $0x40
  3c9:	c3                   	ret    
 
 000003ca <mkdir>:
-SYSCALL(mkdir)
  3ca:	b8 14 00 00 00       	mov    $0x14,%eax
  3cf:	cd 40                	int    $0x40
  3d1:	c3                   	ret    
 
 000003d2 <chdir>:
-SYSCALL(chdir)
  3d2:	b8 09 00 00 00       	mov    $0x9,%eax
  3d7:	cd 40                	int    $0x40
  3d9:	c3                   	ret    
 
 000003da <dup>:
-SYSCALL(dup)
  3da:	b8 0a 00 00 00       	mov    $0xa,%eax
  3df:	cd 40                	int    $0x40
  3e1:	c3                   	ret    
 
 000003e2 <getpid>:
-SYSCALL(getpid)
  3e2:	b8 0b 00 00 00       	mov    $0xb,%eax
  3e7:	cd 40                	int    $0x40
  3e9:	c3                   	ret    
 
 000003ea <sbrk>:
-SYSCALL(sbrk)
  3ea:	b8 0c 00 00 00       	mov    $0xc,%eax
  3ef:	cd 40                	int    $0x40
  3f1:	c3                   	ret    
 
 000003f2 <sleep>:
-SYSCALL(sleep)
  3f2:	b8 0d 00 00 00       	mov    $0xd,%eax
  3f7:	cd 40                	int    $0x40
  3f9:	c3                   	ret    
 
 000003fa <uptime>:
-SYSCALL(uptime)
  3fa:	b8 0e 00 00 00       	mov    $0xe,%eax
  3ff:	cd 40                	int    $0x40
  401:	c3                   	ret    
diff --git a/cat.o b/cat.o
index 923cece..725c555 100644
Binary files a/cat.o and b/cat.o differ
diff --git a/console.o b/console.o
index 96b309b..fd21e3c 100644
Binary files a/console.o and b/console.o differ
diff --git a/defs.h b/defs.h
index 94cda70..49b824a 100644
--- a/defs.h
+++ b/defs.h
@@ -11,180 +11,180 @@ struct stat;
 struct superblock;
 
 // bio.c
-void            binit(void);
-struct buf*     bread(uint, uint);
-void            brelse(struct buf*);
-void            bwrite(struct buf*);
+void binit(void);
+struct buf *bread(uint, uint);
+void brelse(struct buf *);
+void bwrite(struct buf *);
 
 // console.c
-void            consoleinit(void);
-void            cprintf(char*, ...);
-void            consoleintr(int(*)(void));
-void            panic(char*) __attribute__((noreturn));
+void consoleinit(void);
+void cprintf(char *, ...);
+void consoleintr(int (*)(void));
+void panic(char *) __attribute__((noreturn));
 
 // exec.c
-int             exec(char*, char**);
+int exec(char *, char **);
 
 // file.c
-struct file*    filealloc(void);
-void            fileclose(struct file*);
-struct file*    filedup(struct file*);
-void            fileinit(void);
-int             fileread(struct file*, char*, int n);
-int             filestat(struct file*, struct stat*);
-int             filewrite(struct file*, char*, int n);
+struct file *filealloc(void);
+void fileclose(struct file *);
+struct file *filedup(struct file *);
+void fileinit(void);
+int fileread(struct file *, char *, int n);
+int filestat(struct file *, struct stat *);
+int filewrite(struct file *, char *, int n);
 
 // fs.c
-void            readsb(int dev, struct superblock *sb);
-int             dirlink(struct inode*, char*, uint);
-struct inode*   dirlookup(struct inode*, char*, uint*);
-struct inode*   ialloc(uint, short);
-struct inode*   idup(struct inode*);
-void            iinit(int dev);
-void            ilock(struct inode*);
-void            iput(struct inode*);
-void            iunlock(struct inode*);
-void            iunlockput(struct inode*);
-void            iupdate(struct inode*);
-int             namecmp(const char*, const char*);
-struct inode*   namei(char*);
-struct inode*   nameiparent(char*, char*);
-int             readi(struct inode*, char*, uint, uint);
-void            stati(struct inode*, struct stat*);
-int             writei(struct inode*, char*, uint, uint);
+void readsb(int dev, struct superblock *sb);
+int dirlink(struct inode *, char *, uint);
+struct inode *dirlookup(struct inode *, char *, uint *);
+struct inode *ialloc(uint, short);
+struct inode *idup(struct inode *);
+void iinit(int dev);
+void ilock(struct inode *);
+void iput(struct inode *);
+void iunlock(struct inode *);
+void iunlockput(struct inode *);
+void iupdate(struct inode *);
+int namecmp(const char *, const char *);
+struct inode *namei(char *);
+struct inode *nameiparent(char *, char *);
+int readi(struct inode *, char *, uint, uint);
+void stati(struct inode *, struct stat *);
+int writei(struct inode *, char *, uint, uint);
 
 // ide.c
-void            ideinit(void);
-void            ideintr(void);
-void            iderw(struct buf*);
+void ideinit(void);
+void ideintr(void);
+void iderw(struct buf *);
 
 // ioapic.c
-void            ioapicenable(int irq, int cpu);
-extern uchar    ioapicid;
-void            ioapicinit(void);
+void ioapicenable(int irq, int cpu);
+extern uchar ioapicid;
+void ioapicinit(void);
 
 // kalloc.c
-char*           kalloc(void);
-void            kfree(char*);
-void            kinit1(void*, void*);
-void            kinit2(void*, void*);
+char *kalloc(void);
+void kfree(char *);
+void kinit1(void *, void *);
+void kinit2(void *, void *);
 
 // kbd.c
-void            kbdintr(void);
+void kbdintr(void);
 
 // lapic.c
-void            cmostime(struct rtcdate *r);
-int             lapicid(void);
-extern volatile uint*    lapic;
-void            lapiceoi(void);
-void            lapicinit(void);
-void            lapicstartap(uchar, uint);
-void            microdelay(int);
+void cmostime(struct rtcdate *r);
+int lapicid(void);
+extern volatile uint *lapic;
+void lapiceoi(void);
+void lapicinit(void);
+void lapicstartap(uchar, uint);
+void microdelay(int);
 
 // log.c
-void            initlog(int dev);
-void            log_write(struct buf*);
-void            begin_op();
-void            end_op();
+void initlog(int dev);
+void log_write(struct buf *);
+void begin_op();
+void end_op();
 
 // mp.c
-extern int      ismp;
-void            mpinit(void);
+extern int ismp;
+void mpinit(void);
 
 // picirq.c
-void            picenable(int);
-void            picinit(void);
+void picenable(int);
+void picinit(void);
 
 // pipe.c
-int             pipealloc(struct file**, struct file**);
-void            pipeclose(struct pipe*, int);
-int             piperead(struct pipe*, char*, int);
-int             pipewrite(struct pipe*, char*, int);
-
-//PAGEBREAK: 16
-// proc.c
-int             cpuid(void);
-void            exit(int);   //change to have status parameter
-int             fork(void);
-int             growproc(int);
-int             kill(int);
-struct cpu*     mycpu(void);
-struct proc*    myproc();
-void            pinit(void);
-void            procdump(void);
-void            scheduler(void) __attribute__((noreturn));
-void            sched(void);
-void            setproc(struct proc*);
-void            sleep(void*, struct spinlock*);
-void            userinit(void);
-int             wait(void);
-void            wakeup(void*);
-void            yield(void);
+int pipealloc(struct file **, struct file **);
+void pipeclose(struct pipe *, int);
+int piperead(struct pipe *, char *, int);
+int pipewrite(struct pipe *, char *, int);
+
+// PAGEBREAK: 16
+//  proc.c
+int cpuid(void);
+void exit(int); // change to have status parameter
+int fork(void);
+int growproc(int);
+int kill(int);
+struct cpu *mycpu(void);
+struct proc *myproc();
+void pinit(void);
+void procdump(void);
+void scheduler(void) __attribute__((noreturn));
+void sched(void);
+void setproc(struct proc *);
+void sleep(void *, struct spinlock *);
+void userinit(void);
+int wait(int *);
+void wakeup(void *);
+void yield(void);
 
 // swtch.S
-void            swtch(struct context**, struct context*);
+void swtch(struct context **, struct context *);
 
 // spinlock.c
-void            acquire(struct spinlock*);
-void            getcallerpcs(void*, uint*);
-int             holding(struct spinlock*);
-void            initlock(struct spinlock*, char*);
-void            release(struct spinlock*);
-void            pushcli(void);
-void            popcli(void);
+void acquire(struct spinlock *);
+void getcallerpcs(void *, uint *);
+int holding(struct spinlock *);
+void initlock(struct spinlock *, char *);
+void release(struct spinlock *);
+void pushcli(void);
+void popcli(void);
 
 // sleeplock.c
-void            acquiresleep(struct sleeplock*);
-void            releasesleep(struct sleeplock*);
-int             holdingsleep(struct sleeplock*);
-void            initsleeplock(struct sleeplock*, char*);
+void acquiresleep(struct sleeplock *);
+void releasesleep(struct sleeplock *);
+int holdingsleep(struct sleeplock *);
+void initsleeplock(struct sleeplock *, char *);
 
 // string.c
-int             memcmp(const void*, const void*, uint);
-void*           memmove(void*, const void*, uint);
-void*           memset(void*, int, uint);
-char*           safestrcpy(char*, const char*, int);
-int             strlen(const char*);
-int             strncmp(const char*, const char*, uint);
-char*           strncpy(char*, const char*, int);
+int memcmp(const void *, const void *, uint);
+void *memmove(void *, const void *, uint);
+void *memset(void *, int, uint);
+char *safestrcpy(char *, const char *, int);
+int strlen(const char *);
+int strncmp(const char *, const char *, uint);
+char *strncpy(char *, const char *, int);
 
 // syscall.c
-int             argint(int, int*);
-int             argptr(int, char**, int);
-int             argstr(int, char**);
-int             fetchint(uint, int*);
-int             fetchstr(uint, char**);
-void            syscall(void);
+int argint(int, int *);
+int argptr(int, char **, int);
+int argstr(int, char **);
+int fetchint(uint, int *);
+int fetchstr(uint, char **);
+void syscall(void);
 
 // timer.c
-void            timerinit(void);
+void timerinit(void);
 
 // trap.c
-void            idtinit(void);
-extern uint     ticks;
-void            tvinit(void);
+void idtinit(void);
+extern uint ticks;
+void tvinit(void);
 extern struct spinlock tickslock;
 
 // uart.c
-void            uartinit(void);
-void            uartintr(void);
-void            uartputc(int);
+void uartinit(void);
+void uartintr(void);
+void uartputc(int);
 
 // vm.c
-void            seginit(void);
-void            kvmalloc(void);
-pde_t*          setupkvm(void);
-char*           uva2ka(pde_t*, char*);
-int             allocuvm(pde_t*, uint, uint);
-int             deallocuvm(pde_t*, uint, uint);
-void            freevm(pde_t*);
-void            inituvm(pde_t*, char*, uint);
-int             loaduvm(pde_t*, char*, struct inode*, uint, uint);
-pde_t*          copyuvm(pde_t*, uint);
-void            switchuvm(struct proc*);
-void            switchkvm(void);
-int             copyout(pde_t*, uint, void*, uint);
-void            clearpteu(pde_t *pgdir, char *uva);
+void seginit(void);
+void kvmalloc(void);
+pde_t *setupkvm(void);
+char *uva2ka(pde_t *, char *);
+int allocuvm(pde_t *, uint, uint);
+int deallocuvm(pde_t *, uint, uint);
+void freevm(pde_t *);
+void inituvm(pde_t *, char *, uint);
+int loaduvm(pde_t *, char *, struct inode *, uint, uint);
+pde_t *copyuvm(pde_t *, uint);
+void switchuvm(struct proc *);
+void switchkvm(void);
+int copyout(pde_t *, uint, void *, uint);
+void clearpteu(pde_t *pgdir, char *uva);
 
 // number of elements in fixed-size array
-#define NELEM(x) (sizeof(x)/sizeof((x)[0]))
+#define NELEM(x) (sizeof(x) / sizeof((x)[0]))
diff --git a/echo.asm b/echo.asm
index 8910671..df9a659 100644
--- a/echo.asm
+++ b/echo.asm
@@ -438,132 +438,106 @@ memmove(void *vdst, const void *vsrc, int n)
  299:	c3                   	ret    
 
 0000029a <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
  29a:	b8 01 00 00 00       	mov    $0x1,%eax
  29f:	cd 40                	int    $0x40
  2a1:	c3                   	ret    
 
 000002a2 <exit>:
-SYSCALL(exit)
  2a2:	b8 02 00 00 00       	mov    $0x2,%eax
  2a7:	cd 40                	int    $0x40
  2a9:	c3                   	ret    
 
 000002aa <wait>:
-SYSCALL(wait)
  2aa:	b8 03 00 00 00       	mov    $0x3,%eax
  2af:	cd 40                	int    $0x40
  2b1:	c3                   	ret    
 
 000002b2 <pipe>:
-SYSCALL(pipe)
  2b2:	b8 04 00 00 00       	mov    $0x4,%eax
  2b7:	cd 40                	int    $0x40
  2b9:	c3                   	ret    
 
 000002ba <read>:
-SYSCALL(read)
  2ba:	b8 05 00 00 00       	mov    $0x5,%eax
  2bf:	cd 40                	int    $0x40
  2c1:	c3                   	ret    
 
 000002c2 <write>:
-SYSCALL(write)
  2c2:	b8 10 00 00 00       	mov    $0x10,%eax
  2c7:	cd 40                	int    $0x40
  2c9:	c3                   	ret    
 
 000002ca <close>:
-SYSCALL(close)
  2ca:	b8 15 00 00 00       	mov    $0x15,%eax
  2cf:	cd 40                	int    $0x40
  2d1:	c3                   	ret    
 
 000002d2 <kill>:
-SYSCALL(kill)
  2d2:	b8 06 00 00 00       	mov    $0x6,%eax
  2d7:	cd 40                	int    $0x40
  2d9:	c3                   	ret    
 
 000002da <exec>:
-SYSCALL(exec)
  2da:	b8 07 00 00 00       	mov    $0x7,%eax
  2df:	cd 40                	int    $0x40
  2e1:	c3                   	ret    
 
 000002e2 <open>:
-SYSCALL(open)
  2e2:	b8 0f 00 00 00       	mov    $0xf,%eax
  2e7:	cd 40                	int    $0x40
  2e9:	c3                   	ret    
 
 000002ea <mknod>:
-SYSCALL(mknod)
  2ea:	b8 11 00 00 00       	mov    $0x11,%eax
  2ef:	cd 40                	int    $0x40
  2f1:	c3                   	ret    
 
 000002f2 <unlink>:
-SYSCALL(unlink)
  2f2:	b8 12 00 00 00       	mov    $0x12,%eax
  2f7:	cd 40                	int    $0x40
  2f9:	c3                   	ret    
 
 000002fa <fstat>:
-SYSCALL(fstat)
  2fa:	b8 08 00 00 00       	mov    $0x8,%eax
  2ff:	cd 40                	int    $0x40
  301:	c3                   	ret    
 
 00000302 <link>:
-SYSCALL(link)
  302:	b8 13 00 00 00       	mov    $0x13,%eax
  307:	cd 40                	int    $0x40
  309:	c3                   	ret    
 
 0000030a <mkdir>:
-SYSCALL(mkdir)
  30a:	b8 14 00 00 00       	mov    $0x14,%eax
  30f:	cd 40                	int    $0x40
  311:	c3                   	ret    
 
 00000312 <chdir>:
-SYSCALL(chdir)
  312:	b8 09 00 00 00       	mov    $0x9,%eax
  317:	cd 40                	int    $0x40
  319:	c3                   	ret    
 
 0000031a <dup>:
-SYSCALL(dup)
  31a:	b8 0a 00 00 00       	mov    $0xa,%eax
  31f:	cd 40                	int    $0x40
  321:	c3                   	ret    
 
 00000322 <getpid>:
-SYSCALL(getpid)
  322:	b8 0b 00 00 00       	mov    $0xb,%eax
  327:	cd 40                	int    $0x40
  329:	c3                   	ret    
 
 0000032a <sbrk>:
-SYSCALL(sbrk)
  32a:	b8 0c 00 00 00       	mov    $0xc,%eax
  32f:	cd 40                	int    $0x40
  331:	c3                   	ret    
 
 00000332 <sleep>:
-SYSCALL(sleep)
  332:	b8 0d 00 00 00       	mov    $0xd,%eax
  337:	cd 40                	int    $0x40
  339:	c3                   	ret    
 
 0000033a <uptime>:
-SYSCALL(uptime)
  33a:	b8 0e 00 00 00       	mov    $0xe,%eax
  33f:	cd 40                	int    $0x40
  341:	c3                   	ret    
diff --git a/echo.o b/echo.o
index b4511d0..1b62806 100644
Binary files a/echo.o and b/echo.o differ
diff --git a/exec.o b/exec.o
index 3d03707..2fad1f3 100644
Binary files a/exec.o and b/exec.o differ
diff --git a/file.o b/file.o
index cec2a9b..7a7c5e2 100644
Binary files a/file.o and b/file.o differ
diff --git a/forktest.asm b/forktest.asm
index 86814a0..f5c1257 100644
--- a/forktest.asm
+++ b/forktest.asm
@@ -5,11 +5,11 @@ _forktest:     file format elf32-i386
 Disassembly of section .text:
 
 00000000 <main>:
+
   printf(1, "fork test OK\n");
 }
 
-int
-main(void)
+int main(void)
 {
    0:	55                   	push   %ebp
    1:	89 e5                	mov    %esp,%ebp
@@ -19,7 +19,7 @@ main(void)
    9:	e8 42 00 00 00       	call   50 <forktest>
   exit(0);
    e:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-  15:	e8 48 03 00 00       	call   362 <exit>
+  15:	e8 58 03 00 00       	call   372 <exit>
   1a:	66 90                	xchg   %ax,%ax
   1c:	66 90                	xchg   %ax,%ax
   1e:	66 90                	xchg   %ax,%ax
@@ -33,12 +33,12 @@ main(void)
   27:	8b 5d 0c             	mov    0xc(%ebp),%ebx
   write(fd, s, strlen(s));
   2a:	89 1c 24             	mov    %ebx,(%esp)
-  2d:	e8 8e 01 00 00       	call   1c0 <strlen>
+  2d:	e8 9e 01 00 00       	call   1d0 <strlen>
   32:	89 5c 24 04          	mov    %ebx,0x4(%esp)
   36:	89 44 24 08          	mov    %eax,0x8(%esp)
   3a:	8b 45 08             	mov    0x8(%ebp),%eax
   3d:	89 04 24             	mov    %eax,(%esp)
-  40:	e8 3d 03 00 00       	call   382 <write>
+  40:	e8 4d 03 00 00       	call   392 <write>
 }
   45:	83 c4 14             	add    $0x14,%esp
   48:	5b                   	pop    %ebx
@@ -52,595 +52,572 @@ main(void)
   50:	55                   	push   %ebp
   51:	89 e5                	mov    %esp,%ebp
   53:	53                   	push   %ebx
-  for(n=0; n<N; n++){
+  for (n = 0; n < N; n++)
   54:	31 db                	xor    %ebx,%ebx
 {
   56:	83 ec 14             	sub    $0x14,%esp
   printf(1, "fork test\n");
-  59:	c7 44 24 04 04 04 00 	movl   $0x404,0x4(%esp)
+  59:	c7 44 24 04 14 04 00 	movl   $0x414,0x4(%esp)
   60:	00 
   61:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
   68:	e8 b3 ff ff ff       	call   20 <printf>
   6d:	eb 13                	jmp    82 <forktest+0x32>
   6f:	90                   	nop
-    if(pid == 0)
-  70:	0f 84 9e 00 00 00    	je     114 <forktest+0xc4>
-  for(n=0; n<N; n++){
+    if (pid == 0)
+  70:	0f 84 a6 00 00 00    	je     11c <forktest+0xcc>
+  for (n = 0; n < N; n++)
   76:	83 c3 01             	add    $0x1,%ebx
   79:	81 fb e8 03 00 00    	cmp    $0x3e8,%ebx
   7f:	90                   	nop
-  80:	74 4e                	je     d0 <forktest+0x80>
+  80:	74 56                	je     d8 <forktest+0x88>
     pid = fork();
-  82:	e8 d3 02 00 00       	call   35a <fork>
-    if(pid < 0)
+  82:	e8 e3 02 00 00       	call   36a <fork>
+    if (pid < 0)
   87:	85 c0                	test   %eax,%eax
   89:	79 e5                	jns    70 <forktest+0x20>
-  for(; n > 0; n--){
+  for (; n > 0; n--)
   8b:	85 db                	test   %ebx,%ebx
   8d:	8d 76 00             	lea    0x0(%esi),%esi
-  90:	74 15                	je     a7 <forktest+0x57>
+  90:	74 1b                	je     ad <forktest+0x5d>
   92:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    if(wait() < 0){
-  98:	e8 cd 02 00 00       	call   36a <wait>
-  9d:	85 c0                	test   %eax,%eax
-  9f:	90                   	nop
-  a0:	78 5e                	js     100 <forktest+0xb0>
-  for(; n > 0; n--){
-  a2:	83 eb 01             	sub    $0x1,%ebx
-  a5:	75 f1                	jne    98 <forktest+0x48>
-  if(wait() != -1){
-  a7:	e8 be 02 00 00       	call   36a <wait>
-  ac:	83 f8 ff             	cmp    $0xffffffff,%eax
-  af:	90                   	nop
-  b0:	75 6e                	jne    120 <forktest+0xd0>
+    if (wait(0) < 0)
+  98:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  9f:	e8 d6 02 00 00       	call   37a <wait>
+  a4:	85 c0                	test   %eax,%eax
+  a6:	78 60                	js     108 <forktest+0xb8>
+  for (; n > 0; n--)
+  a8:	83 eb 01             	sub    $0x1,%ebx
+  ab:	75 eb                	jne    98 <forktest+0x48>
+  if (wait(0) != -1)
+  ad:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  b4:	e8 c1 02 00 00       	call   37a <wait>
+  b9:	83 f8 ff             	cmp    $0xffffffff,%eax
+  bc:	75 6a                	jne    128 <forktest+0xd8>
   printf(1, "fork test OK\n");
-  b2:	c7 44 24 04 36 04 00 	movl   $0x436,0x4(%esp)
-  b9:	00 
-  ba:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-  c1:	e8 5a ff ff ff       	call   20 <printf>
+  be:	c7 44 24 04 46 04 00 	movl   $0x446,0x4(%esp)
+  c5:	00 
+  c6:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+  cd:	e8 4e ff ff ff       	call   20 <printf>
 }
-  c6:	83 c4 14             	add    $0x14,%esp
-  c9:	5b                   	pop    %ebx
-  ca:	5d                   	pop    %ebp
-  cb:	c3                   	ret    
-  cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  d2:	83 c4 14             	add    $0x14,%esp
+  d5:	5b                   	pop    %ebx
+  d6:	5d                   	pop    %ebp
+  d7:	c3                   	ret    
   write(fd, s, strlen(s));
-  d0:	c7 04 24 44 04 00 00 	movl   $0x444,(%esp)
-  d7:	e8 e4 00 00 00       	call   1c0 <strlen>
-  dc:	c7 44 24 04 44 04 00 	movl   $0x444,0x4(%esp)
-  e3:	00 
-  e4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-  eb:	89 44 24 08          	mov    %eax,0x8(%esp)
-  ef:	e8 8e 02 00 00       	call   382 <write>
+  d8:	c7 04 24 54 04 00 00 	movl   $0x454,(%esp)
+  df:	e8 ec 00 00 00       	call   1d0 <strlen>
+  e4:	c7 44 24 04 54 04 00 	movl   $0x454,0x4(%esp)
+  eb:	00 
+  ec:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+  f3:	89 44 24 08          	mov    %eax,0x8(%esp)
+  f7:	e8 96 02 00 00       	call   392 <write>
     exit(0);
-  f4:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-  fb:	e8 62 02 00 00       	call   362 <exit>
+  fc:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+ 103:	e8 6a 02 00 00       	call   372 <exit>
       printf(1, "wait stopped early\n");
- 100:	c7 44 24 04 0f 04 00 	movl   $0x40f,0x4(%esp)
- 107:	00 
- 108:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
- 10f:	e8 0c ff ff ff       	call   20 <printf>
+ 108:	c7 44 24 04 1f 04 00 	movl   $0x41f,0x4(%esp)
+ 10f:	00 
+ 110:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+ 117:	e8 04 ff ff ff       	call   20 <printf>
       exit(0);
- 114:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
- 11b:	e8 42 02 00 00       	call   362 <exit>
+ 11c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+ 123:	e8 4a 02 00 00       	call   372 <exit>
     printf(1, "wait got too many\n");
- 120:	c7 44 24 04 23 04 00 	movl   $0x423,0x4(%esp)
- 127:	00 
- 128:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
- 12f:	e8 ec fe ff ff       	call   20 <printf>
+ 128:	c7 44 24 04 33 04 00 	movl   $0x433,0x4(%esp)
+ 12f:	00 
+ 130:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+ 137:	e8 e4 fe ff ff       	call   20 <printf>
     exit(0);
- 134:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
- 13b:	e8 22 02 00 00       	call   362 <exit>
-
-00000140 <strcpy>:
+ 13c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+ 143:	e8 2a 02 00 00       	call   372 <exit>
+ 148:	66 90                	xchg   %ax,%ax
+ 14a:	66 90                	xchg   %ax,%ax
+ 14c:	66 90                	xchg   %ax,%ax
+ 14e:	66 90                	xchg   %ax,%ax
+
+00000150 <strcpy>:
 #include "user.h"
 #include "x86.h"
 
 char*
 strcpy(char *s, const char *t)
 {
- 140:	55                   	push   %ebp
- 141:	89 e5                	mov    %esp,%ebp
- 143:	8b 45 08             	mov    0x8(%ebp),%eax
- 146:	8b 4d 0c             	mov    0xc(%ebp),%ecx
- 149:	53                   	push   %ebx
+ 150:	55                   	push   %ebp
+ 151:	89 e5                	mov    %esp,%ebp
+ 153:	8b 45 08             	mov    0x8(%ebp),%eax
+ 156:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+ 159:	53                   	push   %ebx
   char *os;
 
   os = s;
   while((*s++ = *t++) != 0)
- 14a:	89 c2                	mov    %eax,%edx
- 14c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 150:	83 c1 01             	add    $0x1,%ecx
- 153:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
- 157:	83 c2 01             	add    $0x1,%edx
- 15a:	84 db                	test   %bl,%bl
- 15c:	88 5a ff             	mov    %bl,-0x1(%edx)
- 15f:	75 ef                	jne    150 <strcpy+0x10>
+ 15a:	89 c2                	mov    %eax,%edx
+ 15c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 160:	83 c1 01             	add    $0x1,%ecx
+ 163:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
+ 167:	83 c2 01             	add    $0x1,%edx
+ 16a:	84 db                	test   %bl,%bl
+ 16c:	88 5a ff             	mov    %bl,-0x1(%edx)
+ 16f:	75 ef                	jne    160 <strcpy+0x10>
     ;
   return os;
 }
- 161:	5b                   	pop    %ebx
- 162:	5d                   	pop    %ebp
- 163:	c3                   	ret    
- 164:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
- 16a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+ 171:	5b                   	pop    %ebx
+ 172:	5d                   	pop    %ebp
+ 173:	c3                   	ret    
+ 174:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 17a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
 
-00000170 <strcmp>:
+00000180 <strcmp>:
 
 int
 strcmp(const char *p, const char *q)
 {
- 170:	55                   	push   %ebp
- 171:	89 e5                	mov    %esp,%ebp
- 173:	8b 55 08             	mov    0x8(%ebp),%edx
- 176:	53                   	push   %ebx
- 177:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+ 180:	55                   	push   %ebp
+ 181:	89 e5                	mov    %esp,%ebp
+ 183:	8b 55 08             	mov    0x8(%ebp),%edx
+ 186:	53                   	push   %ebx
+ 187:	8b 4d 0c             	mov    0xc(%ebp),%ecx
   while(*p && *p == *q)
- 17a:	0f b6 02             	movzbl (%edx),%eax
- 17d:	84 c0                	test   %al,%al
- 17f:	74 2d                	je     1ae <strcmp+0x3e>
- 181:	0f b6 19             	movzbl (%ecx),%ebx
- 184:	38 d8                	cmp    %bl,%al
- 186:	74 0e                	je     196 <strcmp+0x26>
- 188:	eb 2b                	jmp    1b5 <strcmp+0x45>
- 18a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
- 190:	38 c8                	cmp    %cl,%al
- 192:	75 15                	jne    1a9 <strcmp+0x39>
+ 18a:	0f b6 02             	movzbl (%edx),%eax
+ 18d:	84 c0                	test   %al,%al
+ 18f:	74 2d                	je     1be <strcmp+0x3e>
+ 191:	0f b6 19             	movzbl (%ecx),%ebx
+ 194:	38 d8                	cmp    %bl,%al
+ 196:	74 0e                	je     1a6 <strcmp+0x26>
+ 198:	eb 2b                	jmp    1c5 <strcmp+0x45>
+ 19a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 1a0:	38 c8                	cmp    %cl,%al
+ 1a2:	75 15                	jne    1b9 <strcmp+0x39>
     p++, q++;
- 194:	89 d9                	mov    %ebx,%ecx
- 196:	83 c2 01             	add    $0x1,%edx
+ 1a4:	89 d9                	mov    %ebx,%ecx
+ 1a6:	83 c2 01             	add    $0x1,%edx
   while(*p && *p == *q)
- 199:	0f b6 02             	movzbl (%edx),%eax
+ 1a9:	0f b6 02             	movzbl (%edx),%eax
     p++, q++;
- 19c:	8d 59 01             	lea    0x1(%ecx),%ebx
+ 1ac:	8d 59 01             	lea    0x1(%ecx),%ebx
   while(*p && *p == *q)
- 19f:	0f b6 49 01          	movzbl 0x1(%ecx),%ecx
- 1a3:	84 c0                	test   %al,%al
- 1a5:	75 e9                	jne    190 <strcmp+0x20>
- 1a7:	31 c0                	xor    %eax,%eax
+ 1af:	0f b6 49 01          	movzbl 0x1(%ecx),%ecx
+ 1b3:	84 c0                	test   %al,%al
+ 1b5:	75 e9                	jne    1a0 <strcmp+0x20>
+ 1b7:	31 c0                	xor    %eax,%eax
   return (uchar)*p - (uchar)*q;
- 1a9:	29 c8                	sub    %ecx,%eax
+ 1b9:	29 c8                	sub    %ecx,%eax
 }
- 1ab:	5b                   	pop    %ebx
- 1ac:	5d                   	pop    %ebp
- 1ad:	c3                   	ret    
- 1ae:	0f b6 09             	movzbl (%ecx),%ecx
+ 1bb:	5b                   	pop    %ebx
+ 1bc:	5d                   	pop    %ebp
+ 1bd:	c3                   	ret    
+ 1be:	0f b6 09             	movzbl (%ecx),%ecx
   while(*p && *p == *q)
- 1b1:	31 c0                	xor    %eax,%eax
- 1b3:	eb f4                	jmp    1a9 <strcmp+0x39>
- 1b5:	0f b6 cb             	movzbl %bl,%ecx
- 1b8:	eb ef                	jmp    1a9 <strcmp+0x39>
- 1ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 1c1:	31 c0                	xor    %eax,%eax
+ 1c3:	eb f4                	jmp    1b9 <strcmp+0x39>
+ 1c5:	0f b6 cb             	movzbl %bl,%ecx
+ 1c8:	eb ef                	jmp    1b9 <strcmp+0x39>
+ 1ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-000001c0 <strlen>:
+000001d0 <strlen>:
 
 uint
 strlen(const char *s)
 {
- 1c0:	55                   	push   %ebp
- 1c1:	89 e5                	mov    %esp,%ebp
- 1c3:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 1d0:	55                   	push   %ebp
+ 1d1:	89 e5                	mov    %esp,%ebp
+ 1d3:	8b 4d 08             	mov    0x8(%ebp),%ecx
   int n;
 
   for(n = 0; s[n]; n++)
- 1c6:	80 39 00             	cmpb   $0x0,(%ecx)
- 1c9:	74 12                	je     1dd <strlen+0x1d>
- 1cb:	31 d2                	xor    %edx,%edx
- 1cd:	8d 76 00             	lea    0x0(%esi),%esi
- 1d0:	83 c2 01             	add    $0x1,%edx
- 1d3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
- 1d7:	89 d0                	mov    %edx,%eax
- 1d9:	75 f5                	jne    1d0 <strlen+0x10>
+ 1d6:	80 39 00             	cmpb   $0x0,(%ecx)
+ 1d9:	74 12                	je     1ed <strlen+0x1d>
+ 1db:	31 d2                	xor    %edx,%edx
+ 1dd:	8d 76 00             	lea    0x0(%esi),%esi
+ 1e0:	83 c2 01             	add    $0x1,%edx
+ 1e3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+ 1e7:	89 d0                	mov    %edx,%eax
+ 1e9:	75 f5                	jne    1e0 <strlen+0x10>
     ;
   return n;
 }
- 1db:	5d                   	pop    %ebp
- 1dc:	c3                   	ret    
+ 1eb:	5d                   	pop    %ebp
+ 1ec:	c3                   	ret    
   for(n = 0; s[n]; n++)
- 1dd:	31 c0                	xor    %eax,%eax
+ 1ed:	31 c0                	xor    %eax,%eax
 }
- 1df:	5d                   	pop    %ebp
- 1e0:	c3                   	ret    
- 1e1:	eb 0d                	jmp    1f0 <memset>
- 1e3:	90                   	nop
- 1e4:	90                   	nop
- 1e5:	90                   	nop
- 1e6:	90                   	nop
- 1e7:	90                   	nop
- 1e8:	90                   	nop
- 1e9:	90                   	nop
- 1ea:	90                   	nop
- 1eb:	90                   	nop
- 1ec:	90                   	nop
- 1ed:	90                   	nop
- 1ee:	90                   	nop
- 1ef:	90                   	nop
-
-000001f0 <memset>:
+ 1ef:	5d                   	pop    %ebp
+ 1f0:	c3                   	ret    
+ 1f1:	eb 0d                	jmp    200 <memset>
+ 1f3:	90                   	nop
+ 1f4:	90                   	nop
+ 1f5:	90                   	nop
+ 1f6:	90                   	nop
+ 1f7:	90                   	nop
+ 1f8:	90                   	nop
+ 1f9:	90                   	nop
+ 1fa:	90                   	nop
+ 1fb:	90                   	nop
+ 1fc:	90                   	nop
+ 1fd:	90                   	nop
+ 1fe:	90                   	nop
+ 1ff:	90                   	nop
+
+00000200 <memset>:
 
 void*
 memset(void *dst, int c, uint n)
 {
- 1f0:	55                   	push   %ebp
- 1f1:	89 e5                	mov    %esp,%ebp
- 1f3:	8b 55 08             	mov    0x8(%ebp),%edx
- 1f6:	57                   	push   %edi
+ 200:	55                   	push   %ebp
+ 201:	89 e5                	mov    %esp,%ebp
+ 203:	8b 55 08             	mov    0x8(%ebp),%edx
+ 206:	57                   	push   %edi
 }
 
 static inline void
 stosb(void *addr, int data, int cnt)
 {
   asm volatile("cld; rep stosb" :
- 1f7:	8b 4d 10             	mov    0x10(%ebp),%ecx
- 1fa:	8b 45 0c             	mov    0xc(%ebp),%eax
- 1fd:	89 d7                	mov    %edx,%edi
- 1ff:	fc                   	cld    
- 200:	f3 aa                	rep stos %al,%es:(%edi)
+ 207:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 20a:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 20d:	89 d7                	mov    %edx,%edi
+ 20f:	fc                   	cld    
+ 210:	f3 aa                	rep stos %al,%es:(%edi)
   stosb(dst, c, n);
   return dst;
 }
- 202:	89 d0                	mov    %edx,%eax
- 204:	5f                   	pop    %edi
- 205:	5d                   	pop    %ebp
- 206:	c3                   	ret    
- 207:	89 f6                	mov    %esi,%esi
- 209:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+ 212:	89 d0                	mov    %edx,%eax
+ 214:	5f                   	pop    %edi
+ 215:	5d                   	pop    %ebp
+ 216:	c3                   	ret    
+ 217:	89 f6                	mov    %esi,%esi
+ 219:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-00000210 <strchr>:
+00000220 <strchr>:
 
 char*
 strchr(const char *s, char c)
 {
- 210:	55                   	push   %ebp
- 211:	89 e5                	mov    %esp,%ebp
- 213:	8b 45 08             	mov    0x8(%ebp),%eax
- 216:	53                   	push   %ebx
- 217:	8b 55 0c             	mov    0xc(%ebp),%edx
+ 220:	55                   	push   %ebp
+ 221:	89 e5                	mov    %esp,%ebp
+ 223:	8b 45 08             	mov    0x8(%ebp),%eax
+ 226:	53                   	push   %ebx
+ 227:	8b 55 0c             	mov    0xc(%ebp),%edx
   for(; *s; s++)
- 21a:	0f b6 18             	movzbl (%eax),%ebx
- 21d:	84 db                	test   %bl,%bl
- 21f:	74 1d                	je     23e <strchr+0x2e>
+ 22a:	0f b6 18             	movzbl (%eax),%ebx
+ 22d:	84 db                	test   %bl,%bl
+ 22f:	74 1d                	je     24e <strchr+0x2e>
     if(*s == c)
- 221:	38 d3                	cmp    %dl,%bl
- 223:	89 d1                	mov    %edx,%ecx
- 225:	75 0d                	jne    234 <strchr+0x24>
- 227:	eb 17                	jmp    240 <strchr+0x30>
- 229:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 230:	38 ca                	cmp    %cl,%dl
- 232:	74 0c                	je     240 <strchr+0x30>
+ 231:	38 d3                	cmp    %dl,%bl
+ 233:	89 d1                	mov    %edx,%ecx
+ 235:	75 0d                	jne    244 <strchr+0x24>
+ 237:	eb 17                	jmp    250 <strchr+0x30>
+ 239:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 240:	38 ca                	cmp    %cl,%dl
+ 242:	74 0c                	je     250 <strchr+0x30>
   for(; *s; s++)
- 234:	83 c0 01             	add    $0x1,%eax
- 237:	0f b6 10             	movzbl (%eax),%edx
- 23a:	84 d2                	test   %dl,%dl
- 23c:	75 f2                	jne    230 <strchr+0x20>
+ 244:	83 c0 01             	add    $0x1,%eax
+ 247:	0f b6 10             	movzbl (%eax),%edx
+ 24a:	84 d2                	test   %dl,%dl
+ 24c:	75 f2                	jne    240 <strchr+0x20>
       return (char*)s;
   return 0;
- 23e:	31 c0                	xor    %eax,%eax
+ 24e:	31 c0                	xor    %eax,%eax
 }
- 240:	5b                   	pop    %ebx
- 241:	5d                   	pop    %ebp
- 242:	c3                   	ret    
- 243:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
- 249:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+ 250:	5b                   	pop    %ebx
+ 251:	5d                   	pop    %ebp
+ 252:	c3                   	ret    
+ 253:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 259:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-00000250 <gets>:
+00000260 <gets>:
 
 char*
 gets(char *buf, int max)
 {
- 250:	55                   	push   %ebp
- 251:	89 e5                	mov    %esp,%ebp
- 253:	57                   	push   %edi
- 254:	56                   	push   %esi
+ 260:	55                   	push   %ebp
+ 261:	89 e5                	mov    %esp,%ebp
+ 263:	57                   	push   %edi
+ 264:	56                   	push   %esi
   int i, cc;
   char c;
 
   for(i=0; i+1 < max; ){
- 255:	31 f6                	xor    %esi,%esi
+ 265:	31 f6                	xor    %esi,%esi
 {
- 257:	53                   	push   %ebx
- 258:	83 ec 2c             	sub    $0x2c,%esp
+ 267:	53                   	push   %ebx
+ 268:	83 ec 2c             	sub    $0x2c,%esp
     cc = read(0, &c, 1);
- 25b:	8d 7d e7             	lea    -0x19(%ebp),%edi
+ 26b:	8d 7d e7             	lea    -0x19(%ebp),%edi
   for(i=0; i+1 < max; ){
- 25e:	eb 31                	jmp    291 <gets+0x41>
+ 26e:	eb 31                	jmp    2a1 <gets+0x41>
     cc = read(0, &c, 1);
- 260:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 267:	00 
- 268:	89 7c 24 04          	mov    %edi,0x4(%esp)
- 26c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
- 273:	e8 02 01 00 00       	call   37a <read>
+ 270:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 277:	00 
+ 278:	89 7c 24 04          	mov    %edi,0x4(%esp)
+ 27c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+ 283:	e8 02 01 00 00       	call   38a <read>
     if(cc < 1)
- 278:	85 c0                	test   %eax,%eax
- 27a:	7e 1d                	jle    299 <gets+0x49>
+ 288:	85 c0                	test   %eax,%eax
+ 28a:	7e 1d                	jle    2a9 <gets+0x49>
       break;
     buf[i++] = c;
- 27c:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 28c:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
   for(i=0; i+1 < max; ){
- 280:	89 de                	mov    %ebx,%esi
+ 290:	89 de                	mov    %ebx,%esi
     buf[i++] = c;
- 282:	8b 55 08             	mov    0x8(%ebp),%edx
+ 292:	8b 55 08             	mov    0x8(%ebp),%edx
     if(c == '\n' || c == '\r')
- 285:	3c 0d                	cmp    $0xd,%al
+ 295:	3c 0d                	cmp    $0xd,%al
     buf[i++] = c;
- 287:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
+ 297:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
     if(c == '\n' || c == '\r')
- 28b:	74 0c                	je     299 <gets+0x49>
- 28d:	3c 0a                	cmp    $0xa,%al
- 28f:	74 08                	je     299 <gets+0x49>
+ 29b:	74 0c                	je     2a9 <gets+0x49>
+ 29d:	3c 0a                	cmp    $0xa,%al
+ 29f:	74 08                	je     2a9 <gets+0x49>
   for(i=0; i+1 < max; ){
- 291:	8d 5e 01             	lea    0x1(%esi),%ebx
- 294:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
- 297:	7c c7                	jl     260 <gets+0x10>
+ 2a1:	8d 5e 01             	lea    0x1(%esi),%ebx
+ 2a4:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 2a7:	7c c7                	jl     270 <gets+0x10>
       break;
   }
   buf[i] = '\0';
- 299:	8b 45 08             	mov    0x8(%ebp),%eax
- 29c:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+ 2a9:	8b 45 08             	mov    0x8(%ebp),%eax
+ 2ac:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
   return buf;
 }
- 2a0:	83 c4 2c             	add    $0x2c,%esp
- 2a3:	5b                   	pop    %ebx
- 2a4:	5e                   	pop    %esi
- 2a5:	5f                   	pop    %edi
- 2a6:	5d                   	pop    %ebp
- 2a7:	c3                   	ret    
- 2a8:	90                   	nop
- 2a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 2b0:	83 c4 2c             	add    $0x2c,%esp
+ 2b3:	5b                   	pop    %ebx
+ 2b4:	5e                   	pop    %esi
+ 2b5:	5f                   	pop    %edi
+ 2b6:	5d                   	pop    %ebp
+ 2b7:	c3                   	ret    
+ 2b8:	90                   	nop
+ 2b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-000002b0 <stat>:
+000002c0 <stat>:
 
 int
 stat(const char *n, struct stat *st)
 {
- 2b0:	55                   	push   %ebp
- 2b1:	89 e5                	mov    %esp,%ebp
- 2b3:	56                   	push   %esi
- 2b4:	53                   	push   %ebx
- 2b5:	83 ec 10             	sub    $0x10,%esp
+ 2c0:	55                   	push   %ebp
+ 2c1:	89 e5                	mov    %esp,%ebp
+ 2c3:	56                   	push   %esi
+ 2c4:	53                   	push   %ebx
+ 2c5:	83 ec 10             	sub    $0x10,%esp
   int fd;
   int r;
 
   fd = open(n, O_RDONLY);
- 2b8:	8b 45 08             	mov    0x8(%ebp),%eax
- 2bb:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
- 2c2:	00 
- 2c3:	89 04 24             	mov    %eax,(%esp)
- 2c6:	e8 d7 00 00 00       	call   3a2 <open>
+ 2c8:	8b 45 08             	mov    0x8(%ebp),%eax
+ 2cb:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+ 2d2:	00 
+ 2d3:	89 04 24             	mov    %eax,(%esp)
+ 2d6:	e8 d7 00 00 00       	call   3b2 <open>
   if(fd < 0)
- 2cb:	85 c0                	test   %eax,%eax
+ 2db:	85 c0                	test   %eax,%eax
   fd = open(n, O_RDONLY);
- 2cd:	89 c3                	mov    %eax,%ebx
+ 2dd:	89 c3                	mov    %eax,%ebx
   if(fd < 0)
- 2cf:	78 27                	js     2f8 <stat+0x48>
+ 2df:	78 27                	js     308 <stat+0x48>
     return -1;
   r = fstat(fd, st);
- 2d1:	8b 45 0c             	mov    0xc(%ebp),%eax
- 2d4:	89 1c 24             	mov    %ebx,(%esp)
- 2d7:	89 44 24 04          	mov    %eax,0x4(%esp)
- 2db:	e8 da 00 00 00       	call   3ba <fstat>
+ 2e1:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 2e4:	89 1c 24             	mov    %ebx,(%esp)
+ 2e7:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 2eb:	e8 da 00 00 00       	call   3ca <fstat>
   close(fd);
- 2e0:	89 1c 24             	mov    %ebx,(%esp)
+ 2f0:	89 1c 24             	mov    %ebx,(%esp)
   r = fstat(fd, st);
- 2e3:	89 c6                	mov    %eax,%esi
+ 2f3:	89 c6                	mov    %eax,%esi
   close(fd);
- 2e5:	e8 a0 00 00 00       	call   38a <close>
+ 2f5:	e8 a0 00 00 00       	call   39a <close>
   return r;
- 2ea:	89 f0                	mov    %esi,%eax
+ 2fa:	89 f0                	mov    %esi,%eax
 }
- 2ec:	83 c4 10             	add    $0x10,%esp
- 2ef:	5b                   	pop    %ebx
- 2f0:	5e                   	pop    %esi
- 2f1:	5d                   	pop    %ebp
- 2f2:	c3                   	ret    
- 2f3:	90                   	nop
- 2f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 2fc:	83 c4 10             	add    $0x10,%esp
+ 2ff:	5b                   	pop    %ebx
+ 300:	5e                   	pop    %esi
+ 301:	5d                   	pop    %ebp
+ 302:	c3                   	ret    
+ 303:	90                   	nop
+ 304:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     return -1;
- 2f8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
- 2fd:	eb ed                	jmp    2ec <stat+0x3c>
- 2ff:	90                   	nop
+ 308:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+ 30d:	eb ed                	jmp    2fc <stat+0x3c>
+ 30f:	90                   	nop
 
-00000300 <atoi>:
+00000310 <atoi>:
 
 int
 atoi(const char *s)
 {
- 300:	55                   	push   %ebp
- 301:	89 e5                	mov    %esp,%ebp
- 303:	8b 4d 08             	mov    0x8(%ebp),%ecx
- 306:	53                   	push   %ebx
+ 310:	55                   	push   %ebp
+ 311:	89 e5                	mov    %esp,%ebp
+ 313:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 316:	53                   	push   %ebx
   int n;
 
   n = 0;
   while('0' <= *s && *s <= '9')
- 307:	0f be 11             	movsbl (%ecx),%edx
- 30a:	8d 42 d0             	lea    -0x30(%edx),%eax
- 30d:	3c 09                	cmp    $0x9,%al
+ 317:	0f be 11             	movsbl (%ecx),%edx
+ 31a:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 31d:	3c 09                	cmp    $0x9,%al
   n = 0;
- 30f:	b8 00 00 00 00       	mov    $0x0,%eax
+ 31f:	b8 00 00 00 00       	mov    $0x0,%eax
   while('0' <= *s && *s <= '9')
- 314:	77 17                	ja     32d <atoi+0x2d>
- 316:	66 90                	xchg   %ax,%ax
+ 324:	77 17                	ja     33d <atoi+0x2d>
+ 326:	66 90                	xchg   %ax,%ax
     n = n*10 + *s++ - '0';
- 318:	83 c1 01             	add    $0x1,%ecx
- 31b:	8d 04 80             	lea    (%eax,%eax,4),%eax
- 31e:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+ 328:	83 c1 01             	add    $0x1,%ecx
+ 32b:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 32e:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
   while('0' <= *s && *s <= '9')
- 322:	0f be 11             	movsbl (%ecx),%edx
- 325:	8d 5a d0             	lea    -0x30(%edx),%ebx
- 328:	80 fb 09             	cmp    $0x9,%bl
- 32b:	76 eb                	jbe    318 <atoi+0x18>
+ 332:	0f be 11             	movsbl (%ecx),%edx
+ 335:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 338:	80 fb 09             	cmp    $0x9,%bl
+ 33b:	76 eb                	jbe    328 <atoi+0x18>
   return n;
 }
- 32d:	5b                   	pop    %ebx
- 32e:	5d                   	pop    %ebp
- 32f:	c3                   	ret    
+ 33d:	5b                   	pop    %ebx
+ 33e:	5d                   	pop    %ebp
+ 33f:	c3                   	ret    
 
-00000330 <memmove>:
+00000340 <memmove>:
 
 void*
 memmove(void *vdst, const void *vsrc, int n)
 {
- 330:	55                   	push   %ebp
+ 340:	55                   	push   %ebp
   char *dst;
   const char *src;
 
   dst = vdst;
   src = vsrc;
   while(n-- > 0)
- 331:	31 d2                	xor    %edx,%edx
+ 341:	31 d2                	xor    %edx,%edx
 {
- 333:	89 e5                	mov    %esp,%ebp
- 335:	56                   	push   %esi
- 336:	8b 45 08             	mov    0x8(%ebp),%eax
- 339:	53                   	push   %ebx
- 33a:	8b 5d 10             	mov    0x10(%ebp),%ebx
- 33d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 343:	89 e5                	mov    %esp,%ebp
+ 345:	56                   	push   %esi
+ 346:	8b 45 08             	mov    0x8(%ebp),%eax
+ 349:	53                   	push   %ebx
+ 34a:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 34d:	8b 75 0c             	mov    0xc(%ebp),%esi
   while(n-- > 0)
- 340:	85 db                	test   %ebx,%ebx
- 342:	7e 12                	jle    356 <memmove+0x26>
- 344:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 350:	85 db                	test   %ebx,%ebx
+ 352:	7e 12                	jle    366 <memmove+0x26>
+ 354:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     *dst++ = *src++;
- 348:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
- 34c:	88 0c 10             	mov    %cl,(%eax,%edx,1)
- 34f:	83 c2 01             	add    $0x1,%edx
+ 358:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
+ 35c:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+ 35f:	83 c2 01             	add    $0x1,%edx
   while(n-- > 0)
- 352:	39 da                	cmp    %ebx,%edx
- 354:	75 f2                	jne    348 <memmove+0x18>
+ 362:	39 da                	cmp    %ebx,%edx
+ 364:	75 f2                	jne    358 <memmove+0x18>
   return vdst;
 }
- 356:	5b                   	pop    %ebx
- 357:	5e                   	pop    %esi
- 358:	5d                   	pop    %ebp
- 359:	c3                   	ret    
-
-0000035a <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
- 35a:	b8 01 00 00 00       	mov    $0x1,%eax
- 35f:	cd 40                	int    $0x40
- 361:	c3                   	ret    
-
-00000362 <exit>:
-SYSCALL(exit)
- 362:	b8 02 00 00 00       	mov    $0x2,%eax
- 367:	cd 40                	int    $0x40
+ 366:	5b                   	pop    %ebx
+ 367:	5e                   	pop    %esi
+ 368:	5d                   	pop    %ebp
  369:	c3                   	ret    
 
-0000036a <wait>:
-SYSCALL(wait)
- 36a:	b8 03 00 00 00       	mov    $0x3,%eax
+0000036a <fork>:
+ 36a:	b8 01 00 00 00       	mov    $0x1,%eax
  36f:	cd 40                	int    $0x40
  371:	c3                   	ret    
 
-00000372 <pipe>:
-SYSCALL(pipe)
- 372:	b8 04 00 00 00       	mov    $0x4,%eax
+00000372 <exit>:
+ 372:	b8 02 00 00 00       	mov    $0x2,%eax
  377:	cd 40                	int    $0x40
  379:	c3                   	ret    
 
-0000037a <read>:
-SYSCALL(read)
- 37a:	b8 05 00 00 00       	mov    $0x5,%eax
+0000037a <wait>:
+ 37a:	b8 03 00 00 00       	mov    $0x3,%eax
  37f:	cd 40                	int    $0x40
  381:	c3                   	ret    
 
-00000382 <write>:
-SYSCALL(write)
- 382:	b8 10 00 00 00       	mov    $0x10,%eax
+00000382 <pipe>:
+ 382:	b8 04 00 00 00       	mov    $0x4,%eax
  387:	cd 40                	int    $0x40
  389:	c3                   	ret    
 
-0000038a <close>:
-SYSCALL(close)
- 38a:	b8 15 00 00 00       	mov    $0x15,%eax
+0000038a <read>:
+ 38a:	b8 05 00 00 00       	mov    $0x5,%eax
  38f:	cd 40                	int    $0x40
  391:	c3                   	ret    
 
-00000392 <kill>:
-SYSCALL(kill)
- 392:	b8 06 00 00 00       	mov    $0x6,%eax
+00000392 <write>:
+ 392:	b8 10 00 00 00       	mov    $0x10,%eax
  397:	cd 40                	int    $0x40
  399:	c3                   	ret    
 
-0000039a <exec>:
-SYSCALL(exec)
- 39a:	b8 07 00 00 00       	mov    $0x7,%eax
+0000039a <close>:
+ 39a:	b8 15 00 00 00       	mov    $0x15,%eax
  39f:	cd 40                	int    $0x40
  3a1:	c3                   	ret    
 
-000003a2 <open>:
-SYSCALL(open)
- 3a2:	b8 0f 00 00 00       	mov    $0xf,%eax
+000003a2 <kill>:
+ 3a2:	b8 06 00 00 00       	mov    $0x6,%eax
  3a7:	cd 40                	int    $0x40
  3a9:	c3                   	ret    
 
-000003aa <mknod>:
-SYSCALL(mknod)
- 3aa:	b8 11 00 00 00       	mov    $0x11,%eax
+000003aa <exec>:
+ 3aa:	b8 07 00 00 00       	mov    $0x7,%eax
  3af:	cd 40                	int    $0x40
  3b1:	c3                   	ret    
 
-000003b2 <unlink>:
-SYSCALL(unlink)
- 3b2:	b8 12 00 00 00       	mov    $0x12,%eax
+000003b2 <open>:
+ 3b2:	b8 0f 00 00 00       	mov    $0xf,%eax
  3b7:	cd 40                	int    $0x40
  3b9:	c3                   	ret    
 
-000003ba <fstat>:
-SYSCALL(fstat)
- 3ba:	b8 08 00 00 00       	mov    $0x8,%eax
+000003ba <mknod>:
+ 3ba:	b8 11 00 00 00       	mov    $0x11,%eax
  3bf:	cd 40                	int    $0x40
  3c1:	c3                   	ret    
 
-000003c2 <link>:
-SYSCALL(link)
- 3c2:	b8 13 00 00 00       	mov    $0x13,%eax
+000003c2 <unlink>:
+ 3c2:	b8 12 00 00 00       	mov    $0x12,%eax
  3c7:	cd 40                	int    $0x40
  3c9:	c3                   	ret    
 
-000003ca <mkdir>:
-SYSCALL(mkdir)
- 3ca:	b8 14 00 00 00       	mov    $0x14,%eax
+000003ca <fstat>:
+ 3ca:	b8 08 00 00 00       	mov    $0x8,%eax
  3cf:	cd 40                	int    $0x40
  3d1:	c3                   	ret    
 
-000003d2 <chdir>:
-SYSCALL(chdir)
- 3d2:	b8 09 00 00 00       	mov    $0x9,%eax
+000003d2 <link>:
+ 3d2:	b8 13 00 00 00       	mov    $0x13,%eax
  3d7:	cd 40                	int    $0x40
  3d9:	c3                   	ret    
 
-000003da <dup>:
-SYSCALL(dup)
- 3da:	b8 0a 00 00 00       	mov    $0xa,%eax
+000003da <mkdir>:
+ 3da:	b8 14 00 00 00       	mov    $0x14,%eax
  3df:	cd 40                	int    $0x40
  3e1:	c3                   	ret    
 
-000003e2 <getpid>:
-SYSCALL(getpid)
- 3e2:	b8 0b 00 00 00       	mov    $0xb,%eax
+000003e2 <chdir>:
+ 3e2:	b8 09 00 00 00       	mov    $0x9,%eax
  3e7:	cd 40                	int    $0x40
  3e9:	c3                   	ret    
 
-000003ea <sbrk>:
-SYSCALL(sbrk)
- 3ea:	b8 0c 00 00 00       	mov    $0xc,%eax
+000003ea <dup>:
+ 3ea:	b8 0a 00 00 00       	mov    $0xa,%eax
  3ef:	cd 40                	int    $0x40
  3f1:	c3                   	ret    
 
-000003f2 <sleep>:
-SYSCALL(sleep)
- 3f2:	b8 0d 00 00 00       	mov    $0xd,%eax
+000003f2 <getpid>:
+ 3f2:	b8 0b 00 00 00       	mov    $0xb,%eax
  3f7:	cd 40                	int    $0x40
  3f9:	c3                   	ret    
 
-000003fa <uptime>:
-SYSCALL(uptime)
- 3fa:	b8 0e 00 00 00       	mov    $0xe,%eax
+000003fa <sbrk>:
+ 3fa:	b8 0c 00 00 00       	mov    $0xc,%eax
  3ff:	cd 40                	int    $0x40
  401:	c3                   	ret    
+
+00000402 <sleep>:
+ 402:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 407:	cd 40                	int    $0x40
+ 409:	c3                   	ret    
+
+0000040a <uptime>:
+ 40a:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 40f:	cd 40                	int    $0x40
+ 411:	c3                   	ret    
diff --git a/forktest.c b/forktest.c
index 227810c..a9d0f38 100644
--- a/forktest.c
+++ b/forktest.c
@@ -5,42 +5,45 @@
 #include "stat.h"
 #include "user.h"
 
-#define N  1000
+#define N 1000
 
-void
-printf(int fd, const char *s, ...)
+void printf(int fd, const char *s, ...)
 {
   write(fd, s, strlen(s));
 }
 
-void
-forktest(void)
+void forktest(void)
 {
   int n, pid;
 
   printf(1, "fork test\n");
 
-  for(n=0; n<N; n++){
+  for (n = 0; n < N; n++)
+  {
     pid = fork();
-    if(pid < 0)
+    if (pid < 0)
       break;
-    if(pid == 0)
+    if (pid == 0)
       exit(0);
   }
 
-  if(n == N){
+  if (n == N)
+  {
     printf(1, "fork claimed to work N times!\n", N);
     exit(0);
   }
 
-  for(; n > 0; n--){
-    if(wait() < 0){
+  for (; n > 0; n--)
+  {
+    if (wait(0) < 0)
+    {
       printf(1, "wait stopped early\n");
       exit(0);
     }
   }
 
-  if(wait() != -1){
+  if (wait(0) != -1)
+  {
     printf(1, "wait got too many\n");
     exit(0);
   }
@@ -48,8 +51,7 @@ forktest(void)
   printf(1, "fork test OK\n");
 }
 
-int
-main(void)
+int main(void)
 {
   forktest();
   exit(0);
diff --git a/forktest.o b/forktest.o
index e27294a..9cc01e4 100644
Binary files a/forktest.o and b/forktest.o differ
diff --git a/fs.img b/fs.img
index 316f0e2..ff887b9 100644
Binary files a/fs.img and b/fs.img differ
diff --git a/fs.o b/fs.o
index bcec088..80c8b12 100644
Binary files a/fs.o and b/fs.o differ
diff --git a/grep.asm b/grep.asm
index cf12e4b..00a27e1 100644
--- a/grep.asm
+++ b/grep.asm
@@ -772,132 +772,106 @@ memmove(void *vdst, const void *vsrc, int n)
  549:	c3                   	ret    
 
 0000054a <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
  54a:	b8 01 00 00 00       	mov    $0x1,%eax
  54f:	cd 40                	int    $0x40
  551:	c3                   	ret    
 
 00000552 <exit>:
-SYSCALL(exit)
  552:	b8 02 00 00 00       	mov    $0x2,%eax
  557:	cd 40                	int    $0x40
  559:	c3                   	ret    
 
 0000055a <wait>:
-SYSCALL(wait)
  55a:	b8 03 00 00 00       	mov    $0x3,%eax
  55f:	cd 40                	int    $0x40
  561:	c3                   	ret    
 
 00000562 <pipe>:
-SYSCALL(pipe)
  562:	b8 04 00 00 00       	mov    $0x4,%eax
  567:	cd 40                	int    $0x40
  569:	c3                   	ret    
 
 0000056a <read>:
-SYSCALL(read)
  56a:	b8 05 00 00 00       	mov    $0x5,%eax
  56f:	cd 40                	int    $0x40
  571:	c3                   	ret    
 
 00000572 <write>:
-SYSCALL(write)
  572:	b8 10 00 00 00       	mov    $0x10,%eax
  577:	cd 40                	int    $0x40
  579:	c3                   	ret    
 
 0000057a <close>:
-SYSCALL(close)
  57a:	b8 15 00 00 00       	mov    $0x15,%eax
  57f:	cd 40                	int    $0x40
  581:	c3                   	ret    
 
 00000582 <kill>:
-SYSCALL(kill)
  582:	b8 06 00 00 00       	mov    $0x6,%eax
  587:	cd 40                	int    $0x40
  589:	c3                   	ret    
 
 0000058a <exec>:
-SYSCALL(exec)
  58a:	b8 07 00 00 00       	mov    $0x7,%eax
  58f:	cd 40                	int    $0x40
  591:	c3                   	ret    
 
 00000592 <open>:
-SYSCALL(open)
  592:	b8 0f 00 00 00       	mov    $0xf,%eax
  597:	cd 40                	int    $0x40
  599:	c3                   	ret    
 
 0000059a <mknod>:
-SYSCALL(mknod)
  59a:	b8 11 00 00 00       	mov    $0x11,%eax
  59f:	cd 40                	int    $0x40
  5a1:	c3                   	ret    
 
 000005a2 <unlink>:
-SYSCALL(unlink)
  5a2:	b8 12 00 00 00       	mov    $0x12,%eax
  5a7:	cd 40                	int    $0x40
  5a9:	c3                   	ret    
 
 000005aa <fstat>:
-SYSCALL(fstat)
  5aa:	b8 08 00 00 00       	mov    $0x8,%eax
  5af:	cd 40                	int    $0x40
  5b1:	c3                   	ret    
 
 000005b2 <link>:
-SYSCALL(link)
  5b2:	b8 13 00 00 00       	mov    $0x13,%eax
  5b7:	cd 40                	int    $0x40
  5b9:	c3                   	ret    
 
 000005ba <mkdir>:
-SYSCALL(mkdir)
  5ba:	b8 14 00 00 00       	mov    $0x14,%eax
  5bf:	cd 40                	int    $0x40
  5c1:	c3                   	ret    
 
 000005c2 <chdir>:
-SYSCALL(chdir)
  5c2:	b8 09 00 00 00       	mov    $0x9,%eax
  5c7:	cd 40                	int    $0x40
  5c9:	c3                   	ret    
 
 000005ca <dup>:
-SYSCALL(dup)
  5ca:	b8 0a 00 00 00       	mov    $0xa,%eax
  5cf:	cd 40                	int    $0x40
  5d1:	c3                   	ret    
 
 000005d2 <getpid>:
-SYSCALL(getpid)
  5d2:	b8 0b 00 00 00       	mov    $0xb,%eax
  5d7:	cd 40                	int    $0x40
  5d9:	c3                   	ret    
 
 000005da <sbrk>:
-SYSCALL(sbrk)
  5da:	b8 0c 00 00 00       	mov    $0xc,%eax
  5df:	cd 40                	int    $0x40
  5e1:	c3                   	ret    
 
 000005e2 <sleep>:
-SYSCALL(sleep)
  5e2:	b8 0d 00 00 00       	mov    $0xd,%eax
  5e7:	cd 40                	int    $0x40
  5e9:	c3                   	ret    
 
 000005ea <uptime>:
-SYSCALL(uptime)
  5ea:	b8 0e 00 00 00       	mov    $0xe,%eax
  5ef:	cd 40                	int    $0x40
  5f1:	c3                   	ret    
diff --git a/grep.o b/grep.o
index 62fc26e..c6dcbc6 100644
Binary files a/grep.o and b/grep.o differ
diff --git a/hello.asm b/hello.asm
index cc8a0e1..0aed89c 100644
--- a/hello.asm
+++ b/hello.asm
@@ -8,1112 +8,1104 @@ Disassembly of section .text:
 #include "types.h"
 #include "user.h"
 
-int main( int argc, char **argv) {
+int main(int argc, char **argv)
+{
    0:	55                   	push   %ebp
    1:	89 e5                	mov    %esp,%ebp
    3:	83 e4 f0             	and    $0xfffffff0,%esp
-   6:	83 ec 10             	sub    $0x10,%esp
-
-	printf(1, "Hello World!\n");
-   9:	c7 44 24 04 06 07 00 	movl   $0x706,0x4(%esp)
+   6:	83 ec 20             	sub    $0x20,%esp
+	int exitStatus = 10000000;
+	printf(1, "Waiting...\n");
+   9:	c7 44 24 04 36 07 00 	movl   $0x736,0x4(%esp)
   10:	00 
   11:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-  18:	e8 83 03 00 00       	call   3a0 <printf>
+	int exitStatus = 10000000;
+  18:	c7 44 24 1c 80 96 98 	movl   $0x989680,0x1c(%esp)
+  1f:	00 
+	printf(1, "Waiting...\n");
+  20:	e8 ab 03 00 00       	call   3d0 <printf>
+	wait(&exitStatus);
+  25:	8d 44 24 1c          	lea    0x1c(%esp),%eax
+  29:	89 04 24             	mov    %eax,(%esp)
+  2c:	e8 59 02 00 00       	call   28a <wait>
+	printf(1, "Hello World!\n");
+  31:	c7 44 24 04 42 07 00 	movl   $0x742,0x4(%esp)
+  38:	00 
+  39:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+  40:	e8 8b 03 00 00       	call   3d0 <printf>
 	exit(0);
-  1d:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-  24:	e8 29 02 00 00       	call   252 <exit>
-  29:	66 90                	xchg   %ax,%ax
-  2b:	66 90                	xchg   %ax,%ax
-  2d:	66 90                	xchg   %ax,%ax
-  2f:	90                   	nop
-
-00000030 <strcpy>:
+  45:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  4c:	e8 31 02 00 00       	call   282 <exit>
+  51:	66 90                	xchg   %ax,%ax
+  53:	66 90                	xchg   %ax,%ax
+  55:	66 90                	xchg   %ax,%ax
+  57:	66 90                	xchg   %ax,%ax
+  59:	66 90                	xchg   %ax,%ax
+  5b:	66 90                	xchg   %ax,%ax
+  5d:	66 90                	xchg   %ax,%ax
+  5f:	90                   	nop
+
+00000060 <strcpy>:
 #include "user.h"
 #include "x86.h"
 
 char*
 strcpy(char *s, const char *t)
 {
-  30:	55                   	push   %ebp
-  31:	89 e5                	mov    %esp,%ebp
-  33:	8b 45 08             	mov    0x8(%ebp),%eax
-  36:	8b 4d 0c             	mov    0xc(%ebp),%ecx
-  39:	53                   	push   %ebx
+  60:	55                   	push   %ebp
+  61:	89 e5                	mov    %esp,%ebp
+  63:	8b 45 08             	mov    0x8(%ebp),%eax
+  66:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  69:	53                   	push   %ebx
   char *os;
 
   os = s;
   while((*s++ = *t++) != 0)
-  3a:	89 c2                	mov    %eax,%edx
-  3c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-  40:	83 c1 01             	add    $0x1,%ecx
-  43:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
-  47:	83 c2 01             	add    $0x1,%edx
-  4a:	84 db                	test   %bl,%bl
-  4c:	88 5a ff             	mov    %bl,-0x1(%edx)
-  4f:	75 ef                	jne    40 <strcpy+0x10>
+  6a:	89 c2                	mov    %eax,%edx
+  6c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  70:	83 c1 01             	add    $0x1,%ecx
+  73:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
+  77:	83 c2 01             	add    $0x1,%edx
+  7a:	84 db                	test   %bl,%bl
+  7c:	88 5a ff             	mov    %bl,-0x1(%edx)
+  7f:	75 ef                	jne    70 <strcpy+0x10>
     ;
   return os;
 }
-  51:	5b                   	pop    %ebx
-  52:	5d                   	pop    %ebp
-  53:	c3                   	ret    
-  54:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-  5a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+  81:	5b                   	pop    %ebx
+  82:	5d                   	pop    %ebp
+  83:	c3                   	ret    
+  84:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  8a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
 
-00000060 <strcmp>:
+00000090 <strcmp>:
 
 int
 strcmp(const char *p, const char *q)
 {
-  60:	55                   	push   %ebp
-  61:	89 e5                	mov    %esp,%ebp
-  63:	8b 55 08             	mov    0x8(%ebp),%edx
-  66:	53                   	push   %ebx
-  67:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  90:	55                   	push   %ebp
+  91:	89 e5                	mov    %esp,%ebp
+  93:	8b 55 08             	mov    0x8(%ebp),%edx
+  96:	53                   	push   %ebx
+  97:	8b 4d 0c             	mov    0xc(%ebp),%ecx
   while(*p && *p == *q)
-  6a:	0f b6 02             	movzbl (%edx),%eax
-  6d:	84 c0                	test   %al,%al
-  6f:	74 2d                	je     9e <strcmp+0x3e>
-  71:	0f b6 19             	movzbl (%ecx),%ebx
-  74:	38 d8                	cmp    %bl,%al
-  76:	74 0e                	je     86 <strcmp+0x26>
-  78:	eb 2b                	jmp    a5 <strcmp+0x45>
-  7a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-  80:	38 c8                	cmp    %cl,%al
-  82:	75 15                	jne    99 <strcmp+0x39>
+  9a:	0f b6 02             	movzbl (%edx),%eax
+  9d:	84 c0                	test   %al,%al
+  9f:	74 2d                	je     ce <strcmp+0x3e>
+  a1:	0f b6 19             	movzbl (%ecx),%ebx
+  a4:	38 d8                	cmp    %bl,%al
+  a6:	74 0e                	je     b6 <strcmp+0x26>
+  a8:	eb 2b                	jmp    d5 <strcmp+0x45>
+  aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  b0:	38 c8                	cmp    %cl,%al
+  b2:	75 15                	jne    c9 <strcmp+0x39>
     p++, q++;
-  84:	89 d9                	mov    %ebx,%ecx
-  86:	83 c2 01             	add    $0x1,%edx
+  b4:	89 d9                	mov    %ebx,%ecx
+  b6:	83 c2 01             	add    $0x1,%edx
   while(*p && *p == *q)
-  89:	0f b6 02             	movzbl (%edx),%eax
+  b9:	0f b6 02             	movzbl (%edx),%eax
     p++, q++;
-  8c:	8d 59 01             	lea    0x1(%ecx),%ebx
+  bc:	8d 59 01             	lea    0x1(%ecx),%ebx
   while(*p && *p == *q)
-  8f:	0f b6 49 01          	movzbl 0x1(%ecx),%ecx
-  93:	84 c0                	test   %al,%al
-  95:	75 e9                	jne    80 <strcmp+0x20>
-  97:	31 c0                	xor    %eax,%eax
+  bf:	0f b6 49 01          	movzbl 0x1(%ecx),%ecx
+  c3:	84 c0                	test   %al,%al
+  c5:	75 e9                	jne    b0 <strcmp+0x20>
+  c7:	31 c0                	xor    %eax,%eax
   return (uchar)*p - (uchar)*q;
-  99:	29 c8                	sub    %ecx,%eax
+  c9:	29 c8                	sub    %ecx,%eax
 }
-  9b:	5b                   	pop    %ebx
-  9c:	5d                   	pop    %ebp
-  9d:	c3                   	ret    
-  9e:	0f b6 09             	movzbl (%ecx),%ecx
+  cb:	5b                   	pop    %ebx
+  cc:	5d                   	pop    %ebp
+  cd:	c3                   	ret    
+  ce:	0f b6 09             	movzbl (%ecx),%ecx
   while(*p && *p == *q)
-  a1:	31 c0                	xor    %eax,%eax
-  a3:	eb f4                	jmp    99 <strcmp+0x39>
-  a5:	0f b6 cb             	movzbl %bl,%ecx
-  a8:	eb ef                	jmp    99 <strcmp+0x39>
-  aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  d1:	31 c0                	xor    %eax,%eax
+  d3:	eb f4                	jmp    c9 <strcmp+0x39>
+  d5:	0f b6 cb             	movzbl %bl,%ecx
+  d8:	eb ef                	jmp    c9 <strcmp+0x39>
+  da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-000000b0 <strlen>:
+000000e0 <strlen>:
 
 uint
 strlen(const char *s)
 {
-  b0:	55                   	push   %ebp
-  b1:	89 e5                	mov    %esp,%ebp
-  b3:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  e0:	55                   	push   %ebp
+  e1:	89 e5                	mov    %esp,%ebp
+  e3:	8b 4d 08             	mov    0x8(%ebp),%ecx
   int n;
 
   for(n = 0; s[n]; n++)
-  b6:	80 39 00             	cmpb   $0x0,(%ecx)
-  b9:	74 12                	je     cd <strlen+0x1d>
-  bb:	31 d2                	xor    %edx,%edx
-  bd:	8d 76 00             	lea    0x0(%esi),%esi
-  c0:	83 c2 01             	add    $0x1,%edx
-  c3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
-  c7:	89 d0                	mov    %edx,%eax
-  c9:	75 f5                	jne    c0 <strlen+0x10>
+  e6:	80 39 00             	cmpb   $0x0,(%ecx)
+  e9:	74 12                	je     fd <strlen+0x1d>
+  eb:	31 d2                	xor    %edx,%edx
+  ed:	8d 76 00             	lea    0x0(%esi),%esi
+  f0:	83 c2 01             	add    $0x1,%edx
+  f3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+  f7:	89 d0                	mov    %edx,%eax
+  f9:	75 f5                	jne    f0 <strlen+0x10>
     ;
   return n;
 }
-  cb:	5d                   	pop    %ebp
-  cc:	c3                   	ret    
+  fb:	5d                   	pop    %ebp
+  fc:	c3                   	ret    
   for(n = 0; s[n]; n++)
-  cd:	31 c0                	xor    %eax,%eax
+  fd:	31 c0                	xor    %eax,%eax
 }
-  cf:	5d                   	pop    %ebp
-  d0:	c3                   	ret    
-  d1:	eb 0d                	jmp    e0 <memset>
-  d3:	90                   	nop
-  d4:	90                   	nop
-  d5:	90                   	nop
-  d6:	90                   	nop
-  d7:	90                   	nop
-  d8:	90                   	nop
-  d9:	90                   	nop
-  da:	90                   	nop
-  db:	90                   	nop
-  dc:	90                   	nop
-  dd:	90                   	nop
-  de:	90                   	nop
-  df:	90                   	nop
-
-000000e0 <memset>:
+  ff:	5d                   	pop    %ebp
+ 100:	c3                   	ret    
+ 101:	eb 0d                	jmp    110 <memset>
+ 103:	90                   	nop
+ 104:	90                   	nop
+ 105:	90                   	nop
+ 106:	90                   	nop
+ 107:	90                   	nop
+ 108:	90                   	nop
+ 109:	90                   	nop
+ 10a:	90                   	nop
+ 10b:	90                   	nop
+ 10c:	90                   	nop
+ 10d:	90                   	nop
+ 10e:	90                   	nop
+ 10f:	90                   	nop
+
+00000110 <memset>:
 
 void*
 memset(void *dst, int c, uint n)
 {
-  e0:	55                   	push   %ebp
-  e1:	89 e5                	mov    %esp,%ebp
-  e3:	8b 55 08             	mov    0x8(%ebp),%edx
-  e6:	57                   	push   %edi
+ 110:	55                   	push   %ebp
+ 111:	89 e5                	mov    %esp,%ebp
+ 113:	8b 55 08             	mov    0x8(%ebp),%edx
+ 116:	57                   	push   %edi
 }
 
 static inline void
 stosb(void *addr, int data, int cnt)
 {
   asm volatile("cld; rep stosb" :
-  e7:	8b 4d 10             	mov    0x10(%ebp),%ecx
-  ea:	8b 45 0c             	mov    0xc(%ebp),%eax
-  ed:	89 d7                	mov    %edx,%edi
-  ef:	fc                   	cld    
-  f0:	f3 aa                	rep stos %al,%es:(%edi)
+ 117:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 11a:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 11d:	89 d7                	mov    %edx,%edi
+ 11f:	fc                   	cld    
+ 120:	f3 aa                	rep stos %al,%es:(%edi)
   stosb(dst, c, n);
   return dst;
 }
-  f2:	89 d0                	mov    %edx,%eax
-  f4:	5f                   	pop    %edi
-  f5:	5d                   	pop    %ebp
-  f6:	c3                   	ret    
-  f7:	89 f6                	mov    %esi,%esi
-  f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+ 122:	89 d0                	mov    %edx,%eax
+ 124:	5f                   	pop    %edi
+ 125:	5d                   	pop    %ebp
+ 126:	c3                   	ret    
+ 127:	89 f6                	mov    %esi,%esi
+ 129:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-00000100 <strchr>:
+00000130 <strchr>:
 
 char*
 strchr(const char *s, char c)
 {
- 100:	55                   	push   %ebp
- 101:	89 e5                	mov    %esp,%ebp
- 103:	8b 45 08             	mov    0x8(%ebp),%eax
- 106:	53                   	push   %ebx
- 107:	8b 55 0c             	mov    0xc(%ebp),%edx
+ 130:	55                   	push   %ebp
+ 131:	89 e5                	mov    %esp,%ebp
+ 133:	8b 45 08             	mov    0x8(%ebp),%eax
+ 136:	53                   	push   %ebx
+ 137:	8b 55 0c             	mov    0xc(%ebp),%edx
   for(; *s; s++)
- 10a:	0f b6 18             	movzbl (%eax),%ebx
- 10d:	84 db                	test   %bl,%bl
- 10f:	74 1d                	je     12e <strchr+0x2e>
+ 13a:	0f b6 18             	movzbl (%eax),%ebx
+ 13d:	84 db                	test   %bl,%bl
+ 13f:	74 1d                	je     15e <strchr+0x2e>
     if(*s == c)
- 111:	38 d3                	cmp    %dl,%bl
- 113:	89 d1                	mov    %edx,%ecx
- 115:	75 0d                	jne    124 <strchr+0x24>
- 117:	eb 17                	jmp    130 <strchr+0x30>
- 119:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 120:	38 ca                	cmp    %cl,%dl
- 122:	74 0c                	je     130 <strchr+0x30>
+ 141:	38 d3                	cmp    %dl,%bl
+ 143:	89 d1                	mov    %edx,%ecx
+ 145:	75 0d                	jne    154 <strchr+0x24>
+ 147:	eb 17                	jmp    160 <strchr+0x30>
+ 149:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 150:	38 ca                	cmp    %cl,%dl
+ 152:	74 0c                	je     160 <strchr+0x30>
   for(; *s; s++)
- 124:	83 c0 01             	add    $0x1,%eax
- 127:	0f b6 10             	movzbl (%eax),%edx
- 12a:	84 d2                	test   %dl,%dl
- 12c:	75 f2                	jne    120 <strchr+0x20>
+ 154:	83 c0 01             	add    $0x1,%eax
+ 157:	0f b6 10             	movzbl (%eax),%edx
+ 15a:	84 d2                	test   %dl,%dl
+ 15c:	75 f2                	jne    150 <strchr+0x20>
       return (char*)s;
   return 0;
- 12e:	31 c0                	xor    %eax,%eax
+ 15e:	31 c0                	xor    %eax,%eax
 }
- 130:	5b                   	pop    %ebx
- 131:	5d                   	pop    %ebp
- 132:	c3                   	ret    
- 133:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
- 139:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+ 160:	5b                   	pop    %ebx
+ 161:	5d                   	pop    %ebp
+ 162:	c3                   	ret    
+ 163:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 169:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-00000140 <gets>:
+00000170 <gets>:
 
 char*
 gets(char *buf, int max)
 {
- 140:	55                   	push   %ebp
- 141:	89 e5                	mov    %esp,%ebp
- 143:	57                   	push   %edi
- 144:	56                   	push   %esi
+ 170:	55                   	push   %ebp
+ 171:	89 e5                	mov    %esp,%ebp
+ 173:	57                   	push   %edi
+ 174:	56                   	push   %esi
   int i, cc;
   char c;
 
   for(i=0; i+1 < max; ){
- 145:	31 f6                	xor    %esi,%esi
+ 175:	31 f6                	xor    %esi,%esi
 {
- 147:	53                   	push   %ebx
- 148:	83 ec 2c             	sub    $0x2c,%esp
+ 177:	53                   	push   %ebx
+ 178:	83 ec 2c             	sub    $0x2c,%esp
     cc = read(0, &c, 1);
- 14b:	8d 7d e7             	lea    -0x19(%ebp),%edi
+ 17b:	8d 7d e7             	lea    -0x19(%ebp),%edi
   for(i=0; i+1 < max; ){
- 14e:	eb 31                	jmp    181 <gets+0x41>
+ 17e:	eb 31                	jmp    1b1 <gets+0x41>
     cc = read(0, &c, 1);
- 150:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 157:	00 
- 158:	89 7c 24 04          	mov    %edi,0x4(%esp)
- 15c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
- 163:	e8 02 01 00 00       	call   26a <read>
+ 180:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 187:	00 
+ 188:	89 7c 24 04          	mov    %edi,0x4(%esp)
+ 18c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+ 193:	e8 02 01 00 00       	call   29a <read>
     if(cc < 1)
- 168:	85 c0                	test   %eax,%eax
- 16a:	7e 1d                	jle    189 <gets+0x49>
+ 198:	85 c0                	test   %eax,%eax
+ 19a:	7e 1d                	jle    1b9 <gets+0x49>
       break;
     buf[i++] = c;
- 16c:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 19c:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
   for(i=0; i+1 < max; ){
- 170:	89 de                	mov    %ebx,%esi
+ 1a0:	89 de                	mov    %ebx,%esi
     buf[i++] = c;
- 172:	8b 55 08             	mov    0x8(%ebp),%edx
+ 1a2:	8b 55 08             	mov    0x8(%ebp),%edx
     if(c == '\n' || c == '\r')
- 175:	3c 0d                	cmp    $0xd,%al
+ 1a5:	3c 0d                	cmp    $0xd,%al
     buf[i++] = c;
- 177:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
+ 1a7:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
     if(c == '\n' || c == '\r')
- 17b:	74 0c                	je     189 <gets+0x49>
- 17d:	3c 0a                	cmp    $0xa,%al
- 17f:	74 08                	je     189 <gets+0x49>
+ 1ab:	74 0c                	je     1b9 <gets+0x49>
+ 1ad:	3c 0a                	cmp    $0xa,%al
+ 1af:	74 08                	je     1b9 <gets+0x49>
   for(i=0; i+1 < max; ){
- 181:	8d 5e 01             	lea    0x1(%esi),%ebx
- 184:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
- 187:	7c c7                	jl     150 <gets+0x10>
+ 1b1:	8d 5e 01             	lea    0x1(%esi),%ebx
+ 1b4:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 1b7:	7c c7                	jl     180 <gets+0x10>
       break;
   }
   buf[i] = '\0';
- 189:	8b 45 08             	mov    0x8(%ebp),%eax
- 18c:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+ 1b9:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1bc:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
   return buf;
 }
- 190:	83 c4 2c             	add    $0x2c,%esp
- 193:	5b                   	pop    %ebx
- 194:	5e                   	pop    %esi
- 195:	5f                   	pop    %edi
- 196:	5d                   	pop    %ebp
- 197:	c3                   	ret    
- 198:	90                   	nop
- 199:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1c0:	83 c4 2c             	add    $0x2c,%esp
+ 1c3:	5b                   	pop    %ebx
+ 1c4:	5e                   	pop    %esi
+ 1c5:	5f                   	pop    %edi
+ 1c6:	5d                   	pop    %ebp
+ 1c7:	c3                   	ret    
+ 1c8:	90                   	nop
+ 1c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-000001a0 <stat>:
+000001d0 <stat>:
 
 int
 stat(const char *n, struct stat *st)
 {
- 1a0:	55                   	push   %ebp
- 1a1:	89 e5                	mov    %esp,%ebp
- 1a3:	56                   	push   %esi
- 1a4:	53                   	push   %ebx
- 1a5:	83 ec 10             	sub    $0x10,%esp
+ 1d0:	55                   	push   %ebp
+ 1d1:	89 e5                	mov    %esp,%ebp
+ 1d3:	56                   	push   %esi
+ 1d4:	53                   	push   %ebx
+ 1d5:	83 ec 10             	sub    $0x10,%esp
   int fd;
   int r;
 
   fd = open(n, O_RDONLY);
- 1a8:	8b 45 08             	mov    0x8(%ebp),%eax
- 1ab:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
- 1b2:	00 
- 1b3:	89 04 24             	mov    %eax,(%esp)
- 1b6:	e8 d7 00 00 00       	call   292 <open>
+ 1d8:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1db:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+ 1e2:	00 
+ 1e3:	89 04 24             	mov    %eax,(%esp)
+ 1e6:	e8 d7 00 00 00       	call   2c2 <open>
   if(fd < 0)
- 1bb:	85 c0                	test   %eax,%eax
+ 1eb:	85 c0                	test   %eax,%eax
   fd = open(n, O_RDONLY);
- 1bd:	89 c3                	mov    %eax,%ebx
+ 1ed:	89 c3                	mov    %eax,%ebx
   if(fd < 0)
- 1bf:	78 27                	js     1e8 <stat+0x48>
+ 1ef:	78 27                	js     218 <stat+0x48>
     return -1;
   r = fstat(fd, st);
- 1c1:	8b 45 0c             	mov    0xc(%ebp),%eax
- 1c4:	89 1c 24             	mov    %ebx,(%esp)
- 1c7:	89 44 24 04          	mov    %eax,0x4(%esp)
- 1cb:	e8 da 00 00 00       	call   2aa <fstat>
+ 1f1:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 1f4:	89 1c 24             	mov    %ebx,(%esp)
+ 1f7:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 1fb:	e8 da 00 00 00       	call   2da <fstat>
   close(fd);
- 1d0:	89 1c 24             	mov    %ebx,(%esp)
+ 200:	89 1c 24             	mov    %ebx,(%esp)
   r = fstat(fd, st);
- 1d3:	89 c6                	mov    %eax,%esi
+ 203:	89 c6                	mov    %eax,%esi
   close(fd);
- 1d5:	e8 a0 00 00 00       	call   27a <close>
+ 205:	e8 a0 00 00 00       	call   2aa <close>
   return r;
- 1da:	89 f0                	mov    %esi,%eax
+ 20a:	89 f0                	mov    %esi,%eax
 }
- 1dc:	83 c4 10             	add    $0x10,%esp
- 1df:	5b                   	pop    %ebx
- 1e0:	5e                   	pop    %esi
- 1e1:	5d                   	pop    %ebp
- 1e2:	c3                   	ret    
- 1e3:	90                   	nop
- 1e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 20c:	83 c4 10             	add    $0x10,%esp
+ 20f:	5b                   	pop    %ebx
+ 210:	5e                   	pop    %esi
+ 211:	5d                   	pop    %ebp
+ 212:	c3                   	ret    
+ 213:	90                   	nop
+ 214:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     return -1;
- 1e8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
- 1ed:	eb ed                	jmp    1dc <stat+0x3c>
- 1ef:	90                   	nop
+ 218:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+ 21d:	eb ed                	jmp    20c <stat+0x3c>
+ 21f:	90                   	nop
 
-000001f0 <atoi>:
+00000220 <atoi>:
 
 int
 atoi(const char *s)
 {
- 1f0:	55                   	push   %ebp
- 1f1:	89 e5                	mov    %esp,%ebp
- 1f3:	8b 4d 08             	mov    0x8(%ebp),%ecx
- 1f6:	53                   	push   %ebx
+ 220:	55                   	push   %ebp
+ 221:	89 e5                	mov    %esp,%ebp
+ 223:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 226:	53                   	push   %ebx
   int n;
 
   n = 0;
   while('0' <= *s && *s <= '9')
- 1f7:	0f be 11             	movsbl (%ecx),%edx
- 1fa:	8d 42 d0             	lea    -0x30(%edx),%eax
- 1fd:	3c 09                	cmp    $0x9,%al
+ 227:	0f be 11             	movsbl (%ecx),%edx
+ 22a:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 22d:	3c 09                	cmp    $0x9,%al
   n = 0;
- 1ff:	b8 00 00 00 00       	mov    $0x0,%eax
+ 22f:	b8 00 00 00 00       	mov    $0x0,%eax
   while('0' <= *s && *s <= '9')
- 204:	77 17                	ja     21d <atoi+0x2d>
- 206:	66 90                	xchg   %ax,%ax
+ 234:	77 17                	ja     24d <atoi+0x2d>
+ 236:	66 90                	xchg   %ax,%ax
     n = n*10 + *s++ - '0';
- 208:	83 c1 01             	add    $0x1,%ecx
- 20b:	8d 04 80             	lea    (%eax,%eax,4),%eax
- 20e:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+ 238:	83 c1 01             	add    $0x1,%ecx
+ 23b:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 23e:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
   while('0' <= *s && *s <= '9')
- 212:	0f be 11             	movsbl (%ecx),%edx
- 215:	8d 5a d0             	lea    -0x30(%edx),%ebx
- 218:	80 fb 09             	cmp    $0x9,%bl
- 21b:	76 eb                	jbe    208 <atoi+0x18>
+ 242:	0f be 11             	movsbl (%ecx),%edx
+ 245:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 248:	80 fb 09             	cmp    $0x9,%bl
+ 24b:	76 eb                	jbe    238 <atoi+0x18>
   return n;
 }
- 21d:	5b                   	pop    %ebx
- 21e:	5d                   	pop    %ebp
- 21f:	c3                   	ret    
+ 24d:	5b                   	pop    %ebx
+ 24e:	5d                   	pop    %ebp
+ 24f:	c3                   	ret    
 
-00000220 <memmove>:
+00000250 <memmove>:
 
 void*
 memmove(void *vdst, const void *vsrc, int n)
 {
- 220:	55                   	push   %ebp
+ 250:	55                   	push   %ebp
   char *dst;
   const char *src;
 
   dst = vdst;
   src = vsrc;
   while(n-- > 0)
- 221:	31 d2                	xor    %edx,%edx
+ 251:	31 d2                	xor    %edx,%edx
 {
- 223:	89 e5                	mov    %esp,%ebp
- 225:	56                   	push   %esi
- 226:	8b 45 08             	mov    0x8(%ebp),%eax
- 229:	53                   	push   %ebx
- 22a:	8b 5d 10             	mov    0x10(%ebp),%ebx
- 22d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 253:	89 e5                	mov    %esp,%ebp
+ 255:	56                   	push   %esi
+ 256:	8b 45 08             	mov    0x8(%ebp),%eax
+ 259:	53                   	push   %ebx
+ 25a:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 25d:	8b 75 0c             	mov    0xc(%ebp),%esi
   while(n-- > 0)
- 230:	85 db                	test   %ebx,%ebx
- 232:	7e 12                	jle    246 <memmove+0x26>
- 234:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 260:	85 db                	test   %ebx,%ebx
+ 262:	7e 12                	jle    276 <memmove+0x26>
+ 264:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     *dst++ = *src++;
- 238:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
- 23c:	88 0c 10             	mov    %cl,(%eax,%edx,1)
- 23f:	83 c2 01             	add    $0x1,%edx
+ 268:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
+ 26c:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+ 26f:	83 c2 01             	add    $0x1,%edx
   while(n-- > 0)
- 242:	39 da                	cmp    %ebx,%edx
- 244:	75 f2                	jne    238 <memmove+0x18>
+ 272:	39 da                	cmp    %ebx,%edx
+ 274:	75 f2                	jne    268 <memmove+0x18>
   return vdst;
 }
- 246:	5b                   	pop    %ebx
- 247:	5e                   	pop    %esi
- 248:	5d                   	pop    %ebp
- 249:	c3                   	ret    
-
-0000024a <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
- 24a:	b8 01 00 00 00       	mov    $0x1,%eax
- 24f:	cd 40                	int    $0x40
- 251:	c3                   	ret    
-
-00000252 <exit>:
-SYSCALL(exit)
- 252:	b8 02 00 00 00       	mov    $0x2,%eax
- 257:	cd 40                	int    $0x40
- 259:	c3                   	ret    
-
-0000025a <wait>:
-SYSCALL(wait)
- 25a:	b8 03 00 00 00       	mov    $0x3,%eax
- 25f:	cd 40                	int    $0x40
- 261:	c3                   	ret    
-
-00000262 <pipe>:
-SYSCALL(pipe)
- 262:	b8 04 00 00 00       	mov    $0x4,%eax
- 267:	cd 40                	int    $0x40
- 269:	c3                   	ret    
-
-0000026a <read>:
-SYSCALL(read)
- 26a:	b8 05 00 00 00       	mov    $0x5,%eax
- 26f:	cd 40                	int    $0x40
- 271:	c3                   	ret    
-
-00000272 <write>:
-SYSCALL(write)
- 272:	b8 10 00 00 00       	mov    $0x10,%eax
- 277:	cd 40                	int    $0x40
+ 276:	5b                   	pop    %ebx
+ 277:	5e                   	pop    %esi
+ 278:	5d                   	pop    %ebp
  279:	c3                   	ret    
 
-0000027a <close>:
-SYSCALL(close)
- 27a:	b8 15 00 00 00       	mov    $0x15,%eax
+0000027a <fork>:
+ 27a:	b8 01 00 00 00       	mov    $0x1,%eax
  27f:	cd 40                	int    $0x40
  281:	c3                   	ret    
 
-00000282 <kill>:
-SYSCALL(kill)
- 282:	b8 06 00 00 00       	mov    $0x6,%eax
+00000282 <exit>:
+ 282:	b8 02 00 00 00       	mov    $0x2,%eax
  287:	cd 40                	int    $0x40
  289:	c3                   	ret    
 
-0000028a <exec>:
-SYSCALL(exec)
- 28a:	b8 07 00 00 00       	mov    $0x7,%eax
+0000028a <wait>:
+ 28a:	b8 03 00 00 00       	mov    $0x3,%eax
  28f:	cd 40                	int    $0x40
  291:	c3                   	ret    
 
-00000292 <open>:
-SYSCALL(open)
- 292:	b8 0f 00 00 00       	mov    $0xf,%eax
+00000292 <pipe>:
+ 292:	b8 04 00 00 00       	mov    $0x4,%eax
  297:	cd 40                	int    $0x40
  299:	c3                   	ret    
 
-0000029a <mknod>:
-SYSCALL(mknod)
- 29a:	b8 11 00 00 00       	mov    $0x11,%eax
+0000029a <read>:
+ 29a:	b8 05 00 00 00       	mov    $0x5,%eax
  29f:	cd 40                	int    $0x40
  2a1:	c3                   	ret    
 
-000002a2 <unlink>:
-SYSCALL(unlink)
- 2a2:	b8 12 00 00 00       	mov    $0x12,%eax
+000002a2 <write>:
+ 2a2:	b8 10 00 00 00       	mov    $0x10,%eax
  2a7:	cd 40                	int    $0x40
  2a9:	c3                   	ret    
 
-000002aa <fstat>:
-SYSCALL(fstat)
- 2aa:	b8 08 00 00 00       	mov    $0x8,%eax
+000002aa <close>:
+ 2aa:	b8 15 00 00 00       	mov    $0x15,%eax
  2af:	cd 40                	int    $0x40
  2b1:	c3                   	ret    
 
-000002b2 <link>:
-SYSCALL(link)
- 2b2:	b8 13 00 00 00       	mov    $0x13,%eax
+000002b2 <kill>:
+ 2b2:	b8 06 00 00 00       	mov    $0x6,%eax
  2b7:	cd 40                	int    $0x40
  2b9:	c3                   	ret    
 
-000002ba <mkdir>:
-SYSCALL(mkdir)
- 2ba:	b8 14 00 00 00       	mov    $0x14,%eax
+000002ba <exec>:
+ 2ba:	b8 07 00 00 00       	mov    $0x7,%eax
  2bf:	cd 40                	int    $0x40
  2c1:	c3                   	ret    
 
-000002c2 <chdir>:
-SYSCALL(chdir)
- 2c2:	b8 09 00 00 00       	mov    $0x9,%eax
+000002c2 <open>:
+ 2c2:	b8 0f 00 00 00       	mov    $0xf,%eax
  2c7:	cd 40                	int    $0x40
  2c9:	c3                   	ret    
 
-000002ca <dup>:
-SYSCALL(dup)
- 2ca:	b8 0a 00 00 00       	mov    $0xa,%eax
+000002ca <mknod>:
+ 2ca:	b8 11 00 00 00       	mov    $0x11,%eax
  2cf:	cd 40                	int    $0x40
  2d1:	c3                   	ret    
 
-000002d2 <getpid>:
-SYSCALL(getpid)
- 2d2:	b8 0b 00 00 00       	mov    $0xb,%eax
+000002d2 <unlink>:
+ 2d2:	b8 12 00 00 00       	mov    $0x12,%eax
  2d7:	cd 40                	int    $0x40
  2d9:	c3                   	ret    
 
-000002da <sbrk>:
-SYSCALL(sbrk)
- 2da:	b8 0c 00 00 00       	mov    $0xc,%eax
+000002da <fstat>:
+ 2da:	b8 08 00 00 00       	mov    $0x8,%eax
  2df:	cd 40                	int    $0x40
  2e1:	c3                   	ret    
 
-000002e2 <sleep>:
-SYSCALL(sleep)
- 2e2:	b8 0d 00 00 00       	mov    $0xd,%eax
+000002e2 <link>:
+ 2e2:	b8 13 00 00 00       	mov    $0x13,%eax
  2e7:	cd 40                	int    $0x40
  2e9:	c3                   	ret    
 
-000002ea <uptime>:
-SYSCALL(uptime)
- 2ea:	b8 0e 00 00 00       	mov    $0xe,%eax
+000002ea <mkdir>:
+ 2ea:	b8 14 00 00 00       	mov    $0x14,%eax
  2ef:	cd 40                	int    $0x40
  2f1:	c3                   	ret    
- 2f2:	66 90                	xchg   %ax,%ax
- 2f4:	66 90                	xchg   %ax,%ax
- 2f6:	66 90                	xchg   %ax,%ax
- 2f8:	66 90                	xchg   %ax,%ax
- 2fa:	66 90                	xchg   %ax,%ax
- 2fc:	66 90                	xchg   %ax,%ax
- 2fe:	66 90                	xchg   %ax,%ax
-
-00000300 <printint>:
+
+000002f2 <chdir>:
+ 2f2:	b8 09 00 00 00       	mov    $0x9,%eax
+ 2f7:	cd 40                	int    $0x40
+ 2f9:	c3                   	ret    
+
+000002fa <dup>:
+ 2fa:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 2ff:	cd 40                	int    $0x40
+ 301:	c3                   	ret    
+
+00000302 <getpid>:
+ 302:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 307:	cd 40                	int    $0x40
+ 309:	c3                   	ret    
+
+0000030a <sbrk>:
+ 30a:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 30f:	cd 40                	int    $0x40
+ 311:	c3                   	ret    
+
+00000312 <sleep>:
+ 312:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 317:	cd 40                	int    $0x40
+ 319:	c3                   	ret    
+
+0000031a <uptime>:
+ 31a:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 31f:	cd 40                	int    $0x40
+ 321:	c3                   	ret    
+ 322:	66 90                	xchg   %ax,%ax
+ 324:	66 90                	xchg   %ax,%ax
+ 326:	66 90                	xchg   %ax,%ax
+ 328:	66 90                	xchg   %ax,%ax
+ 32a:	66 90                	xchg   %ax,%ax
+ 32c:	66 90                	xchg   %ax,%ax
+ 32e:	66 90                	xchg   %ax,%ax
+
+00000330 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 300:	55                   	push   %ebp
- 301:	89 e5                	mov    %esp,%ebp
- 303:	57                   	push   %edi
- 304:	56                   	push   %esi
- 305:	89 c6                	mov    %eax,%esi
- 307:	53                   	push   %ebx
- 308:	83 ec 4c             	sub    $0x4c,%esp
+ 330:	55                   	push   %ebp
+ 331:	89 e5                	mov    %esp,%ebp
+ 333:	57                   	push   %edi
+ 334:	56                   	push   %esi
+ 335:	89 c6                	mov    %eax,%esi
+ 337:	53                   	push   %ebx
+ 338:	83 ec 4c             	sub    $0x4c,%esp
   char buf[16];
   int i, neg;
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
- 30b:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 30e:	85 db                	test   %ebx,%ebx
- 310:	74 09                	je     31b <printint+0x1b>
- 312:	89 d0                	mov    %edx,%eax
- 314:	c1 e8 1f             	shr    $0x1f,%eax
- 317:	84 c0                	test   %al,%al
- 319:	75 75                	jne    390 <printint+0x90>
+ 33b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 33e:	85 db                	test   %ebx,%ebx
+ 340:	74 09                	je     34b <printint+0x1b>
+ 342:	89 d0                	mov    %edx,%eax
+ 344:	c1 e8 1f             	shr    $0x1f,%eax
+ 347:	84 c0                	test   %al,%al
+ 349:	75 75                	jne    3c0 <printint+0x90>
     neg = 1;
     x = -xx;
   } else {
     x = xx;
- 31b:	89 d0                	mov    %edx,%eax
+ 34b:	89 d0                	mov    %edx,%eax
   neg = 0;
- 31d:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
- 324:	89 75 c0             	mov    %esi,-0x40(%ebp)
+ 34d:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 354:	89 75 c0             	mov    %esi,-0x40(%ebp)
   }
 
   i = 0;
- 327:	31 ff                	xor    %edi,%edi
- 329:	89 ce                	mov    %ecx,%esi
- 32b:	8d 5d d7             	lea    -0x29(%ebp),%ebx
- 32e:	eb 02                	jmp    332 <printint+0x32>
+ 357:	31 ff                	xor    %edi,%edi
+ 359:	89 ce                	mov    %ecx,%esi
+ 35b:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 35e:	eb 02                	jmp    362 <printint+0x32>
   do{
     buf[i++] = digits[x % base];
- 330:	89 cf                	mov    %ecx,%edi
- 332:	31 d2                	xor    %edx,%edx
- 334:	f7 f6                	div    %esi
- 336:	8d 4f 01             	lea    0x1(%edi),%ecx
- 339:	0f b6 92 1b 07 00 00 	movzbl 0x71b(%edx),%edx
+ 360:	89 cf                	mov    %ecx,%edi
+ 362:	31 d2                	xor    %edx,%edx
+ 364:	f7 f6                	div    %esi
+ 366:	8d 4f 01             	lea    0x1(%edi),%ecx
+ 369:	0f b6 92 57 07 00 00 	movzbl 0x757(%edx),%edx
   }while((x /= base) != 0);
- 340:	85 c0                	test   %eax,%eax
+ 370:	85 c0                	test   %eax,%eax
     buf[i++] = digits[x % base];
- 342:	88 14 0b             	mov    %dl,(%ebx,%ecx,1)
+ 372:	88 14 0b             	mov    %dl,(%ebx,%ecx,1)
   }while((x /= base) != 0);
- 345:	75 e9                	jne    330 <printint+0x30>
+ 375:	75 e9                	jne    360 <printint+0x30>
   if(neg)
- 347:	8b 55 c4             	mov    -0x3c(%ebp),%edx
+ 377:	8b 55 c4             	mov    -0x3c(%ebp),%edx
     buf[i++] = digits[x % base];
- 34a:	89 c8                	mov    %ecx,%eax
- 34c:	8b 75 c0             	mov    -0x40(%ebp),%esi
+ 37a:	89 c8                	mov    %ecx,%eax
+ 37c:	8b 75 c0             	mov    -0x40(%ebp),%esi
   if(neg)
- 34f:	85 d2                	test   %edx,%edx
- 351:	74 08                	je     35b <printint+0x5b>
+ 37f:	85 d2                	test   %edx,%edx
+ 381:	74 08                	je     38b <printint+0x5b>
     buf[i++] = '-';
- 353:	8d 4f 02             	lea    0x2(%edi),%ecx
- 356:	c6 44 05 d8 2d       	movb   $0x2d,-0x28(%ebp,%eax,1)
+ 383:	8d 4f 02             	lea    0x2(%edi),%ecx
+ 386:	c6 44 05 d8 2d       	movb   $0x2d,-0x28(%ebp,%eax,1)
 
   while(--i >= 0)
- 35b:	8d 79 ff             	lea    -0x1(%ecx),%edi
- 35e:	66 90                	xchg   %ax,%ax
- 360:	0f b6 44 3d d8       	movzbl -0x28(%ebp,%edi,1),%eax
- 365:	83 ef 01             	sub    $0x1,%edi
+ 38b:	8d 79 ff             	lea    -0x1(%ecx),%edi
+ 38e:	66 90                	xchg   %ax,%ax
+ 390:	0f b6 44 3d d8       	movzbl -0x28(%ebp,%edi,1),%eax
+ 395:	83 ef 01             	sub    $0x1,%edi
   write(fd, &c, 1);
- 368:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 36f:	00 
- 370:	89 5c 24 04          	mov    %ebx,0x4(%esp)
- 374:	89 34 24             	mov    %esi,(%esp)
- 377:	88 45 d7             	mov    %al,-0x29(%ebp)
- 37a:	e8 f3 fe ff ff       	call   272 <write>
+ 398:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 39f:	00 
+ 3a0:	89 5c 24 04          	mov    %ebx,0x4(%esp)
+ 3a4:	89 34 24             	mov    %esi,(%esp)
+ 3a7:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 3aa:	e8 f3 fe ff ff       	call   2a2 <write>
   while(--i >= 0)
- 37f:	83 ff ff             	cmp    $0xffffffff,%edi
- 382:	75 dc                	jne    360 <printint+0x60>
+ 3af:	83 ff ff             	cmp    $0xffffffff,%edi
+ 3b2:	75 dc                	jne    390 <printint+0x60>
     putc(fd, buf[i]);
 }
- 384:	83 c4 4c             	add    $0x4c,%esp
- 387:	5b                   	pop    %ebx
- 388:	5e                   	pop    %esi
- 389:	5f                   	pop    %edi
- 38a:	5d                   	pop    %ebp
- 38b:	c3                   	ret    
- 38c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 3b4:	83 c4 4c             	add    $0x4c,%esp
+ 3b7:	5b                   	pop    %ebx
+ 3b8:	5e                   	pop    %esi
+ 3b9:	5f                   	pop    %edi
+ 3ba:	5d                   	pop    %ebp
+ 3bb:	c3                   	ret    
+ 3bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     x = -xx;
- 390:	89 d0                	mov    %edx,%eax
- 392:	f7 d8                	neg    %eax
+ 3c0:	89 d0                	mov    %edx,%eax
+ 3c2:	f7 d8                	neg    %eax
     neg = 1;
- 394:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
- 39b:	eb 87                	jmp    324 <printint+0x24>
- 39d:	8d 76 00             	lea    0x0(%esi),%esi
+ 3c4:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+ 3cb:	eb 87                	jmp    354 <printint+0x24>
+ 3cd:	8d 76 00             	lea    0x0(%esi),%esi
 
-000003a0 <printf>:
+000003d0 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
- 3a0:	55                   	push   %ebp
- 3a1:	89 e5                	mov    %esp,%ebp
- 3a3:	57                   	push   %edi
+ 3d0:	55                   	push   %ebp
+ 3d1:	89 e5                	mov    %esp,%ebp
+ 3d3:	57                   	push   %edi
   char *s;
   int c, i, state;
   uint *ap;
 
   state = 0;
- 3a4:	31 ff                	xor    %edi,%edi
+ 3d4:	31 ff                	xor    %edi,%edi
 {
- 3a6:	56                   	push   %esi
- 3a7:	53                   	push   %ebx
- 3a8:	83 ec 3c             	sub    $0x3c,%esp
+ 3d6:	56                   	push   %esi
+ 3d7:	53                   	push   %ebx
+ 3d8:	83 ec 3c             	sub    $0x3c,%esp
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
- 3ab:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+ 3db:	8b 5d 0c             	mov    0xc(%ebp),%ebx
   ap = (uint*)(void*)&fmt + 1;
- 3ae:	8d 45 10             	lea    0x10(%ebp),%eax
+ 3de:	8d 45 10             	lea    0x10(%ebp),%eax
 {
- 3b1:	8b 75 08             	mov    0x8(%ebp),%esi
+ 3e1:	8b 75 08             	mov    0x8(%ebp),%esi
   ap = (uint*)(void*)&fmt + 1;
- 3b4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 3e4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
   for(i = 0; fmt[i]; i++){
- 3b7:	0f b6 13             	movzbl (%ebx),%edx
- 3ba:	83 c3 01             	add    $0x1,%ebx
- 3bd:	84 d2                	test   %dl,%dl
- 3bf:	75 39                	jne    3fa <printf+0x5a>
- 3c1:	e9 c2 00 00 00       	jmp    488 <printf+0xe8>
- 3c6:	66 90                	xchg   %ax,%ax
+ 3e7:	0f b6 13             	movzbl (%ebx),%edx
+ 3ea:	83 c3 01             	add    $0x1,%ebx
+ 3ed:	84 d2                	test   %dl,%dl
+ 3ef:	75 39                	jne    42a <printf+0x5a>
+ 3f1:	e9 c2 00 00 00       	jmp    4b8 <printf+0xe8>
+ 3f6:	66 90                	xchg   %ax,%ax
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
- 3c8:	83 fa 25             	cmp    $0x25,%edx
- 3cb:	0f 84 bf 00 00 00    	je     490 <printf+0xf0>
+ 3f8:	83 fa 25             	cmp    $0x25,%edx
+ 3fb:	0f 84 bf 00 00 00    	je     4c0 <printf+0xf0>
   write(fd, &c, 1);
- 3d1:	8d 45 e2             	lea    -0x1e(%ebp),%eax
- 3d4:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 3db:	00 
- 3dc:	89 44 24 04          	mov    %eax,0x4(%esp)
- 3e0:	89 34 24             	mov    %esi,(%esp)
+ 401:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 404:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 40b:	00 
+ 40c:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 410:	89 34 24             	mov    %esi,(%esp)
         state = '%';
       } else {
         putc(fd, c);
- 3e3:	88 55 e2             	mov    %dl,-0x1e(%ebp)
+ 413:	88 55 e2             	mov    %dl,-0x1e(%ebp)
   write(fd, &c, 1);
- 3e6:	e8 87 fe ff ff       	call   272 <write>
- 3eb:	83 c3 01             	add    $0x1,%ebx
+ 416:	e8 87 fe ff ff       	call   2a2 <write>
+ 41b:	83 c3 01             	add    $0x1,%ebx
   for(i = 0; fmt[i]; i++){
- 3ee:	0f b6 53 ff          	movzbl -0x1(%ebx),%edx
- 3f2:	84 d2                	test   %dl,%dl
- 3f4:	0f 84 8e 00 00 00    	je     488 <printf+0xe8>
+ 41e:	0f b6 53 ff          	movzbl -0x1(%ebx),%edx
+ 422:	84 d2                	test   %dl,%dl
+ 424:	0f 84 8e 00 00 00    	je     4b8 <printf+0xe8>
     if(state == 0){
- 3fa:	85 ff                	test   %edi,%edi
+ 42a:	85 ff                	test   %edi,%edi
     c = fmt[i] & 0xff;
- 3fc:	0f be c2             	movsbl %dl,%eax
+ 42c:	0f be c2             	movsbl %dl,%eax
     if(state == 0){
- 3ff:	74 c7                	je     3c8 <printf+0x28>
+ 42f:	74 c7                	je     3f8 <printf+0x28>
       }
     } else if(state == '%'){
- 401:	83 ff 25             	cmp    $0x25,%edi
- 404:	75 e5                	jne    3eb <printf+0x4b>
+ 431:	83 ff 25             	cmp    $0x25,%edi
+ 434:	75 e5                	jne    41b <printf+0x4b>
       if(c == 'd'){
- 406:	83 fa 64             	cmp    $0x64,%edx
- 409:	0f 84 31 01 00 00    	je     540 <printf+0x1a0>
+ 436:	83 fa 64             	cmp    $0x64,%edx
+ 439:	0f 84 31 01 00 00    	je     570 <printf+0x1a0>
         printint(fd, *ap, 10, 1);
         ap++;
       } else if(c == 'x' || c == 'p'){
- 40f:	25 f7 00 00 00       	and    $0xf7,%eax
- 414:	83 f8 70             	cmp    $0x70,%eax
- 417:	0f 84 83 00 00 00    	je     4a0 <printf+0x100>
+ 43f:	25 f7 00 00 00       	and    $0xf7,%eax
+ 444:	83 f8 70             	cmp    $0x70,%eax
+ 447:	0f 84 83 00 00 00    	je     4d0 <printf+0x100>
         printint(fd, *ap, 16, 0);
         ap++;
       } else if(c == 's'){
- 41d:	83 fa 73             	cmp    $0x73,%edx
- 420:	0f 84 a2 00 00 00    	je     4c8 <printf+0x128>
+ 44d:	83 fa 73             	cmp    $0x73,%edx
+ 450:	0f 84 a2 00 00 00    	je     4f8 <printf+0x128>
           s = "(null)";
         while(*s != 0){
           putc(fd, *s);
           s++;
         }
       } else if(c == 'c'){
- 426:	83 fa 63             	cmp    $0x63,%edx
- 429:	0f 84 35 01 00 00    	je     564 <printf+0x1c4>
+ 456:	83 fa 63             	cmp    $0x63,%edx
+ 459:	0f 84 35 01 00 00    	je     594 <printf+0x1c4>
         putc(fd, *ap);
         ap++;
       } else if(c == '%'){
- 42f:	83 fa 25             	cmp    $0x25,%edx
- 432:	0f 84 e0 00 00 00    	je     518 <printf+0x178>
+ 45f:	83 fa 25             	cmp    $0x25,%edx
+ 462:	0f 84 e0 00 00 00    	je     548 <printf+0x178>
   write(fd, &c, 1);
- 438:	8d 45 e6             	lea    -0x1a(%ebp),%eax
- 43b:	83 c3 01             	add    $0x1,%ebx
- 43e:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 445:	00 
+ 468:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 46b:	83 c3 01             	add    $0x1,%ebx
+ 46e:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 475:	00 
       } else {
         // Unknown % sequence.  Print it to draw attention.
         putc(fd, '%');
         putc(fd, c);
       }
       state = 0;
- 446:	31 ff                	xor    %edi,%edi
+ 476:	31 ff                	xor    %edi,%edi
   write(fd, &c, 1);
- 448:	89 44 24 04          	mov    %eax,0x4(%esp)
- 44c:	89 34 24             	mov    %esi,(%esp)
- 44f:	89 55 d0             	mov    %edx,-0x30(%ebp)
- 452:	c6 45 e6 25          	movb   $0x25,-0x1a(%ebp)
- 456:	e8 17 fe ff ff       	call   272 <write>
+ 478:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 47c:	89 34 24             	mov    %esi,(%esp)
+ 47f:	89 55 d0             	mov    %edx,-0x30(%ebp)
+ 482:	c6 45 e6 25          	movb   $0x25,-0x1a(%ebp)
+ 486:	e8 17 fe ff ff       	call   2a2 <write>
         putc(fd, c);
- 45b:	8b 55 d0             	mov    -0x30(%ebp),%edx
+ 48b:	8b 55 d0             	mov    -0x30(%ebp),%edx
   write(fd, &c, 1);
- 45e:	8d 45 e7             	lea    -0x19(%ebp),%eax
- 461:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 468:	00 
- 469:	89 44 24 04          	mov    %eax,0x4(%esp)
- 46d:	89 34 24             	mov    %esi,(%esp)
+ 48e:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 491:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 498:	00 
+ 499:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 49d:	89 34 24             	mov    %esi,(%esp)
         putc(fd, c);
- 470:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 4a0:	88 55 e7             	mov    %dl,-0x19(%ebp)
   write(fd, &c, 1);
- 473:	e8 fa fd ff ff       	call   272 <write>
+ 4a3:	e8 fa fd ff ff       	call   2a2 <write>
   for(i = 0; fmt[i]; i++){
- 478:	0f b6 53 ff          	movzbl -0x1(%ebx),%edx
- 47c:	84 d2                	test   %dl,%dl
- 47e:	0f 85 76 ff ff ff    	jne    3fa <printf+0x5a>
- 484:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 4a8:	0f b6 53 ff          	movzbl -0x1(%ebx),%edx
+ 4ac:	84 d2                	test   %dl,%dl
+ 4ae:	0f 85 76 ff ff ff    	jne    42a <printf+0x5a>
+ 4b4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     }
   }
 }
- 488:	83 c4 3c             	add    $0x3c,%esp
- 48b:	5b                   	pop    %ebx
- 48c:	5e                   	pop    %esi
- 48d:	5f                   	pop    %edi
- 48e:	5d                   	pop    %ebp
- 48f:	c3                   	ret    
+ 4b8:	83 c4 3c             	add    $0x3c,%esp
+ 4bb:	5b                   	pop    %ebx
+ 4bc:	5e                   	pop    %esi
+ 4bd:	5f                   	pop    %edi
+ 4be:	5d                   	pop    %ebp
+ 4bf:	c3                   	ret    
         state = '%';
- 490:	bf 25 00 00 00       	mov    $0x25,%edi
- 495:	e9 51 ff ff ff       	jmp    3eb <printf+0x4b>
- 49a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 4c0:	bf 25 00 00 00       	mov    $0x25,%edi
+ 4c5:	e9 51 ff ff ff       	jmp    41b <printf+0x4b>
+ 4ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         printint(fd, *ap, 16, 0);
- 4a0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
- 4a3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 4d0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 4d3:	b9 10 00 00 00       	mov    $0x10,%ecx
       state = 0;
- 4a8:	31 ff                	xor    %edi,%edi
+ 4d8:	31 ff                	xor    %edi,%edi
         printint(fd, *ap, 16, 0);
- 4aa:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
- 4b1:	8b 10                	mov    (%eax),%edx
- 4b3:	89 f0                	mov    %esi,%eax
- 4b5:	e8 46 fe ff ff       	call   300 <printint>
+ 4da:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+ 4e1:	8b 10                	mov    (%eax),%edx
+ 4e3:	89 f0                	mov    %esi,%eax
+ 4e5:	e8 46 fe ff ff       	call   330 <printint>
         ap++;
- 4ba:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
- 4be:	e9 28 ff ff ff       	jmp    3eb <printf+0x4b>
- 4c3:	90                   	nop
- 4c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 4ea:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
+ 4ee:	e9 28 ff ff ff       	jmp    41b <printf+0x4b>
+ 4f3:	90                   	nop
+ 4f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         s = (char*)*ap;
- 4c8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 4f8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
         ap++;
- 4cb:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
+ 4fb:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
         s = (char*)*ap;
- 4cf:	8b 38                	mov    (%eax),%edi
+ 4ff:	8b 38                	mov    (%eax),%edi
           s = "(null)";
- 4d1:	b8 14 07 00 00       	mov    $0x714,%eax
- 4d6:	85 ff                	test   %edi,%edi
- 4d8:	0f 44 f8             	cmove  %eax,%edi
+ 501:	b8 50 07 00 00       	mov    $0x750,%eax
+ 506:	85 ff                	test   %edi,%edi
+ 508:	0f 44 f8             	cmove  %eax,%edi
         while(*s != 0){
- 4db:	0f b6 07             	movzbl (%edi),%eax
- 4de:	84 c0                	test   %al,%al
- 4e0:	74 2a                	je     50c <printf+0x16c>
- 4e2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
- 4e8:	88 45 e3             	mov    %al,-0x1d(%ebp)
+ 50b:	0f b6 07             	movzbl (%edi),%eax
+ 50e:	84 c0                	test   %al,%al
+ 510:	74 2a                	je     53c <printf+0x16c>
+ 512:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 518:	88 45 e3             	mov    %al,-0x1d(%ebp)
   write(fd, &c, 1);
- 4eb:	8d 45 e3             	lea    -0x1d(%ebp),%eax
+ 51b:	8d 45 e3             	lea    -0x1d(%ebp),%eax
           s++;
- 4ee:	83 c7 01             	add    $0x1,%edi
+ 51e:	83 c7 01             	add    $0x1,%edi
   write(fd, &c, 1);
- 4f1:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 4f8:	00 
- 4f9:	89 44 24 04          	mov    %eax,0x4(%esp)
- 4fd:	89 34 24             	mov    %esi,(%esp)
- 500:	e8 6d fd ff ff       	call   272 <write>
+ 521:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 528:	00 
+ 529:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 52d:	89 34 24             	mov    %esi,(%esp)
+ 530:	e8 6d fd ff ff       	call   2a2 <write>
         while(*s != 0){
- 505:	0f b6 07             	movzbl (%edi),%eax
- 508:	84 c0                	test   %al,%al
- 50a:	75 dc                	jne    4e8 <printf+0x148>
+ 535:	0f b6 07             	movzbl (%edi),%eax
+ 538:	84 c0                	test   %al,%al
+ 53a:	75 dc                	jne    518 <printf+0x148>
       state = 0;
- 50c:	31 ff                	xor    %edi,%edi
- 50e:	e9 d8 fe ff ff       	jmp    3eb <printf+0x4b>
- 513:	90                   	nop
- 514:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 53c:	31 ff                	xor    %edi,%edi
+ 53e:	e9 d8 fe ff ff       	jmp    41b <printf+0x4b>
+ 543:	90                   	nop
+ 544:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   write(fd, &c, 1);
- 518:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 548:	8d 45 e5             	lea    -0x1b(%ebp),%eax
       state = 0;
- 51b:	31 ff                	xor    %edi,%edi
+ 54b:	31 ff                	xor    %edi,%edi
   write(fd, &c, 1);
- 51d:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 524:	00 
- 525:	89 44 24 04          	mov    %eax,0x4(%esp)
- 529:	89 34 24             	mov    %esi,(%esp)
- 52c:	c6 45 e5 25          	movb   $0x25,-0x1b(%ebp)
- 530:	e8 3d fd ff ff       	call   272 <write>
- 535:	e9 b1 fe ff ff       	jmp    3eb <printf+0x4b>
- 53a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 54d:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 554:	00 
+ 555:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 559:	89 34 24             	mov    %esi,(%esp)
+ 55c:	c6 45 e5 25          	movb   $0x25,-0x1b(%ebp)
+ 560:	e8 3d fd ff ff       	call   2a2 <write>
+ 565:	e9 b1 fe ff ff       	jmp    41b <printf+0x4b>
+ 56a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         printint(fd, *ap, 10, 1);
- 540:	8b 45 d4             	mov    -0x2c(%ebp),%eax
- 543:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 570:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 573:	b9 0a 00 00 00       	mov    $0xa,%ecx
       state = 0;
- 548:	66 31 ff             	xor    %di,%di
+ 578:	66 31 ff             	xor    %di,%di
         printint(fd, *ap, 10, 1);
- 54b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
- 552:	8b 10                	mov    (%eax),%edx
- 554:	89 f0                	mov    %esi,%eax
- 556:	e8 a5 fd ff ff       	call   300 <printint>
+ 57b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+ 582:	8b 10                	mov    (%eax),%edx
+ 584:	89 f0                	mov    %esi,%eax
+ 586:	e8 a5 fd ff ff       	call   330 <printint>
         ap++;
- 55b:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
- 55f:	e9 87 fe ff ff       	jmp    3eb <printf+0x4b>
+ 58b:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
+ 58f:	e9 87 fe ff ff       	jmp    41b <printf+0x4b>
         putc(fd, *ap);
- 564:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 594:	8b 45 d4             	mov    -0x2c(%ebp),%eax
       state = 0;
- 567:	31 ff                	xor    %edi,%edi
+ 597:	31 ff                	xor    %edi,%edi
         putc(fd, *ap);
- 569:	8b 00                	mov    (%eax),%eax
+ 599:	8b 00                	mov    (%eax),%eax
   write(fd, &c, 1);
- 56b:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 572:	00 
- 573:	89 34 24             	mov    %esi,(%esp)
+ 59b:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 5a2:	00 
+ 5a3:	89 34 24             	mov    %esi,(%esp)
         putc(fd, *ap);
- 576:	88 45 e4             	mov    %al,-0x1c(%ebp)
+ 5a6:	88 45 e4             	mov    %al,-0x1c(%ebp)
   write(fd, &c, 1);
- 579:	8d 45 e4             	lea    -0x1c(%ebp),%eax
- 57c:	89 44 24 04          	mov    %eax,0x4(%esp)
- 580:	e8 ed fc ff ff       	call   272 <write>
+ 5a9:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 5ac:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 5b0:	e8 ed fc ff ff       	call   2a2 <write>
         ap++;
- 585:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
- 589:	e9 5d fe ff ff       	jmp    3eb <printf+0x4b>
- 58e:	66 90                	xchg   %ax,%ax
+ 5b5:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
+ 5b9:	e9 5d fe ff ff       	jmp    41b <printf+0x4b>
+ 5be:	66 90                	xchg   %ax,%ax
 
-00000590 <free>:
+000005c0 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 590:	55                   	push   %ebp
+ 5c0:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 591:	a1 90 09 00 00       	mov    0x990,%eax
+ 5c1:	a1 cc 09 00 00       	mov    0x9cc,%eax
 {
- 596:	89 e5                	mov    %esp,%ebp
- 598:	57                   	push   %edi
- 599:	56                   	push   %esi
- 59a:	53                   	push   %ebx
- 59b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5c6:	89 e5                	mov    %esp,%ebp
+ 5c8:	57                   	push   %edi
+ 5c9:	56                   	push   %esi
+ 5ca:	53                   	push   %ebx
+ 5cb:	8b 5d 08             	mov    0x8(%ebp),%ebx
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 59e:	8b 08                	mov    (%eax),%ecx
+ 5ce:	8b 08                	mov    (%eax),%ecx
   bp = (Header*)ap - 1;
- 5a0:	8d 53 f8             	lea    -0x8(%ebx),%edx
+ 5d0:	8d 53 f8             	lea    -0x8(%ebx),%edx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 5a3:	39 d0                	cmp    %edx,%eax
- 5a5:	72 11                	jb     5b8 <free+0x28>
- 5a7:	90                   	nop
+ 5d3:	39 d0                	cmp    %edx,%eax
+ 5d5:	72 11                	jb     5e8 <free+0x28>
+ 5d7:	90                   	nop
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 5a8:	39 c8                	cmp    %ecx,%eax
- 5aa:	72 04                	jb     5b0 <free+0x20>
- 5ac:	39 ca                	cmp    %ecx,%edx
- 5ae:	72 10                	jb     5c0 <free+0x30>
- 5b0:	89 c8                	mov    %ecx,%eax
+ 5d8:	39 c8                	cmp    %ecx,%eax
+ 5da:	72 04                	jb     5e0 <free+0x20>
+ 5dc:	39 ca                	cmp    %ecx,%edx
+ 5de:	72 10                	jb     5f0 <free+0x30>
+ 5e0:	89 c8                	mov    %ecx,%eax
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 5b2:	39 d0                	cmp    %edx,%eax
+ 5e2:	39 d0                	cmp    %edx,%eax
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 5b4:	8b 08                	mov    (%eax),%ecx
+ 5e4:	8b 08                	mov    (%eax),%ecx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 5b6:	73 f0                	jae    5a8 <free+0x18>
- 5b8:	39 ca                	cmp    %ecx,%edx
- 5ba:	72 04                	jb     5c0 <free+0x30>
+ 5e6:	73 f0                	jae    5d8 <free+0x18>
+ 5e8:	39 ca                	cmp    %ecx,%edx
+ 5ea:	72 04                	jb     5f0 <free+0x30>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 5bc:	39 c8                	cmp    %ecx,%eax
- 5be:	72 f0                	jb     5b0 <free+0x20>
+ 5ec:	39 c8                	cmp    %ecx,%eax
+ 5ee:	72 f0                	jb     5e0 <free+0x20>
       break;
   if(bp + bp->s.size == p->s.ptr){
- 5c0:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 5c3:	8d 3c f2             	lea    (%edx,%esi,8),%edi
- 5c6:	39 cf                	cmp    %ecx,%edi
- 5c8:	74 1e                	je     5e8 <free+0x58>
+ 5f0:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 5f3:	8d 3c f2             	lea    (%edx,%esi,8),%edi
+ 5f6:	39 cf                	cmp    %ecx,%edi
+ 5f8:	74 1e                	je     618 <free+0x58>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
   } else
     bp->s.ptr = p->s.ptr;
- 5ca:	89 4b f8             	mov    %ecx,-0x8(%ebx)
+ 5fa:	89 4b f8             	mov    %ecx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 5cd:	8b 48 04             	mov    0x4(%eax),%ecx
- 5d0:	8d 34 c8             	lea    (%eax,%ecx,8),%esi
- 5d3:	39 f2                	cmp    %esi,%edx
- 5d5:	74 28                	je     5ff <free+0x6f>
+ 5fd:	8b 48 04             	mov    0x4(%eax),%ecx
+ 600:	8d 34 c8             	lea    (%eax,%ecx,8),%esi
+ 603:	39 f2                	cmp    %esi,%edx
+ 605:	74 28                	je     62f <free+0x6f>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
   } else
     p->s.ptr = bp;
- 5d7:	89 10                	mov    %edx,(%eax)
+ 607:	89 10                	mov    %edx,(%eax)
   freep = p;
- 5d9:	a3 90 09 00 00       	mov    %eax,0x990
+ 609:	a3 cc 09 00 00       	mov    %eax,0x9cc
 }
- 5de:	5b                   	pop    %ebx
- 5df:	5e                   	pop    %esi
- 5e0:	5f                   	pop    %edi
- 5e1:	5d                   	pop    %ebp
- 5e2:	c3                   	ret    
- 5e3:	90                   	nop
- 5e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 60e:	5b                   	pop    %ebx
+ 60f:	5e                   	pop    %esi
+ 610:	5f                   	pop    %edi
+ 611:	5d                   	pop    %ebp
+ 612:	c3                   	ret    
+ 613:	90                   	nop
+ 614:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     bp->s.size += p->s.ptr->s.size;
- 5e8:	03 71 04             	add    0x4(%ecx),%esi
- 5eb:	89 73 fc             	mov    %esi,-0x4(%ebx)
+ 618:	03 71 04             	add    0x4(%ecx),%esi
+ 61b:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
- 5ee:	8b 08                	mov    (%eax),%ecx
- 5f0:	8b 09                	mov    (%ecx),%ecx
- 5f2:	89 4b f8             	mov    %ecx,-0x8(%ebx)
+ 61e:	8b 08                	mov    (%eax),%ecx
+ 620:	8b 09                	mov    (%ecx),%ecx
+ 622:	89 4b f8             	mov    %ecx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 5f5:	8b 48 04             	mov    0x4(%eax),%ecx
- 5f8:	8d 34 c8             	lea    (%eax,%ecx,8),%esi
- 5fb:	39 f2                	cmp    %esi,%edx
- 5fd:	75 d8                	jne    5d7 <free+0x47>
+ 625:	8b 48 04             	mov    0x4(%eax),%ecx
+ 628:	8d 34 c8             	lea    (%eax,%ecx,8),%esi
+ 62b:	39 f2                	cmp    %esi,%edx
+ 62d:	75 d8                	jne    607 <free+0x47>
     p->s.size += bp->s.size;
- 5ff:	03 4b fc             	add    -0x4(%ebx),%ecx
+ 62f:	03 4b fc             	add    -0x4(%ebx),%ecx
   freep = p;
- 602:	a3 90 09 00 00       	mov    %eax,0x990
+ 632:	a3 cc 09 00 00       	mov    %eax,0x9cc
     p->s.size += bp->s.size;
- 607:	89 48 04             	mov    %ecx,0x4(%eax)
+ 637:	89 48 04             	mov    %ecx,0x4(%eax)
     p->s.ptr = bp->s.ptr;
- 60a:	8b 53 f8             	mov    -0x8(%ebx),%edx
- 60d:	89 10                	mov    %edx,(%eax)
+ 63a:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 63d:	89 10                	mov    %edx,(%eax)
 }
- 60f:	5b                   	pop    %ebx
- 610:	5e                   	pop    %esi
- 611:	5f                   	pop    %edi
- 612:	5d                   	pop    %ebp
- 613:	c3                   	ret    
- 614:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
- 61a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
-
-00000620 <malloc>:
+ 63f:	5b                   	pop    %ebx
+ 640:	5e                   	pop    %esi
+ 641:	5f                   	pop    %edi
+ 642:	5d                   	pop    %ebp
+ 643:	c3                   	ret    
+ 644:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 64a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000650 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 620:	55                   	push   %ebp
- 621:	89 e5                	mov    %esp,%ebp
- 623:	57                   	push   %edi
- 624:	56                   	push   %esi
- 625:	53                   	push   %ebx
- 626:	83 ec 1c             	sub    $0x1c,%esp
+ 650:	55                   	push   %ebp
+ 651:	89 e5                	mov    %esp,%ebp
+ 653:	57                   	push   %edi
+ 654:	56                   	push   %esi
+ 655:	53                   	push   %ebx
+ 656:	83 ec 1c             	sub    $0x1c,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 629:	8b 45 08             	mov    0x8(%ebp),%eax
+ 659:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 62c:	8b 1d 90 09 00 00    	mov    0x990,%ebx
+ 65c:	8b 1d cc 09 00 00    	mov    0x9cc,%ebx
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 632:	8d 48 07             	lea    0x7(%eax),%ecx
- 635:	c1 e9 03             	shr    $0x3,%ecx
+ 662:	8d 48 07             	lea    0x7(%eax),%ecx
+ 665:	c1 e9 03             	shr    $0x3,%ecx
   if((prevp = freep) == 0){
- 638:	85 db                	test   %ebx,%ebx
+ 668:	85 db                	test   %ebx,%ebx
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 63a:	8d 71 01             	lea    0x1(%ecx),%esi
+ 66a:	8d 71 01             	lea    0x1(%ecx),%esi
   if((prevp = freep) == 0){
- 63d:	0f 84 9b 00 00 00    	je     6de <malloc+0xbe>
- 643:	8b 13                	mov    (%ebx),%edx
- 645:	8b 7a 04             	mov    0x4(%edx),%edi
+ 66d:	0f 84 9b 00 00 00    	je     70e <malloc+0xbe>
+ 673:	8b 13                	mov    (%ebx),%edx
+ 675:	8b 7a 04             	mov    0x4(%edx),%edi
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
     if(p->s.size >= nunits){
- 648:	39 fe                	cmp    %edi,%esi
- 64a:	76 64                	jbe    6b0 <malloc+0x90>
- 64c:	8d 04 f5 00 00 00 00 	lea    0x0(,%esi,8),%eax
+ 678:	39 fe                	cmp    %edi,%esi
+ 67a:	76 64                	jbe    6e0 <malloc+0x90>
+ 67c:	8d 04 f5 00 00 00 00 	lea    0x0(,%esi,8),%eax
   if(nu < 4096)
- 653:	bb 00 80 00 00       	mov    $0x8000,%ebx
- 658:	89 45 e4             	mov    %eax,-0x1c(%ebp)
- 65b:	eb 0e                	jmp    66b <malloc+0x4b>
- 65d:	8d 76 00             	lea    0x0(%esi),%esi
+ 683:	bb 00 80 00 00       	mov    $0x8000,%ebx
+ 688:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 68b:	eb 0e                	jmp    69b <malloc+0x4b>
+ 68d:	8d 76 00             	lea    0x0(%esi),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 660:	8b 02                	mov    (%edx),%eax
+ 690:	8b 02                	mov    (%edx),%eax
     if(p->s.size >= nunits){
- 662:	8b 78 04             	mov    0x4(%eax),%edi
- 665:	39 fe                	cmp    %edi,%esi
- 667:	76 4f                	jbe    6b8 <malloc+0x98>
- 669:	89 c2                	mov    %eax,%edx
+ 692:	8b 78 04             	mov    0x4(%eax),%edi
+ 695:	39 fe                	cmp    %edi,%esi
+ 697:	76 4f                	jbe    6e8 <malloc+0x98>
+ 699:	89 c2                	mov    %eax,%edx
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 66b:	3b 15 90 09 00 00    	cmp    0x990,%edx
- 671:	75 ed                	jne    660 <malloc+0x40>
+ 69b:	3b 15 cc 09 00 00    	cmp    0x9cc,%edx
+ 6a1:	75 ed                	jne    690 <malloc+0x40>
   if(nu < 4096)
- 673:	8b 45 e4             	mov    -0x1c(%ebp),%eax
- 676:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
- 67c:	bf 00 10 00 00       	mov    $0x1000,%edi
- 681:	0f 43 fe             	cmovae %esi,%edi
- 684:	0f 42 c3             	cmovb  %ebx,%eax
+ 6a3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+ 6a6:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 6ac:	bf 00 10 00 00       	mov    $0x1000,%edi
+ 6b1:	0f 43 fe             	cmovae %esi,%edi
+ 6b4:	0f 42 c3             	cmovb  %ebx,%eax
   p = sbrk(nu * sizeof(Header));
- 687:	89 04 24             	mov    %eax,(%esp)
- 68a:	e8 4b fc ff ff       	call   2da <sbrk>
+ 6b7:	89 04 24             	mov    %eax,(%esp)
+ 6ba:	e8 4b fc ff ff       	call   30a <sbrk>
   if(p == (char*)-1)
- 68f:	83 f8 ff             	cmp    $0xffffffff,%eax
- 692:	74 18                	je     6ac <malloc+0x8c>
+ 6bf:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 6c2:	74 18                	je     6dc <malloc+0x8c>
   hp->s.size = nu;
- 694:	89 78 04             	mov    %edi,0x4(%eax)
+ 6c4:	89 78 04             	mov    %edi,0x4(%eax)
   free((void*)(hp + 1));
- 697:	83 c0 08             	add    $0x8,%eax
- 69a:	89 04 24             	mov    %eax,(%esp)
- 69d:	e8 ee fe ff ff       	call   590 <free>
+ 6c7:	83 c0 08             	add    $0x8,%eax
+ 6ca:	89 04 24             	mov    %eax,(%esp)
+ 6cd:	e8 ee fe ff ff       	call   5c0 <free>
   return freep;
- 6a2:	8b 15 90 09 00 00    	mov    0x990,%edx
+ 6d2:	8b 15 cc 09 00 00    	mov    0x9cc,%edx
       if((p = morecore(nunits)) == 0)
- 6a8:	85 d2                	test   %edx,%edx
- 6aa:	75 b4                	jne    660 <malloc+0x40>
+ 6d8:	85 d2                	test   %edx,%edx
+ 6da:	75 b4                	jne    690 <malloc+0x40>
         return 0;
- 6ac:	31 c0                	xor    %eax,%eax
- 6ae:	eb 20                	jmp    6d0 <malloc+0xb0>
+ 6dc:	31 c0                	xor    %eax,%eax
+ 6de:	eb 20                	jmp    700 <malloc+0xb0>
     if(p->s.size >= nunits){
- 6b0:	89 d0                	mov    %edx,%eax
- 6b2:	89 da                	mov    %ebx,%edx
- 6b4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 6e0:	89 d0                	mov    %edx,%eax
+ 6e2:	89 da                	mov    %ebx,%edx
+ 6e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
       if(p->s.size == nunits)
- 6b8:	39 fe                	cmp    %edi,%esi
- 6ba:	74 1c                	je     6d8 <malloc+0xb8>
+ 6e8:	39 fe                	cmp    %edi,%esi
+ 6ea:	74 1c                	je     708 <malloc+0xb8>
         p->s.size -= nunits;
- 6bc:	29 f7                	sub    %esi,%edi
- 6be:	89 78 04             	mov    %edi,0x4(%eax)
+ 6ec:	29 f7                	sub    %esi,%edi
+ 6ee:	89 78 04             	mov    %edi,0x4(%eax)
         p += p->s.size;
- 6c1:	8d 04 f8             	lea    (%eax,%edi,8),%eax
+ 6f1:	8d 04 f8             	lea    (%eax,%edi,8),%eax
         p->s.size = nunits;
- 6c4:	89 70 04             	mov    %esi,0x4(%eax)
+ 6f4:	89 70 04             	mov    %esi,0x4(%eax)
       freep = prevp;
- 6c7:	89 15 90 09 00 00    	mov    %edx,0x990
+ 6f7:	89 15 cc 09 00 00    	mov    %edx,0x9cc
       return (void*)(p + 1);
- 6cd:	83 c0 08             	add    $0x8,%eax
+ 6fd:	83 c0 08             	add    $0x8,%eax
   }
 }
- 6d0:	83 c4 1c             	add    $0x1c,%esp
- 6d3:	5b                   	pop    %ebx
- 6d4:	5e                   	pop    %esi
- 6d5:	5f                   	pop    %edi
- 6d6:	5d                   	pop    %ebp
- 6d7:	c3                   	ret    
+ 700:	83 c4 1c             	add    $0x1c,%esp
+ 703:	5b                   	pop    %ebx
+ 704:	5e                   	pop    %esi
+ 705:	5f                   	pop    %edi
+ 706:	5d                   	pop    %ebp
+ 707:	c3                   	ret    
         prevp->s.ptr = p->s.ptr;
- 6d8:	8b 08                	mov    (%eax),%ecx
- 6da:	89 0a                	mov    %ecx,(%edx)
- 6dc:	eb e9                	jmp    6c7 <malloc+0xa7>
+ 708:	8b 08                	mov    (%eax),%ecx
+ 70a:	89 0a                	mov    %ecx,(%edx)
+ 70c:	eb e9                	jmp    6f7 <malloc+0xa7>
     base.s.ptr = freep = prevp = &base;
- 6de:	c7 05 90 09 00 00 94 	movl   $0x994,0x990
- 6e5:	09 00 00 
+ 70e:	c7 05 cc 09 00 00 d0 	movl   $0x9d0,0x9cc
+ 715:	09 00 00 
     base.s.size = 0;
- 6e8:	ba 94 09 00 00       	mov    $0x994,%edx
+ 718:	ba d0 09 00 00       	mov    $0x9d0,%edx
     base.s.ptr = freep = prevp = &base;
- 6ed:	c7 05 94 09 00 00 94 	movl   $0x994,0x994
- 6f4:	09 00 00 
+ 71d:	c7 05 d0 09 00 00 d0 	movl   $0x9d0,0x9d0
+ 724:	09 00 00 
     base.s.size = 0;
- 6f7:	c7 05 98 09 00 00 00 	movl   $0x0,0x998
- 6fe:	00 00 00 
- 701:	e9 46 ff ff ff       	jmp    64c <malloc+0x2c>
+ 727:	c7 05 d4 09 00 00 00 	movl   $0x0,0x9d4
+ 72e:	00 00 00 
+ 731:	e9 46 ff ff ff       	jmp    67c <malloc+0x2c>
diff --git a/hello.c b/hello.c
index 702f187..50e7b29 100644
--- a/hello.c
+++ b/hello.c
@@ -1,8 +1,11 @@
 #include "types.h"
 #include "user.h"
 
-int main( int argc, char **argv) {
+int main(int argc, char **argv)
+{
 
+	printf(1, "Waiting...\n");
+	wait(0);
 	printf(1, "Hello World!\n");
 	exit(0);
 }
diff --git a/hello.o b/hello.o
index 1e4d377..a903947 100644
Binary files a/hello.o and b/hello.o differ
diff --git a/hello.sym b/hello.sym
index 30a2ff2..6040663 100644
--- a/hello.sym
+++ b/hello.sym
@@ -1,7 +1,7 @@
 00000000 .text
-00000706 .rodata
-0000072c .eh_frame
-00000990 .bss
+00000736 .rodata
+00000768 .eh_frame
+000009cc .bss
 00000000 .comment
 00000000 .debug_aranges
 00000000 .debug_info
@@ -13,45 +13,45 @@
 00000000 hello.c
 00000000 ulib.c
 00000000 printf.c
-00000300 printint
-0000071b digits.1354
+00000330 printint
+00000757 digits.1354
 00000000 umalloc.c
-00000990 freep
-00000994 base
-00000030 strcpy
-000003a0 printf
-00000220 memmove
-0000029a mknod
-00000140 gets
-000002d2 getpid
-00000620 malloc
-000002e2 sleep
-00000262 pipe
-00000272 write
-000002aa fstat
-00000282 kill
-000002c2 chdir
-0000028a exec
-0000025a wait
-0000026a read
-000002a2 unlink
-0000024a fork
-000002da sbrk
-000002ea uptime
-00000990 __bss_start
-000000e0 memset
+000009cc freep
+000009d0 base
+00000060 strcpy
+000003d0 printf
+00000250 memmove
+000002ca mknod
+00000170 gets
+00000302 getpid
+00000650 malloc
+00000312 sleep
+00000292 pipe
+000002a2 write
+000002da fstat
+000002b2 kill
+000002f2 chdir
+000002ba exec
+0000028a wait
+0000029a read
+000002d2 unlink
+0000027a fork
+0000030a sbrk
+0000031a uptime
+000009cc __bss_start
+00000110 memset
 00000000 main
-00000060 strcmp
-000002ca dup
-000001a0 stat
-00000990 _edata
-0000099c _end
-000002b2 link
-00000252 exit
-000001f0 atoi
-000000b0 strlen
-00000292 open
-00000100 strchr
-000002ba mkdir
-0000027a close
-00000590 free
+00000090 strcmp
+000002fa dup
+000001d0 stat
+000009cc _edata
+000009d8 _end
+000002e2 link
+00000282 exit
+00000220 atoi
+000000e0 strlen
+000002c2 open
+00000130 strchr
+000002ea mkdir
+000002aa close
+000005c0 free
diff --git a/ide.o b/ide.o
index 9f12490..9d86db0 100644
Binary files a/ide.o and b/ide.o differ
diff --git a/init.asm b/init.asm
index 7cc5afb..a3a86aa 100644
--- a/init.asm
+++ b/init.asm
@@ -5,11 +5,11 @@ _init:     file format elf32-i386
 Disassembly of section .text:
 
 00000000 <main>:
+#include "fcntl.h"
 
-char *argv[] = { "sh", 0 };
+char *argv[] = {"sh", 0};
 
-int
-main(void)
+int main(void)
 {
    0:	55                   	push   %ebp
    1:	89 e5                	mov    %esp,%ebp
@@ -18,25 +18,27 @@ main(void)
    7:	83 ec 10             	sub    $0x10,%esp
   int pid, wpid;
 
-  if(open("console", O_RDWR) < 0){
+  if (open("console", O_RDWR) < 0)
    a:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
   11:	00 
   12:	c7 04 24 f6 07 00 00 	movl   $0x7f6,(%esp)
   19:	e8 64 03 00 00       	call   382 <open>
   1e:	85 c0                	test   %eax,%eax
-  20:	0f 88 ba 00 00 00    	js     e0 <main+0xe0>
+  20:	0f 88 c0 00 00 00    	js     e6 <main+0xe6>
+  {
     mknod("console", 1, 1);
     open("console", O_RDWR);
   }
-  dup(0);  // stdout
+  dup(0); // stdout
   26:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
   2d:	e8 88 03 00 00       	call   3ba <dup>
-  dup(0);  // stderr
+  dup(0); // stderr
   32:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
   39:	e8 7c 03 00 00       	call   3ba <dup>
   3e:	66 90                	xchg   %ax,%ax
 
-  for(;;){
+  for (;;)
+  {
     printf(1, "init: starting sh\n");
   40:	c7 44 24 04 fe 07 00 	movl   $0x7fe,0x4(%esp)
   47:	00 
@@ -44,73 +46,72 @@ main(void)
   4f:	e8 3c 04 00 00       	call   490 <printf>
     pid = fork();
   54:	e8 e1 02 00 00       	call   33a <fork>
-    if(pid < 0){
+    if (pid < 0)
   59:	85 c0                	test   %eax,%eax
     pid = fork();
   5b:	89 c3                	mov    %eax,%ebx
-    if(pid < 0){
-  5d:	78 2d                	js     8c <main+0x8c>
+    if (pid < 0)
+  5d:	78 33                	js     92 <main+0x92>
   5f:	90                   	nop
+    {
       printf(1, "init: fork failed\n");
       exit(0);
     }
-    if(pid == 0){
-  60:	74 4a                	je     ac <main+0xac>
+    if (pid == 0)
+  60:	74 50                	je     b2 <main+0xb2>
   62:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    {
       exec("sh", argv);
       printf(1, "init: exec sh failed\n");
       exit(0);
     }
-    while((wpid=wait()) >= 0 && wpid != pid)
-  68:	e8 dd 02 00 00       	call   34a <wait>
-  6d:	85 c0                	test   %eax,%eax
-  6f:	90                   	nop
-  70:	78 ce                	js     40 <main+0x40>
-  72:	39 d8                	cmp    %ebx,%eax
-  74:	74 ca                	je     40 <main+0x40>
+    while ((wpid = wait(0)) >= 0 && wpid != pid)
+  68:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  6f:	e8 d6 02 00 00       	call   34a <wait>
+  74:	85 c0                	test   %eax,%eax
+  76:	78 c8                	js     40 <main+0x40>
+  78:	39 d8                	cmp    %ebx,%eax
+  7a:	74 c4                	je     40 <main+0x40>
       printf(1, "zombie!\n");
-  76:	c7 44 24 04 3d 08 00 	movl   $0x83d,0x4(%esp)
-  7d:	00 
-  7e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-  85:	e8 06 04 00 00       	call   490 <printf>
-  8a:	eb dc                	jmp    68 <main+0x68>
+  7c:	c7 44 24 04 3d 08 00 	movl   $0x83d,0x4(%esp)
+  83:	00 
+  84:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+  8b:	e8 00 04 00 00       	call   490 <printf>
+  90:	eb d6                	jmp    68 <main+0x68>
       printf(1, "init: fork failed\n");
-  8c:	c7 44 24 04 11 08 00 	movl   $0x811,0x4(%esp)
-  93:	00 
-  94:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-  9b:	e8 f0 03 00 00       	call   490 <printf>
+  92:	c7 44 24 04 11 08 00 	movl   $0x811,0x4(%esp)
+  99:	00 
+  9a:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+  a1:	e8 ea 03 00 00       	call   490 <printf>
       exit(0);
-  a0:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-  a7:	e8 96 02 00 00       	call   342 <exit>
+  a6:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  ad:	e8 90 02 00 00       	call   342 <exit>
       exec("sh", argv);
-  ac:	c7 44 24 04 c4 0a 00 	movl   $0xac4,0x4(%esp)
-  b3:	00 
-  b4:	c7 04 24 24 08 00 00 	movl   $0x824,(%esp)
-  bb:	e8 ba 02 00 00       	call   37a <exec>
+  b2:	c7 44 24 04 c4 0a 00 	movl   $0xac4,0x4(%esp)
+  b9:	00 
+  ba:	c7 04 24 24 08 00 00 	movl   $0x824,(%esp)
+  c1:	e8 b4 02 00 00       	call   37a <exec>
       printf(1, "init: exec sh failed\n");
-  c0:	c7 44 24 04 27 08 00 	movl   $0x827,0x4(%esp)
-  c7:	00 
-  c8:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-  cf:	e8 bc 03 00 00       	call   490 <printf>
+  c6:	c7 44 24 04 27 08 00 	movl   $0x827,0x4(%esp)
+  cd:	00 
+  ce:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+  d5:	e8 b6 03 00 00       	call   490 <printf>
       exit(0);
-  d4:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-  db:	e8 62 02 00 00       	call   342 <exit>
+  da:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  e1:	e8 5c 02 00 00       	call   342 <exit>
     mknod("console", 1, 1);
-  e0:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
-  e7:	00 
-  e8:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
-  ef:	00 
-  f0:	c7 04 24 f6 07 00 00 	movl   $0x7f6,(%esp)
-  f7:	e8 8e 02 00 00       	call   38a <mknod>
+  e6:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+  ed:	00 
+  ee:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+  f5:	00 
+  f6:	c7 04 24 f6 07 00 00 	movl   $0x7f6,(%esp)
+  fd:	e8 88 02 00 00       	call   38a <mknod>
     open("console", O_RDWR);
-  fc:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
- 103:	00 
- 104:	c7 04 24 f6 07 00 00 	movl   $0x7f6,(%esp)
- 10b:	e8 72 02 00 00       	call   382 <open>
- 110:	e9 11 ff ff ff       	jmp    26 <main+0x26>
- 115:	66 90                	xchg   %ax,%ax
- 117:	66 90                	xchg   %ax,%ax
- 119:	66 90                	xchg   %ax,%ax
+ 102:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
+ 109:	00 
+ 10a:	c7 04 24 f6 07 00 00 	movl   $0x7f6,(%esp)
+ 111:	e8 6c 02 00 00       	call   382 <open>
+ 116:	e9 0b ff ff ff       	jmp    26 <main+0x26>
  11b:	66 90                	xchg   %ax,%ax
  11d:	66 90                	xchg   %ax,%ax
  11f:	90                   	nop
@@ -498,132 +499,106 @@ memmove(void *vdst, const void *vsrc, int n)
  339:	c3                   	ret    
 
 0000033a <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
  33a:	b8 01 00 00 00       	mov    $0x1,%eax
  33f:	cd 40                	int    $0x40
  341:	c3                   	ret    
 
 00000342 <exit>:
-SYSCALL(exit)
  342:	b8 02 00 00 00       	mov    $0x2,%eax
  347:	cd 40                	int    $0x40
  349:	c3                   	ret    
 
 0000034a <wait>:
-SYSCALL(wait)
  34a:	b8 03 00 00 00       	mov    $0x3,%eax
  34f:	cd 40                	int    $0x40
  351:	c3                   	ret    
 
 00000352 <pipe>:
-SYSCALL(pipe)
  352:	b8 04 00 00 00       	mov    $0x4,%eax
  357:	cd 40                	int    $0x40
  359:	c3                   	ret    
 
 0000035a <read>:
-SYSCALL(read)
  35a:	b8 05 00 00 00       	mov    $0x5,%eax
  35f:	cd 40                	int    $0x40
  361:	c3                   	ret    
 
 00000362 <write>:
-SYSCALL(write)
  362:	b8 10 00 00 00       	mov    $0x10,%eax
  367:	cd 40                	int    $0x40
  369:	c3                   	ret    
 
 0000036a <close>:
-SYSCALL(close)
  36a:	b8 15 00 00 00       	mov    $0x15,%eax
  36f:	cd 40                	int    $0x40
  371:	c3                   	ret    
 
 00000372 <kill>:
-SYSCALL(kill)
  372:	b8 06 00 00 00       	mov    $0x6,%eax
  377:	cd 40                	int    $0x40
  379:	c3                   	ret    
 
 0000037a <exec>:
-SYSCALL(exec)
  37a:	b8 07 00 00 00       	mov    $0x7,%eax
  37f:	cd 40                	int    $0x40
  381:	c3                   	ret    
 
 00000382 <open>:
-SYSCALL(open)
  382:	b8 0f 00 00 00       	mov    $0xf,%eax
  387:	cd 40                	int    $0x40
  389:	c3                   	ret    
 
 0000038a <mknod>:
-SYSCALL(mknod)
  38a:	b8 11 00 00 00       	mov    $0x11,%eax
  38f:	cd 40                	int    $0x40
  391:	c3                   	ret    
 
 00000392 <unlink>:
-SYSCALL(unlink)
  392:	b8 12 00 00 00       	mov    $0x12,%eax
  397:	cd 40                	int    $0x40
  399:	c3                   	ret    
 
 0000039a <fstat>:
-SYSCALL(fstat)
  39a:	b8 08 00 00 00       	mov    $0x8,%eax
  39f:	cd 40                	int    $0x40
  3a1:	c3                   	ret    
 
 000003a2 <link>:
-SYSCALL(link)
  3a2:	b8 13 00 00 00       	mov    $0x13,%eax
  3a7:	cd 40                	int    $0x40
  3a9:	c3                   	ret    
 
 000003aa <mkdir>:
-SYSCALL(mkdir)
  3aa:	b8 14 00 00 00       	mov    $0x14,%eax
  3af:	cd 40                	int    $0x40
  3b1:	c3                   	ret    
 
 000003b2 <chdir>:
-SYSCALL(chdir)
  3b2:	b8 09 00 00 00       	mov    $0x9,%eax
  3b7:	cd 40                	int    $0x40
  3b9:	c3                   	ret    
 
 000003ba <dup>:
-SYSCALL(dup)
  3ba:	b8 0a 00 00 00       	mov    $0xa,%eax
  3bf:	cd 40                	int    $0x40
  3c1:	c3                   	ret    
 
 000003c2 <getpid>:
-SYSCALL(getpid)
  3c2:	b8 0b 00 00 00       	mov    $0xb,%eax
  3c7:	cd 40                	int    $0x40
  3c9:	c3                   	ret    
 
 000003ca <sbrk>:
-SYSCALL(sbrk)
  3ca:	b8 0c 00 00 00       	mov    $0xc,%eax
  3cf:	cd 40                	int    $0x40
  3d1:	c3                   	ret    
 
 000003d2 <sleep>:
-SYSCALL(sleep)
  3d2:	b8 0d 00 00 00       	mov    $0xd,%eax
  3d7:	cd 40                	int    $0x40
  3d9:	c3                   	ret    
 
 000003da <uptime>:
-SYSCALL(uptime)
  3da:	b8 0e 00 00 00       	mov    $0xe,%eax
  3df:	cd 40                	int    $0x40
  3e1:	c3                   	ret    
diff --git a/init.c b/init.c
index dd46de4..b4cf955 100644
--- a/init.c
+++ b/init.c
@@ -5,33 +5,36 @@
 #include "user.h"
 #include "fcntl.h"
 
-char *argv[] = { "sh", 0 };
+char *argv[] = {"sh", 0};
 
-int
-main(void)
+int main(void)
 {
   int pid, wpid;
 
-  if(open("console", O_RDWR) < 0){
+  if (open("console", O_RDWR) < 0)
+  {
     mknod("console", 1, 1);
     open("console", O_RDWR);
   }
-  dup(0);  // stdout
-  dup(0);  // stderr
+  dup(0); // stdout
+  dup(0); // stderr
 
-  for(;;){
+  for (;;)
+  {
     printf(1, "init: starting sh\n");
     pid = fork();
-    if(pid < 0){
+    if (pid < 0)
+    {
       printf(1, "init: fork failed\n");
       exit(0);
     }
-    if(pid == 0){
+    if (pid == 0)
+    {
       exec("sh", argv);
       printf(1, "init: exec sh failed\n");
       exit(0);
     }
-    while((wpid=wait()) >= 0 && wpid != pid)
+    while ((wpid = wait(0)) >= 0 && wpid != pid)
       printf(1, "zombie!\n");
   }
 }
diff --git a/init.o b/init.o
index 6d15620..bfc015b 100644
Binary files a/init.o and b/init.o differ
diff --git a/ioapic.o b/ioapic.o
index e30cc5a..20496a1 100644
Binary files a/ioapic.o and b/ioapic.o differ
diff --git a/kalloc.o b/kalloc.o
index 60bb217..470c707 100644
Binary files a/kalloc.o and b/kalloc.o differ
diff --git a/kbd.o b/kbd.o
index b30e5e6..246ac7a 100644
Binary files a/kbd.o and b/kbd.o differ
diff --git a/kernel b/kernel
index ab45472..1aa714c 100755
Binary files a/kernel and b/kernel differ
diff --git a/kernel.asm b/kernel.asm
index e08b9f1..6b1eee2 100644
--- a/kernel.asm
+++ b/kernel.asm
@@ -11,41 +11,16 @@ Disassembly of section .text:
 8010000b:	e4                   	.byte 0xe4
 
 8010000c <entry>:
-
-# Entering xv6 on boot processor, with paging off.
-.globl entry
-entry:
-  # Turn on page size extension for 4Mbyte pages
-  movl    %cr4, %eax
 8010000c:	0f 20 e0             	mov    %cr4,%eax
-  orl     $(CR4_PSE), %eax
 8010000f:	83 c8 10             	or     $0x10,%eax
-  movl    %eax, %cr4
 80100012:	0f 22 e0             	mov    %eax,%cr4
-  # Set page directory
-  movl    $(V2P_WO(entrypgdir)), %eax
 80100015:	b8 00 90 10 00       	mov    $0x109000,%eax
-  movl    %eax, %cr3
 8010001a:	0f 22 d8             	mov    %eax,%cr3
-  # Turn on paging.
-  movl    %cr0, %eax
 8010001d:	0f 20 c0             	mov    %cr0,%eax
-  orl     $(CR0_PG|CR0_WP), %eax
 80100020:	0d 00 00 01 80       	or     $0x80010000,%eax
-  movl    %eax, %cr0
 80100025:	0f 22 c0             	mov    %eax,%cr0
-
-  # Set up the stack pointer.
-  movl $(stack + KSTACKSIZE), %esp
 80100028:	bc c0 b5 10 80       	mov    $0x8010b5c0,%esp
-
-  # Jump to main(), and switch to executing at
-  # high addresses. The indirect call is needed because
-  # the assembler produces a PC-relative instruction
-  # for a direct jump.
-  mov $main, %eax
 8010002d:	b8 f0 2d 10 80       	mov    $0x80102df0,%eax
-  jmp *%eax
 80100032:	ff e0                	jmp    *%eax
 80100034:	66 90                	xchg   %ax,%ax
 80100036:	66 90                	xchg   %ax,%ax
@@ -74,7 +49,7 @@ binit(void)
 {
 80100049:	83 ec 14             	sub    $0x14,%esp
   initlock(&bcache.lock, "bcache");
-8010004c:	c7 44 24 04 20 6c 10 	movl   $0x80106c20,0x4(%esp)
+8010004c:	c7 44 24 04 40 6c 10 	movl   $0x80106c40,0x4(%esp)
 80100053:	80 
 80100054:	c7 04 24 c0 b5 10 80 	movl   $0x8010b5c0,(%esp)
 8010005b:	e8 10 40 00 00       	call   80104070 <initlock>
@@ -99,7 +74,7 @@ binit(void)
 8010008a:	c7 43 50 bc fc 10 80 	movl   $0x8010fcbc,0x50(%ebx)
     initsleeplock(&b->lock, "buffer");
 80100091:	89 04 24             	mov    %eax,(%esp)
-80100094:	c7 44 24 04 27 6c 10 	movl   $0x80106c27,0x4(%esp)
+80100094:	c7 44 24 04 47 6c 10 	movl   $0x80106c47,0x4(%esp)
 8010009b:	80 
 8010009c:	e8 9f 3e 00 00       	call   80103f40 <initsleeplock>
     bcache.head.next->prev = b;
@@ -210,7 +185,7 @@ bread(uint dev, uint blockno)
 80100186:	5d                   	pop    %ebp
 80100187:	c3                   	ret    
   panic("bget: no buffers");
-80100188:	c7 04 24 2e 6c 10 80 	movl   $0x80106c2e,(%esp)
+80100188:	c7 04 24 4e 6c 10 80 	movl   $0x80106c4e,(%esp)
 8010018f:	e8 cc 01 00 00       	call   80100360 <panic>
 80100194:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 8010019a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
@@ -244,7 +219,7 @@ bwrite(struct buf *b)
   iderw(b);
 801001c4:	e9 57 1f 00 00       	jmp    80102120 <iderw>
     panic("bwrite");
-801001c9:	c7 04 24 3f 6c 10 80 	movl   $0x80106c3f,(%esp)
+801001c9:	c7 04 24 5f 6c 10 80 	movl   $0x80106c5f,(%esp)
 801001d0:	e8 8b 01 00 00       	call   80100360 <panic>
 801001d5:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 801001d9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
@@ -313,7 +288,7 @@ brelse(struct buf *b)
   release(&bcache.lock);
 80100250:	e9 fb 3f 00 00       	jmp    80104250 <release>
     panic("brelse");
-80100255:	c7 04 24 46 6c 10 80 	movl   $0x80106c46,(%esp)
+80100255:	c7 04 24 66 6c 10 80 	movl   $0x80106c66,(%esp)
 8010025c:	e8 ff 00 00 00       	call   80100360 <panic>
 80100261:	66 90                	xchg   %ax,%ax
 80100263:	66 90                	xchg   %ax,%ax
@@ -471,7 +446,7 @@ cli(void)
   cprintf("lapicid %d: panic: ", lapicid());
 80100376:	e8 e5 23 00 00       	call   80102760 <lapicid>
 8010037b:	8d 75 f8             	lea    -0x8(%ebp),%esi
-8010037e:	c7 04 24 4d 6c 10 80 	movl   $0x80106c4d,(%esp)
+8010037e:	c7 04 24 6d 6c 10 80 	movl   $0x80106c6d,(%esp)
 80100385:	89 44 24 04          	mov    %eax,0x4(%esp)
 80100389:	e8 c2 02 00 00       	call   80100650 <cprintf>
   cprintf(s);
@@ -479,7 +454,7 @@ cli(void)
 80100391:	89 04 24             	mov    %eax,(%esp)
 80100394:	e8 b7 02 00 00       	call   80100650 <cprintf>
   cprintf("\n");
-80100399:	c7 04 24 97 75 10 80 	movl   $0x80107597,(%esp)
+80100399:	c7 04 24 b7 75 10 80 	movl   $0x801075b7,(%esp)
 801003a0:	e8 ab 02 00 00       	call   80100650 <cprintf>
   getcallerpcs(&s, pcs);
 801003a5:	8d 45 08             	lea    0x8(%ebp),%eax
@@ -490,7 +465,7 @@ cli(void)
     cprintf(" %p", pcs[i]);
 801003b8:	8b 03                	mov    (%ebx),%eax
 801003ba:	83 c3 04             	add    $0x4,%ebx
-801003bd:	c7 04 24 61 6c 10 80 	movl   $0x80106c61,(%esp)
+801003bd:	c7 04 24 81 6c 10 80 	movl   $0x80106c81,(%esp)
 801003c4:	89 44 24 04          	mov    %eax,0x4(%esp)
 801003c8:	e8 83 02 00 00       	call   80100650 <cprintf>
   for(i=0; i<10; i++)
@@ -523,7 +498,7 @@ cli(void)
 80100400:	0f 84 ac 00 00 00    	je     801004b2 <consputc+0xd2>
     uartputc(c);
 80100406:	89 04 24             	mov    %eax,(%esp)
-80100409:	e8 72 53 00 00       	call   80105780 <uartputc>
+80100409:	e8 a2 53 00 00       	call   801057b0 <uartputc>
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
 8010040e:	bf d4 03 00 00       	mov    $0x3d4,%edi
 80100413:	b8 0e 00 00 00       	mov    $0xe,%eax
@@ -595,11 +570,11 @@ cli(void)
 801004b1:	c3                   	ret    
     uartputc('\b'); uartputc(' '); uartputc('\b');
 801004b2:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
-801004b9:	e8 c2 52 00 00       	call   80105780 <uartputc>
+801004b9:	e8 f2 52 00 00       	call   801057b0 <uartputc>
 801004be:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
-801004c5:	e8 b6 52 00 00       	call   80105780 <uartputc>
+801004c5:	e8 e6 52 00 00       	call   801057b0 <uartputc>
 801004ca:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
-801004d1:	e8 aa 52 00 00       	call   80105780 <uartputc>
+801004d1:	e8 da 52 00 00       	call   801057b0 <uartputc>
 801004d6:	e9 33 ff ff ff       	jmp    8010040e <consputc+0x2e>
     memmove(crt, crt+80, sizeof(crt[0])*23*80);
 801004db:	c7 44 24 08 60 0e 00 	movl   $0xe60,0x8(%esp)
@@ -627,7 +602,7 @@ cli(void)
 80100520:	be 07 00 00 00       	mov    $0x7,%esi
 80100525:	e9 59 ff ff ff       	jmp    80100483 <consputc+0xa3>
     panic("pos under/overflow");
-8010052a:	c7 04 24 65 6c 10 80 	movl   $0x80106c65,(%esp)
+8010052a:	c7 04 24 85 6c 10 80 	movl   $0x80106c85,(%esp)
 80100531:	e8 2a fe ff ff       	call   80100360 <panic>
     if(pos > 0) --pos;
 80100536:	85 c9                	test   %ecx,%ecx
@@ -674,7 +649,7 @@ cli(void)
 80100592:	31 d2                	xor    %edx,%edx
 80100594:	f7 f6                	div    %esi
 80100596:	8d 59 01             	lea    0x1(%ecx),%ebx
-80100599:	0f b6 92 90 6c 10 80 	movzbl -0x7fef9370(%edx),%edx
+80100599:	0f b6 92 b0 6c 10 80 	movzbl -0x7fef9350(%edx),%edx
   }while((x /= base) != 0);
 801005a0:	85 c0                	test   %eax,%eax
     buf[i++] = digits[x % base];
@@ -890,7 +865,7 @@ consolewrite(struct inode *ip, char *buf, int n)
 8010075b:	8b 36                	mov    (%esi),%esi
 8010075d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
         s = "(null)";
-80100760:	b8 78 6c 10 80       	mov    $0x80106c78,%eax
+80100760:	b8 98 6c 10 80       	mov    $0x80106c98,%eax
 80100765:	85 f6                	test   %esi,%esi
 80100767:	0f 44 f0             	cmove  %eax,%esi
       for(; *s; s++)
@@ -914,7 +889,7 @@ consolewrite(struct inode *ip, char *buf, int n)
 80100797:	e8 44 3a 00 00       	call   801041e0 <acquire>
 8010079c:	e9 c8 fe ff ff       	jmp    80100669 <cprintf+0x19>
     panic("null fmt");
-801007a1:	c7 04 24 7f 6c 10 80 	movl   $0x80106c7f,(%esp)
+801007a1:	c7 04 24 9f 6c 10 80 	movl   $0x80106c9f,(%esp)
 801007a8:	e8 b3 fb ff ff       	call   80100360 <panic>
 801007ad:	8d 76 00             	lea    0x0(%esi),%esi
 
@@ -1077,7 +1052,7 @@ consoleinit(void)
 80100951:	89 e5                	mov    %esp,%ebp
 80100953:	83 ec 18             	sub    $0x18,%esp
   initlock(&cons.lock, "console");
-80100956:	c7 44 24 04 88 6c 10 	movl   $0x80106c88,0x4(%esp)
+80100956:	c7 44 24 04 a8 6c 10 	movl   $0x80106ca8,0x4(%esp)
 8010095d:	80 
 8010095e:	c7 04 24 20 a5 10 80 	movl   $0x8010a520,(%esp)
 80100965:	e8 06 37 00 00       	call   80104070 <initlock>
@@ -1185,7 +1160,7 @@ exec(char *path, char **argv)
 80100a27:	45 4c 46 
 80100a2a:	75 d4                	jne    80100a00 <exec+0x60>
   if((pgdir = setupkvm()) == 0)
-80100a2c:	e8 3f 5f 00 00       	call   80106970 <setupkvm>
+80100a2c:	e8 6f 5f 00 00       	call   801069a0 <setupkvm>
 80100a31:	85 c0                	test   %eax,%eax
 80100a33:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
 80100a39:	74 c5                	je     80100a00 <exec+0x60>
@@ -1232,7 +1207,7 @@ exec(char *path, char **argv)
 80100ac5:	89 44 24 04          	mov    %eax,0x4(%esp)
 80100ac9:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
 80100acf:	89 04 24             	mov    %eax,(%esp)
-80100ad2:	e8 09 5d 00 00       	call   801067e0 <allocuvm>
+80100ad2:	e8 39 5d 00 00       	call   80106810 <allocuvm>
 80100ad7:	85 c0                	test   %eax,%eax
 80100ad9:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
 80100adf:	74 3f                	je     80100b20 <exec+0x180>
@@ -1249,13 +1224,13 @@ exec(char *path, char **argv)
 80100b06:	8b 95 08 ff ff ff    	mov    -0xf8(%ebp),%edx
 80100b0c:	89 04 24             	mov    %eax,(%esp)
 80100b0f:	89 54 24 0c          	mov    %edx,0xc(%esp)
-80100b13:	e8 08 5c 00 00       	call   80106720 <loaduvm>
+80100b13:	e8 38 5c 00 00       	call   80106750 <loaduvm>
 80100b18:	85 c0                	test   %eax,%eax
 80100b1a:	0f 89 40 ff ff ff    	jns    80100a60 <exec+0xc0>
     freevm(pgdir);
 80100b20:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
 80100b26:	89 04 24             	mov    %eax,(%esp)
-80100b29:	e8 c2 5d 00 00       	call   801068f0 <freevm>
+80100b29:	e8 f2 5d 00 00       	call   80106920 <freevm>
 80100b2e:	e9 cd fe ff ff       	jmp    80100a00 <exec+0x60>
   iunlockput(ip);
 80100b33:	89 1c 24             	mov    %ebx,(%esp)
@@ -1274,21 +1249,21 @@ exec(char *path, char **argv)
 80100b5f:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
 80100b65:	89 54 24 08          	mov    %edx,0x8(%esp)
 80100b69:	89 04 24             	mov    %eax,(%esp)
-80100b6c:	e8 6f 5c 00 00       	call   801067e0 <allocuvm>
+80100b6c:	e8 9f 5c 00 00       	call   80106810 <allocuvm>
 80100b71:	85 c0                	test   %eax,%eax
 80100b73:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
 80100b79:	75 33                	jne    80100bae <exec+0x20e>
     freevm(pgdir);
 80100b7b:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
 80100b81:	89 04 24             	mov    %eax,(%esp)
-80100b84:	e8 67 5d 00 00       	call   801068f0 <freevm>
+80100b84:	e8 97 5d 00 00       	call   80106920 <freevm>
   return -1;
 80100b89:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 80100b8e:	e9 7f fe ff ff       	jmp    80100a12 <exec+0x72>
     end_op();
 80100b93:	e8 e8 1f 00 00       	call   80102b80 <end_op>
     cprintf("exec: fail\n");
-80100b98:	c7 04 24 a1 6c 10 80 	movl   $0x80106ca1,(%esp)
+80100b98:	c7 04 24 c1 6c 10 80 	movl   $0x80106cc1,(%esp)
 80100b9f:	e8 ac fa ff ff       	call   80100650 <cprintf>
     return -1;
 80100ba4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
@@ -1300,7 +1275,7 @@ exec(char *path, char **argv)
 80100bbb:	89 44 24 04          	mov    %eax,0x4(%esp)
 80100bbf:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
 80100bc5:	89 04 24             	mov    %eax,(%esp)
-80100bc8:	e8 53 5e 00 00       	call   80106a20 <clearpteu>
+80100bc8:	e8 83 5e 00 00       	call   80106a50 <clearpteu>
   for(argc = 0; argv[argc]; argc++) {
 80100bcd:	8b 45 0c             	mov    0xc(%ebp),%eax
 80100bd0:	8b 00                	mov    (%eax),%eax
@@ -1340,7 +1315,7 @@ exec(char *path, char **argv)
 80100c24:	89 44 24 08          	mov    %eax,0x8(%esp)
 80100c28:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
 80100c2e:	89 04 24             	mov    %eax,(%esp)
-80100c31:	e8 4a 5f 00 00       	call   80106b80 <copyout>
+80100c31:	e8 7a 5f 00 00       	call   80106bb0 <copyout>
 80100c36:	85 c0                	test   %eax,%eax
 80100c38:	0f 88 3d ff ff ff    	js     80100b7b <exec+0x1db>
   for(argc = 0; argv[argc]; argc++) {
@@ -1381,7 +1356,7 @@ exec(char *path, char **argv)
   ustack[2] = sp - (argc+1)*4;  // argv pointer
 80100c9e:	89 95 60 ff ff ff    	mov    %edx,-0xa0(%ebp)
   if(copyout(pgdir, sp, ustack, (3+argc+1)*4) < 0)
-80100ca4:	e8 d7 5e 00 00       	call   80106b80 <copyout>
+80100ca4:	e8 07 5f 00 00       	call   80106bb0 <copyout>
 80100ca9:	85 c0                	test   %eax,%eax
 80100cab:	0f 88 ca fe ff ff    	js     80100b7b <exec+0x1db>
   for(last=s=path; *s; s++)
@@ -1431,10 +1406,10 @@ exec(char *path, char **argv)
 80100d19:	89 58 44             	mov    %ebx,0x44(%eax)
   switchuvm(curproc);
 80100d1c:	89 3c 24             	mov    %edi,(%esp)
-80100d1f:	e8 6c 58 00 00       	call   80106590 <switchuvm>
+80100d1f:	e8 9c 58 00 00       	call   801065c0 <switchuvm>
   freevm(oldpgdir);
 80100d24:	89 34 24             	mov    %esi,(%esp)
-80100d27:	e8 c4 5b 00 00       	call   801068f0 <freevm>
+80100d27:	e8 f4 5b 00 00       	call   80106920 <freevm>
   return 0;
 80100d2c:	31 c0                	xor    %eax,%eax
 80100d2e:	e9 df fc ff ff       	jmp    80100a12 <exec+0x72>
@@ -1460,7 +1435,7 @@ fileinit(void)
 80100d51:	89 e5                	mov    %esp,%ebp
 80100d53:	83 ec 18             	sub    $0x18,%esp
   initlock(&ftable.lock, "ftable");
-80100d56:	c7 44 24 04 ad 6c 10 	movl   $0x80106cad,0x4(%esp)
+80100d56:	c7 44 24 04 cd 6c 10 	movl   $0x80106ccd,0x4(%esp)
 80100d5d:	80 
 80100d5e:	c7 04 24 c0 ff 10 80 	movl   $0x8010ffc0,(%esp)
 80100d65:	e8 06 33 00 00       	call   80104070 <initlock>
@@ -1566,7 +1541,7 @@ filedup(struct file *f)
 80100e15:	5d                   	pop    %ebp
 80100e16:	c3                   	ret    
     panic("filedup");
-80100e17:	c7 04 24 b4 6c 10 80 	movl   $0x80106cb4,(%esp)
+80100e17:	c7 04 24 d4 6c 10 80 	movl   $0x80106cd4,(%esp)
 80100e1e:	e8 3d f5 ff ff       	call   80100360 <panic>
 80100e23:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 80100e29:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
@@ -1665,7 +1640,7 @@ fileclose(struct file *f)
     end_op();
 80100ed7:	e9 a4 1c 00 00       	jmp    80102b80 <end_op>
     panic("fileclose");
-80100edc:	c7 04 24 bc 6c 10 80 	movl   $0x80106cbc,(%esp)
+80100edc:	c7 04 24 dc 6c 10 80 	movl   $0x80106cdc,(%esp)
 80100ee3:	e8 78 f4 ff ff       	call   80100360 <panic>
 80100ee8:	90                   	nop
 80100ee9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -1799,7 +1774,7 @@ fileread(struct file *f, char *addr, int n)
 80100fc0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 80100fc5:	eb d8                	jmp    80100f9f <fileread+0x5f>
   panic("fileread");
-80100fc7:	c7 04 24 c6 6c 10 80 	movl   $0x80106cc6,(%esp)
+80100fc7:	c7 04 24 e6 6c 10 80 	movl   $0x80106ce6,(%esp)
 80100fce:	e8 8d f3 ff ff       	call   80100360 <panic>
 80100fd3:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 80100fd9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
@@ -1951,10 +1926,10 @@ filewrite(struct file *f, char *addr, int n)
     return pipewrite(f->pipe, addr, n);
 801010dc:	e9 0f 22 00 00       	jmp    801032f0 <pipewrite>
         panic("short filewrite");
-801010e1:	c7 04 24 cf 6c 10 80 	movl   $0x80106ccf,(%esp)
+801010e1:	c7 04 24 ef 6c 10 80 	movl   $0x80106cef,(%esp)
 801010e8:	e8 73 f2 ff ff       	call   80100360 <panic>
   panic("filewrite");
-801010ed:	c7 04 24 d5 6c 10 80 	movl   $0x80106cd5,(%esp)
+801010ed:	c7 04 24 f5 6c 10 80 	movl   $0x80106cf5,(%esp)
 801010f4:	e8 67 f2 ff ff       	call   80100360 <panic>
 801010f9:	66 90                	xchg   %ax,%ax
 801010fb:	66 90                	xchg   %ax,%ax
@@ -2026,7 +2001,7 @@ bfree(int dev, uint b)
 80101163:	5d                   	pop    %ebp
 80101164:	c3                   	ret    
     panic("freeing free block");
-80101165:	c7 04 24 df 6c 10 80 	movl   $0x80106cdf,(%esp)
+80101165:	c7 04 24 ff 6c 10 80 	movl   $0x80106cff,(%esp)
 8010116c:	e8 ef f1 ff ff       	call   80100360 <panic>
 80101171:	eb 0d                	jmp    80101180 <balloc>
 80101173:	90                   	nop
@@ -2109,7 +2084,7 @@ bfree(int dev, uint b)
 80101219:	3b 05 c0 09 11 80    	cmp    0x801109c0,%eax
 8010121f:	0f 82 7b ff ff ff    	jb     801011a0 <balloc+0x20>
   panic("balloc: out of blocks");
-80101225:	c7 04 24 f2 6c 10 80 	movl   $0x80106cf2,(%esp)
+80101225:	c7 04 24 12 6d 10 80 	movl   $0x80106d12,(%esp)
 8010122c:	e8 2f f1 ff ff       	call   80100360 <panic>
 80101231:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
         bp->data[bi/8] |= m;  // Mark block in use.
@@ -2264,7 +2239,7 @@ iget(uint dev, uint inum)
 8010134b:	5d                   	pop    %ebp
 8010134c:	c3                   	ret    
     panic("iget: no inodes");
-8010134d:	c7 04 24 08 6d 10 80 	movl   $0x80106d08,(%esp)
+8010134d:	c7 04 24 28 6d 10 80 	movl   $0x80106d28,(%esp)
 80101354:	e8 07 f0 ff ff       	call   80100360 <panic>
 80101359:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
@@ -2370,7 +2345,7 @@ bmap(struct inode *ip, uint bn)
 801013ff:	89 83 8c 00 00 00    	mov    %eax,0x8c(%ebx)
 80101405:	eb 93                	jmp    8010139a <bmap+0x3a>
   panic("bmap: out of range");
-80101407:	c7 04 24 18 6d 10 80 	movl   $0x80106d18,(%esp)
+80101407:	c7 04 24 38 6d 10 80 	movl   $0x80106d38,(%esp)
 8010140e:	e8 4d ef ff ff       	call   80100360 <panic>
 80101413:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 80101419:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
@@ -2421,14 +2396,14 @@ bmap(struct inode *ip, uint bn)
 80101474:	bb 20 0a 11 80       	mov    $0x80110a20,%ebx
 80101479:	83 ec 24             	sub    $0x24,%esp
   initlock(&icache.lock, "icache");
-8010147c:	c7 44 24 04 2b 6d 10 	movl   $0x80106d2b,0x4(%esp)
+8010147c:	c7 44 24 04 4b 6d 10 	movl   $0x80106d4b,0x4(%esp)
 80101483:	80 
 80101484:	c7 04 24 e0 09 11 80 	movl   $0x801109e0,(%esp)
 8010148b:	e8 e0 2b 00 00       	call   80104070 <initlock>
     initsleeplock(&icache.inode[i].lock, "inode");
 80101490:	89 1c 24             	mov    %ebx,(%esp)
 80101493:	81 c3 90 00 00 00    	add    $0x90,%ebx
-80101499:	c7 44 24 04 32 6d 10 	movl   $0x80106d32,0x4(%esp)
+80101499:	c7 44 24 04 52 6d 10 	movl   $0x80106d52,0x4(%esp)
 801014a0:	80 
 801014a1:	e8 9a 2a 00 00       	call   80103f40 <initsleeplock>
   for(i = 0; i < NINODE; i++) {
@@ -2442,7 +2417,7 @@ bmap(struct inode *ip, uint bn)
 801014bc:	e8 5f ff ff ff       	call   80101420 <readsb>
   cprintf("sb: size %d nblocks %d ninodes %d nlog %d logstart %d\
 801014c1:	a1 d8 09 11 80       	mov    0x801109d8,%eax
-801014c6:	c7 04 24 98 6d 10 80 	movl   $0x80106d98,(%esp)
+801014c6:	c7 04 24 b8 6d 10 80 	movl   $0x80106db8,(%esp)
 801014cd:	89 44 24 1c          	mov    %eax,0x1c(%esp)
 801014d1:	a1 d4 09 11 80       	mov    0x801109d4,%eax
 801014d6:	89 44 24 18          	mov    %eax,0x18(%esp)
@@ -2553,7 +2528,7 @@ bmap(struct inode *ip, uint bn)
       return iget(dev, inum);
 801015dc:	e9 bf fc ff ff       	jmp    801012a0 <iget>
   panic("ialloc: no inodes");
-801015e1:	c7 04 24 38 6d 10 80 	movl   $0x80106d38,(%esp)
+801015e1:	c7 04 24 58 6d 10 80 	movl   $0x80106d58,(%esp)
 801015e8:	e8 73 ed ff ff       	call   80100360 <panic>
 801015ed:	8d 76 00             	lea    0x0(%esi),%esi
 
@@ -2724,10 +2699,10 @@ bmap(struct inode *ip, uint bn)
     if(ip->type == 0)
 80101764:	0f 85 76 ff ff ff    	jne    801016e0 <ilock+0x30>
       panic("ilock: no type");
-8010176a:	c7 04 24 50 6d 10 80 	movl   $0x80106d50,(%esp)
+8010176a:	c7 04 24 70 6d 10 80 	movl   $0x80106d70,(%esp)
 80101771:	e8 ea eb ff ff       	call   80100360 <panic>
     panic("ilock");
-80101776:	c7 04 24 4a 6d 10 80 	movl   $0x80106d4a,(%esp)
+80101776:	c7 04 24 6a 6d 10 80 	movl   $0x80106d6a,(%esp)
 8010177d:	e8 de eb ff ff       	call   80100360 <panic>
 80101782:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 80101789:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
@@ -2761,7 +2736,7 @@ bmap(struct inode *ip, uint bn)
   releasesleep(&ip->lock);
 801017be:	e9 1d 28 00 00       	jmp    80103fe0 <releasesleep>
     panic("iunlock");
-801017c3:	c7 04 24 5f 6d 10 80 	movl   $0x80106d5f,(%esp)
+801017c3:	c7 04 24 7f 6d 10 80 	movl   $0x80106d7f,(%esp)
 801017ca:	e8 91 eb ff ff       	call   80100360 <panic>
 801017cf:	90                   	nop
 
@@ -3379,10 +3354,10 @@ dirlookup(struct inode *dp, char *name, uint *poff)
 80101c60:	5d                   	pop    %ebp
 80101c61:	c3                   	ret    
       panic("dirlookup read");
-80101c62:	c7 04 24 79 6d 10 80 	movl   $0x80106d79,(%esp)
+80101c62:	c7 04 24 99 6d 10 80 	movl   $0x80106d99,(%esp)
 80101c69:	e8 f2 e6 ff ff       	call   80100360 <panic>
     panic("dirlookup not DIR");
-80101c6e:	c7 04 24 67 6d 10 80 	movl   $0x80106d67,(%esp)
+80101c6e:	c7 04 24 87 6d 10 80 	movl   $0x80106d87,(%esp)
 80101c75:	e8 e6 e6 ff ff       	call   80100360 <panic>
 80101c7a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
@@ -3674,10 +3649,10 @@ namex(char *path, int nameiparent, char *name)
 80101ede:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 80101ee3:	eb e9                	jmp    80101ece <dirlink+0xae>
       panic("dirlink read");
-80101ee5:	c7 04 24 88 6d 10 80 	movl   $0x80106d88,(%esp)
+80101ee5:	c7 04 24 a8 6d 10 80 	movl   $0x80106da8,(%esp)
 80101eec:	e8 6f e4 ff ff       	call   80100360 <panic>
     panic("dirlink");
-80101ef1:	c7 04 24 7e 73 10 80 	movl   $0x8010737e,(%esp)
+80101ef1:	c7 04 24 9e 73 10 80 	movl   $0x8010739e,(%esp)
 80101ef8:	e8 63 e4 ff ff       	call   80100360 <panic>
 80101efd:	8d 76 00             	lea    0x0(%esi),%esi
 
@@ -3823,10 +3798,10 @@ idestart(struct buf *b)
 80101fdd:	5d                   	pop    %ebp
 80101fde:	c3                   	ret    
     panic("incorrect blockno");
-80101fdf:	c7 04 24 f4 6d 10 80 	movl   $0x80106df4,(%esp)
+80101fdf:	c7 04 24 14 6e 10 80 	movl   $0x80106e14,(%esp)
 80101fe6:	e8 75 e3 ff ff       	call   80100360 <panic>
     panic("idestart");
-80101feb:	c7 04 24 eb 6d 10 80 	movl   $0x80106deb,(%esp)
+80101feb:	c7 04 24 0b 6e 10 80 	movl   $0x80106e0b,(%esp)
 80101ff2:	e8 69 e3 ff ff       	call   80100360 <panic>
 80101ff7:	89 f6                	mov    %esi,%esi
 80101ff9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
@@ -3837,7 +3812,7 @@ idestart(struct buf *b)
 80102001:	89 e5                	mov    %esp,%ebp
 80102003:	83 ec 18             	sub    $0x18,%esp
   initlock(&idelock, "ide");
-80102006:	c7 44 24 04 06 6e 10 	movl   $0x80106e06,0x4(%esp)
+80102006:	c7 44 24 04 26 6e 10 	movl   $0x80106e26,0x4(%esp)
 8010200d:	80 
 8010200e:	c7 04 24 80 a5 10 80 	movl   $0x8010a580,(%esp)
 80102015:	e8 56 20 00 00       	call   80104070 <initlock>
@@ -4076,13 +4051,13 @@ iderw(struct buf *b)
 801021d4:	e8 67 fd ff ff       	call   80101f40 <idestart>
 801021d9:	eb bb                	jmp    80102196 <iderw+0x76>
     panic("iderw: buf not locked");
-801021db:	c7 04 24 0a 6e 10 80 	movl   $0x80106e0a,(%esp)
+801021db:	c7 04 24 2a 6e 10 80 	movl   $0x80106e2a,(%esp)
 801021e2:	e8 79 e1 ff ff       	call   80100360 <panic>
     panic("iderw: ide disk 1 not present");
-801021e7:	c7 04 24 35 6e 10 80 	movl   $0x80106e35,(%esp)
+801021e7:	c7 04 24 55 6e 10 80 	movl   $0x80106e55,(%esp)
 801021ee:	e8 6d e1 ff ff       	call   80100360 <panic>
     panic("iderw: nothing to do");
-801021f3:	c7 04 24 20 6e 10 80 	movl   $0x80106e20,(%esp)
+801021f3:	c7 04 24 40 6e 10 80 	movl   $0x80106e40,(%esp)
 801021fa:	e8 61 e1 ff ff       	call   80100360 <panic>
 801021ff:	90                   	nop
 
@@ -4128,7 +4103,7 @@ ioapicinit(void)
 80102244:	39 c2                	cmp    %eax,%edx
 80102246:	74 12                	je     8010225a <ioapicinit+0x5a>
     cprintf("ioapicinit: id isn't equal to ioapicid; not a MP\n");
-80102248:	c7 04 24 54 6e 10 80 	movl   $0x80106e54,(%esp)
+80102248:	c7 04 24 74 6e 10 80 	movl   $0x80106e74,(%esp)
 8010224f:	e8 fc e3 ff ff       	call   80100650 <cprintf>
 80102254:	8b 1d 34 26 11 80    	mov    0x80112634,%ebx
 8010225a:	ba 10 00 00 00       	mov    $0x10,%edx
@@ -4301,7 +4276,7 @@ kfree(char *v)
 80102377:	e8 64 1e 00 00       	call   801041e0 <acquire>
 8010237c:	eb bb                	jmp    80102339 <kfree+0x49>
     panic("kfree");
-8010237e:	c7 04 24 86 6e 10 80 	movl   $0x80106e86,(%esp)
+8010237e:	c7 04 24 a6 6e 10 80 	movl   $0x80106ea6,(%esp)
 80102385:	e8 d6 df ff ff       	call   80100360 <panic>
 8010238a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
@@ -4352,7 +4327,7 @@ kfree(char *v)
 801023e5:	83 ec 10             	sub    $0x10,%esp
 801023e8:	8b 75 0c             	mov    0xc(%ebp),%esi
   initlock(&kmem.lock, "kmem");
-801023eb:	c7 44 24 04 8c 6e 10 	movl   $0x80106e8c,0x4(%esp)
+801023eb:	c7 44 24 04 ac 6e 10 	movl   $0x80106eac,0x4(%esp)
 801023f2:	80 
 801023f3:	c7 04 24 40 26 11 80 	movl   $0x80112640,(%esp)
 801023fa:	e8 71 1c 00 00       	call   80104070 <initlock>
@@ -4515,7 +4490,7 @@ kalloc(void)
 8010252f:	89 c1                	mov    %eax,%ecx
 80102531:	83 e1 7f             	and    $0x7f,%ecx
     shift &= ~(shiftcode[data] | E0ESC);
-80102534:	0f b6 81 c0 6f 10 80 	movzbl -0x7fef9040(%ecx),%eax
+80102534:	0f b6 81 e0 6f 10 80 	movzbl -0x7fef9020(%ecx),%eax
 8010253b:	83 c8 40             	or     $0x40,%eax
 8010253e:	0f b6 c0             	movzbl %al,%eax
 80102541:	f7 d0                	not    %eax
@@ -4543,9 +4518,9 @@ kalloc(void)
   }
 
   shift |= shiftcode[data];
-80102568:	0f b6 91 c0 6f 10 80 	movzbl -0x7fef9040(%ecx),%edx
+80102568:	0f b6 91 e0 6f 10 80 	movzbl -0x7fef9020(%ecx),%edx
   shift ^= togglecode[data];
-8010256f:	0f b6 81 c0 6e 10 80 	movzbl -0x7fef9140(%ecx),%eax
+8010256f:	0f b6 81 e0 6e 10 80 	movzbl -0x7fef9120(%ecx),%eax
   shift |= shiftcode[data];
 80102576:	09 da                	or     %ebx,%edx
   shift ^= togglecode[data];
@@ -4553,7 +4528,7 @@ kalloc(void)
   c = charcode[shift & (CTL | SHIFT)][data];
 8010257a:	89 d0                	mov    %edx,%eax
 8010257c:	83 e0 03             	and    $0x3,%eax
-8010257f:	8b 04 85 a0 6e 10 80 	mov    -0x7fef9160(,%eax,4),%eax
+8010257f:	8b 04 85 c0 6e 10 80 	mov    -0x7fef9140(,%eax,4),%eax
   shift ^= togglecode[data];
 80102586:	89 15 b4 a5 10 80    	mov    %edx,0x8010a5b4
   if(shift & CAPSLOCK){
@@ -5204,7 +5179,7 @@ write_head(void)
 80102a75:	83 ec 30             	sub    $0x30,%esp
 80102a78:	8b 5d 08             	mov    0x8(%ebp),%ebx
   initlock(&log.lock, "log");
-80102a7b:	c7 44 24 04 c0 70 10 	movl   $0x801070c0,0x4(%esp)
+80102a7b:	c7 44 24 04 e0 70 10 	movl   $0x801070e0,0x4(%esp)
 80102a82:	80 
 80102a83:	c7 04 24 80 26 11 80 	movl   $0x80112680,(%esp)
 80102a8a:	e8 e1 15 00 00       	call   80104070 <initlock>
@@ -5466,7 +5441,7 @@ commit()
 80102ca1:	5d                   	pop    %ebp
 80102ca2:	c3                   	ret    
     panic("log.committing");
-80102ca3:	c7 04 24 c4 70 10 80 	movl   $0x801070c4,(%esp)
+80102ca3:	c7 04 24 e4 70 10 80 	movl   $0x801070e4,(%esp)
 80102caa:	e8 b1 d6 ff ff       	call   80100360 <panic>
 80102caf:	90                   	nop
 
@@ -5552,10 +5527,10 @@ log_write(struct buf *b)
 80102d5b:	eb ca                	jmp    80102d27 <log_write+0x77>
 80102d5d:	8d 76 00             	lea    0x0(%esi),%esi
     panic("too big a transaction");
-80102d60:	c7 04 24 d3 70 10 80 	movl   $0x801070d3,(%esp)
+80102d60:	c7 04 24 f3 70 10 80 	movl   $0x801070f3,(%esp)
 80102d67:	e8 f4 d5 ff ff       	call   80100360 <panic>
     panic("log_write outside of trans");
-80102d6c:	c7 04 24 e9 70 10 80 	movl   $0x801070e9,(%esp)
+80102d6c:	c7 04 24 09 71 10 80 	movl   $0x80107109,(%esp)
 80102d73:	e8 e8 d5 ff ff       	call   80100360 <panic>
 80102d78:	66 90                	xchg   %ax,%ax
 80102d7a:	66 90                	xchg   %ax,%ax
@@ -5578,11 +5553,11 @@ mpmain(void)
 80102d8c:	89 c3                	mov    %eax,%ebx
 80102d8e:	e8 ed 08 00 00       	call   80103680 <cpuid>
 80102d93:	89 5c 24 08          	mov    %ebx,0x8(%esp)
-80102d97:	c7 04 24 04 71 10 80 	movl   $0x80107104,(%esp)
+80102d97:	c7 04 24 24 71 10 80 	movl   $0x80107124,(%esp)
 80102d9e:	89 44 24 04          	mov    %eax,0x4(%esp)
 80102da2:	e8 a9 d8 ff ff       	call   80100650 <cprintf>
   idtinit();       // load idt register
-80102da7:	e8 f4 26 00 00       	call   801054a0 <idtinit>
+80102da7:	e8 24 27 00 00       	call   801054d0 <idtinit>
   xchg(&(mycpu()->started), 1); // tell startothers() we're up
 80102dac:	e8 4f 08 00 00       	call   80103600 <mycpu>
 80102db1:	89 c2                	mov    %eax,%edx
@@ -5605,9 +5580,9 @@ xchg(volatile uint *addr, uint newval)
 80102dd1:	89 e5                	mov    %esp,%ebp
 80102dd3:	83 ec 08             	sub    $0x8,%esp
   switchkvm();
-80102dd6:	e8 95 37 00 00       	call   80106570 <switchkvm>
+80102dd6:	e8 c5 37 00 00       	call   801065a0 <switchkvm>
   seginit();
-80102ddb:	e8 d0 36 00 00       	call   801064b0 <seginit>
+80102ddb:	e8 00 37 00 00       	call   801064e0 <seginit>
   lapicinit();
 80102de0:	e8 8b f8 ff ff       	call   80102670 <lapicinit>
   mpmain();
@@ -5637,14 +5612,14 @@ xchg(volatile uint *addr, uint newval)
 80102e07:	c7 04 24 a8 55 11 80 	movl   $0x801155a8,(%esp)
 80102e0e:	e8 cd f5 ff ff       	call   801023e0 <kinit1>
   kvmalloc();      // kernel page table
-80102e13:	e8 e8 3b 00 00       	call   80106a00 <kvmalloc>
+80102e13:	e8 18 3c 00 00       	call   80106a30 <kvmalloc>
   mpinit();        // detect other processors
 80102e18:	e8 73 01 00 00       	call   80102f90 <mpinit>
 80102e1d:	8d 76 00             	lea    0x0(%esi),%esi
   lapicinit();     // interrupt controller
 80102e20:	e8 4b f8 ff ff       	call   80102670 <lapicinit>
   seginit();       // segment descriptors
-80102e25:	e8 86 36 00 00       	call   801064b0 <seginit>
+80102e25:	e8 b6 36 00 00       	call   801064e0 <seginit>
   picinit();       // disable pic
 80102e2a:	e8 21 03 00 00       	call   80103150 <picinit>
 80102e2f:	90                   	nop
@@ -5653,12 +5628,12 @@ xchg(volatile uint *addr, uint newval)
   consoleinit();   // console hardware
 80102e35:	e8 16 db ff ff       	call   80100950 <consoleinit>
   uartinit();      // serial port
-80102e3a:	e8 91 29 00 00       	call   801057d0 <uartinit>
+80102e3a:	e8 c1 29 00 00       	call   80105800 <uartinit>
 80102e3f:	90                   	nop
   pinit();         // process table
 80102e40:	e8 9b 07 00 00       	call   801035e0 <pinit>
   tvinit();        // trap vectors
-80102e45:	e8 b6 25 00 00       	call   80105400 <tvinit>
+80102e45:	e8 e6 25 00 00       	call   80105430 <tvinit>
   binit();         // buffer cache
 80102e4a:	e8 f1 d1 ff ff       	call   80100040 <binit>
 80102e4f:	90                   	nop
@@ -5767,7 +5742,7 @@ mpsearch1(uint a, int len)
     if(memcmp(p, "_MP_", 4) == 0 && sum(p, sizeof(struct mp)) == 0)
 80102f38:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
 80102f3f:	00 
-80102f40:	c7 44 24 04 18 71 10 	movl   $0x80107118,0x4(%esp)
+80102f40:	c7 44 24 04 38 71 10 	movl   $0x80107138,0x4(%esp)
 80102f47:	80 
 80102f48:	89 34 24             	mov    %esi,(%esp)
 80102f4b:	e8 a0 13 00 00       	call   801042f0 <memcmp>
@@ -5855,7 +5830,7 @@ mpinit(void)
   if(memcmp(conf, "PCMP", 4) != 0)
 80102ff3:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
 80102ffa:	00 
-80102ffb:	c7 44 24 04 1d 71 10 	movl   $0x8010711d,0x4(%esp)
+80102ffb:	c7 44 24 04 3d 71 10 	movl   $0x8010713d,0x4(%esp)
 80103002:	80 
 80103003:	89 04 24             	mov    %eax,(%esp)
   conf = (struct mpconf*) P2V((uint) mp->physaddr);
@@ -5919,7 +5894,7 @@ mpinit(void)
     switch(*p){
 80103087:	80 f9 04             	cmp    $0x4,%cl
 8010308a:	77 74                	ja     80103100 <mpinit+0x170>
-8010308c:	ff 24 8d 5c 71 10 80 	jmp    *-0x7fef8ea4(,%ecx,4)
+8010308c:	ff 24 8d 7c 71 10 80 	jmp    *-0x7fef8e84(,%ecx,4)
 80103093:	90                   	nop
 80103094:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
       p += sizeof(struct mpioapic);
@@ -6007,7 +5982,7 @@ mpinit(void)
   if((mp = mpsearch()) == 0 || mp->physaddr == 0)
 80103117:	0f 85 c5 fe ff ff    	jne    80102fe2 <mpinit+0x52>
     panic("Expect to run on an SMP");
-8010311d:	c7 04 24 22 71 10 80 	movl   $0x80107122,(%esp)
+8010311d:	c7 04 24 42 71 10 80 	movl   $0x80107142,(%esp)
 80103124:	e8 37 d2 ff ff       	call   80100360 <panic>
 80103129:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   if(conf->version != 1 && conf->version != 4)
@@ -6015,7 +5990,7 @@ mpinit(void)
 80103132:	0f 84 ed fe ff ff    	je     80103025 <mpinit+0x95>
 80103138:	eb e3                	jmp    8010311d <mpinit+0x18d>
     panic("Didn't find a suitable machine");
-8010313a:	c7 04 24 3c 71 10 80 	movl   $0x8010713c,(%esp)
+8010313a:	c7 04 24 5c 71 10 80 	movl   $0x8010715c,(%esp)
 80103141:	e8 1a d2 ff ff       	call   80100360 <panic>
 80103146:	66 90                	xchg   %ax,%ax
 80103148:	66 90                	xchg   %ax,%ax
@@ -6024,12 +5999,6 @@ mpinit(void)
 8010314e:	66 90                	xchg   %ax,%ax
 
 80103150 <picinit>:
-#define IO_PIC2         0xA0    // Slave (IRQs 8-15)
-
-// Don't use the 8259A interrupt controllers.  Xv6 assumes SMP hardware.
-void
-picinit(void)
-{
 80103150:	55                   	push   %ebp
 80103151:	ba 21 00 00 00       	mov    $0x21,%edx
 80103156:	89 e5                	mov    %esp,%ebp
@@ -6037,10 +6006,6 @@ picinit(void)
 8010315d:	ee                   	out    %al,(%dx)
 8010315e:	b2 a1                	mov    $0xa1,%dl
 80103160:	ee                   	out    %al,(%dx)
-  // mask all interrupts
-  outb(IO_PIC1+1, 0xFF);
-  outb(IO_PIC2+1, 0xFF);
-}
 80103161:	5d                   	pop    %ebp
 80103162:	c3                   	ret    
 80103163:	66 90                	xchg   %ax,%ax
@@ -6102,7 +6067,7 @@ pipealloc(struct file **f0, struct file **f1)
 801031d9:	00 00 00 
   initlock(&p->lock, "pipe");
 801031dc:	89 04 24             	mov    %eax,(%esp)
-801031df:	c7 44 24 04 70 71 10 	movl   $0x80107170,0x4(%esp)
+801031df:	c7 44 24 04 90 71 10 	movl   $0x80107190,0x4(%esp)
 801031e6:	80 
 801031e7:	e8 84 0e 00 00       	call   80104070 <initlock>
   (*f0)->type = FD_PIPE;
@@ -6470,10 +6435,10 @@ piperead(struct pipe *p, char *addr, int n)
 801034be:	66 90                	xchg   %ax,%ax
 
 801034c0 <allocproc>:
-// If found, change state to EMBRYO and initialize
-// state required to run in the kernel.
-// Otherwise return 0.
-static struct proc*
+//  If found, change state to EMBRYO and initialize
+//  state required to run in the kernel.
+//  Otherwise return 0.
+static struct proc *
 allocproc(void)
 {
 801034c0:	55                   	push   %ebp
@@ -6484,7 +6449,7 @@ allocproc(void)
 
   acquire(&ptable.lock);
 
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
 801034c4:	bb 54 2d 11 80       	mov    $0x80112d54,%ebx
 {
 801034c9:	83 ec 14             	sub    $0x14,%esp
@@ -6493,11 +6458,11 @@ allocproc(void)
 801034d3:	e8 08 0d 00 00       	call   801041e0 <acquire>
 801034d8:	eb 11                	jmp    801034eb <allocproc+0x2b>
 801034da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
 801034e0:	83 eb 80             	sub    $0xffffff80,%ebx
 801034e3:	81 fb 54 4d 11 80    	cmp    $0x80114d54,%ebx
 801034e9:	74 7d                	je     80103568 <allocproc+0xa8>
-    if(p->state == UNUSED)
+    if (p->state == UNUSED)
 801034eb:	8b 43 0c             	mov    0xc(%ebx),%eax
 801034ee:	85 c0                	test   %eax,%eax
 801034f0:	75 ee                	jne    801034e0 <allocproc+0x20>
@@ -6521,7 +6486,7 @@ found:
 80103511:	e8 3a 0d 00 00       	call   80104250 <release>
 
   // Allocate kernel stack.
-  if((p->kstack = kalloc()) == 0){
+  if ((p->kstack = kalloc()) == 0)
 80103516:	e8 85 ef ff ff       	call   801024a0 <kalloc>
 8010351b:	85 c0                	test   %eax,%eax
 8010351d:	89 43 08             	mov    %eax,0x8(%ebx)
@@ -6536,22 +6501,22 @@ found:
   // Set up new context to start executing at forkret,
   // which returns to trapret.
   sp -= 4;
-  *(uint*)sp = (uint)trapret;
+  *(uint *)sp = (uint)trapret;
 
   sp -= sizeof *p->context;
 80103528:	05 9c 0f 00 00       	add    $0xf9c,%eax
   sp -= sizeof *p->tf;
 8010352d:	89 53 18             	mov    %edx,0x18(%ebx)
-  *(uint*)sp = (uint)trapret;
-80103530:	c7 40 14 f5 53 10 80 	movl   $0x801053f5,0x14(%eax)
-  p->context = (struct context*)sp;
+  *(uint *)sp = (uint)trapret;
+80103530:	c7 40 14 25 54 10 80 	movl   $0x80105425,0x14(%eax)
+  p->context = (struct context *)sp;
   memset(p->context, 0, sizeof *p->context);
 80103537:	c7 44 24 08 14 00 00 	movl   $0x14,0x8(%esp)
 8010353e:	00 
 8010353f:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 80103546:	00 
 80103547:	89 04 24             	mov    %eax,(%esp)
-  p->context = (struct context*)sp;
+  p->context = (struct context *)sp;
 8010354a:	89 43 1c             	mov    %eax,0x1c(%ebx)
   memset(p->context, 0, sizeof *p->context);
 8010354d:	e8 4e 0d 00 00       	call   801042a0 <memset>
@@ -6586,11 +6551,11 @@ found:
 80103589:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
 80103590 <forkret>:
+}
 
 // A fork child's very first scheduling by scheduler()
 // will swtch here.  "Return" to user space.
-void
-forkret(void)
+void forkret(void)
 {
 80103590:	55                   	push   %ebp
 80103591:	89 e5                	mov    %esp,%ebp
@@ -6601,7 +6566,7 @@ forkret(void)
 80103596:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
 8010359d:	e8 ae 0c 00 00       	call   80104250 <release>
 
-  if (first) {
+  if (first)
 801035a2:	a1 00 a0 10 80       	mov    0x8010a000,%eax
 801035a7:	85 c0                	test   %eax,%eax
 801035a9:	75 05                	jne    801035b0 <forkret+0x20>
@@ -6636,7 +6601,7 @@ forkret(void)
 801035e1:	89 e5                	mov    %esp,%ebp
 801035e3:	83 ec 18             	sub    $0x18,%esp
   initlock(&ptable.lock, "ptable");
-801035e6:	c7 44 24 04 75 71 10 	movl   $0x80107175,0x4(%esp)
+801035e6:	c7 44 24 04 95 71 10 	movl   $0x80107195,0x4(%esp)
 801035ed:	80 
 801035ee:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
 801035f5:	e8 76 0a 00 00       	call   80104070 <initlock>
@@ -6655,12 +6620,12 @@ forkret(void)
   asm volatile("pushfl; popl %0" : "=r" (eflags));
 80103608:	9c                   	pushf  
 80103609:	58                   	pop    %eax
-  if(readeflags()&FL_IF)
+  if (readeflags() & FL_IF)
 8010360a:	f6 c4 02             	test   $0x2,%ah
 8010360d:	75 57                	jne    80103666 <mycpu+0x66>
   apicid = lapicid();
 8010360f:	e8 4c f1 ff ff       	call   80102760 <lapicid>
-  for (i = 0; i < ncpu; ++i) {
+  for (i = 0; i < ncpu; ++i)
 80103614:	8b 35 00 2d 11 80    	mov    0x80112d00,%esi
 8010361a:	85 f6                	test   %esi,%esi
 8010361c:	7e 3c                	jle    8010365a <mycpu+0x5a>
@@ -6669,7 +6634,7 @@ forkret(void)
 80103625:	39 c2                	cmp    %eax,%edx
 80103627:	74 2d                	je     80103656 <mycpu+0x56>
 80103629:	b9 30 28 11 80       	mov    $0x80112830,%ecx
-  for (i = 0; i < ncpu; ++i) {
+  for (i = 0; i < ncpu; ++i)
 8010362e:	31 d2                	xor    %edx,%edx
 80103630:	83 c2 01             	add    $0x1,%edx
 80103633:	39 f2                	cmp    %esi,%edx
@@ -6690,28 +6655,28 @@ forkret(void)
 80103650:	05 80 27 11 80       	add    $0x80112780,%eax
 }
 80103655:	c3                   	ret    
-  for (i = 0; i < ncpu; ++i) {
+  for (i = 0; i < ncpu; ++i)
 80103656:	31 d2                	xor    %edx,%edx
 80103658:	eb ea                	jmp    80103644 <mycpu+0x44>
   panic("unknown apicid\n");
-8010365a:	c7 04 24 7c 71 10 80 	movl   $0x8010717c,(%esp)
+8010365a:	c7 04 24 9c 71 10 80 	movl   $0x8010719c,(%esp)
 80103661:	e8 fa cc ff ff       	call   80100360 <panic>
     panic("mycpu called with interrupts enabled\n");
-80103666:	c7 04 24 58 72 10 80 	movl   $0x80107258,(%esp)
+80103666:	c7 04 24 78 72 10 80 	movl   $0x80107278,(%esp)
 8010366d:	e8 ee cc ff ff       	call   80100360 <panic>
 80103672:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 80103679:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
 80103680 <cpuid>:
-cpuid() {
+{
 80103680:	55                   	push   %ebp
 80103681:	89 e5                	mov    %esp,%ebp
 80103683:	83 ec 08             	sub    $0x8,%esp
-  return mycpu()-cpus;
+  return mycpu() - cpus;
 80103686:	e8 75 ff ff ff       	call   80103600 <mycpu>
 }
 8010368b:	c9                   	leave  
-  return mycpu()-cpus;
+  return mycpu() - cpus;
 8010368c:	2d 80 27 11 80       	sub    $0x80112780,%eax
 80103691:	c1 f8 04             	sar    $0x4,%eax
 80103694:	69 c0 a3 8b 2e ba    	imul   $0xba2e8ba3,%eax,%eax
@@ -6721,7 +6686,7 @@ cpuid() {
 8010369c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
 801036a0 <myproc>:
-myproc(void) {
+{
 801036a0:	55                   	push   %ebp
 801036a1:	89 e5                	mov    %esp,%ebp
 801036a3:	53                   	push   %ebx
@@ -6754,8 +6719,8 @@ myproc(void) {
 801036dc:	89 c3                	mov    %eax,%ebx
   initproc = p;
 801036de:	a3 b8 a5 10 80       	mov    %eax,0x8010a5b8
-  if((p->pgdir = setupkvm()) == 0)
-801036e3:	e8 88 32 00 00       	call   80106970 <setupkvm>
+  if ((p->pgdir = setupkvm()) == 0)
+801036e3:	e8 b8 32 00 00       	call   801069a0 <setupkvm>
 801036e8:	85 c0                	test   %eax,%eax
 801036ea:	89 43 04             	mov    %eax,0x4(%ebx)
 801036ed:	0f 84 d4 00 00 00    	je     801037c7 <userinit+0xf7>
@@ -6765,7 +6730,7 @@ myproc(void) {
 801036fd:	00 
 801036fe:	c7 44 24 04 60 a4 10 	movl   $0x8010a460,0x4(%esp)
 80103705:	80 
-80103706:	e8 95 2f 00 00       	call   801066a0 <inituvm>
+80103706:	e8 c5 2f 00 00       	call   801066d0 <inituvm>
   p->sz = PGSIZE;
 8010370b:	c7 03 00 10 00 00    	movl   $0x1000,(%ebx)
   memset(p->tf, 0, sizeof(*p->tf));
@@ -6800,19 +6765,19 @@ myproc(void) {
   p->tf->esp = PGSIZE;
 80103764:	8b 43 18             	mov    0x18(%ebx),%eax
 80103767:	c7 40 44 00 10 00 00 	movl   $0x1000,0x44(%eax)
-  p->tf->eip = 0;  // beginning of initcode.S
+  p->tf->eip = 0; // beginning of initcode.S
 8010376e:	8b 43 18             	mov    0x18(%ebx),%eax
 80103771:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
   safestrcpy(p->name, "initcode", sizeof(p->name));
 80103778:	8d 43 6c             	lea    0x6c(%ebx),%eax
 8010377b:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
 80103782:	00 
-80103783:	c7 44 24 04 a5 71 10 	movl   $0x801071a5,0x4(%esp)
+80103783:	c7 44 24 04 c5 71 10 	movl   $0x801071c5,0x4(%esp)
 8010378a:	80 
 8010378b:	89 04 24             	mov    %eax,(%esp)
 8010378e:	e8 ed 0c 00 00       	call   80104480 <safestrcpy>
   p->cwd = namei("/");
-80103793:	c7 04 24 ae 71 10 80 	movl   $0x801071ae,(%esp)
+80103793:	c7 04 24 ce 71 10 80 	movl   $0x801071ce,(%esp)
 8010379a:	e8 61 e7 ff ff       	call   80101f00 <namei>
 8010379f:	89 43 68             	mov    %eax,0x68(%ebx)
   acquire(&ptable.lock);
@@ -6829,7 +6794,7 @@ myproc(void) {
 801037c5:	5d                   	pop    %ebp
 801037c6:	c3                   	ret    
     panic("userinit: out of memory?");
-801037c7:	c7 04 24 8c 71 10 80 	movl   $0x8010718c,(%esp)
+801037c7:	c7 04 24 ac 71 10 80 	movl   $0x801071ac,(%esp)
 801037ce:	e8 8d cb ff ff       	call   80100360 <panic>
 801037d3:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 801037d9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
@@ -6844,28 +6809,28 @@ myproc(void) {
 801037e8:	8b 75 08             	mov    0x8(%ebp),%esi
   struct proc *curproc = myproc();
 801037eb:	e8 b0 fe ff ff       	call   801036a0 <myproc>
-  if(n > 0){
+  if (n > 0)
 801037f0:	83 fe 00             	cmp    $0x0,%esi
   struct proc *curproc = myproc();
 801037f3:	89 c3                	mov    %eax,%ebx
   sz = curproc->sz;
 801037f5:	8b 00                	mov    (%eax),%eax
-  if(n > 0){
+  if (n > 0)
 801037f7:	7e 2f                	jle    80103828 <growproc+0x48>
-    if((sz = allocuvm(curproc->pgdir, sz, sz + n)) == 0)
+    if ((sz = allocuvm(curproc->pgdir, sz, sz + n)) == 0)
 801037f9:	01 c6                	add    %eax,%esi
 801037fb:	89 74 24 08          	mov    %esi,0x8(%esp)
 801037ff:	89 44 24 04          	mov    %eax,0x4(%esp)
 80103803:	8b 43 04             	mov    0x4(%ebx),%eax
 80103806:	89 04 24             	mov    %eax,(%esp)
-80103809:	e8 d2 2f 00 00       	call   801067e0 <allocuvm>
+80103809:	e8 02 30 00 00       	call   80106810 <allocuvm>
 8010380e:	85 c0                	test   %eax,%eax
 80103810:	74 36                	je     80103848 <growproc+0x68>
   curproc->sz = sz;
 80103812:	89 03                	mov    %eax,(%ebx)
   switchuvm(curproc);
 80103814:	89 1c 24             	mov    %ebx,(%esp)
-80103817:	e8 74 2d 00 00       	call   80106590 <switchuvm>
+80103817:	e8 a4 2d 00 00       	call   801065c0 <switchuvm>
   return 0;
 8010381c:	31 c0                	xor    %eax,%eax
 }
@@ -6875,15 +6840,15 @@ myproc(void) {
 80103823:	5d                   	pop    %ebp
 80103824:	c3                   	ret    
 80103825:	8d 76 00             	lea    0x0(%esi),%esi
-  } else if(n < 0){
+  else if (n < 0)
 80103828:	74 e8                	je     80103812 <growproc+0x32>
-    if((sz = deallocuvm(curproc->pgdir, sz, sz + n)) == 0)
+    if ((sz = deallocuvm(curproc->pgdir, sz, sz + n)) == 0)
 8010382a:	01 c6                	add    %eax,%esi
 8010382c:	89 74 24 08          	mov    %esi,0x8(%esp)
 80103830:	89 44 24 04          	mov    %eax,0x4(%esp)
 80103834:	8b 43 04             	mov    0x4(%ebx),%eax
 80103837:	89 04 24             	mov    %eax,(%esp)
-8010383a:	e8 91 30 00 00       	call   801068d0 <deallocuvm>
+8010383a:	e8 c1 30 00 00       	call   80106900 <deallocuvm>
 8010383f:	85 c0                	test   %eax,%eax
 80103841:	75 cf                	jne    80103812 <growproc+0x32>
 80103843:	90                   	nop
@@ -6904,18 +6869,18 @@ myproc(void) {
   struct proc *curproc = myproc();
 80103859:	e8 42 fe ff ff       	call   801036a0 <myproc>
 8010385e:	89 c3                	mov    %eax,%ebx
-  if((np = allocproc()) == 0){
+  if ((np = allocproc()) == 0)
 80103860:	e8 5b fc ff ff       	call   801034c0 <allocproc>
 80103865:	85 c0                	test   %eax,%eax
 80103867:	89 c7                	mov    %eax,%edi
 80103869:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 8010386c:	0f 84 bc 00 00 00    	je     8010392e <fork+0xde>
-  if((np->pgdir = copyuvm(curproc->pgdir, curproc->sz)) == 0){
+  if ((np->pgdir = copyuvm(curproc->pgdir, curproc->sz)) == 0)
 80103872:	8b 03                	mov    (%ebx),%eax
 80103874:	89 44 24 04          	mov    %eax,0x4(%esp)
 80103878:	8b 43 04             	mov    0x4(%ebx),%eax
 8010387b:	89 04 24             	mov    %eax,(%esp)
-8010387e:	e8 cd 31 00 00       	call   80106a50 <copyuvm>
+8010387e:	e8 fd 31 00 00       	call   80106a80 <copyuvm>
 80103883:	85 c0                	test   %eax,%eax
 80103885:	89 47 04             	mov    %eax,0x4(%edi)
 80103888:	0f 84 a7 00 00 00    	je     80103935 <fork+0xe5>
@@ -6932,14 +6897,14 @@ myproc(void) {
 8010389d:	8b 73 18             	mov    0x18(%ebx),%esi
 801038a0:	b9 13 00 00 00       	mov    $0x13,%ecx
 801038a5:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
-  for(i = 0; i < NOFILE; i++)
+  for (i = 0; i < NOFILE; i++)
 801038a7:	31 f6                	xor    %esi,%esi
   np->tf->eax = 0;
 801038a9:	8b 40 18             	mov    0x18(%eax),%eax
 801038ac:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
 801038b3:	90                   	nop
 801038b4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    if(curproc->ofile[i])
+    if (curproc->ofile[i])
 801038b8:	8b 44 b3 28          	mov    0x28(%ebx,%esi,4),%eax
 801038bc:	85 c0                	test   %eax,%eax
 801038be:	74 0f                	je     801038cf <fork+0x7f>
@@ -6948,7 +6913,7 @@ myproc(void) {
 801038c3:	e8 18 d5 ff ff       	call   80100de0 <filedup>
 801038c8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
 801038cb:	89 44 b2 28          	mov    %eax,0x28(%edx,%esi,4)
-  for(i = 0; i < NOFILE; i++)
+  for (i = 0; i < NOFILE; i++)
 801038cf:	83 c6 01             	add    $0x1,%esi
 801038d2:	83 fe 10             	cmp    $0x10,%esi
 801038d5:	75 e1                	jne    801038b8 <fork+0x68>
@@ -7026,27 +6991,27 @@ myproc(void) {
 80103980:	fb                   	sti    
     acquire(&ptable.lock);
 80103981:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+    for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
 80103988:	bb 54 2d 11 80       	mov    $0x80112d54,%ebx
     acquire(&ptable.lock);
 8010398d:	e8 4e 08 00 00       	call   801041e0 <acquire>
 80103992:	eb 0f                	jmp    801039a3 <scheduler+0x43>
 80103994:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+    for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
 80103998:	83 eb 80             	sub    $0xffffff80,%ebx
 8010399b:	81 fb 54 4d 11 80    	cmp    $0x80114d54,%ebx
 801039a1:	74 45                	je     801039e8 <scheduler+0x88>
-      if(p->state != RUNNABLE)
+      if (p->state != RUNNABLE)
 801039a3:	83 7b 0c 03          	cmpl   $0x3,0xc(%ebx)
 801039a7:	75 ef                	jne    80103998 <scheduler+0x38>
       c->proc = p;
 801039a9:	89 9e ac 00 00 00    	mov    %ebx,0xac(%esi)
       switchuvm(p);
 801039af:	89 1c 24             	mov    %ebx,(%esp)
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+    for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
 801039b2:	83 eb 80             	sub    $0xffffff80,%ebx
       switchuvm(p);
-801039b5:	e8 d6 2b 00 00       	call   80106590 <switchuvm>
+801039b5:	e8 06 2c 00 00       	call   801065c0 <switchuvm>
       swtch(&(c->scheduler), p->context);
 801039ba:	8b 43 9c             	mov    -0x64(%ebx),%eax
       p->state = RUNNING;
@@ -7056,13 +7021,13 @@ myproc(void) {
 801039c7:	89 44 24 04          	mov    %eax,0x4(%esp)
 801039cb:	e8 0b 0b 00 00       	call   801044db <swtch>
       switchkvm();
-801039d0:	e8 9b 2b 00 00       	call   80106570 <switchkvm>
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+801039d0:	e8 cb 2b 00 00       	call   801065a0 <switchkvm>
+    for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
 801039d5:	81 fb 54 4d 11 80    	cmp    $0x80114d54,%ebx
       c->proc = 0;
 801039db:	c7 86 ac 00 00 00 00 	movl   $0x0,0xac(%esi)
 801039e2:	00 00 00 
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+    for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
 801039e5:	75 bc                	jne    801039a3 <scheduler+0x43>
 801039e7:	90                   	nop
     release(&ptable.lock);
@@ -7082,25 +7047,25 @@ myproc(void) {
 80103a05:	83 ec 10             	sub    $0x10,%esp
   struct proc *p = myproc();
 80103a08:	e8 93 fc ff ff       	call   801036a0 <myproc>
-  if(!holding(&ptable.lock))
+  if (!holding(&ptable.lock))
 80103a0d:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
   struct proc *p = myproc();
 80103a14:	89 c3                	mov    %eax,%ebx
-  if(!holding(&ptable.lock))
+  if (!holding(&ptable.lock))
 80103a16:	e8 85 07 00 00       	call   801041a0 <holding>
 80103a1b:	85 c0                	test   %eax,%eax
 80103a1d:	74 4f                	je     80103a6e <sched+0x6e>
-  if(mycpu()->ncli != 1)
+  if (mycpu()->ncli != 1)
 80103a1f:	e8 dc fb ff ff       	call   80103600 <mycpu>
 80103a24:	83 b8 a4 00 00 00 01 	cmpl   $0x1,0xa4(%eax)
 80103a2b:	75 65                	jne    80103a92 <sched+0x92>
-  if(p->state == RUNNING)
+  if (p->state == RUNNING)
 80103a2d:	83 7b 0c 04          	cmpl   $0x4,0xc(%ebx)
 80103a31:	74 53                	je     80103a86 <sched+0x86>
   asm volatile("pushfl; popl %0" : "=r" (eflags));
 80103a33:	9c                   	pushf  
 80103a34:	58                   	pop    %eax
-  if(readeflags()&FL_IF)
+  if (readeflags() & FL_IF)
 80103a35:	f6 c4 02             	test   $0x2,%ah
 80103a38:	75 40                	jne    80103a7a <sched+0x7a>
   intena = mycpu()->intena;
@@ -7125,16 +7090,16 @@ myproc(void) {
 80103a6c:	5d                   	pop    %ebp
 80103a6d:	c3                   	ret    
     panic("sched ptable.lock");
-80103a6e:	c7 04 24 b0 71 10 80 	movl   $0x801071b0,(%esp)
+80103a6e:	c7 04 24 d0 71 10 80 	movl   $0x801071d0,(%esp)
 80103a75:	e8 e6 c8 ff ff       	call   80100360 <panic>
     panic("sched interruptible");
-80103a7a:	c7 04 24 dc 71 10 80 	movl   $0x801071dc,(%esp)
+80103a7a:	c7 04 24 fc 71 10 80 	movl   $0x801071fc,(%esp)
 80103a81:	e8 da c8 ff ff       	call   80100360 <panic>
     panic("sched running");
-80103a86:	c7 04 24 ce 71 10 80 	movl   $0x801071ce,(%esp)
+80103a86:	c7 04 24 ee 71 10 80 	movl   $0x801071ee,(%esp)
 80103a8d:	e8 ce c8 ff ff       	call   80100360 <panic>
     panic("sched locks");
-80103a92:	c7 04 24 c2 71 10 80 	movl   $0x801071c2,(%esp)
+80103a92:	c7 04 24 e2 71 10 80 	movl   $0x801071e2,(%esp)
 80103a99:	e8 c2 c8 ff ff       	call   80100360 <panic>
 80103a9e:	66 90                	xchg   %ax,%ax
 
@@ -7143,21 +7108,21 @@ myproc(void) {
 80103aa0:	55                   	push   %ebp
 80103aa1:	89 e5                	mov    %esp,%ebp
 80103aa3:	56                   	push   %esi
-  if(curproc == initproc)
+  if (curproc == initproc)
 80103aa4:	31 f6                	xor    %esi,%esi
 {
 80103aa6:	53                   	push   %ebx
 80103aa7:	83 ec 10             	sub    $0x10,%esp
   struct proc *curproc = myproc();
 80103aaa:	e8 f1 fb ff ff       	call   801036a0 <myproc>
-  if(curproc == initproc)
+  if (curproc == initproc)
 80103aaf:	3b 05 b8 a5 10 80    	cmp    0x8010a5b8,%eax
   struct proc *curproc = myproc();
 80103ab5:	89 c3                	mov    %eax,%ebx
-  if(curproc == initproc)
+  if (curproc == initproc)
 80103ab7:	0f 84 ea 00 00 00    	je     80103ba7 <exit+0x107>
 80103abd:	8d 76 00             	lea    0x0(%esi),%esi
-    if(curproc->ofile[fd]){
+    if (curproc->ofile[fd])
 80103ac0:	8b 44 b3 28          	mov    0x28(%ebx,%esi,4),%eax
 80103ac4:	85 c0                	test   %eax,%eax
 80103ac6:	74 10                	je     80103ad8 <exit+0x38>
@@ -7167,7 +7132,7 @@ myproc(void) {
       curproc->ofile[fd] = 0;
 80103ad0:	c7 44 b3 28 00 00 00 	movl   $0x0,0x28(%ebx,%esi,4)
 80103ad7:	00 
-  for(fd = 0; fd < NOFILE; fd++){
+  for (fd = 0; fd < NOFILE; fd++)
 80103ad8:	83 c6 01             	add    $0x1,%esi
 80103adb:	83 fe 10             	cmp    $0x10,%esi
 80103ade:	75 e0                	jne    80103ac0 <exit+0x20>
@@ -7191,21 +7156,21 @@ wakeup1(void *chan)
 {
   struct proc *p;
 
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
 80103b0b:	ba 54 2d 11 80       	mov    $0x80112d54,%edx
 80103b10:	eb 11                	jmp    80103b23 <exit+0x83>
 80103b12:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 80103b18:	83 ea 80             	sub    $0xffffff80,%edx
 80103b1b:	81 fa 54 4d 11 80    	cmp    $0x80114d54,%edx
 80103b21:	74 1d                	je     80103b40 <exit+0xa0>
-    if(p->state == SLEEPING && p->chan == chan)
+    if (p->state == SLEEPING && p->chan == chan)
 80103b23:	83 7a 0c 02          	cmpl   $0x2,0xc(%edx)
 80103b27:	75 ef                	jne    80103b18 <exit+0x78>
 80103b29:	3b 42 20             	cmp    0x20(%edx),%eax
 80103b2c:	75 ea                	jne    80103b18 <exit+0x78>
       p->state = RUNNABLE;
 80103b2e:	c7 42 0c 03 00 00 00 	movl   $0x3,0xc(%edx)
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
 80103b35:	83 ea 80             	sub    $0xffffff80,%edx
 80103b38:	81 fa 54 4d 11 80    	cmp    $0x80114d54,%edx
 80103b3e:	75 e3                	jne    80103b23 <exit+0x83>
@@ -7214,26 +7179,26 @@ wakeup1(void *chan)
 80103b45:	b9 54 2d 11 80       	mov    $0x80112d54,%ecx
 80103b4a:	eb 0f                	jmp    80103b5b <exit+0xbb>
 80103b4c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
 80103b50:	83 e9 80             	sub    $0xffffff80,%ecx
 80103b53:	81 f9 54 4d 11 80    	cmp    $0x80114d54,%ecx
 80103b59:	74 34                	je     80103b8f <exit+0xef>
-    if(p->parent == curproc){
+    if (p->parent == curproc)
 80103b5b:	39 59 14             	cmp    %ebx,0x14(%ecx)
 80103b5e:	75 f0                	jne    80103b50 <exit+0xb0>
-      if(p->state == ZOMBIE)
+      if (p->state == ZOMBIE)
 80103b60:	83 79 0c 05          	cmpl   $0x5,0xc(%ecx)
       p->parent = initproc;
 80103b64:	89 41 14             	mov    %eax,0x14(%ecx)
-      if(p->state == ZOMBIE)
+      if (p->state == ZOMBIE)
 80103b67:	75 e7                	jne    80103b50 <exit+0xb0>
 80103b69:	ba 54 2d 11 80       	mov    $0x80112d54,%edx
 80103b6e:	eb 0b                	jmp    80103b7b <exit+0xdb>
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
 80103b70:	83 ea 80             	sub    $0xffffff80,%edx
 80103b73:	81 fa 54 4d 11 80    	cmp    $0x80114d54,%edx
 80103b79:	74 d5                	je     80103b50 <exit+0xb0>
-    if(p->state == SLEEPING && p->chan == chan)
+    if (p->state == SLEEPING && p->chan == chan)
 80103b7b:	83 7a 0c 02          	cmpl   $0x2,0xc(%edx)
 80103b7f:	75 ef                	jne    80103b70 <exit+0xd0>
 80103b81:	3b 42 20             	cmp    0x20(%edx),%eax
@@ -7246,10 +7211,10 @@ wakeup1(void *chan)
   sched();
 80103b96:	e8 65 fe ff ff       	call   80103a00 <sched>
   panic("zombie exit");
-80103b9b:	c7 04 24 fd 71 10 80 	movl   $0x801071fd,(%esp)
+80103b9b:	c7 04 24 1d 72 10 80 	movl   $0x8010721d,(%esp)
 80103ba2:	e8 b9 c7 ff ff       	call   80100360 <panic>
     panic("init exiting");
-80103ba7:	c7 04 24 f0 71 10 80 	movl   $0x801071f0,(%esp)
+80103ba7:	c7 04 24 10 72 10 80 	movl   $0x80107210,(%esp)
 80103bae:	e8 ad c7 ff ff       	call   80100360 <panic>
 80103bb3:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 80103bb9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
@@ -7259,7 +7224,7 @@ wakeup1(void *chan)
 80103bc0:	55                   	push   %ebp
 80103bc1:	89 e5                	mov    %esp,%ebp
 80103bc3:	83 ec 18             	sub    $0x18,%esp
-  acquire(&ptable.lock);  //DOC: yieldlock
+  acquire(&ptable.lock); // DOC: yieldlock
 80103bc6:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
 80103bcd:	e8 0e 06 00 00       	call   801041e0 <acquire>
   myproc()->state = RUNNABLE;
@@ -7300,19 +7265,19 @@ wakeup1(void *chan)
 80103c0c:	8b 75 0c             	mov    0xc(%ebp),%esi
   struct proc *p = myproc();
 80103c0f:	e8 8c fa ff ff       	call   801036a0 <myproc>
-  if(p == 0)
+  if (p == 0)
 80103c14:	85 c0                	test   %eax,%eax
   struct proc *p = myproc();
 80103c16:	89 c3                	mov    %eax,%ebx
-  if(p == 0)
+  if (p == 0)
 80103c18:	0f 84 7c 00 00 00    	je     80103c9a <sleep+0x9a>
-  if(lk == 0)
+  if (lk == 0)
 80103c1e:	85 f6                	test   %esi,%esi
 80103c20:	74 6c                	je     80103c8e <sleep+0x8e>
-  if(lk != &ptable.lock){  //DOC: sleeplock0
+  if (lk != &ptable.lock)
 80103c22:	81 fe 20 2d 11 80    	cmp    $0x80112d20,%esi
 80103c28:	74 46                	je     80103c70 <sleep+0x70>
-    acquire(&ptable.lock);  //DOC: sleeplock1
+    acquire(&ptable.lock); // DOC: sleeplock1
 80103c2a:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
 80103c31:	e8 aa 05 00 00       	call   801041e0 <acquire>
     release(lk);
@@ -7356,10 +7321,10 @@ wakeup1(void *chan)
 80103c8c:	5d                   	pop    %ebp
 80103c8d:	c3                   	ret    
     panic("sleep without lk");
-80103c8e:	c7 04 24 0f 72 10 80 	movl   $0x8010720f,(%esp)
+80103c8e:	c7 04 24 2f 72 10 80 	movl   $0x8010722f,(%esp)
 80103c95:	e8 c6 c6 ff ff       	call   80100360 <panic>
     panic("sleep");
-80103c9a:	c7 04 24 09 72 10 80 	movl   $0x80107209,(%esp)
+80103c9a:	c7 04 24 29 72 10 80 	movl   $0x80107229,(%esp)
 80103ca1:	e8 ba c6 ff ff       	call   80100360 <panic>
 80103ca6:	8d 76 00             	lea    0x0(%esi),%esi
 80103ca9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
@@ -7381,34 +7346,34 @@ wakeup1(void *chan)
 80103cc6:	e8 15 05 00 00       	call   801041e0 <acquire>
     havekids = 0;
 80103ccb:	31 c0                	xor    %eax,%eax
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+    for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
 80103ccd:	bb 54 2d 11 80       	mov    $0x80112d54,%ebx
 80103cd2:	eb 0f                	jmp    80103ce3 <wait+0x33>
 80103cd4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 80103cd8:	83 eb 80             	sub    $0xffffff80,%ebx
 80103cdb:	81 fb 54 4d 11 80    	cmp    $0x80114d54,%ebx
 80103ce1:	74 1d                	je     80103d00 <wait+0x50>
-      if(p->parent != curproc)
+      if (p->parent != curproc)
 80103ce3:	39 73 14             	cmp    %esi,0x14(%ebx)
 80103ce6:	75 f0                	jne    80103cd8 <wait+0x28>
-      if(p->state == ZOMBIE){
+      if (p->state == ZOMBIE)
 80103ce8:	83 7b 0c 05          	cmpl   $0x5,0xc(%ebx)
 80103cec:	74 2f                	je     80103d1d <wait+0x6d>
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+    for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
 80103cee:	83 eb 80             	sub    $0xffffff80,%ebx
       havekids = 1;
 80103cf1:	b8 01 00 00 00       	mov    $0x1,%eax
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+    for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
 80103cf6:	81 fb 54 4d 11 80    	cmp    $0x80114d54,%ebx
 80103cfc:	75 e5                	jne    80103ce3 <wait+0x33>
 80103cfe:	66 90                	xchg   %ax,%ax
-    if(!havekids || curproc->killed){
+    if (!havekids || curproc->killed)
 80103d00:	85 c0                	test   %eax,%eax
 80103d02:	74 6e                	je     80103d72 <wait+0xc2>
 80103d04:	8b 46 24             	mov    0x24(%esi),%eax
 80103d07:	85 c0                	test   %eax,%eax
 80103d09:	75 67                	jne    80103d72 <wait+0xc2>
-    sleep(curproc, &ptable.lock);  //DOC: wait-sleep
+    sleep(curproc, &ptable.lock); // DOC: wait-sleep
 80103d0b:	c7 44 24 04 20 2d 11 	movl   $0x80112d20,0x4(%esp)
 80103d12:	80 
 80103d13:	89 34 24             	mov    %esi,(%esp)
@@ -7428,7 +7393,7 @@ wakeup1(void *chan)
 80103d2e:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
         freevm(p->pgdir);
 80103d35:	89 04 24             	mov    %eax,(%esp)
-80103d38:	e8 b3 2b 00 00       	call   801068f0 <freevm>
+80103d38:	e8 e3 2b 00 00       	call   80106920 <freevm>
         release(&ptable.lock);
 80103d3d:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
         p->pid = 0;
@@ -7470,8 +7435,7 @@ wakeup1(void *chan)
 }
 
 // Wake up all processes sleeping on chan.
-void
-wakeup(void *chan)
+void wakeup(void *chan)
 {
 80103d90:	55                   	push   %ebp
 80103d91:	89 e5                	mov    %esp,%ebp
@@ -7481,21 +7445,21 @@ wakeup(void *chan)
   acquire(&ptable.lock);
 80103d9a:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
 80103da1:	e8 3a 04 00 00       	call   801041e0 <acquire>
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
 80103da6:	b8 54 2d 11 80       	mov    $0x80112d54,%eax
 80103dab:	eb 0d                	jmp    80103dba <wakeup+0x2a>
 80103dad:	8d 76 00             	lea    0x0(%esi),%esi
 80103db0:	83 e8 80             	sub    $0xffffff80,%eax
 80103db3:	3d 54 4d 11 80       	cmp    $0x80114d54,%eax
 80103db8:	74 1e                	je     80103dd8 <wakeup+0x48>
-    if(p->state == SLEEPING && p->chan == chan)
+    if (p->state == SLEEPING && p->chan == chan)
 80103dba:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
 80103dbe:	75 f0                	jne    80103db0 <wakeup+0x20>
 80103dc0:	3b 58 20             	cmp    0x20(%eax),%ebx
 80103dc3:	75 eb                	jne    80103db0 <wakeup+0x20>
       p->state = RUNNABLE;
 80103dc5:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
 80103dcc:	83 e8 80             	sub    $0xffffff80,%eax
 80103dcf:	3d 54 4d 11 80       	cmp    $0x80114d54,%eax
 80103dd4:	75 e4                	jne    80103dba <wakeup+0x2a>
@@ -7512,11 +7476,11 @@ wakeup(void *chan)
 80103de9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
 80103df0 <kill>:
+
 // Kill the process with the given pid.
 // Process won't exit until it returns
 // to user space (see trap in trap.c).
-int
-kill(int pid)
+int kill(int pid)
 {
 80103df0:	55                   	push   %ebp
 80103df1:	89 e5                	mov    %esp,%ebp
@@ -7528,23 +7492,25 @@ kill(int pid)
   acquire(&ptable.lock);
 80103dfa:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
 80103e01:	e8 da 03 00 00       	call   801041e0 <acquire>
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
 80103e06:	b8 54 2d 11 80       	mov    $0x80112d54,%eax
 80103e0b:	eb 0d                	jmp    80103e1a <kill+0x2a>
 80103e0d:	8d 76 00             	lea    0x0(%esi),%esi
 80103e10:	83 e8 80             	sub    $0xffffff80,%eax
 80103e13:	3d 54 4d 11 80       	cmp    $0x80114d54,%eax
 80103e18:	74 36                	je     80103e50 <kill+0x60>
-    if(p->pid == pid){
+  {
+    if (p->pid == pid)
 80103e1a:	39 58 10             	cmp    %ebx,0x10(%eax)
 80103e1d:	75 f1                	jne    80103e10 <kill+0x20>
+    {
       p->killed = 1;
       // Wake process from sleep if necessary.
-      if(p->state == SLEEPING)
+      if (p->state == SLEEPING)
 80103e1f:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
       p->killed = 1;
 80103e23:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
-      if(p->state == SLEEPING)
+      if (p->state == SLEEPING)
 80103e2a:	74 14                	je     80103e40 <kill+0x50>
         p->state = RUNNABLE;
       release(&ptable.lock);
@@ -7582,11 +7548,11 @@ kill(int pid)
 80103e69:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
 80103e70 <procdump>:
-// Print a process listing to console.  For debugging.
-// Runs when user types ^P on console.
-// No lock to avoid wedging a stuck machine further.
-void
-procdump(void)
+// PAGEBREAK: 36
+//  Print a process listing to console.  For debugging.
+//  Runs when user types ^P on console.
+//  No lock to avoid wedging a stuck machine further.
+void procdump(void)
 {
 80103e70:	55                   	push   %ebp
 80103e71:	89 e5                	mov    %esp,%ebp
@@ -7599,44 +7565,44 @@ procdump(void)
 80103e81:	eb 20                	jmp    80103ea3 <procdump+0x33>
 80103e83:	90                   	nop
 80103e84:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    if(p->state == SLEEPING){
-      getcallerpcs((uint*)p->context->ebp+2, pc);
-      for(i=0; i<10 && pc[i] != 0; i++)
+    {
+      getcallerpcs((uint *)p->context->ebp + 2, pc);
+      for (i = 0; i < 10 && pc[i] != 0; i++)
         cprintf(" %p", pc[i]);
     }
     cprintf("\n");
-80103e88:	c7 04 24 97 75 10 80 	movl   $0x80107597,(%esp)
+80103e88:	c7 04 24 b7 75 10 80 	movl   $0x801075b7,(%esp)
 80103e8f:	e8 bc c7 ff ff       	call   80100650 <cprintf>
 80103e94:	83 eb 80             	sub    $0xffffff80,%ebx
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
 80103e97:	81 fb c0 4d 11 80    	cmp    $0x80114dc0,%ebx
 80103e9d:	0f 84 8d 00 00 00    	je     80103f30 <procdump+0xc0>
-    if(p->state == UNUSED)
+    if (p->state == UNUSED)
 80103ea3:	8b 43 a0             	mov    -0x60(%ebx),%eax
 80103ea6:	85 c0                	test   %eax,%eax
 80103ea8:	74 ea                	je     80103e94 <procdump+0x24>
-    if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
+    if (p->state >= 0 && p->state < NELEM(states) && states[p->state])
 80103eaa:	83 f8 05             	cmp    $0x5,%eax
       state = "???";
-80103ead:	ba 20 72 10 80       	mov    $0x80107220,%edx
-    if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
+80103ead:	ba 40 72 10 80       	mov    $0x80107240,%edx
+    if (p->state >= 0 && p->state < NELEM(states) && states[p->state])
 80103eb2:	77 11                	ja     80103ec5 <procdump+0x55>
-80103eb4:	8b 14 85 80 72 10 80 	mov    -0x7fef8d80(,%eax,4),%edx
+80103eb4:	8b 14 85 a0 72 10 80 	mov    -0x7fef8d60(,%eax,4),%edx
       state = "???";
-80103ebb:	b8 20 72 10 80       	mov    $0x80107220,%eax
+80103ebb:	b8 40 72 10 80       	mov    $0x80107240,%eax
 80103ec0:	85 d2                	test   %edx,%edx
 80103ec2:	0f 44 d0             	cmove  %eax,%edx
     cprintf("%d %s %s", p->pid, state, p->name);
 80103ec5:	8b 43 a4             	mov    -0x5c(%ebx),%eax
 80103ec8:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
 80103ecc:	89 54 24 08          	mov    %edx,0x8(%esp)
-80103ed0:	c7 04 24 24 72 10 80 	movl   $0x80107224,(%esp)
+80103ed0:	c7 04 24 44 72 10 80 	movl   $0x80107244,(%esp)
 80103ed7:	89 44 24 04          	mov    %eax,0x4(%esp)
 80103edb:	e8 70 c7 ff ff       	call   80100650 <cprintf>
-    if(p->state == SLEEPING){
+    if (p->state == SLEEPING)
 80103ee0:	83 7b a0 02          	cmpl   $0x2,-0x60(%ebx)
 80103ee4:	75 a2                	jne    80103e88 <procdump+0x18>
-      getcallerpcs((uint*)p->context->ebp+2, pc);
+      getcallerpcs((uint *)p->context->ebp + 2, pc);
 80103ee6:	8d 45 c0             	lea    -0x40(%ebp),%eax
 80103ee9:	89 44 24 04          	mov    %eax,0x4(%esp)
 80103eed:	8b 43 b0             	mov    -0x50(%ebx),%eax
@@ -7646,16 +7612,16 @@ procdump(void)
 80103ef9:	89 04 24             	mov    %eax,(%esp)
 80103efc:	e8 8f 01 00 00       	call   80104090 <getcallerpcs>
 80103f01:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-      for(i=0; i<10 && pc[i] != 0; i++)
+      for (i = 0; i < 10 && pc[i] != 0; i++)
 80103f08:	8b 17                	mov    (%edi),%edx
 80103f0a:	85 d2                	test   %edx,%edx
 80103f0c:	0f 84 76 ff ff ff    	je     80103e88 <procdump+0x18>
         cprintf(" %p", pc[i]);
 80103f12:	89 54 24 04          	mov    %edx,0x4(%esp)
 80103f16:	83 c7 04             	add    $0x4,%edi
-80103f19:	c7 04 24 61 6c 10 80 	movl   $0x80106c61,(%esp)
+80103f19:	c7 04 24 81 6c 10 80 	movl   $0x80106c81,(%esp)
 80103f20:	e8 2b c7 ff ff       	call   80100650 <cprintf>
-      for(i=0; i<10 && pc[i] != 0; i++)
+      for (i = 0; i < 10 && pc[i] != 0; i++)
 80103f25:	39 f7                	cmp    %esi,%edi
 80103f27:	75 df                	jne    80103f08 <procdump+0x98>
 80103f29:	e9 5a ff ff ff       	jmp    80103e88 <procdump+0x18>
@@ -7686,7 +7652,7 @@ initsleeplock(struct sleeplock *lk, char *name)
 80103f44:	83 ec 14             	sub    $0x14,%esp
 80103f47:	8b 5d 08             	mov    0x8(%ebp),%ebx
   initlock(&lk->lk, "sleep lock");
-80103f4a:	c7 44 24 04 98 72 10 	movl   $0x80107298,0x4(%esp)
+80103f4a:	c7 44 24 04 b8 72 10 	movl   $0x801072b8,0x4(%esp)
 80103f51:	80 
 80103f52:	8d 43 04             	lea    0x4(%ebx),%eax
 80103f55:	89 04 24             	mov    %eax,(%esp)
@@ -8017,10 +7983,10 @@ popcli(void)
 80104178:	c9                   	leave  
 80104179:	c3                   	ret    
     panic("popcli");
-8010417a:	c7 04 24 ba 72 10 80 	movl   $0x801072ba,(%esp)
+8010417a:	c7 04 24 da 72 10 80 	movl   $0x801072da,(%esp)
 80104181:	e8 da c1 ff ff       	call   80100360 <panic>
     panic("popcli - interruptible");
-80104186:	c7 04 24 a3 72 10 80 	movl   $0x801072a3,(%esp)
+80104186:	c7 04 24 c3 72 10 80 	movl   $0x801072c3,(%esp)
 8010418d:	e8 ce c1 ff ff       	call   80100360 <panic>
 80104192:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 80104199:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
@@ -8099,7 +8065,7 @@ popcli(void)
 80104233:	5d                   	pop    %ebp
 80104234:	c3                   	ret    
     panic("acquire");
-80104235:	c7 04 24 c1 72 10 80 	movl   $0x801072c1,(%esp)
+80104235:	c7 04 24 e1 72 10 80 	movl   $0x801072e1,(%esp)
 8010423c:	e8 1f c1 ff ff       	call   80100360 <panic>
 80104241:	eb 0d                	jmp    80104250 <release>
 80104243:	90                   	nop
@@ -8143,7 +8109,7 @@ popcli(void)
   popcli();
 80104282:	e9 a9 fe ff ff       	jmp    80104130 <popcli>
     panic("release");
-80104287:	c7 04 24 c9 72 10 80 	movl   $0x801072c9,(%esp)
+80104287:	c7 04 24 e9 72 10 80 	movl   $0x801072e9,(%esp)
 8010428e:	e8 cd c0 ff ff       	call   80100360 <panic>
 80104293:	66 90                	xchg   %ax,%ax
 80104295:	66 90                	xchg   %ax,%ax
@@ -8154,34 +8120,20 @@ popcli(void)
 8010429f:	90                   	nop
 
 801042a0 <memset>:
-#include "types.h"
-#include "x86.h"
-
-void*
-memset(void *dst, int c, uint n)
-{
 801042a0:	55                   	push   %ebp
 801042a1:	89 e5                	mov    %esp,%ebp
 801042a3:	8b 55 08             	mov    0x8(%ebp),%edx
 801042a6:	57                   	push   %edi
 801042a7:	8b 4d 10             	mov    0x10(%ebp),%ecx
 801042aa:	53                   	push   %ebx
-  if ((int)dst%4 == 0 && n%4 == 0){
 801042ab:	f6 c2 03             	test   $0x3,%dl
 801042ae:	75 05                	jne    801042b5 <memset+0x15>
 801042b0:	f6 c1 03             	test   $0x3,%cl
 801042b3:	74 13                	je     801042c8 <memset+0x28>
-  asm volatile("cld; rep stosb" :
 801042b5:	89 d7                	mov    %edx,%edi
 801042b7:	8b 45 0c             	mov    0xc(%ebp),%eax
 801042ba:	fc                   	cld    
 801042bb:	f3 aa                	rep stos %al,%es:(%edi)
-    c &= 0xFF;
-    stosl(dst, (c<<24)|(c<<16)|(c<<8)|c, n/4);
-  } else
-    stosb(dst, c, n);
-  return dst;
-}
 801042bd:	5b                   	pop    %ebx
 801042be:	89 d0                	mov    %edx,%eax
 801042c0:	5f                   	pop    %edi
@@ -8189,9 +8141,7 @@ memset(void *dst, int c, uint n)
 801042c2:	c3                   	ret    
 801042c3:	90                   	nop
 801042c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    c &= 0xFF;
 801042c8:	0f b6 7d 0c          	movzbl 0xc(%ebp),%edi
-    stosl(dst, (c<<24)|(c<<16)|(c<<8)|c, n/4);
 801042cc:	c1 e9 02             	shr    $0x2,%ecx
 801042cf:	89 f8                	mov    %edi,%eax
 801042d1:	89 fb                	mov    %edi,%ebx
@@ -8201,11 +8151,9 @@ memset(void *dst, int c, uint n)
 801042db:	09 f8                	or     %edi,%eax
 801042dd:	c1 e7 08             	shl    $0x8,%edi
 801042e0:	09 f8                	or     %edi,%eax
-  asm volatile("cld; rep stosl" :
 801042e2:	89 d7                	mov    %edx,%edi
 801042e4:	fc                   	cld    
 801042e5:	f3 ab                	rep stos %eax,%es:(%edi)
-}
 801042e7:	5b                   	pop    %ebx
 801042e8:	89 d0                	mov    %edx,%eax
 801042ea:	5f                   	pop    %edi
@@ -8214,10 +8162,6 @@ memset(void *dst, int c, uint n)
 801042ed:	8d 76 00             	lea    0x0(%esi),%esi
 
 801042f0 <memcmp>:
-
-int
-memcmp(const void *v1, const void *v2, uint n)
-{
 801042f0:	55                   	push   %ebp
 801042f1:	89 e5                	mov    %esp,%ebp
 801042f3:	8b 45 10             	mov    0x10(%ebp),%eax
@@ -8226,15 +8170,9 @@ memcmp(const void *v1, const void *v2, uint n)
 801042f8:	8b 75 0c             	mov    0xc(%ebp),%esi
 801042fb:	53                   	push   %ebx
 801042fc:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  const uchar *s1, *s2;
-
-  s1 = v1;
-  s2 = v2;
-  while(n-- > 0){
 801042ff:	85 c0                	test   %eax,%eax
 80104301:	8d 78 ff             	lea    -0x1(%eax),%edi
 80104304:	74 26                	je     8010432c <memcmp+0x3c>
-    if(*s1 != *s2)
 80104306:	0f b6 03             	movzbl (%ebx),%eax
 80104309:	31 d2                	xor    %edx,%edx
 8010430b:	0f b6 0e             	movzbl (%esi),%ecx
@@ -8247,19 +8185,10 @@ memcmp(const void *v1, const void *v2, uint n)
 80104320:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
 80104324:	38 c8                	cmp    %cl,%al
 80104326:	75 10                	jne    80104338 <memcmp+0x48>
-  while(n-- > 0){
 80104328:	39 fa                	cmp    %edi,%edx
 8010432a:	75 ec                	jne    80104318 <memcmp+0x28>
-      return *s1 - *s2;
-    s1++, s2++;
-  }
-
-  return 0;
-}
 8010432c:	5b                   	pop    %ebx
-  return 0;
 8010432d:	31 c0                	xor    %eax,%eax
-}
 8010432f:	5e                   	pop    %esi
 80104330:	5f                   	pop    %edi
 80104331:	5d                   	pop    %ebp
@@ -8267,9 +8196,7 @@ memcmp(const void *v1, const void *v2, uint n)
 80104333:	90                   	nop
 80104334:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 80104338:	5b                   	pop    %ebx
-      return *s1 - *s2;
 80104339:	29 c8                	sub    %ecx,%eax
-}
 8010433b:	5e                   	pop    %esi
 8010433c:	5f                   	pop    %edi
 8010433d:	5d                   	pop    %ebp
@@ -8277,10 +8204,6 @@ memcmp(const void *v1, const void *v2, uint n)
 8010433f:	90                   	nop
 
 80104340 <memmove>:
-
-void*
-memmove(void *dst, const void *src, uint n)
-{
 80104340:	55                   	push   %ebp
 80104341:	89 e5                	mov    %esp,%ebp
 80104343:	57                   	push   %edi
@@ -8289,24 +8212,13 @@ memmove(void *dst, const void *src, uint n)
 80104348:	8b 75 0c             	mov    0xc(%ebp),%esi
 8010434b:	53                   	push   %ebx
 8010434c:	8b 5d 10             	mov    0x10(%ebp),%ebx
-  const char *s;
-  char *d;
-
-  s = src;
-  d = dst;
-  if(s < d && s + n > d){
 8010434f:	39 c6                	cmp    %eax,%esi
 80104351:	73 35                	jae    80104388 <memmove+0x48>
 80104353:	8d 0c 1e             	lea    (%esi,%ebx,1),%ecx
 80104356:	39 c8                	cmp    %ecx,%eax
 80104358:	73 2e                	jae    80104388 <memmove+0x48>
-    s += n;
-    d += n;
-    while(n-- > 0)
 8010435a:	85 db                	test   %ebx,%ebx
-    d += n;
 8010435c:	8d 3c 18             	lea    (%eax,%ebx,1),%edi
-    while(n-- > 0)
 8010435f:	8d 53 ff             	lea    -0x1(%ebx),%edx
 80104362:	74 1b                	je     8010437f <memmove+0x3f>
 80104364:	f7 db                	neg    %ebx
@@ -8314,38 +8226,26 @@ memmove(void *dst, const void *src, uint n)
 80104369:	01 fb                	add    %edi,%ebx
 8010436b:	90                   	nop
 8010436c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-      *--d = *--s;
 80104370:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
 80104374:	88 0c 13             	mov    %cl,(%ebx,%edx,1)
-    while(n-- > 0)
 80104377:	83 ea 01             	sub    $0x1,%edx
 8010437a:	83 fa ff             	cmp    $0xffffffff,%edx
 8010437d:	75 f1                	jne    80104370 <memmove+0x30>
-  } else
-    while(n-- > 0)
-      *d++ = *s++;
-
-  return dst;
-}
 8010437f:	5b                   	pop    %ebx
 80104380:	5e                   	pop    %esi
 80104381:	5f                   	pop    %edi
 80104382:	5d                   	pop    %ebp
 80104383:	c3                   	ret    
 80104384:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    while(n-- > 0)
 80104388:	31 d2                	xor    %edx,%edx
 8010438a:	85 db                	test   %ebx,%ebx
 8010438c:	74 f1                	je     8010437f <memmove+0x3f>
 8010438e:	66 90                	xchg   %ax,%ax
-      *d++ = *s++;
 80104390:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
 80104394:	88 0c 10             	mov    %cl,(%eax,%edx,1)
 80104397:	83 c2 01             	add    $0x1,%edx
-    while(n-- > 0)
 8010439a:	39 da                	cmp    %ebx,%edx
 8010439c:	75 f2                	jne    80104390 <memmove+0x50>
-}
 8010439e:	5b                   	pop    %ebx
 8010439f:	5e                   	pop    %esi
 801043a0:	5f                   	pop    %edi
@@ -8355,26 +8255,14 @@ memmove(void *dst, const void *src, uint n)
 801043a9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
 801043b0 <memcpy>:
-
-// memcpy exists to placate GCC.  Use memmove.
-void*
-memcpy(void *dst, const void *src, uint n)
-{
 801043b0:	55                   	push   %ebp
 801043b1:	89 e5                	mov    %esp,%ebp
-  return memmove(dst, src, n);
-}
 801043b3:	5d                   	pop    %ebp
-  return memmove(dst, src, n);
 801043b4:	eb 8a                	jmp    80104340 <memmove>
 801043b6:	8d 76 00             	lea    0x0(%esi),%esi
 801043b9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
 801043c0 <strncmp>:
-
-int
-strncmp(const char *p, const char *q, uint n)
-{
 801043c0:	55                   	push   %ebp
 801043c1:	89 e5                	mov    %esp,%ebp
 801043c3:	56                   	push   %esi
@@ -8382,7 +8270,6 @@ strncmp(const char *p, const char *q, uint n)
 801043c7:	53                   	push   %ebx
 801043c8:	8b 4d 08             	mov    0x8(%ebp),%ecx
 801043cb:	8b 5d 0c             	mov    0xc(%ebp),%ebx
-  while(n > 0 && *p && *p == *q)
 801043ce:	85 f6                	test   %esi,%esi
 801043d0:	74 30                	je     80104402 <strncmp+0x42>
 801043d2:	0f b6 01             	movzbl (%ecx),%eax
@@ -8402,33 +8289,20 @@ strncmp(const char *p, const char *q, uint n)
 801043f2:	83 c2 01             	add    $0x1,%edx
 801043f5:	38 d8                	cmp    %bl,%al
 801043f7:	75 17                	jne    80104410 <strncmp+0x50>
-    n--, p++, q++;
 801043f9:	89 cb                	mov    %ecx,%ebx
-  while(n > 0 && *p && *p == *q)
 801043fb:	39 f2                	cmp    %esi,%edx
-    n--, p++, q++;
 801043fd:	8d 4b 01             	lea    0x1(%ebx),%ecx
-  while(n > 0 && *p && *p == *q)
 80104400:	75 e6                	jne    801043e8 <strncmp+0x28>
-  if(n == 0)
-    return 0;
-  return (uchar)*p - (uchar)*q;
-}
 80104402:	5b                   	pop    %ebx
-    return 0;
 80104403:	31 c0                	xor    %eax,%eax
-}
 80104405:	5e                   	pop    %esi
 80104406:	5d                   	pop    %ebp
 80104407:	c3                   	ret    
 80104408:	0f b6 1b             	movzbl (%ebx),%ebx
-  while(n > 0 && *p && *p == *q)
 8010440b:	31 c0                	xor    %eax,%eax
 8010440d:	8d 76 00             	lea    0x0(%esi),%esi
-  return (uchar)*p - (uchar)*q;
 80104410:	0f b6 d3             	movzbl %bl,%edx
 80104413:	29 d0                	sub    %edx,%eax
-}
 80104415:	5b                   	pop    %ebx
 80104416:	5e                   	pop    %esi
 80104417:	5d                   	pop    %ebp
@@ -8436,16 +8310,11 @@ strncmp(const char *p, const char *q, uint n)
 80104419:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 80104420:	0f b6 5b 01          	movzbl 0x1(%ebx),%ebx
 80104424:	eb ea                	jmp    80104410 <strncmp+0x50>
-  while(n > 0 && *p && *p == *q)
 80104426:	89 d3                	mov    %edx,%ebx
 80104428:	eb e6                	jmp    80104410 <strncmp+0x50>
 8010442a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
 80104430 <strncpy>:
-
-char*
-strncpy(char *s, const char *t, int n)
-{
 80104430:	55                   	push   %ebp
 80104431:	89 e5                	mov    %esp,%ebp
 80104433:	8b 45 08             	mov    0x8(%ebp),%eax
@@ -8453,10 +8322,6 @@ strncpy(char *s, const char *t, int n)
 80104437:	8b 4d 10             	mov    0x10(%ebp),%ecx
 8010443a:	53                   	push   %ebx
 8010443b:	8b 5d 0c             	mov    0xc(%ebp),%ebx
-  char *os;
-
-  os = s;
-  while(n-- > 0 && (*s++ = *t++) != 0)
 8010443e:	89 c2                	mov    %eax,%edx
 80104440:	eb 19                	jmp    8010445b <strncpy+0x2b>
 80104442:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
@@ -8470,21 +8335,15 @@ strncpy(char *s, const char *t, int n)
 8010445b:	85 c9                	test   %ecx,%ecx
 8010445d:	8d 71 ff             	lea    -0x1(%ecx),%esi
 80104460:	7f e6                	jg     80104448 <strncpy+0x18>
-    ;
-  while(n-- > 0)
 80104462:	31 c9                	xor    %ecx,%ecx
 80104464:	85 f6                	test   %esi,%esi
 80104466:	7e 0f                	jle    80104477 <strncpy+0x47>
-    *s++ = 0;
 80104468:	c6 04 0a 00          	movb   $0x0,(%edx,%ecx,1)
 8010446c:	89 f3                	mov    %esi,%ebx
 8010446e:	83 c1 01             	add    $0x1,%ecx
 80104471:	29 cb                	sub    %ecx,%ebx
-  while(n-- > 0)
 80104473:	85 db                	test   %ebx,%ebx
 80104475:	7f f1                	jg     80104468 <strncpy+0x38>
-  return os;
-}
 80104477:	5b                   	pop    %ebx
 80104478:	5e                   	pop    %esi
 80104479:	5d                   	pop    %ebp
@@ -8493,11 +8352,6 @@ strncpy(char *s, const char *t, int n)
 8010447c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
 80104480 <safestrcpy>:
-
-// Like strncpy but guaranteed to NUL-terminate.
-char*
-safestrcpy(char *s, const char *t, int n)
-{
 80104480:	55                   	push   %ebp
 80104481:	89 e5                	mov    %esp,%ebp
 80104483:	8b 4d 10             	mov    0x10(%ebp),%ecx
@@ -8505,18 +8359,12 @@ safestrcpy(char *s, const char *t, int n)
 80104487:	8b 45 08             	mov    0x8(%ebp),%eax
 8010448a:	53                   	push   %ebx
 8010448b:	8b 55 0c             	mov    0xc(%ebp),%edx
-  char *os;
-
-  os = s;
-  if(n <= 0)
 8010448e:	85 c9                	test   %ecx,%ecx
 80104490:	7e 26                	jle    801044b8 <safestrcpy+0x38>
 80104492:	8d 74 0a ff          	lea    -0x1(%edx,%ecx,1),%esi
 80104496:	89 c1                	mov    %eax,%ecx
 80104498:	eb 17                	jmp    801044b1 <safestrcpy+0x31>
 8010449a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    return os;
-  while(--n > 0 && (*s++ = *t++) != 0)
 801044a0:	83 c2 01             	add    $0x1,%edx
 801044a3:	0f b6 5a ff          	movzbl -0x1(%edx),%ebx
 801044a7:	83 c1 01             	add    $0x1,%ecx
@@ -8525,11 +8373,7 @@ safestrcpy(char *s, const char *t, int n)
 801044af:	74 04                	je     801044b5 <safestrcpy+0x35>
 801044b1:	39 f2                	cmp    %esi,%edx
 801044b3:	75 eb                	jne    801044a0 <safestrcpy+0x20>
-    ;
-  *s = 0;
 801044b5:	c6 01 00             	movb   $0x0,(%ecx)
-  return os;
-}
 801044b8:	5b                   	pop    %ebx
 801044b9:	5e                   	pop    %esi
 801044ba:	5d                   	pop    %ebp
@@ -8537,68 +8381,32 @@ safestrcpy(char *s, const char *t, int n)
 801044bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
 801044c0 <strlen>:
-
-int
-strlen(const char *s)
-{
 801044c0:	55                   	push   %ebp
-  int n;
-
-  for(n = 0; s[n]; n++)
 801044c1:	31 c0                	xor    %eax,%eax
-{
 801044c3:	89 e5                	mov    %esp,%ebp
 801044c5:	8b 55 08             	mov    0x8(%ebp),%edx
-  for(n = 0; s[n]; n++)
 801044c8:	80 3a 00             	cmpb   $0x0,(%edx)
 801044cb:	74 0c                	je     801044d9 <strlen+0x19>
 801044cd:	8d 76 00             	lea    0x0(%esi),%esi
 801044d0:	83 c0 01             	add    $0x1,%eax
 801044d3:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
 801044d7:	75 f7                	jne    801044d0 <strlen+0x10>
-    ;
-  return n;
-}
 801044d9:	5d                   	pop    %ebp
 801044da:	c3                   	ret    
 
 801044db <swtch>:
-# a struct context, and save its address in *old.
-# Switch stacks to new and pop previously-saved registers.
-
-.globl swtch
-swtch:
-  movl 4(%esp), %eax
 801044db:	8b 44 24 04          	mov    0x4(%esp),%eax
-  movl 8(%esp), %edx
 801044df:	8b 54 24 08          	mov    0x8(%esp),%edx
-
-  # Save old callee-saved registers
-  pushl %ebp
 801044e3:	55                   	push   %ebp
-  pushl %ebx
 801044e4:	53                   	push   %ebx
-  pushl %esi
 801044e5:	56                   	push   %esi
-  pushl %edi
 801044e6:	57                   	push   %edi
-
-  # Switch stacks
-  movl %esp, (%eax)
 801044e7:	89 20                	mov    %esp,(%eax)
-  movl %edx, %esp
 801044e9:	89 d4                	mov    %edx,%esp
-
-  # Load new callee-saved registers
-  popl %edi
 801044eb:	5f                   	pop    %edi
-  popl %esi
 801044ec:	5e                   	pop    %esi
-  popl %ebx
 801044ed:	5b                   	pop    %ebx
-  popl %ebp
 801044ee:	5d                   	pop    %ebp
-  ret
 801044ef:	c3                   	ret    
 
 801044f0 <fetchint>:
@@ -8861,7 +8669,7 @@ syscall(void)
 80104675:	8d 50 ff             	lea    -0x1(%eax),%edx
 80104678:	83 fa 14             	cmp    $0x14,%edx
 8010467b:	77 1b                	ja     80104698 <syscall+0x38>
-8010467d:	8b 14 85 00 73 10 80 	mov    -0x7fef8d00(,%eax,4),%edx
+8010467d:	8b 14 85 20 73 10 80 	mov    -0x7fef8ce0(,%eax,4),%edx
 80104684:	85 d2                	test   %edx,%edx
 80104686:	74 10                	je     80104698 <syscall+0x38>
     curproc->tf->eax = syscalls[num]();
@@ -8886,7 +8694,7 @@ syscall(void)
 8010469f:	89 44 24 08          	mov    %eax,0x8(%esp)
     cprintf("%d %s: unknown sys call %d\n",
 801046a3:	8b 43 10             	mov    0x10(%ebx),%eax
-801046a6:	c7 04 24 d1 72 10 80 	movl   $0x801072d1,(%esp)
+801046a6:	c7 04 24 f1 72 10 80 	movl   $0x801072f1,(%esp)
 801046ad:	89 44 24 04          	mov    %eax,0x4(%esp)
 801046b1:	e8 9a bf ff ff       	call   80100650 <cprintf>
     curproc->tf->eax = -1;
@@ -9099,7 +8907,7 @@ create(char *path, short type, short major, short minor)
 80104828:	e8 c3 cd ff ff       	call   801015f0 <iupdate>
     if(dirlink(ip, ".", ip->inum) < 0 || dirlink(ip, "..", dp->inum) < 0)
 8010482d:	8b 46 04             	mov    0x4(%esi),%eax
-80104830:	c7 44 24 04 74 73 10 	movl   $0x80107374,0x4(%esp)
+80104830:	c7 44 24 04 94 73 10 	movl   $0x80107394,0x4(%esp)
 80104837:	80 
 80104838:	89 34 24             	mov    %esi,(%esp)
 8010483b:	89 44 24 08          	mov    %eax,0x8(%esp)
@@ -9107,7 +8915,7 @@ create(char *path, short type, short major, short minor)
 80104844:	85 c0                	test   %eax,%eax
 80104846:	78 1b                	js     80104863 <create+0x153>
 80104848:	8b 47 04             	mov    0x4(%edi),%eax
-8010484b:	c7 44 24 04 73 73 10 	movl   $0x80107373,0x4(%esp)
+8010484b:	c7 44 24 04 93 73 10 	movl   $0x80107393,0x4(%esp)
 80104852:	80 
 80104853:	89 34 24             	mov    %esi,(%esp)
 80104856:	89 44 24 08          	mov    %eax,0x8(%esp)
@@ -9115,13 +8923,13 @@ create(char *path, short type, short major, short minor)
 8010485f:	85 c0                	test   %eax,%eax
 80104861:	79 89                	jns    801047ec <create+0xdc>
       panic("create dots");
-80104863:	c7 04 24 67 73 10 80 	movl   $0x80107367,(%esp)
+80104863:	c7 04 24 87 73 10 80 	movl   $0x80107387,(%esp)
 8010486a:	e8 f1 ba ff ff       	call   80100360 <panic>
     panic("create: dirlink");
-8010486f:	c7 04 24 76 73 10 80 	movl   $0x80107376,(%esp)
+8010486f:	c7 04 24 96 73 10 80 	movl   $0x80107396,(%esp)
 80104876:	e8 e5 ba ff ff       	call   80100360 <panic>
     panic("create: ialloc");
-8010487b:	c7 04 24 58 73 10 80 	movl   $0x80107358,(%esp)
+8010487b:	c7 04 24 78 73 10 80 	movl   $0x80107378,(%esp)
 80104882:	e8 d9 ba ff ff       	call   80100360 <panic>
 80104887:	89 f6                	mov    %esi,%esi
 80104889:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
@@ -9531,13 +9339,13 @@ argfd(int n, int *pfd, struct file **pf)
 80104c19:	89 34 24             	mov    %esi,(%esp)
 80104c1c:	e8 8f ca ff ff       	call   801016b0 <ilock>
   if(namecmp(name, ".") == 0 || namecmp(name, "..") == 0)
-80104c21:	c7 44 24 04 74 73 10 	movl   $0x80107374,0x4(%esp)
+80104c21:	c7 44 24 04 94 73 10 	movl   $0x80107394,0x4(%esp)
 80104c28:	80 
 80104c29:	89 1c 24             	mov    %ebx,(%esp)
 80104c2c:	e8 5f cf ff ff       	call   80101b90 <namecmp>
 80104c31:	85 c0                	test   %eax,%eax
 80104c33:	0f 84 21 01 00 00    	je     80104d5a <sys_unlink+0x18a>
-80104c39:	c7 44 24 04 73 73 10 	movl   $0x80107373,0x4(%esp)
+80104c39:	c7 44 24 04 93 73 10 	movl   $0x80107393,0x4(%esp)
 80104c40:	80 
 80104c41:	89 1c 24             	mov    %ebx,(%esp)
 80104c44:	e8 47 cf ff ff       	call   80101b90 <namecmp>
@@ -9658,13 +9466,13 @@ argfd(int n, int *pfd, struct file **pf)
 80104d83:	e8 68 c8 ff ff       	call   801015f0 <iupdate>
 80104d88:	e9 48 ff ff ff       	jmp    80104cd5 <sys_unlink+0x105>
       panic("isdirempty: readi");
-80104d8d:	c7 04 24 98 73 10 80 	movl   $0x80107398,(%esp)
+80104d8d:	c7 04 24 b8 73 10 80 	movl   $0x801073b8,(%esp)
 80104d94:	e8 c7 b5 ff ff       	call   80100360 <panic>
     panic("unlink: writei");
-80104d99:	c7 04 24 aa 73 10 80 	movl   $0x801073aa,(%esp)
+80104d99:	c7 04 24 ca 73 10 80 	movl   $0x801073ca,(%esp)
 80104da0:	e8 bb b5 ff ff       	call   80100360 <panic>
     panic("unlink: nlink < 1");
-80104da5:	c7 04 24 86 73 10 80 	movl   $0x80107386,(%esp)
+80104da5:	c7 04 24 a6 73 10 80 	movl   $0x801073a6,(%esp)
 80104dac:	e8 af b5 ff ff       	call   80100360 <panic>
 80104db1:	eb 0d                	jmp    80104dc0 <sys_open>
 80104db3:	90                   	nop
@@ -10235,11 +10043,11 @@ sys_pipe(void)
 8010520e:	66 90                	xchg   %ax,%ax
 
 80105210 <sys_fork>:
+#include "memlayout.h"
 #include "mmu.h"
 #include "proc.h"
 
-int
-sys_fork(void)
+int sys_fork(void)
 {
 80105210:	55                   	push   %ebp
 80105211:	89 e5                	mov    %esp,%ebp
@@ -10252,8 +10060,7 @@ sys_fork(void)
 
 80105220 <sys_exit>:
 
-int
-sys_exit(void)
+int sys_exit(void)
 {
 80105220:	55                   	push   %ebp
 80105221:	89 e5                	mov    %esp,%ebp
@@ -10268,7 +10075,7 @@ sys_exit(void)
 80105239:	8b 45 f4             	mov    -0xc(%ebp),%eax
 8010523c:	89 04 24             	mov    %eax,(%esp)
 8010523f:	e8 5c e8 ff ff       	call   80103aa0 <exit>
-  return 0;  // not reached
+  return 0; // not reached
 }
 80105244:	31 c0                	xor    %eax,%eax
 80105246:	c9                   	leave  
@@ -10278,4516 +10085,3226 @@ sys_exit(void)
 
 80105250 <sys_wait>:
 
-int
-sys_wait(void)
+int sys_wait(void)
 {
 80105250:	55                   	push   %ebp
 80105251:	89 e5                	mov    %esp,%ebp
-  return wait();
+80105253:	83 ec 28             	sub    $0x28,%esp
+  int *status;
+  if (argptr(0, (void *)&status, sizeof(status)) < 0)
+80105256:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105259:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
+80105260:	00 
+80105261:	89 44 24 04          	mov    %eax,0x4(%esp)
+80105265:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+8010526c:	e8 4f f3 ff ff       	call   801045c0 <argptr>
+80105271:	85 c0                	test   %eax,%eax
+80105273:	78 13                	js     80105288 <sys_wait+0x38>
+  {
+    return -1;
+  }
+
+  return wait(status);
+80105275:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80105278:	89 04 24             	mov    %eax,(%esp)
+8010527b:	e8 30 ea ff ff       	call   80103cb0 <wait>
 }
-80105253:	5d                   	pop    %ebp
-  return wait();
-80105254:	e9 57 ea ff ff       	jmp    80103cb0 <wait>
-80105259:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105280:	c9                   	leave  
+80105281:	c3                   	ret    
+80105282:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    return -1;
+80105288:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+8010528d:	c9                   	leave  
+8010528e:	c3                   	ret    
+8010528f:	90                   	nop
 
-80105260 <sys_kill>:
+80105290 <sys_kill>:
 
-int
-sys_kill(void)
+int sys_kill(void)
 {
-80105260:	55                   	push   %ebp
-80105261:	89 e5                	mov    %esp,%ebp
-80105263:	83 ec 28             	sub    $0x28,%esp
+80105290:	55                   	push   %ebp
+80105291:	89 e5                	mov    %esp,%ebp
+80105293:	83 ec 28             	sub    $0x28,%esp
   int pid;
 
-  if(argint(0, &pid) < 0)
-80105266:	8d 45 f4             	lea    -0xc(%ebp),%eax
-80105269:	89 44 24 04          	mov    %eax,0x4(%esp)
-8010526d:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-80105274:	e8 17 f3 ff ff       	call   80104590 <argint>
-80105279:	85 c0                	test   %eax,%eax
-8010527b:	78 13                	js     80105290 <sys_kill+0x30>
+  if (argint(0, &pid) < 0)
+80105296:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105299:	89 44 24 04          	mov    %eax,0x4(%esp)
+8010529d:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+801052a4:	e8 e7 f2 ff ff       	call   80104590 <argint>
+801052a9:	85 c0                	test   %eax,%eax
+801052ab:	78 13                	js     801052c0 <sys_kill+0x30>
     return -1;
   return kill(pid);
-8010527d:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80105280:	89 04 24             	mov    %eax,(%esp)
-80105283:	e8 68 eb ff ff       	call   80103df0 <kill>
+801052ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801052b0:	89 04 24             	mov    %eax,(%esp)
+801052b3:	e8 38 eb ff ff       	call   80103df0 <kill>
 }
-80105288:	c9                   	leave  
-80105289:	c3                   	ret    
-8010528a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801052b8:	c9                   	leave  
+801052b9:	c3                   	ret    
+801052ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     return -1;
-80105290:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801052c0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-80105295:	c9                   	leave  
-80105296:	c3                   	ret    
-80105297:	89 f6                	mov    %esi,%esi
-80105299:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+801052c5:	c9                   	leave  
+801052c6:	c3                   	ret    
+801052c7:	89 f6                	mov    %esi,%esi
+801052c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-801052a0 <sys_getpid>:
+801052d0 <sys_getpid>:
 
-int
-sys_getpid(void)
+int sys_getpid(void)
 {
-801052a0:	55                   	push   %ebp
-801052a1:	89 e5                	mov    %esp,%ebp
-801052a3:	83 ec 08             	sub    $0x8,%esp
+801052d0:	55                   	push   %ebp
+801052d1:	89 e5                	mov    %esp,%ebp
+801052d3:	83 ec 08             	sub    $0x8,%esp
   return myproc()->pid;
-801052a6:	e8 f5 e3 ff ff       	call   801036a0 <myproc>
-801052ab:	8b 40 10             	mov    0x10(%eax),%eax
+801052d6:	e8 c5 e3 ff ff       	call   801036a0 <myproc>
+801052db:	8b 40 10             	mov    0x10(%eax),%eax
 }
-801052ae:	c9                   	leave  
-801052af:	c3                   	ret    
+801052de:	c9                   	leave  
+801052df:	c3                   	ret    
 
-801052b0 <sys_sbrk>:
+801052e0 <sys_sbrk>:
 
-int
-sys_sbrk(void)
+int sys_sbrk(void)
 {
-801052b0:	55                   	push   %ebp
-801052b1:	89 e5                	mov    %esp,%ebp
-801052b3:	53                   	push   %ebx
-801052b4:	83 ec 24             	sub    $0x24,%esp
+801052e0:	55                   	push   %ebp
+801052e1:	89 e5                	mov    %esp,%ebp
+801052e3:	53                   	push   %ebx
+801052e4:	83 ec 24             	sub    $0x24,%esp
   int addr;
   int n;
 
-  if(argint(0, &n) < 0)
-801052b7:	8d 45 f4             	lea    -0xc(%ebp),%eax
-801052ba:	89 44 24 04          	mov    %eax,0x4(%esp)
-801052be:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-801052c5:	e8 c6 f2 ff ff       	call   80104590 <argint>
-801052ca:	85 c0                	test   %eax,%eax
-801052cc:	78 22                	js     801052f0 <sys_sbrk+0x40>
+  if (argint(0, &n) < 0)
+801052e7:	8d 45 f4             	lea    -0xc(%ebp),%eax
+801052ea:	89 44 24 04          	mov    %eax,0x4(%esp)
+801052ee:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+801052f5:	e8 96 f2 ff ff       	call   80104590 <argint>
+801052fa:	85 c0                	test   %eax,%eax
+801052fc:	78 22                	js     80105320 <sys_sbrk+0x40>
     return -1;
   addr = myproc()->sz;
-801052ce:	e8 cd e3 ff ff       	call   801036a0 <myproc>
-  if(growproc(n) < 0)
-801052d3:	8b 55 f4             	mov    -0xc(%ebp),%edx
+801052fe:	e8 9d e3 ff ff       	call   801036a0 <myproc>
+  if (growproc(n) < 0)
+80105303:	8b 55 f4             	mov    -0xc(%ebp),%edx
   addr = myproc()->sz;
-801052d6:	8b 18                	mov    (%eax),%ebx
-  if(growproc(n) < 0)
-801052d8:	89 14 24             	mov    %edx,(%esp)
-801052db:	e8 00 e5 ff ff       	call   801037e0 <growproc>
-801052e0:	85 c0                	test   %eax,%eax
-801052e2:	78 0c                	js     801052f0 <sys_sbrk+0x40>
+80105306:	8b 18                	mov    (%eax),%ebx
+  if (growproc(n) < 0)
+80105308:	89 14 24             	mov    %edx,(%esp)
+8010530b:	e8 d0 e4 ff ff       	call   801037e0 <growproc>
+80105310:	85 c0                	test   %eax,%eax
+80105312:	78 0c                	js     80105320 <sys_sbrk+0x40>
     return -1;
   return addr;
-801052e4:	89 d8                	mov    %ebx,%eax
+80105314:	89 d8                	mov    %ebx,%eax
 }
-801052e6:	83 c4 24             	add    $0x24,%esp
-801052e9:	5b                   	pop    %ebx
-801052ea:	5d                   	pop    %ebp
-801052eb:	c3                   	ret    
-801052ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105316:	83 c4 24             	add    $0x24,%esp
+80105319:	5b                   	pop    %ebx
+8010531a:	5d                   	pop    %ebp
+8010531b:	c3                   	ret    
+8010531c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     return -1;
-801052f0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-801052f5:	eb ef                	jmp    801052e6 <sys_sbrk+0x36>
-801052f7:	89 f6                	mov    %esi,%esi
-801052f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+80105320:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105325:	eb ef                	jmp    80105316 <sys_sbrk+0x36>
+80105327:	89 f6                	mov    %esi,%esi
+80105329:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-80105300 <sys_sleep>:
+80105330 <sys_sleep>:
 
-int
-sys_sleep(void)
+int sys_sleep(void)
 {
-80105300:	55                   	push   %ebp
-80105301:	89 e5                	mov    %esp,%ebp
-80105303:	53                   	push   %ebx
-80105304:	83 ec 24             	sub    $0x24,%esp
+80105330:	55                   	push   %ebp
+80105331:	89 e5                	mov    %esp,%ebp
+80105333:	53                   	push   %ebx
+80105334:	83 ec 24             	sub    $0x24,%esp
   int n;
   uint ticks0;
 
-  if(argint(0, &n) < 0)
-80105307:	8d 45 f4             	lea    -0xc(%ebp),%eax
-8010530a:	89 44 24 04          	mov    %eax,0x4(%esp)
-8010530e:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-80105315:	e8 76 f2 ff ff       	call   80104590 <argint>
-8010531a:	85 c0                	test   %eax,%eax
-8010531c:	78 7e                	js     8010539c <sys_sleep+0x9c>
+  if (argint(0, &n) < 0)
+80105337:	8d 45 f4             	lea    -0xc(%ebp),%eax
+8010533a:	89 44 24 04          	mov    %eax,0x4(%esp)
+8010533e:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+80105345:	e8 46 f2 ff ff       	call   80104590 <argint>
+8010534a:	85 c0                	test   %eax,%eax
+8010534c:	78 7e                	js     801053cc <sys_sleep+0x9c>
     return -1;
   acquire(&tickslock);
-8010531e:	c7 04 24 60 4d 11 80 	movl   $0x80114d60,(%esp)
-80105325:	e8 b6 ee ff ff       	call   801041e0 <acquire>
+8010534e:	c7 04 24 60 4d 11 80 	movl   $0x80114d60,(%esp)
+80105355:	e8 86 ee ff ff       	call   801041e0 <acquire>
   ticks0 = ticks;
-  while(ticks - ticks0 < n){
-8010532a:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  while (ticks - ticks0 < n)
+8010535a:	8b 55 f4             	mov    -0xc(%ebp),%edx
   ticks0 = ticks;
-8010532d:	8b 1d a0 55 11 80    	mov    0x801155a0,%ebx
-  while(ticks - ticks0 < n){
-80105333:	85 d2                	test   %edx,%edx
-80105335:	75 29                	jne    80105360 <sys_sleep+0x60>
-80105337:	eb 4f                	jmp    80105388 <sys_sleep+0x88>
-80105339:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    if(myproc()->killed){
+8010535d:	8b 1d a0 55 11 80    	mov    0x801155a0,%ebx
+  while (ticks - ticks0 < n)
+80105363:	85 d2                	test   %edx,%edx
+80105365:	75 29                	jne    80105390 <sys_sleep+0x60>
+80105367:	eb 4f                	jmp    801053b8 <sys_sleep+0x88>
+80105369:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if (myproc()->killed)
+    {
       release(&tickslock);
       return -1;
     }
     sleep(&ticks, &tickslock);
-80105340:	c7 44 24 04 60 4d 11 	movl   $0x80114d60,0x4(%esp)
-80105347:	80 
-80105348:	c7 04 24 a0 55 11 80 	movl   $0x801155a0,(%esp)
-8010534f:	e8 ac e8 ff ff       	call   80103c00 <sleep>
-  while(ticks - ticks0 < n){
-80105354:	a1 a0 55 11 80       	mov    0x801155a0,%eax
-80105359:	29 d8                	sub    %ebx,%eax
-8010535b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
-8010535e:	73 28                	jae    80105388 <sys_sleep+0x88>
-    if(myproc()->killed){
-80105360:	e8 3b e3 ff ff       	call   801036a0 <myproc>
-80105365:	8b 40 24             	mov    0x24(%eax),%eax
-80105368:	85 c0                	test   %eax,%eax
-8010536a:	74 d4                	je     80105340 <sys_sleep+0x40>
+80105370:	c7 44 24 04 60 4d 11 	movl   $0x80114d60,0x4(%esp)
+80105377:	80 
+80105378:	c7 04 24 a0 55 11 80 	movl   $0x801155a0,(%esp)
+8010537f:	e8 7c e8 ff ff       	call   80103c00 <sleep>
+  while (ticks - ticks0 < n)
+80105384:	a1 a0 55 11 80       	mov    0x801155a0,%eax
+80105389:	29 d8                	sub    %ebx,%eax
+8010538b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+8010538e:	73 28                	jae    801053b8 <sys_sleep+0x88>
+    if (myproc()->killed)
+80105390:	e8 0b e3 ff ff       	call   801036a0 <myproc>
+80105395:	8b 40 24             	mov    0x24(%eax),%eax
+80105398:	85 c0                	test   %eax,%eax
+8010539a:	74 d4                	je     80105370 <sys_sleep+0x40>
       release(&tickslock);
-8010536c:	c7 04 24 60 4d 11 80 	movl   $0x80114d60,(%esp)
-80105373:	e8 d8 ee ff ff       	call   80104250 <release>
+8010539c:	c7 04 24 60 4d 11 80 	movl   $0x80114d60,(%esp)
+801053a3:	e8 a8 ee ff ff       	call   80104250 <release>
       return -1;
-80105378:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801053a8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   }
   release(&tickslock);
   return 0;
 }
-8010537d:	83 c4 24             	add    $0x24,%esp
-80105380:	5b                   	pop    %ebx
-80105381:	5d                   	pop    %ebp
-80105382:	c3                   	ret    
-80105383:	90                   	nop
-80105384:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801053ad:	83 c4 24             	add    $0x24,%esp
+801053b0:	5b                   	pop    %ebx
+801053b1:	5d                   	pop    %ebp
+801053b2:	c3                   	ret    
+801053b3:	90                   	nop
+801053b4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   release(&tickslock);
-80105388:	c7 04 24 60 4d 11 80 	movl   $0x80114d60,(%esp)
-8010538f:	e8 bc ee ff ff       	call   80104250 <release>
+801053b8:	c7 04 24 60 4d 11 80 	movl   $0x80114d60,(%esp)
+801053bf:	e8 8c ee ff ff       	call   80104250 <release>
 }
-80105394:	83 c4 24             	add    $0x24,%esp
+801053c4:	83 c4 24             	add    $0x24,%esp
   return 0;
-80105397:	31 c0                	xor    %eax,%eax
+801053c7:	31 c0                	xor    %eax,%eax
 }
-80105399:	5b                   	pop    %ebx
-8010539a:	5d                   	pop    %ebp
-8010539b:	c3                   	ret    
+801053c9:	5b                   	pop    %ebx
+801053ca:	5d                   	pop    %ebp
+801053cb:	c3                   	ret    
     return -1;
-8010539c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-801053a1:	eb da                	jmp    8010537d <sys_sleep+0x7d>
-801053a3:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-801053a9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+801053cc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801053d1:	eb da                	jmp    801053ad <sys_sleep+0x7d>
+801053d3:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801053d9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-801053b0 <sys_uptime>:
+801053e0 <sys_uptime>:
 
 // return how many clock tick interrupts have occurred
 // since start.
-int
-sys_uptime(void)
+int sys_uptime(void)
 {
-801053b0:	55                   	push   %ebp
-801053b1:	89 e5                	mov    %esp,%ebp
-801053b3:	53                   	push   %ebx
-801053b4:	83 ec 14             	sub    $0x14,%esp
+801053e0:	55                   	push   %ebp
+801053e1:	89 e5                	mov    %esp,%ebp
+801053e3:	53                   	push   %ebx
+801053e4:	83 ec 14             	sub    $0x14,%esp
   uint xticks;
 
   acquire(&tickslock);
-801053b7:	c7 04 24 60 4d 11 80 	movl   $0x80114d60,(%esp)
-801053be:	e8 1d ee ff ff       	call   801041e0 <acquire>
+801053e7:	c7 04 24 60 4d 11 80 	movl   $0x80114d60,(%esp)
+801053ee:	e8 ed ed ff ff       	call   801041e0 <acquire>
   xticks = ticks;
-801053c3:	8b 1d a0 55 11 80    	mov    0x801155a0,%ebx
+801053f3:	8b 1d a0 55 11 80    	mov    0x801155a0,%ebx
   release(&tickslock);
-801053c9:	c7 04 24 60 4d 11 80 	movl   $0x80114d60,(%esp)
-801053d0:	e8 7b ee ff ff       	call   80104250 <release>
+801053f9:	c7 04 24 60 4d 11 80 	movl   $0x80114d60,(%esp)
+80105400:	e8 4b ee ff ff       	call   80104250 <release>
   return xticks;
 }
-801053d5:	83 c4 14             	add    $0x14,%esp
-801053d8:	89 d8                	mov    %ebx,%eax
-801053da:	5b                   	pop    %ebx
-801053db:	5d                   	pop    %ebp
-801053dc:	c3                   	ret    
-
-801053dd <alltraps>:
-
-  # vectors.S sends all traps here.
-.globl alltraps
-alltraps:
-  # Build trap frame.
-  pushl %ds
-801053dd:	1e                   	push   %ds
-  pushl %es
-801053de:	06                   	push   %es
-  pushl %fs
-801053df:	0f a0                	push   %fs
-  pushl %gs
-801053e1:	0f a8                	push   %gs
-  pushal
-801053e3:	60                   	pusha  
-  
-  # Set up data segments.
-  movw $(SEG_KDATA<<3), %ax
-801053e4:	66 b8 10 00          	mov    $0x10,%ax
-  movw %ax, %ds
-801053e8:	8e d8                	mov    %eax,%ds
-  movw %ax, %es
-801053ea:	8e c0                	mov    %eax,%es
-
-  # Call trap(tf), where tf=%esp
-  pushl %esp
-801053ec:	54                   	push   %esp
-  call trap
-801053ed:	e8 de 00 00 00       	call   801054d0 <trap>
-  addl $4, %esp
-801053f2:	83 c4 04             	add    $0x4,%esp
-
-801053f5 <trapret>:
-
-  # Return falls through to trapret...
-.globl trapret
-trapret:
-  popal
-801053f5:	61                   	popa   
-  popl %gs
-801053f6:	0f a9                	pop    %gs
-  popl %fs
-801053f8:	0f a1                	pop    %fs
-  popl %es
-801053fa:	07                   	pop    %es
-  popl %ds
-801053fb:	1f                   	pop    %ds
-  addl $0x8, %esp  # trapno and errcode
-801053fc:	83 c4 08             	add    $0x8,%esp
-  iret
-801053ff:	cf                   	iret   
-
-80105400 <tvinit>:
+80105405:	83 c4 14             	add    $0x14,%esp
+80105408:	89 d8                	mov    %ebx,%eax
+8010540a:	5b                   	pop    %ebx
+8010540b:	5d                   	pop    %ebp
+8010540c:	c3                   	ret    
+
+8010540d <alltraps>:
+8010540d:	1e                   	push   %ds
+8010540e:	06                   	push   %es
+8010540f:	0f a0                	push   %fs
+80105411:	0f a8                	push   %gs
+80105413:	60                   	pusha  
+80105414:	66 b8 10 00          	mov    $0x10,%ax
+80105418:	8e d8                	mov    %eax,%ds
+8010541a:	8e c0                	mov    %eax,%es
+8010541c:	54                   	push   %esp
+8010541d:	e8 de 00 00 00       	call   80105500 <trap>
+80105422:	83 c4 04             	add    $0x4,%esp
+
+80105425 <trapret>:
+80105425:	61                   	popa   
+80105426:	0f a9                	pop    %gs
+80105428:	0f a1                	pop    %fs
+8010542a:	07                   	pop    %es
+8010542b:	1f                   	pop    %ds
+8010542c:	83 c4 08             	add    $0x8,%esp
+8010542f:	cf                   	iret   
+
+80105430 <tvinit>:
 void
 tvinit(void)
 {
   int i;
 
   for(i = 0; i < 256; i++)
-80105400:	31 c0                	xor    %eax,%eax
-80105402:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80105430:	31 c0                	xor    %eax,%eax
+80105432:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     SETGATE(idt[i], 0, SEG_KCODE<<3, vectors[i], 0);
-80105408:	8b 14 85 08 a0 10 80 	mov    -0x7fef5ff8(,%eax,4),%edx
-8010540f:	b9 08 00 00 00       	mov    $0x8,%ecx
-80105414:	66 89 0c c5 a2 4d 11 	mov    %cx,-0x7feeb25e(,%eax,8)
-8010541b:	80 
-8010541c:	c6 04 c5 a4 4d 11 80 	movb   $0x0,-0x7feeb25c(,%eax,8)
-80105423:	00 
-80105424:	c6 04 c5 a5 4d 11 80 	movb   $0x8e,-0x7feeb25b(,%eax,8)
-8010542b:	8e 
-8010542c:	66 89 14 c5 a0 4d 11 	mov    %dx,-0x7feeb260(,%eax,8)
-80105433:	80 
-80105434:	c1 ea 10             	shr    $0x10,%edx
-80105437:	66 89 14 c5 a6 4d 11 	mov    %dx,-0x7feeb25a(,%eax,8)
-8010543e:	80 
+80105438:	8b 14 85 08 a0 10 80 	mov    -0x7fef5ff8(,%eax,4),%edx
+8010543f:	b9 08 00 00 00       	mov    $0x8,%ecx
+80105444:	66 89 0c c5 a2 4d 11 	mov    %cx,-0x7feeb25e(,%eax,8)
+8010544b:	80 
+8010544c:	c6 04 c5 a4 4d 11 80 	movb   $0x0,-0x7feeb25c(,%eax,8)
+80105453:	00 
+80105454:	c6 04 c5 a5 4d 11 80 	movb   $0x8e,-0x7feeb25b(,%eax,8)
+8010545b:	8e 
+8010545c:	66 89 14 c5 a0 4d 11 	mov    %dx,-0x7feeb260(,%eax,8)
+80105463:	80 
+80105464:	c1 ea 10             	shr    $0x10,%edx
+80105467:	66 89 14 c5 a6 4d 11 	mov    %dx,-0x7feeb25a(,%eax,8)
+8010546e:	80 
   for(i = 0; i < 256; i++)
-8010543f:	83 c0 01             	add    $0x1,%eax
-80105442:	3d 00 01 00 00       	cmp    $0x100,%eax
-80105447:	75 bf                	jne    80105408 <tvinit+0x8>
+8010546f:	83 c0 01             	add    $0x1,%eax
+80105472:	3d 00 01 00 00       	cmp    $0x100,%eax
+80105477:	75 bf                	jne    80105438 <tvinit+0x8>
 {
-80105449:	55                   	push   %ebp
+80105479:	55                   	push   %ebp
   SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
-8010544a:	ba 08 00 00 00       	mov    $0x8,%edx
+8010547a:	ba 08 00 00 00       	mov    $0x8,%edx
 {
-8010544f:	89 e5                	mov    %esp,%ebp
-80105451:	83 ec 18             	sub    $0x18,%esp
+8010547f:	89 e5                	mov    %esp,%ebp
+80105481:	83 ec 18             	sub    $0x18,%esp
   SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
-80105454:	a1 08 a1 10 80       	mov    0x8010a108,%eax
+80105484:	a1 08 a1 10 80       	mov    0x8010a108,%eax
 
   initlock(&tickslock, "time");
-80105459:	c7 44 24 04 b9 73 10 	movl   $0x801073b9,0x4(%esp)
-80105460:	80 
-80105461:	c7 04 24 60 4d 11 80 	movl   $0x80114d60,(%esp)
+80105489:	c7 44 24 04 d9 73 10 	movl   $0x801073d9,0x4(%esp)
+80105490:	80 
+80105491:	c7 04 24 60 4d 11 80 	movl   $0x80114d60,(%esp)
   SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
-80105468:	66 89 15 a2 4f 11 80 	mov    %dx,0x80114fa2
-8010546f:	66 a3 a0 4f 11 80    	mov    %ax,0x80114fa0
-80105475:	c1 e8 10             	shr    $0x10,%eax
-80105478:	c6 05 a4 4f 11 80 00 	movb   $0x0,0x80114fa4
-8010547f:	c6 05 a5 4f 11 80 ef 	movb   $0xef,0x80114fa5
-80105486:	66 a3 a6 4f 11 80    	mov    %ax,0x80114fa6
+80105498:	66 89 15 a2 4f 11 80 	mov    %dx,0x80114fa2
+8010549f:	66 a3 a0 4f 11 80    	mov    %ax,0x80114fa0
+801054a5:	c1 e8 10             	shr    $0x10,%eax
+801054a8:	c6 05 a4 4f 11 80 00 	movb   $0x0,0x80114fa4
+801054af:	c6 05 a5 4f 11 80 ef 	movb   $0xef,0x80114fa5
+801054b6:	66 a3 a6 4f 11 80    	mov    %ax,0x80114fa6
   initlock(&tickslock, "time");
-8010548c:	e8 df eb ff ff       	call   80104070 <initlock>
+801054bc:	e8 af eb ff ff       	call   80104070 <initlock>
 }
-80105491:	c9                   	leave  
-80105492:	c3                   	ret    
-80105493:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-80105499:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+801054c1:	c9                   	leave  
+801054c2:	c3                   	ret    
+801054c3:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801054c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-801054a0 <idtinit>:
+801054d0 <idtinit>:
 
 void
 idtinit(void)
 {
-801054a0:	55                   	push   %ebp
+801054d0:	55                   	push   %ebp
   pd[0] = size-1;
-801054a1:	b8 ff 07 00 00       	mov    $0x7ff,%eax
-801054a6:	89 e5                	mov    %esp,%ebp
-801054a8:	83 ec 10             	sub    $0x10,%esp
-801054ab:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
+801054d1:	b8 ff 07 00 00       	mov    $0x7ff,%eax
+801054d6:	89 e5                	mov    %esp,%ebp
+801054d8:	83 ec 10             	sub    $0x10,%esp
+801054db:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
   pd[1] = (uint)p;
-801054af:	b8 a0 4d 11 80       	mov    $0x80114da0,%eax
-801054b4:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
+801054df:	b8 a0 4d 11 80       	mov    $0x80114da0,%eax
+801054e4:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   pd[2] = (uint)p >> 16;
-801054b8:	c1 e8 10             	shr    $0x10,%eax
-801054bb:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
+801054e8:	c1 e8 10             	shr    $0x10,%eax
+801054eb:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
   asm volatile("lidt (%0)" : : "r" (pd));
-801054bf:	8d 45 fa             	lea    -0x6(%ebp),%eax
-801054c2:	0f 01 18             	lidtl  (%eax)
+801054ef:	8d 45 fa             	lea    -0x6(%ebp),%eax
+801054f2:	0f 01 18             	lidtl  (%eax)
   lidt(idt, sizeof(idt));
 }
-801054c5:	c9                   	leave  
-801054c6:	c3                   	ret    
-801054c7:	89 f6                	mov    %esi,%esi
-801054c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+801054f5:	c9                   	leave  
+801054f6:	c3                   	ret    
+801054f7:	89 f6                	mov    %esi,%esi
+801054f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-801054d0 <trap>:
+80105500 <trap>:
 
 //PAGEBREAK: 41
 void
 trap(struct trapframe *tf)
 {
-801054d0:	55                   	push   %ebp
-801054d1:	89 e5                	mov    %esp,%ebp
-801054d3:	57                   	push   %edi
-801054d4:	56                   	push   %esi
-801054d5:	53                   	push   %ebx
-801054d6:	83 ec 3c             	sub    $0x3c,%esp
-801054d9:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80105500:	55                   	push   %ebp
+80105501:	89 e5                	mov    %esp,%ebp
+80105503:	57                   	push   %edi
+80105504:	56                   	push   %esi
+80105505:	53                   	push   %ebx
+80105506:	83 ec 3c             	sub    $0x3c,%esp
+80105509:	8b 5d 08             	mov    0x8(%ebp),%ebx
   if(tf->trapno == T_SYSCALL){
-801054dc:	8b 43 30             	mov    0x30(%ebx),%eax
-801054df:	83 f8 40             	cmp    $0x40,%eax
-801054e2:	0f 84 a0 01 00 00    	je     80105688 <trap+0x1b8>
+8010550c:	8b 43 30             	mov    0x30(%ebx),%eax
+8010550f:	83 f8 40             	cmp    $0x40,%eax
+80105512:	0f 84 a0 01 00 00    	je     801056b8 <trap+0x1b8>
     if(myproc()->killed)
       exit(0);
     return;
   }
 
   switch(tf->trapno){
-801054e8:	83 e8 20             	sub    $0x20,%eax
-801054eb:	83 f8 1f             	cmp    $0x1f,%eax
-801054ee:	77 08                	ja     801054f8 <trap+0x28>
-801054f0:	ff 24 85 60 74 10 80 	jmp    *-0x7fef8ba0(,%eax,4)
-801054f7:	90                   	nop
+80105518:	83 e8 20             	sub    $0x20,%eax
+8010551b:	83 f8 1f             	cmp    $0x1f,%eax
+8010551e:	77 08                	ja     80105528 <trap+0x28>
+80105520:	ff 24 85 80 74 10 80 	jmp    *-0x7fef8b80(,%eax,4)
+80105527:	90                   	nop
     lapiceoi();
     break;
 
   //PAGEBREAK: 13
   default:
     if(myproc() == 0 || (tf->cs&3) == 0){
-801054f8:	e8 a3 e1 ff ff       	call   801036a0 <myproc>
-801054fd:	85 c0                	test   %eax,%eax
-801054ff:	90                   	nop
-80105500:	0f 84 0a 02 00 00    	je     80105710 <trap+0x240>
-80105506:	f6 43 3c 03          	testb  $0x3,0x3c(%ebx)
-8010550a:	0f 84 00 02 00 00    	je     80105710 <trap+0x240>
+80105528:	e8 73 e1 ff ff       	call   801036a0 <myproc>
+8010552d:	85 c0                	test   %eax,%eax
+8010552f:	90                   	nop
+80105530:	0f 84 0a 02 00 00    	je     80105740 <trap+0x240>
+80105536:	f6 43 3c 03          	testb  $0x3,0x3c(%ebx)
+8010553a:	0f 84 00 02 00 00    	je     80105740 <trap+0x240>
 
 static inline uint
 rcr2(void)
 {
   uint val;
   asm volatile("movl %%cr2,%0" : "=r" (val));
-80105510:	0f 20 d1             	mov    %cr2,%ecx
+80105540:	0f 20 d1             	mov    %cr2,%ecx
       cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n",
               tf->trapno, cpuid(), tf->eip, rcr2());
       panic("trap");
     }
     // In user space, assume process misbehaved.
     cprintf("pid %d %s: trap %d err %d on cpu %d "
-80105513:	8b 53 38             	mov    0x38(%ebx),%edx
-80105516:	89 4d d8             	mov    %ecx,-0x28(%ebp)
-80105519:	89 55 dc             	mov    %edx,-0x24(%ebp)
-8010551c:	e8 5f e1 ff ff       	call   80103680 <cpuid>
-80105521:	8b 73 30             	mov    0x30(%ebx),%esi
-80105524:	89 c7                	mov    %eax,%edi
-80105526:	8b 43 34             	mov    0x34(%ebx),%eax
-80105529:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80105543:	8b 53 38             	mov    0x38(%ebx),%edx
+80105546:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+80105549:	89 55 dc             	mov    %edx,-0x24(%ebp)
+8010554c:	e8 2f e1 ff ff       	call   80103680 <cpuid>
+80105551:	8b 73 30             	mov    0x30(%ebx),%esi
+80105554:	89 c7                	mov    %eax,%edi
+80105556:	8b 43 34             	mov    0x34(%ebx),%eax
+80105559:	89 45 e4             	mov    %eax,-0x1c(%ebp)
             "eip 0x%x addr 0x%x--kill proc\n",
             myproc()->pid, myproc()->name, tf->trapno,
-8010552c:	e8 6f e1 ff ff       	call   801036a0 <myproc>
-80105531:	89 45 e0             	mov    %eax,-0x20(%ebp)
-80105534:	e8 67 e1 ff ff       	call   801036a0 <myproc>
+8010555c:	e8 3f e1 ff ff       	call   801036a0 <myproc>
+80105561:	89 45 e0             	mov    %eax,-0x20(%ebp)
+80105564:	e8 37 e1 ff ff       	call   801036a0 <myproc>
     cprintf("pid %d %s: trap %d err %d on cpu %d "
-80105539:	8b 55 dc             	mov    -0x24(%ebp),%edx
-8010553c:	89 74 24 0c          	mov    %esi,0xc(%esp)
+80105569:	8b 55 dc             	mov    -0x24(%ebp),%edx
+8010556c:	89 74 24 0c          	mov    %esi,0xc(%esp)
             myproc()->pid, myproc()->name, tf->trapno,
-80105540:	8b 75 e0             	mov    -0x20(%ebp),%esi
+80105570:	8b 75 e0             	mov    -0x20(%ebp),%esi
     cprintf("pid %d %s: trap %d err %d on cpu %d "
-80105543:	8b 4d d8             	mov    -0x28(%ebp),%ecx
-80105546:	89 7c 24 14          	mov    %edi,0x14(%esp)
-8010554a:	89 54 24 18          	mov    %edx,0x18(%esp)
-8010554e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+80105573:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+80105576:	89 7c 24 14          	mov    %edi,0x14(%esp)
+8010557a:	89 54 24 18          	mov    %edx,0x18(%esp)
+8010557e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
             myproc()->pid, myproc()->name, tf->trapno,
-80105551:	83 c6 6c             	add    $0x6c,%esi
+80105581:	83 c6 6c             	add    $0x6c,%esi
     cprintf("pid %d %s: trap %d err %d on cpu %d "
-80105554:	89 4c 24 1c          	mov    %ecx,0x1c(%esp)
+80105584:	89 4c 24 1c          	mov    %ecx,0x1c(%esp)
             myproc()->pid, myproc()->name, tf->trapno,
-80105558:	89 74 24 08          	mov    %esi,0x8(%esp)
+80105588:	89 74 24 08          	mov    %esi,0x8(%esp)
     cprintf("pid %d %s: trap %d err %d on cpu %d "
-8010555c:	89 54 24 10          	mov    %edx,0x10(%esp)
-80105560:	8b 40 10             	mov    0x10(%eax),%eax
-80105563:	c7 04 24 1c 74 10 80 	movl   $0x8010741c,(%esp)
-8010556a:	89 44 24 04          	mov    %eax,0x4(%esp)
-8010556e:	e8 dd b0 ff ff       	call   80100650 <cprintf>
+8010558c:	89 54 24 10          	mov    %edx,0x10(%esp)
+80105590:	8b 40 10             	mov    0x10(%eax),%eax
+80105593:	c7 04 24 3c 74 10 80 	movl   $0x8010743c,(%esp)
+8010559a:	89 44 24 04          	mov    %eax,0x4(%esp)
+8010559e:	e8 ad b0 ff ff       	call   80100650 <cprintf>
             tf->err, cpuid(), tf->eip, rcr2());
     myproc()->killed = 1;
-80105573:	e8 28 e1 ff ff       	call   801036a0 <myproc>
-80105578:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
-8010557f:	90                   	nop
+801055a3:	e8 f8 e0 ff ff       	call   801036a0 <myproc>
+801055a8:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
+801055af:	90                   	nop
   }
 
   // Force process exit if it has been killed and is in user space.
   // (If it is still executing in the kernel, let it keep running
   // until it gets to the regular system call return.)
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-80105580:	e8 1b e1 ff ff       	call   801036a0 <myproc>
-80105585:	85 c0                	test   %eax,%eax
-80105587:	74 0c                	je     80105595 <trap+0xc5>
-80105589:	e8 12 e1 ff ff       	call   801036a0 <myproc>
-8010558e:	8b 50 24             	mov    0x24(%eax),%edx
-80105591:	85 d2                	test   %edx,%edx
-80105593:	75 4b                	jne    801055e0 <trap+0x110>
+801055b0:	e8 eb e0 ff ff       	call   801036a0 <myproc>
+801055b5:	85 c0                	test   %eax,%eax
+801055b7:	74 0c                	je     801055c5 <trap+0xc5>
+801055b9:	e8 e2 e0 ff ff       	call   801036a0 <myproc>
+801055be:	8b 50 24             	mov    0x24(%eax),%edx
+801055c1:	85 d2                	test   %edx,%edx
+801055c3:	75 4b                	jne    80105610 <trap+0x110>
     exit(0);
 
   // Force process to give up CPU on clock tick.
   // If interrupts were on while locks held, would need to check nlock.
   if(myproc() && myproc()->state == RUNNING &&
-80105595:	e8 06 e1 ff ff       	call   801036a0 <myproc>
-8010559a:	85 c0                	test   %eax,%eax
-8010559c:	74 0d                	je     801055ab <trap+0xdb>
-8010559e:	66 90                	xchg   %ax,%ax
-801055a0:	e8 fb e0 ff ff       	call   801036a0 <myproc>
-801055a5:	83 78 0c 04          	cmpl   $0x4,0xc(%eax)
-801055a9:	74 55                	je     80105600 <trap+0x130>
+801055c5:	e8 d6 e0 ff ff       	call   801036a0 <myproc>
+801055ca:	85 c0                	test   %eax,%eax
+801055cc:	74 0d                	je     801055db <trap+0xdb>
+801055ce:	66 90                	xchg   %ax,%ax
+801055d0:	e8 cb e0 ff ff       	call   801036a0 <myproc>
+801055d5:	83 78 0c 04          	cmpl   $0x4,0xc(%eax)
+801055d9:	74 55                	je     80105630 <trap+0x130>
      tf->trapno == T_IRQ0+IRQ_TIMER)
     yield();
 
   // Check if the process has been killed since we yielded
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-801055ab:	e8 f0 e0 ff ff       	call   801036a0 <myproc>
-801055b0:	85 c0                	test   %eax,%eax
-801055b2:	74 1d                	je     801055d1 <trap+0x101>
-801055b4:	e8 e7 e0 ff ff       	call   801036a0 <myproc>
-801055b9:	8b 40 24             	mov    0x24(%eax),%eax
-801055bc:	85 c0                	test   %eax,%eax
-801055be:	74 11                	je     801055d1 <trap+0x101>
-801055c0:	0f b7 43 3c          	movzwl 0x3c(%ebx),%eax
-801055c4:	83 e0 03             	and    $0x3,%eax
-801055c7:	66 83 f8 03          	cmp    $0x3,%ax
-801055cb:	0f 84 e8 00 00 00    	je     801056b9 <trap+0x1e9>
+801055db:	e8 c0 e0 ff ff       	call   801036a0 <myproc>
+801055e0:	85 c0                	test   %eax,%eax
+801055e2:	74 1d                	je     80105601 <trap+0x101>
+801055e4:	e8 b7 e0 ff ff       	call   801036a0 <myproc>
+801055e9:	8b 40 24             	mov    0x24(%eax),%eax
+801055ec:	85 c0                	test   %eax,%eax
+801055ee:	74 11                	je     80105601 <trap+0x101>
+801055f0:	0f b7 43 3c          	movzwl 0x3c(%ebx),%eax
+801055f4:	83 e0 03             	and    $0x3,%eax
+801055f7:	66 83 f8 03          	cmp    $0x3,%ax
+801055fb:	0f 84 e8 00 00 00    	je     801056e9 <trap+0x1e9>
     exit(0);
 }
-801055d1:	83 c4 3c             	add    $0x3c,%esp
-801055d4:	5b                   	pop    %ebx
-801055d5:	5e                   	pop    %esi
-801055d6:	5f                   	pop    %edi
-801055d7:	5d                   	pop    %ebp
-801055d8:	c3                   	ret    
-801055d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105601:	83 c4 3c             	add    $0x3c,%esp
+80105604:	5b                   	pop    %ebx
+80105605:	5e                   	pop    %esi
+80105606:	5f                   	pop    %edi
+80105607:	5d                   	pop    %ebp
+80105608:	c3                   	ret    
+80105609:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-801055e0:	0f b7 43 3c          	movzwl 0x3c(%ebx),%eax
-801055e4:	83 e0 03             	and    $0x3,%eax
-801055e7:	66 83 f8 03          	cmp    $0x3,%ax
-801055eb:	75 a8                	jne    80105595 <trap+0xc5>
+80105610:	0f b7 43 3c          	movzwl 0x3c(%ebx),%eax
+80105614:	83 e0 03             	and    $0x3,%eax
+80105617:	66 83 f8 03          	cmp    $0x3,%ax
+8010561b:	75 a8                	jne    801055c5 <trap+0xc5>
     exit(0);
-801055ed:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-801055f4:	e8 a7 e4 ff ff       	call   80103aa0 <exit>
-801055f9:	eb 9a                	jmp    80105595 <trap+0xc5>
-801055fb:	90                   	nop
-801055fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010561d:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+80105624:	e8 77 e4 ff ff       	call   80103aa0 <exit>
+80105629:	eb 9a                	jmp    801055c5 <trap+0xc5>
+8010562b:	90                   	nop
+8010562c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   if(myproc() && myproc()->state == RUNNING &&
-80105600:	83 7b 30 20          	cmpl   $0x20,0x30(%ebx)
-80105604:	75 a5                	jne    801055ab <trap+0xdb>
+80105630:	83 7b 30 20          	cmpl   $0x20,0x30(%ebx)
+80105634:	75 a5                	jne    801055db <trap+0xdb>
     yield();
-80105606:	e8 b5 e5 ff ff       	call   80103bc0 <yield>
-8010560b:	eb 9e                	jmp    801055ab <trap+0xdb>
-8010560d:	8d 76 00             	lea    0x0(%esi),%esi
+80105636:	e8 85 e5 ff ff       	call   80103bc0 <yield>
+8010563b:	eb 9e                	jmp    801055db <trap+0xdb>
+8010563d:	8d 76 00             	lea    0x0(%esi),%esi
     if(cpuid() == 0){
-80105610:	e8 6b e0 ff ff       	call   80103680 <cpuid>
-80105615:	85 c0                	test   %eax,%eax
-80105617:	0f 84 c3 00 00 00    	je     801056e0 <trap+0x210>
-8010561d:	8d 76 00             	lea    0x0(%esi),%esi
+80105640:	e8 3b e0 ff ff       	call   80103680 <cpuid>
+80105645:	85 c0                	test   %eax,%eax
+80105647:	0f 84 c3 00 00 00    	je     80105710 <trap+0x210>
+8010564d:	8d 76 00             	lea    0x0(%esi),%esi
     lapiceoi();
-80105620:	e8 5b d1 ff ff       	call   80102780 <lapiceoi>
+80105650:	e8 2b d1 ff ff       	call   80102780 <lapiceoi>
     break;
-80105625:	e9 56 ff ff ff       	jmp    80105580 <trap+0xb0>
-8010562a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80105655:	e9 56 ff ff ff       	jmp    801055b0 <trap+0xb0>
+8010565a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     kbdintr();
-80105630:	e8 9b cf ff ff       	call   801025d0 <kbdintr>
+80105660:	e8 6b cf ff ff       	call   801025d0 <kbdintr>
     lapiceoi();
-80105635:	e8 46 d1 ff ff       	call   80102780 <lapiceoi>
+80105665:	e8 16 d1 ff ff       	call   80102780 <lapiceoi>
     break;
-8010563a:	e9 41 ff ff ff       	jmp    80105580 <trap+0xb0>
-8010563f:	90                   	nop
+8010566a:	e9 41 ff ff ff       	jmp    801055b0 <trap+0xb0>
+8010566f:	90                   	nop
     uartintr();
-80105640:	e8 2b 02 00 00       	call   80105870 <uartintr>
+80105670:	e8 2b 02 00 00       	call   801058a0 <uartintr>
     lapiceoi();
-80105645:	e8 36 d1 ff ff       	call   80102780 <lapiceoi>
+80105675:	e8 06 d1 ff ff       	call   80102780 <lapiceoi>
     break;
-8010564a:	e9 31 ff ff ff       	jmp    80105580 <trap+0xb0>
-8010564f:	90                   	nop
+8010567a:	e9 31 ff ff ff       	jmp    801055b0 <trap+0xb0>
+8010567f:	90                   	nop
     cprintf("cpu%d: spurious interrupt at %x:%x\n",
-80105650:	8b 7b 38             	mov    0x38(%ebx),%edi
-80105653:	0f b7 73 3c          	movzwl 0x3c(%ebx),%esi
-80105657:	e8 24 e0 ff ff       	call   80103680 <cpuid>
-8010565c:	c7 04 24 c4 73 10 80 	movl   $0x801073c4,(%esp)
-80105663:	89 7c 24 0c          	mov    %edi,0xc(%esp)
-80105667:	89 74 24 08          	mov    %esi,0x8(%esp)
-8010566b:	89 44 24 04          	mov    %eax,0x4(%esp)
-8010566f:	e8 dc af ff ff       	call   80100650 <cprintf>
+80105680:	8b 7b 38             	mov    0x38(%ebx),%edi
+80105683:	0f b7 73 3c          	movzwl 0x3c(%ebx),%esi
+80105687:	e8 f4 df ff ff       	call   80103680 <cpuid>
+8010568c:	c7 04 24 e4 73 10 80 	movl   $0x801073e4,(%esp)
+80105693:	89 7c 24 0c          	mov    %edi,0xc(%esp)
+80105697:	89 74 24 08          	mov    %esi,0x8(%esp)
+8010569b:	89 44 24 04          	mov    %eax,0x4(%esp)
+8010569f:	e8 ac af ff ff       	call   80100650 <cprintf>
     lapiceoi();
-80105674:	e8 07 d1 ff ff       	call   80102780 <lapiceoi>
+801056a4:	e8 d7 d0 ff ff       	call   80102780 <lapiceoi>
     break;
-80105679:	e9 02 ff ff ff       	jmp    80105580 <trap+0xb0>
-8010567e:	66 90                	xchg   %ax,%ax
+801056a9:	e9 02 ff ff ff       	jmp    801055b0 <trap+0xb0>
+801056ae:	66 90                	xchg   %ax,%ax
     ideintr();
-80105680:	e8 fb c9 ff ff       	call   80102080 <ideintr>
-80105685:	eb 96                	jmp    8010561d <trap+0x14d>
-80105687:	90                   	nop
-80105688:	90                   	nop
-80105689:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801056b0:	e8 cb c9 ff ff       	call   80102080 <ideintr>
+801056b5:	eb 96                	jmp    8010564d <trap+0x14d>
+801056b7:	90                   	nop
+801056b8:	90                   	nop
+801056b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     if(myproc()->killed)
-80105690:	e8 0b e0 ff ff       	call   801036a0 <myproc>
-80105695:	8b 70 24             	mov    0x24(%eax),%esi
-80105698:	85 f6                	test   %esi,%esi
-8010569a:	75 34                	jne    801056d0 <trap+0x200>
+801056c0:	e8 db df ff ff       	call   801036a0 <myproc>
+801056c5:	8b 70 24             	mov    0x24(%eax),%esi
+801056c8:	85 f6                	test   %esi,%esi
+801056ca:	75 34                	jne    80105700 <trap+0x200>
     myproc()->tf = tf;
-8010569c:	e8 ff df ff ff       	call   801036a0 <myproc>
-801056a1:	89 58 18             	mov    %ebx,0x18(%eax)
+801056cc:	e8 cf df ff ff       	call   801036a0 <myproc>
+801056d1:	89 58 18             	mov    %ebx,0x18(%eax)
     syscall();
-801056a4:	e8 b7 ef ff ff       	call   80104660 <syscall>
+801056d4:	e8 87 ef ff ff       	call   80104660 <syscall>
     if(myproc()->killed)
-801056a9:	e8 f2 df ff ff       	call   801036a0 <myproc>
-801056ae:	8b 48 24             	mov    0x24(%eax),%ecx
-801056b1:	85 c9                	test   %ecx,%ecx
-801056b3:	0f 84 18 ff ff ff    	je     801055d1 <trap+0x101>
+801056d9:	e8 c2 df ff ff       	call   801036a0 <myproc>
+801056de:	8b 48 24             	mov    0x24(%eax),%ecx
+801056e1:	85 c9                	test   %ecx,%ecx
+801056e3:	0f 84 18 ff ff ff    	je     80105601 <trap+0x101>
       exit(0);
-801056b9:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
+801056e9:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
 }
-801056c0:	83 c4 3c             	add    $0x3c,%esp
-801056c3:	5b                   	pop    %ebx
-801056c4:	5e                   	pop    %esi
-801056c5:	5f                   	pop    %edi
-801056c6:	5d                   	pop    %ebp
+801056f0:	83 c4 3c             	add    $0x3c,%esp
+801056f3:	5b                   	pop    %ebx
+801056f4:	5e                   	pop    %esi
+801056f5:	5f                   	pop    %edi
+801056f6:	5d                   	pop    %ebp
       exit(0);
-801056c7:	e9 d4 e3 ff ff       	jmp    80103aa0 <exit>
-801056cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801056f7:	e9 a4 e3 ff ff       	jmp    80103aa0 <exit>
+801056fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
       exit(0);
-801056d0:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-801056d7:	e8 c4 e3 ff ff       	call   80103aa0 <exit>
-801056dc:	eb be                	jmp    8010569c <trap+0x1cc>
-801056de:	66 90                	xchg   %ax,%ax
+80105700:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+80105707:	e8 94 e3 ff ff       	call   80103aa0 <exit>
+8010570c:	eb be                	jmp    801056cc <trap+0x1cc>
+8010570e:	66 90                	xchg   %ax,%ax
       acquire(&tickslock);
-801056e0:	c7 04 24 60 4d 11 80 	movl   $0x80114d60,(%esp)
-801056e7:	e8 f4 ea ff ff       	call   801041e0 <acquire>
+80105710:	c7 04 24 60 4d 11 80 	movl   $0x80114d60,(%esp)
+80105717:	e8 c4 ea ff ff       	call   801041e0 <acquire>
       wakeup(&ticks);
-801056ec:	c7 04 24 a0 55 11 80 	movl   $0x801155a0,(%esp)
+8010571c:	c7 04 24 a0 55 11 80 	movl   $0x801155a0,(%esp)
       ticks++;
-801056f3:	83 05 a0 55 11 80 01 	addl   $0x1,0x801155a0
+80105723:	83 05 a0 55 11 80 01 	addl   $0x1,0x801155a0
       wakeup(&ticks);
-801056fa:	e8 91 e6 ff ff       	call   80103d90 <wakeup>
+8010572a:	e8 61 e6 ff ff       	call   80103d90 <wakeup>
       release(&tickslock);
-801056ff:	c7 04 24 60 4d 11 80 	movl   $0x80114d60,(%esp)
-80105706:	e8 45 eb ff ff       	call   80104250 <release>
-8010570b:	e9 0d ff ff ff       	jmp    8010561d <trap+0x14d>
-80105710:	0f 20 d7             	mov    %cr2,%edi
+8010572f:	c7 04 24 60 4d 11 80 	movl   $0x80114d60,(%esp)
+80105736:	e8 15 eb ff ff       	call   80104250 <release>
+8010573b:	e9 0d ff ff ff       	jmp    8010564d <trap+0x14d>
+80105740:	0f 20 d7             	mov    %cr2,%edi
       cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n",
-80105713:	8b 73 38             	mov    0x38(%ebx),%esi
-80105716:	e8 65 df ff ff       	call   80103680 <cpuid>
-8010571b:	89 7c 24 10          	mov    %edi,0x10(%esp)
-8010571f:	89 74 24 0c          	mov    %esi,0xc(%esp)
-80105723:	89 44 24 08          	mov    %eax,0x8(%esp)
-80105727:	8b 43 30             	mov    0x30(%ebx),%eax
-8010572a:	c7 04 24 e8 73 10 80 	movl   $0x801073e8,(%esp)
-80105731:	89 44 24 04          	mov    %eax,0x4(%esp)
-80105735:	e8 16 af ff ff       	call   80100650 <cprintf>
+80105743:	8b 73 38             	mov    0x38(%ebx),%esi
+80105746:	e8 35 df ff ff       	call   80103680 <cpuid>
+8010574b:	89 7c 24 10          	mov    %edi,0x10(%esp)
+8010574f:	89 74 24 0c          	mov    %esi,0xc(%esp)
+80105753:	89 44 24 08          	mov    %eax,0x8(%esp)
+80105757:	8b 43 30             	mov    0x30(%ebx),%eax
+8010575a:	c7 04 24 08 74 10 80 	movl   $0x80107408,(%esp)
+80105761:	89 44 24 04          	mov    %eax,0x4(%esp)
+80105765:	e8 e6 ae ff ff       	call   80100650 <cprintf>
       panic("trap");
-8010573a:	c7 04 24 be 73 10 80 	movl   $0x801073be,(%esp)
-80105741:	e8 1a ac ff ff       	call   80100360 <panic>
-80105746:	66 90                	xchg   %ax,%ax
-80105748:	66 90                	xchg   %ax,%ax
-8010574a:	66 90                	xchg   %ax,%ax
-8010574c:	66 90                	xchg   %ax,%ax
-8010574e:	66 90                	xchg   %ax,%ax
+8010576a:	c7 04 24 de 73 10 80 	movl   $0x801073de,(%esp)
+80105771:	e8 ea ab ff ff       	call   80100360 <panic>
+80105776:	66 90                	xchg   %ax,%ax
+80105778:	66 90                	xchg   %ax,%ax
+8010577a:	66 90                	xchg   %ax,%ax
+8010577c:	66 90                	xchg   %ax,%ax
+8010577e:	66 90                	xchg   %ax,%ax
 
-80105750 <uartgetc>:
+80105780 <uartgetc>:
 }
 
 static int
 uartgetc(void)
 {
-  if(!uart)
-80105750:	a1 bc a5 10 80       	mov    0x8010a5bc,%eax
+  if (!uart)
+80105780:	a1 bc a5 10 80       	mov    0x8010a5bc,%eax
 {
-80105755:	55                   	push   %ebp
-80105756:	89 e5                	mov    %esp,%ebp
-  if(!uart)
-80105758:	85 c0                	test   %eax,%eax
-8010575a:	74 14                	je     80105770 <uartgetc+0x20>
+80105785:	55                   	push   %ebp
+80105786:	89 e5                	mov    %esp,%ebp
+  if (!uart)
+80105788:	85 c0                	test   %eax,%eax
+8010578a:	74 14                	je     801057a0 <uartgetc+0x20>
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-8010575c:	ba fd 03 00 00       	mov    $0x3fd,%edx
-80105761:	ec                   	in     (%dx),%al
+8010578c:	ba fd 03 00 00       	mov    $0x3fd,%edx
+80105791:	ec                   	in     (%dx),%al
     return -1;
-  if(!(inb(COM1+5) & 0x01))
-80105762:	a8 01                	test   $0x1,%al
-80105764:	74 0a                	je     80105770 <uartgetc+0x20>
-80105766:	b2 f8                	mov    $0xf8,%dl
-80105768:	ec                   	in     (%dx),%al
+  if (!(inb(COM1 + 5) & 0x01))
+80105792:	a8 01                	test   $0x1,%al
+80105794:	74 0a                	je     801057a0 <uartgetc+0x20>
+80105796:	b2 f8                	mov    $0xf8,%dl
+80105798:	ec                   	in     (%dx),%al
     return -1;
-  return inb(COM1+0);
-80105769:	0f b6 c0             	movzbl %al,%eax
+  return inb(COM1 + 0);
+80105799:	0f b6 c0             	movzbl %al,%eax
 }
-8010576c:	5d                   	pop    %ebp
-8010576d:	c3                   	ret    
-8010576e:	66 90                	xchg   %ax,%ax
+8010579c:	5d                   	pop    %ebp
+8010579d:	c3                   	ret    
+8010579e:	66 90                	xchg   %ax,%ax
     return -1;
-80105770:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-80105775:	5d                   	pop    %ebp
-80105776:	c3                   	ret    
-80105777:	89 f6                	mov    %esi,%esi
-80105779:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
-
-80105780 <uartputc>:
-  if(!uart)
-80105780:	a1 bc a5 10 80       	mov    0x8010a5bc,%eax
-80105785:	85 c0                	test   %eax,%eax
-80105787:	74 3f                	je     801057c8 <uartputc+0x48>
-{
-80105789:	55                   	push   %ebp
-8010578a:	89 e5                	mov    %esp,%ebp
-8010578c:	56                   	push   %esi
-8010578d:	be fd 03 00 00       	mov    $0x3fd,%esi
-80105792:	53                   	push   %ebx
-  if(!uart)
-80105793:	bb 80 00 00 00       	mov    $0x80,%ebx
-{
-80105798:	83 ec 10             	sub    $0x10,%esp
-8010579b:	eb 14                	jmp    801057b1 <uartputc+0x31>
-8010579d:	8d 76 00             	lea    0x0(%esi),%esi
+801057a0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+801057a5:	5d                   	pop    %ebp
+801057a6:	c3                   	ret    
+801057a7:	89 f6                	mov    %esi,%esi
+801057a9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+801057b0 <uartputc>:
+  if (!uart)
+801057b0:	a1 bc a5 10 80       	mov    0x8010a5bc,%eax
+801057b5:	85 c0                	test   %eax,%eax
+801057b7:	74 3f                	je     801057f8 <uartputc+0x48>
+{
+801057b9:	55                   	push   %ebp
+801057ba:	89 e5                	mov    %esp,%ebp
+801057bc:	56                   	push   %esi
+801057bd:	be fd 03 00 00       	mov    $0x3fd,%esi
+801057c2:	53                   	push   %ebx
+  if (!uart)
+801057c3:	bb 80 00 00 00       	mov    $0x80,%ebx
+{
+801057c8:	83 ec 10             	sub    $0x10,%esp
+801057cb:	eb 14                	jmp    801057e1 <uartputc+0x31>
+801057cd:	8d 76 00             	lea    0x0(%esi),%esi
     microdelay(10);
-801057a0:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
-801057a7:	e8 f4 cf ff ff       	call   801027a0 <microdelay>
-  for(i = 0; i < 128 && !(inb(COM1+5) & 0x20); i++)
-801057ac:	83 eb 01             	sub    $0x1,%ebx
-801057af:	74 07                	je     801057b8 <uartputc+0x38>
-801057b1:	89 f2                	mov    %esi,%edx
-801057b3:	ec                   	in     (%dx),%al
-801057b4:	a8 20                	test   $0x20,%al
-801057b6:	74 e8                	je     801057a0 <uartputc+0x20>
-  outb(COM1+0, c);
-801057b8:	0f b6 45 08          	movzbl 0x8(%ebp),%eax
+801057d0:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+801057d7:	e8 c4 cf ff ff       	call   801027a0 <microdelay>
+  for (i = 0; i < 128 && !(inb(COM1 + 5) & 0x20); i++)
+801057dc:	83 eb 01             	sub    $0x1,%ebx
+801057df:	74 07                	je     801057e8 <uartputc+0x38>
+801057e1:	89 f2                	mov    %esi,%edx
+801057e3:	ec                   	in     (%dx),%al
+801057e4:	a8 20                	test   $0x20,%al
+801057e6:	74 e8                	je     801057d0 <uartputc+0x20>
+  outb(COM1 + 0, c);
+801057e8:	0f b6 45 08          	movzbl 0x8(%ebp),%eax
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
-801057bc:	ba f8 03 00 00       	mov    $0x3f8,%edx
-801057c1:	ee                   	out    %al,(%dx)
-}
-801057c2:	83 c4 10             	add    $0x10,%esp
-801057c5:	5b                   	pop    %ebx
-801057c6:	5e                   	pop    %esi
-801057c7:	5d                   	pop    %ebp
-801057c8:	f3 c3                	repz ret 
-801057ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-801057d0 <uartinit>:
-{
-801057d0:	55                   	push   %ebp
-801057d1:	31 c9                	xor    %ecx,%ecx
-801057d3:	89 e5                	mov    %esp,%ebp
-801057d5:	89 c8                	mov    %ecx,%eax
-801057d7:	57                   	push   %edi
-801057d8:	bf fa 03 00 00       	mov    $0x3fa,%edi
-801057dd:	56                   	push   %esi
-801057de:	89 fa                	mov    %edi,%edx
-801057e0:	53                   	push   %ebx
-801057e1:	83 ec 1c             	sub    $0x1c,%esp
-801057e4:	ee                   	out    %al,(%dx)
-801057e5:	be fb 03 00 00       	mov    $0x3fb,%esi
-801057ea:	b8 80 ff ff ff       	mov    $0xffffff80,%eax
-801057ef:	89 f2                	mov    %esi,%edx
+801057ec:	ba f8 03 00 00       	mov    $0x3f8,%edx
 801057f1:	ee                   	out    %al,(%dx)
-801057f2:	b8 0c 00 00 00       	mov    $0xc,%eax
-801057f7:	b2 f8                	mov    $0xf8,%dl
-801057f9:	ee                   	out    %al,(%dx)
-801057fa:	bb f9 03 00 00       	mov    $0x3f9,%ebx
-801057ff:	89 c8                	mov    %ecx,%eax
-80105801:	89 da                	mov    %ebx,%edx
-80105803:	ee                   	out    %al,(%dx)
-80105804:	b8 03 00 00 00       	mov    $0x3,%eax
-80105809:	89 f2                	mov    %esi,%edx
-8010580b:	ee                   	out    %al,(%dx)
-8010580c:	b2 fc                	mov    $0xfc,%dl
-8010580e:	89 c8                	mov    %ecx,%eax
-80105810:	ee                   	out    %al,(%dx)
-80105811:	b8 01 00 00 00       	mov    $0x1,%eax
-80105816:	89 da                	mov    %ebx,%edx
-80105818:	ee                   	out    %al,(%dx)
+}
+801057f2:	83 c4 10             	add    $0x10,%esp
+801057f5:	5b                   	pop    %ebx
+801057f6:	5e                   	pop    %esi
+801057f7:	5d                   	pop    %ebp
+801057f8:	f3 c3                	repz ret 
+801057fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80105800 <uartinit>:
+{
+80105800:	55                   	push   %ebp
+80105801:	31 c9                	xor    %ecx,%ecx
+80105803:	89 e5                	mov    %esp,%ebp
+80105805:	89 c8                	mov    %ecx,%eax
+80105807:	57                   	push   %edi
+80105808:	bf fa 03 00 00       	mov    $0x3fa,%edi
+8010580d:	56                   	push   %esi
+8010580e:	89 fa                	mov    %edi,%edx
+80105810:	53                   	push   %ebx
+80105811:	83 ec 1c             	sub    $0x1c,%esp
+80105814:	ee                   	out    %al,(%dx)
+80105815:	be fb 03 00 00       	mov    $0x3fb,%esi
+8010581a:	b8 80 ff ff ff       	mov    $0xffffff80,%eax
+8010581f:	89 f2                	mov    %esi,%edx
+80105821:	ee                   	out    %al,(%dx)
+80105822:	b8 0c 00 00 00       	mov    $0xc,%eax
+80105827:	b2 f8                	mov    $0xf8,%dl
+80105829:	ee                   	out    %al,(%dx)
+8010582a:	bb f9 03 00 00       	mov    $0x3f9,%ebx
+8010582f:	89 c8                	mov    %ecx,%eax
+80105831:	89 da                	mov    %ebx,%edx
+80105833:	ee                   	out    %al,(%dx)
+80105834:	b8 03 00 00 00       	mov    $0x3,%eax
+80105839:	89 f2                	mov    %esi,%edx
+8010583b:	ee                   	out    %al,(%dx)
+8010583c:	b2 fc                	mov    $0xfc,%dl
+8010583e:	89 c8                	mov    %ecx,%eax
+80105840:	ee                   	out    %al,(%dx)
+80105841:	b8 01 00 00 00       	mov    $0x1,%eax
+80105846:	89 da                	mov    %ebx,%edx
+80105848:	ee                   	out    %al,(%dx)
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80105819:	b2 fd                	mov    $0xfd,%dl
-8010581b:	ec                   	in     (%dx),%al
-  if(inb(COM1+5) == 0xFF)
-8010581c:	3c ff                	cmp    $0xff,%al
-8010581e:	74 42                	je     80105862 <uartinit+0x92>
+80105849:	b2 fd                	mov    $0xfd,%dl
+8010584b:	ec                   	in     (%dx),%al
+  if (inb(COM1 + 5) == 0xFF)
+8010584c:	3c ff                	cmp    $0xff,%al
+8010584e:	74 42                	je     80105892 <uartinit+0x92>
   uart = 1;
-80105820:	c7 05 bc a5 10 80 01 	movl   $0x1,0x8010a5bc
-80105827:	00 00 00 
-8010582a:	89 fa                	mov    %edi,%edx
-8010582c:	ec                   	in     (%dx),%al
-8010582d:	b2 f8                	mov    $0xf8,%dl
-8010582f:	ec                   	in     (%dx),%al
+80105850:	c7 05 bc a5 10 80 01 	movl   $0x1,0x8010a5bc
+80105857:	00 00 00 
+8010585a:	89 fa                	mov    %edi,%edx
+8010585c:	ec                   	in     (%dx),%al
+8010585d:	b2 f8                	mov    $0xf8,%dl
+8010585f:	ec                   	in     (%dx),%al
   ioapicenable(IRQ_COM1, 0);
-80105830:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-80105837:	00 
-  for(p="xv6...\n"; *p; p++)
-80105838:	bb e0 74 10 80       	mov    $0x801074e0,%ebx
+80105860:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+80105867:	00 
+  for (p = "xv6...\n"; *p; p++)
+80105868:	bb 00 75 10 80       	mov    $0x80107500,%ebx
   ioapicenable(IRQ_COM1, 0);
-8010583d:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
-80105844:	e8 67 ca ff ff       	call   801022b0 <ioapicenable>
-  for(p="xv6...\n"; *p; p++)
-80105849:	b8 78 00 00 00       	mov    $0x78,%eax
-8010584e:	66 90                	xchg   %ax,%ax
+8010586d:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
+80105874:	e8 37 ca ff ff       	call   801022b0 <ioapicenable>
+  for (p = "xv6...\n"; *p; p++)
+80105879:	b8 78 00 00 00       	mov    $0x78,%eax
+8010587e:	66 90                	xchg   %ax,%ax
     uartputc(*p);
-80105850:	89 04 24             	mov    %eax,(%esp)
-  for(p="xv6...\n"; *p; p++)
-80105853:	83 c3 01             	add    $0x1,%ebx
+80105880:	89 04 24             	mov    %eax,(%esp)
+  for (p = "xv6...\n"; *p; p++)
+80105883:	83 c3 01             	add    $0x1,%ebx
     uartputc(*p);
-80105856:	e8 25 ff ff ff       	call   80105780 <uartputc>
-  for(p="xv6...\n"; *p; p++)
-8010585b:	0f be 03             	movsbl (%ebx),%eax
-8010585e:	84 c0                	test   %al,%al
-80105860:	75 ee                	jne    80105850 <uartinit+0x80>
-}
-80105862:	83 c4 1c             	add    $0x1c,%esp
-80105865:	5b                   	pop    %ebx
-80105866:	5e                   	pop    %esi
-80105867:	5f                   	pop    %edi
-80105868:	5d                   	pop    %ebp
-80105869:	c3                   	ret    
-8010586a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-80105870 <uartintr>:
-
-void
-uartintr(void)
-{
-80105870:	55                   	push   %ebp
-80105871:	89 e5                	mov    %esp,%ebp
-80105873:	83 ec 18             	sub    $0x18,%esp
+80105886:	e8 25 ff ff ff       	call   801057b0 <uartputc>
+  for (p = "xv6...\n"; *p; p++)
+8010588b:	0f be 03             	movsbl (%ebx),%eax
+8010588e:	84 c0                	test   %al,%al
+80105890:	75 ee                	jne    80105880 <uartinit+0x80>
+}
+80105892:	83 c4 1c             	add    $0x1c,%esp
+80105895:	5b                   	pop    %ebx
+80105896:	5e                   	pop    %esi
+80105897:	5f                   	pop    %edi
+80105898:	5d                   	pop    %ebp
+80105899:	c3                   	ret    
+8010589a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+801058a0 <uartintr>:
+
+void uartintr(void)
+{
+801058a0:	55                   	push   %ebp
+801058a1:	89 e5                	mov    %esp,%ebp
+801058a3:	83 ec 18             	sub    $0x18,%esp
   consoleintr(uartgetc);
-80105876:	c7 04 24 50 57 10 80 	movl   $0x80105750,(%esp)
-8010587d:	e8 2e af ff ff       	call   801007b0 <consoleintr>
-}
-80105882:	c9                   	leave  
-80105883:	c3                   	ret    
-
-80105884 <vector0>:
-# generated by vectors.pl - do not edit
-# handlers
-.globl alltraps
-.globl vector0
-vector0:
-  pushl $0
-80105884:	6a 00                	push   $0x0
-  pushl $0
-80105886:	6a 00                	push   $0x0
-  jmp alltraps
-80105888:	e9 50 fb ff ff       	jmp    801053dd <alltraps>
-
-8010588d <vector1>:
-.globl vector1
-vector1:
-  pushl $0
-8010588d:	6a 00                	push   $0x0
-  pushl $1
-8010588f:	6a 01                	push   $0x1
-  jmp alltraps
-80105891:	e9 47 fb ff ff       	jmp    801053dd <alltraps>
-
-80105896 <vector2>:
-.globl vector2
-vector2:
-  pushl $0
-80105896:	6a 00                	push   $0x0
-  pushl $2
-80105898:	6a 02                	push   $0x2
-  jmp alltraps
-8010589a:	e9 3e fb ff ff       	jmp    801053dd <alltraps>
-
-8010589f <vector3>:
-.globl vector3
-vector3:
-  pushl $0
-8010589f:	6a 00                	push   $0x0
-  pushl $3
-801058a1:	6a 03                	push   $0x3
-  jmp alltraps
-801058a3:	e9 35 fb ff ff       	jmp    801053dd <alltraps>
-
-801058a8 <vector4>:
-.globl vector4
-vector4:
-  pushl $0
-801058a8:	6a 00                	push   $0x0
-  pushl $4
-801058aa:	6a 04                	push   $0x4
-  jmp alltraps
-801058ac:	e9 2c fb ff ff       	jmp    801053dd <alltraps>
-
-801058b1 <vector5>:
-.globl vector5
-vector5:
-  pushl $0
-801058b1:	6a 00                	push   $0x0
-  pushl $5
-801058b3:	6a 05                	push   $0x5
-  jmp alltraps
-801058b5:	e9 23 fb ff ff       	jmp    801053dd <alltraps>
-
-801058ba <vector6>:
-.globl vector6
-vector6:
-  pushl $0
-801058ba:	6a 00                	push   $0x0
-  pushl $6
-801058bc:	6a 06                	push   $0x6
-  jmp alltraps
-801058be:	e9 1a fb ff ff       	jmp    801053dd <alltraps>
-
-801058c3 <vector7>:
-.globl vector7
-vector7:
-  pushl $0
-801058c3:	6a 00                	push   $0x0
-  pushl $7
-801058c5:	6a 07                	push   $0x7
-  jmp alltraps
-801058c7:	e9 11 fb ff ff       	jmp    801053dd <alltraps>
-
-801058cc <vector8>:
-.globl vector8
-vector8:
-  pushl $8
-801058cc:	6a 08                	push   $0x8
-  jmp alltraps
-801058ce:	e9 0a fb ff ff       	jmp    801053dd <alltraps>
-
-801058d3 <vector9>:
-.globl vector9
-vector9:
-  pushl $0
-801058d3:	6a 00                	push   $0x0
-  pushl $9
-801058d5:	6a 09                	push   $0x9
-  jmp alltraps
-801058d7:	e9 01 fb ff ff       	jmp    801053dd <alltraps>
-
-801058dc <vector10>:
-.globl vector10
-vector10:
-  pushl $10
-801058dc:	6a 0a                	push   $0xa
-  jmp alltraps
-801058de:	e9 fa fa ff ff       	jmp    801053dd <alltraps>
-
-801058e3 <vector11>:
-.globl vector11
-vector11:
-  pushl $11
-801058e3:	6a 0b                	push   $0xb
-  jmp alltraps
-801058e5:	e9 f3 fa ff ff       	jmp    801053dd <alltraps>
-
-801058ea <vector12>:
-.globl vector12
-vector12:
-  pushl $12
-801058ea:	6a 0c                	push   $0xc
-  jmp alltraps
-801058ec:	e9 ec fa ff ff       	jmp    801053dd <alltraps>
-
-801058f1 <vector13>:
-.globl vector13
-vector13:
-  pushl $13
-801058f1:	6a 0d                	push   $0xd
-  jmp alltraps
-801058f3:	e9 e5 fa ff ff       	jmp    801053dd <alltraps>
-
-801058f8 <vector14>:
-.globl vector14
-vector14:
-  pushl $14
-801058f8:	6a 0e                	push   $0xe
-  jmp alltraps
-801058fa:	e9 de fa ff ff       	jmp    801053dd <alltraps>
-
-801058ff <vector15>:
-.globl vector15
-vector15:
-  pushl $0
-801058ff:	6a 00                	push   $0x0
-  pushl $15
-80105901:	6a 0f                	push   $0xf
-  jmp alltraps
-80105903:	e9 d5 fa ff ff       	jmp    801053dd <alltraps>
-
-80105908 <vector16>:
-.globl vector16
-vector16:
-  pushl $0
-80105908:	6a 00                	push   $0x0
-  pushl $16
-8010590a:	6a 10                	push   $0x10
-  jmp alltraps
-8010590c:	e9 cc fa ff ff       	jmp    801053dd <alltraps>
-
-80105911 <vector17>:
-.globl vector17
-vector17:
-  pushl $17
-80105911:	6a 11                	push   $0x11
-  jmp alltraps
-80105913:	e9 c5 fa ff ff       	jmp    801053dd <alltraps>
-
-80105918 <vector18>:
-.globl vector18
-vector18:
-  pushl $0
-80105918:	6a 00                	push   $0x0
-  pushl $18
-8010591a:	6a 12                	push   $0x12
-  jmp alltraps
-8010591c:	e9 bc fa ff ff       	jmp    801053dd <alltraps>
-
-80105921 <vector19>:
-.globl vector19
-vector19:
-  pushl $0
-80105921:	6a 00                	push   $0x0
-  pushl $19
-80105923:	6a 13                	push   $0x13
-  jmp alltraps
-80105925:	e9 b3 fa ff ff       	jmp    801053dd <alltraps>
-
-8010592a <vector20>:
-.globl vector20
-vector20:
-  pushl $0
-8010592a:	6a 00                	push   $0x0
-  pushl $20
-8010592c:	6a 14                	push   $0x14
-  jmp alltraps
-8010592e:	e9 aa fa ff ff       	jmp    801053dd <alltraps>
-
-80105933 <vector21>:
-.globl vector21
-vector21:
-  pushl $0
-80105933:	6a 00                	push   $0x0
-  pushl $21
-80105935:	6a 15                	push   $0x15
-  jmp alltraps
-80105937:	e9 a1 fa ff ff       	jmp    801053dd <alltraps>
-
-8010593c <vector22>:
-.globl vector22
-vector22:
-  pushl $0
-8010593c:	6a 00                	push   $0x0
-  pushl $22
-8010593e:	6a 16                	push   $0x16
-  jmp alltraps
-80105940:	e9 98 fa ff ff       	jmp    801053dd <alltraps>
-
-80105945 <vector23>:
-.globl vector23
-vector23:
-  pushl $0
-80105945:	6a 00                	push   $0x0
-  pushl $23
-80105947:	6a 17                	push   $0x17
-  jmp alltraps
-80105949:	e9 8f fa ff ff       	jmp    801053dd <alltraps>
-
-8010594e <vector24>:
-.globl vector24
-vector24:
-  pushl $0
-8010594e:	6a 00                	push   $0x0
-  pushl $24
-80105950:	6a 18                	push   $0x18
-  jmp alltraps
-80105952:	e9 86 fa ff ff       	jmp    801053dd <alltraps>
-
-80105957 <vector25>:
-.globl vector25
-vector25:
-  pushl $0
-80105957:	6a 00                	push   $0x0
-  pushl $25
-80105959:	6a 19                	push   $0x19
-  jmp alltraps
-8010595b:	e9 7d fa ff ff       	jmp    801053dd <alltraps>
-
-80105960 <vector26>:
-.globl vector26
-vector26:
-  pushl $0
-80105960:	6a 00                	push   $0x0
-  pushl $26
-80105962:	6a 1a                	push   $0x1a
-  jmp alltraps
-80105964:	e9 74 fa ff ff       	jmp    801053dd <alltraps>
-
-80105969 <vector27>:
-.globl vector27
-vector27:
-  pushl $0
-80105969:	6a 00                	push   $0x0
-  pushl $27
-8010596b:	6a 1b                	push   $0x1b
-  jmp alltraps
-8010596d:	e9 6b fa ff ff       	jmp    801053dd <alltraps>
-
-80105972 <vector28>:
-.globl vector28
-vector28:
-  pushl $0
-80105972:	6a 00                	push   $0x0
-  pushl $28
-80105974:	6a 1c                	push   $0x1c
-  jmp alltraps
-80105976:	e9 62 fa ff ff       	jmp    801053dd <alltraps>
-
-8010597b <vector29>:
-.globl vector29
-vector29:
-  pushl $0
-8010597b:	6a 00                	push   $0x0
-  pushl $29
-8010597d:	6a 1d                	push   $0x1d
-  jmp alltraps
-8010597f:	e9 59 fa ff ff       	jmp    801053dd <alltraps>
-
-80105984 <vector30>:
-.globl vector30
-vector30:
-  pushl $0
-80105984:	6a 00                	push   $0x0
-  pushl $30
-80105986:	6a 1e                	push   $0x1e
-  jmp alltraps
-80105988:	e9 50 fa ff ff       	jmp    801053dd <alltraps>
-
-8010598d <vector31>:
-.globl vector31
-vector31:
-  pushl $0
-8010598d:	6a 00                	push   $0x0
-  pushl $31
-8010598f:	6a 1f                	push   $0x1f
-  jmp alltraps
-80105991:	e9 47 fa ff ff       	jmp    801053dd <alltraps>
-
-80105996 <vector32>:
-.globl vector32
-vector32:
-  pushl $0
-80105996:	6a 00                	push   $0x0
-  pushl $32
-80105998:	6a 20                	push   $0x20
-  jmp alltraps
-8010599a:	e9 3e fa ff ff       	jmp    801053dd <alltraps>
-
-8010599f <vector33>:
-.globl vector33
-vector33:
-  pushl $0
-8010599f:	6a 00                	push   $0x0
-  pushl $33
-801059a1:	6a 21                	push   $0x21
-  jmp alltraps
-801059a3:	e9 35 fa ff ff       	jmp    801053dd <alltraps>
-
-801059a8 <vector34>:
-.globl vector34
-vector34:
-  pushl $0
-801059a8:	6a 00                	push   $0x0
-  pushl $34
-801059aa:	6a 22                	push   $0x22
-  jmp alltraps
-801059ac:	e9 2c fa ff ff       	jmp    801053dd <alltraps>
-
-801059b1 <vector35>:
-.globl vector35
-vector35:
-  pushl $0
-801059b1:	6a 00                	push   $0x0
-  pushl $35
-801059b3:	6a 23                	push   $0x23
-  jmp alltraps
-801059b5:	e9 23 fa ff ff       	jmp    801053dd <alltraps>
-
-801059ba <vector36>:
-.globl vector36
-vector36:
-  pushl $0
-801059ba:	6a 00                	push   $0x0
-  pushl $36
-801059bc:	6a 24                	push   $0x24
-  jmp alltraps
-801059be:	e9 1a fa ff ff       	jmp    801053dd <alltraps>
-
-801059c3 <vector37>:
-.globl vector37
-vector37:
-  pushl $0
-801059c3:	6a 00                	push   $0x0
-  pushl $37
-801059c5:	6a 25                	push   $0x25
-  jmp alltraps
-801059c7:	e9 11 fa ff ff       	jmp    801053dd <alltraps>
-
-801059cc <vector38>:
-.globl vector38
-vector38:
-  pushl $0
-801059cc:	6a 00                	push   $0x0
-  pushl $38
-801059ce:	6a 26                	push   $0x26
-  jmp alltraps
-801059d0:	e9 08 fa ff ff       	jmp    801053dd <alltraps>
-
-801059d5 <vector39>:
-.globl vector39
-vector39:
-  pushl $0
-801059d5:	6a 00                	push   $0x0
-  pushl $39
-801059d7:	6a 27                	push   $0x27
-  jmp alltraps
-801059d9:	e9 ff f9 ff ff       	jmp    801053dd <alltraps>
-
-801059de <vector40>:
-.globl vector40
-vector40:
-  pushl $0
-801059de:	6a 00                	push   $0x0
-  pushl $40
-801059e0:	6a 28                	push   $0x28
-  jmp alltraps
-801059e2:	e9 f6 f9 ff ff       	jmp    801053dd <alltraps>
-
-801059e7 <vector41>:
-.globl vector41
-vector41:
-  pushl $0
-801059e7:	6a 00                	push   $0x0
-  pushl $41
-801059e9:	6a 29                	push   $0x29
-  jmp alltraps
-801059eb:	e9 ed f9 ff ff       	jmp    801053dd <alltraps>
-
-801059f0 <vector42>:
-.globl vector42
-vector42:
-  pushl $0
-801059f0:	6a 00                	push   $0x0
-  pushl $42
-801059f2:	6a 2a                	push   $0x2a
-  jmp alltraps
-801059f4:	e9 e4 f9 ff ff       	jmp    801053dd <alltraps>
-
-801059f9 <vector43>:
-.globl vector43
-vector43:
-  pushl $0
-801059f9:	6a 00                	push   $0x0
-  pushl $43
-801059fb:	6a 2b                	push   $0x2b
-  jmp alltraps
-801059fd:	e9 db f9 ff ff       	jmp    801053dd <alltraps>
-
-80105a02 <vector44>:
-.globl vector44
-vector44:
-  pushl $0
-80105a02:	6a 00                	push   $0x0
-  pushl $44
-80105a04:	6a 2c                	push   $0x2c
-  jmp alltraps
-80105a06:	e9 d2 f9 ff ff       	jmp    801053dd <alltraps>
-
-80105a0b <vector45>:
-.globl vector45
-vector45:
-  pushl $0
-80105a0b:	6a 00                	push   $0x0
-  pushl $45
-80105a0d:	6a 2d                	push   $0x2d
-  jmp alltraps
-80105a0f:	e9 c9 f9 ff ff       	jmp    801053dd <alltraps>
-
-80105a14 <vector46>:
-.globl vector46
-vector46:
-  pushl $0
-80105a14:	6a 00                	push   $0x0
-  pushl $46
-80105a16:	6a 2e                	push   $0x2e
-  jmp alltraps
-80105a18:	e9 c0 f9 ff ff       	jmp    801053dd <alltraps>
-
-80105a1d <vector47>:
-.globl vector47
-vector47:
-  pushl $0
-80105a1d:	6a 00                	push   $0x0
-  pushl $47
-80105a1f:	6a 2f                	push   $0x2f
-  jmp alltraps
-80105a21:	e9 b7 f9 ff ff       	jmp    801053dd <alltraps>
-
-80105a26 <vector48>:
-.globl vector48
-vector48:
-  pushl $0
-80105a26:	6a 00                	push   $0x0
-  pushl $48
-80105a28:	6a 30                	push   $0x30
-  jmp alltraps
-80105a2a:	e9 ae f9 ff ff       	jmp    801053dd <alltraps>
-
-80105a2f <vector49>:
-.globl vector49
-vector49:
-  pushl $0
-80105a2f:	6a 00                	push   $0x0
-  pushl $49
-80105a31:	6a 31                	push   $0x31
-  jmp alltraps
-80105a33:	e9 a5 f9 ff ff       	jmp    801053dd <alltraps>
-
-80105a38 <vector50>:
-.globl vector50
-vector50:
-  pushl $0
-80105a38:	6a 00                	push   $0x0
-  pushl $50
-80105a3a:	6a 32                	push   $0x32
-  jmp alltraps
-80105a3c:	e9 9c f9 ff ff       	jmp    801053dd <alltraps>
-
-80105a41 <vector51>:
-.globl vector51
-vector51:
-  pushl $0
-80105a41:	6a 00                	push   $0x0
-  pushl $51
-80105a43:	6a 33                	push   $0x33
-  jmp alltraps
-80105a45:	e9 93 f9 ff ff       	jmp    801053dd <alltraps>
-
-80105a4a <vector52>:
-.globl vector52
-vector52:
-  pushl $0
-80105a4a:	6a 00                	push   $0x0
-  pushl $52
-80105a4c:	6a 34                	push   $0x34
-  jmp alltraps
-80105a4e:	e9 8a f9 ff ff       	jmp    801053dd <alltraps>
-
-80105a53 <vector53>:
-.globl vector53
-vector53:
-  pushl $0
-80105a53:	6a 00                	push   $0x0
-  pushl $53
-80105a55:	6a 35                	push   $0x35
-  jmp alltraps
-80105a57:	e9 81 f9 ff ff       	jmp    801053dd <alltraps>
-
-80105a5c <vector54>:
-.globl vector54
-vector54:
-  pushl $0
-80105a5c:	6a 00                	push   $0x0
-  pushl $54
-80105a5e:	6a 36                	push   $0x36
-  jmp alltraps
-80105a60:	e9 78 f9 ff ff       	jmp    801053dd <alltraps>
-
-80105a65 <vector55>:
-.globl vector55
-vector55:
-  pushl $0
-80105a65:	6a 00                	push   $0x0
-  pushl $55
-80105a67:	6a 37                	push   $0x37
-  jmp alltraps
-80105a69:	e9 6f f9 ff ff       	jmp    801053dd <alltraps>
-
-80105a6e <vector56>:
-.globl vector56
-vector56:
-  pushl $0
-80105a6e:	6a 00                	push   $0x0
-  pushl $56
-80105a70:	6a 38                	push   $0x38
-  jmp alltraps
-80105a72:	e9 66 f9 ff ff       	jmp    801053dd <alltraps>
-
-80105a77 <vector57>:
-.globl vector57
-vector57:
-  pushl $0
-80105a77:	6a 00                	push   $0x0
-  pushl $57
-80105a79:	6a 39                	push   $0x39
-  jmp alltraps
-80105a7b:	e9 5d f9 ff ff       	jmp    801053dd <alltraps>
-
-80105a80 <vector58>:
-.globl vector58
-vector58:
-  pushl $0
-80105a80:	6a 00                	push   $0x0
-  pushl $58
-80105a82:	6a 3a                	push   $0x3a
-  jmp alltraps
-80105a84:	e9 54 f9 ff ff       	jmp    801053dd <alltraps>
-
-80105a89 <vector59>:
-.globl vector59
-vector59:
-  pushl $0
-80105a89:	6a 00                	push   $0x0
-  pushl $59
-80105a8b:	6a 3b                	push   $0x3b
-  jmp alltraps
-80105a8d:	e9 4b f9 ff ff       	jmp    801053dd <alltraps>
-
-80105a92 <vector60>:
-.globl vector60
-vector60:
-  pushl $0
-80105a92:	6a 00                	push   $0x0
-  pushl $60
-80105a94:	6a 3c                	push   $0x3c
-  jmp alltraps
-80105a96:	e9 42 f9 ff ff       	jmp    801053dd <alltraps>
-
-80105a9b <vector61>:
-.globl vector61
-vector61:
-  pushl $0
-80105a9b:	6a 00                	push   $0x0
-  pushl $61
-80105a9d:	6a 3d                	push   $0x3d
-  jmp alltraps
-80105a9f:	e9 39 f9 ff ff       	jmp    801053dd <alltraps>
-
-80105aa4 <vector62>:
-.globl vector62
-vector62:
-  pushl $0
-80105aa4:	6a 00                	push   $0x0
-  pushl $62
-80105aa6:	6a 3e                	push   $0x3e
-  jmp alltraps
-80105aa8:	e9 30 f9 ff ff       	jmp    801053dd <alltraps>
-
-80105aad <vector63>:
-.globl vector63
-vector63:
-  pushl $0
-80105aad:	6a 00                	push   $0x0
-  pushl $63
-80105aaf:	6a 3f                	push   $0x3f
-  jmp alltraps
-80105ab1:	e9 27 f9 ff ff       	jmp    801053dd <alltraps>
-
-80105ab6 <vector64>:
-.globl vector64
-vector64:
-  pushl $0
-80105ab6:	6a 00                	push   $0x0
-  pushl $64
-80105ab8:	6a 40                	push   $0x40
-  jmp alltraps
-80105aba:	e9 1e f9 ff ff       	jmp    801053dd <alltraps>
-
-80105abf <vector65>:
-.globl vector65
-vector65:
-  pushl $0
-80105abf:	6a 00                	push   $0x0
-  pushl $65
-80105ac1:	6a 41                	push   $0x41
-  jmp alltraps
-80105ac3:	e9 15 f9 ff ff       	jmp    801053dd <alltraps>
-
-80105ac8 <vector66>:
-.globl vector66
-vector66:
-  pushl $0
-80105ac8:	6a 00                	push   $0x0
-  pushl $66
-80105aca:	6a 42                	push   $0x42
-  jmp alltraps
-80105acc:	e9 0c f9 ff ff       	jmp    801053dd <alltraps>
-
-80105ad1 <vector67>:
-.globl vector67
-vector67:
-  pushl $0
-80105ad1:	6a 00                	push   $0x0
-  pushl $67
-80105ad3:	6a 43                	push   $0x43
-  jmp alltraps
-80105ad5:	e9 03 f9 ff ff       	jmp    801053dd <alltraps>
-
-80105ada <vector68>:
-.globl vector68
-vector68:
-  pushl $0
-80105ada:	6a 00                	push   $0x0
-  pushl $68
-80105adc:	6a 44                	push   $0x44
-  jmp alltraps
-80105ade:	e9 fa f8 ff ff       	jmp    801053dd <alltraps>
-
-80105ae3 <vector69>:
-.globl vector69
-vector69:
-  pushl $0
-80105ae3:	6a 00                	push   $0x0
-  pushl $69
-80105ae5:	6a 45                	push   $0x45
-  jmp alltraps
-80105ae7:	e9 f1 f8 ff ff       	jmp    801053dd <alltraps>
-
-80105aec <vector70>:
-.globl vector70
-vector70:
-  pushl $0
-80105aec:	6a 00                	push   $0x0
-  pushl $70
-80105aee:	6a 46                	push   $0x46
-  jmp alltraps
-80105af0:	e9 e8 f8 ff ff       	jmp    801053dd <alltraps>
-
-80105af5 <vector71>:
-.globl vector71
-vector71:
-  pushl $0
-80105af5:	6a 00                	push   $0x0
-  pushl $71
-80105af7:	6a 47                	push   $0x47
-  jmp alltraps
-80105af9:	e9 df f8 ff ff       	jmp    801053dd <alltraps>
-
-80105afe <vector72>:
-.globl vector72
-vector72:
-  pushl $0
-80105afe:	6a 00                	push   $0x0
-  pushl $72
-80105b00:	6a 48                	push   $0x48
-  jmp alltraps
-80105b02:	e9 d6 f8 ff ff       	jmp    801053dd <alltraps>
-
-80105b07 <vector73>:
-.globl vector73
-vector73:
-  pushl $0
-80105b07:	6a 00                	push   $0x0
-  pushl $73
-80105b09:	6a 49                	push   $0x49
-  jmp alltraps
-80105b0b:	e9 cd f8 ff ff       	jmp    801053dd <alltraps>
-
-80105b10 <vector74>:
-.globl vector74
-vector74:
-  pushl $0
-80105b10:	6a 00                	push   $0x0
-  pushl $74
-80105b12:	6a 4a                	push   $0x4a
-  jmp alltraps
-80105b14:	e9 c4 f8 ff ff       	jmp    801053dd <alltraps>
-
-80105b19 <vector75>:
-.globl vector75
-vector75:
-  pushl $0
-80105b19:	6a 00                	push   $0x0
-  pushl $75
-80105b1b:	6a 4b                	push   $0x4b
-  jmp alltraps
-80105b1d:	e9 bb f8 ff ff       	jmp    801053dd <alltraps>
-
-80105b22 <vector76>:
-.globl vector76
-vector76:
-  pushl $0
-80105b22:	6a 00                	push   $0x0
-  pushl $76
-80105b24:	6a 4c                	push   $0x4c
-  jmp alltraps
-80105b26:	e9 b2 f8 ff ff       	jmp    801053dd <alltraps>
-
-80105b2b <vector77>:
-.globl vector77
-vector77:
-  pushl $0
-80105b2b:	6a 00                	push   $0x0
-  pushl $77
-80105b2d:	6a 4d                	push   $0x4d
-  jmp alltraps
-80105b2f:	e9 a9 f8 ff ff       	jmp    801053dd <alltraps>
-
-80105b34 <vector78>:
-.globl vector78
-vector78:
-  pushl $0
-80105b34:	6a 00                	push   $0x0
-  pushl $78
-80105b36:	6a 4e                	push   $0x4e
-  jmp alltraps
-80105b38:	e9 a0 f8 ff ff       	jmp    801053dd <alltraps>
-
-80105b3d <vector79>:
-.globl vector79
-vector79:
-  pushl $0
-80105b3d:	6a 00                	push   $0x0
-  pushl $79
-80105b3f:	6a 4f                	push   $0x4f
-  jmp alltraps
-80105b41:	e9 97 f8 ff ff       	jmp    801053dd <alltraps>
-
-80105b46 <vector80>:
-.globl vector80
-vector80:
-  pushl $0
-80105b46:	6a 00                	push   $0x0
-  pushl $80
-80105b48:	6a 50                	push   $0x50
-  jmp alltraps
-80105b4a:	e9 8e f8 ff ff       	jmp    801053dd <alltraps>
-
-80105b4f <vector81>:
-.globl vector81
-vector81:
-  pushl $0
-80105b4f:	6a 00                	push   $0x0
-  pushl $81
-80105b51:	6a 51                	push   $0x51
-  jmp alltraps
-80105b53:	e9 85 f8 ff ff       	jmp    801053dd <alltraps>
-
-80105b58 <vector82>:
-.globl vector82
-vector82:
-  pushl $0
-80105b58:	6a 00                	push   $0x0
-  pushl $82
-80105b5a:	6a 52                	push   $0x52
-  jmp alltraps
-80105b5c:	e9 7c f8 ff ff       	jmp    801053dd <alltraps>
-
-80105b61 <vector83>:
-.globl vector83
-vector83:
-  pushl $0
-80105b61:	6a 00                	push   $0x0
-  pushl $83
-80105b63:	6a 53                	push   $0x53
-  jmp alltraps
-80105b65:	e9 73 f8 ff ff       	jmp    801053dd <alltraps>
-
-80105b6a <vector84>:
-.globl vector84
-vector84:
-  pushl $0
-80105b6a:	6a 00                	push   $0x0
-  pushl $84
-80105b6c:	6a 54                	push   $0x54
-  jmp alltraps
-80105b6e:	e9 6a f8 ff ff       	jmp    801053dd <alltraps>
-
-80105b73 <vector85>:
-.globl vector85
-vector85:
-  pushl $0
-80105b73:	6a 00                	push   $0x0
-  pushl $85
-80105b75:	6a 55                	push   $0x55
-  jmp alltraps
-80105b77:	e9 61 f8 ff ff       	jmp    801053dd <alltraps>
-
-80105b7c <vector86>:
-.globl vector86
-vector86:
-  pushl $0
-80105b7c:	6a 00                	push   $0x0
-  pushl $86
-80105b7e:	6a 56                	push   $0x56
-  jmp alltraps
-80105b80:	e9 58 f8 ff ff       	jmp    801053dd <alltraps>
-
-80105b85 <vector87>:
-.globl vector87
-vector87:
-  pushl $0
-80105b85:	6a 00                	push   $0x0
-  pushl $87
-80105b87:	6a 57                	push   $0x57
-  jmp alltraps
-80105b89:	e9 4f f8 ff ff       	jmp    801053dd <alltraps>
-
-80105b8e <vector88>:
-.globl vector88
-vector88:
-  pushl $0
-80105b8e:	6a 00                	push   $0x0
-  pushl $88
-80105b90:	6a 58                	push   $0x58
-  jmp alltraps
-80105b92:	e9 46 f8 ff ff       	jmp    801053dd <alltraps>
-
-80105b97 <vector89>:
-.globl vector89
-vector89:
-  pushl $0
-80105b97:	6a 00                	push   $0x0
-  pushl $89
-80105b99:	6a 59                	push   $0x59
-  jmp alltraps
-80105b9b:	e9 3d f8 ff ff       	jmp    801053dd <alltraps>
-
-80105ba0 <vector90>:
-.globl vector90
-vector90:
-  pushl $0
-80105ba0:	6a 00                	push   $0x0
-  pushl $90
-80105ba2:	6a 5a                	push   $0x5a
-  jmp alltraps
-80105ba4:	e9 34 f8 ff ff       	jmp    801053dd <alltraps>
-
-80105ba9 <vector91>:
-.globl vector91
-vector91:
-  pushl $0
-80105ba9:	6a 00                	push   $0x0
-  pushl $91
-80105bab:	6a 5b                	push   $0x5b
-  jmp alltraps
-80105bad:	e9 2b f8 ff ff       	jmp    801053dd <alltraps>
-
-80105bb2 <vector92>:
-.globl vector92
-vector92:
-  pushl $0
-80105bb2:	6a 00                	push   $0x0
-  pushl $92
-80105bb4:	6a 5c                	push   $0x5c
-  jmp alltraps
-80105bb6:	e9 22 f8 ff ff       	jmp    801053dd <alltraps>
-
-80105bbb <vector93>:
-.globl vector93
-vector93:
-  pushl $0
-80105bbb:	6a 00                	push   $0x0
-  pushl $93
-80105bbd:	6a 5d                	push   $0x5d
-  jmp alltraps
-80105bbf:	e9 19 f8 ff ff       	jmp    801053dd <alltraps>
-
-80105bc4 <vector94>:
-.globl vector94
-vector94:
-  pushl $0
-80105bc4:	6a 00                	push   $0x0
-  pushl $94
-80105bc6:	6a 5e                	push   $0x5e
-  jmp alltraps
-80105bc8:	e9 10 f8 ff ff       	jmp    801053dd <alltraps>
-
-80105bcd <vector95>:
-.globl vector95
-vector95:
-  pushl $0
-80105bcd:	6a 00                	push   $0x0
-  pushl $95
-80105bcf:	6a 5f                	push   $0x5f
-  jmp alltraps
-80105bd1:	e9 07 f8 ff ff       	jmp    801053dd <alltraps>
-
-80105bd6 <vector96>:
-.globl vector96
-vector96:
-  pushl $0
-80105bd6:	6a 00                	push   $0x0
-  pushl $96
-80105bd8:	6a 60                	push   $0x60
-  jmp alltraps
-80105bda:	e9 fe f7 ff ff       	jmp    801053dd <alltraps>
-
-80105bdf <vector97>:
-.globl vector97
-vector97:
-  pushl $0
-80105bdf:	6a 00                	push   $0x0
-  pushl $97
-80105be1:	6a 61                	push   $0x61
-  jmp alltraps
-80105be3:	e9 f5 f7 ff ff       	jmp    801053dd <alltraps>
-
-80105be8 <vector98>:
-.globl vector98
-vector98:
-  pushl $0
-80105be8:	6a 00                	push   $0x0
-  pushl $98
-80105bea:	6a 62                	push   $0x62
-  jmp alltraps
-80105bec:	e9 ec f7 ff ff       	jmp    801053dd <alltraps>
-
-80105bf1 <vector99>:
-.globl vector99
-vector99:
-  pushl $0
-80105bf1:	6a 00                	push   $0x0
-  pushl $99
-80105bf3:	6a 63                	push   $0x63
-  jmp alltraps
-80105bf5:	e9 e3 f7 ff ff       	jmp    801053dd <alltraps>
-
-80105bfa <vector100>:
-.globl vector100
-vector100:
-  pushl $0
-80105bfa:	6a 00                	push   $0x0
-  pushl $100
-80105bfc:	6a 64                	push   $0x64
-  jmp alltraps
-80105bfe:	e9 da f7 ff ff       	jmp    801053dd <alltraps>
-
-80105c03 <vector101>:
-.globl vector101
-vector101:
-  pushl $0
-80105c03:	6a 00                	push   $0x0
-  pushl $101
-80105c05:	6a 65                	push   $0x65
-  jmp alltraps
-80105c07:	e9 d1 f7 ff ff       	jmp    801053dd <alltraps>
-
-80105c0c <vector102>:
-.globl vector102
-vector102:
-  pushl $0
-80105c0c:	6a 00                	push   $0x0
-  pushl $102
-80105c0e:	6a 66                	push   $0x66
-  jmp alltraps
-80105c10:	e9 c8 f7 ff ff       	jmp    801053dd <alltraps>
-
-80105c15 <vector103>:
-.globl vector103
-vector103:
-  pushl $0
-80105c15:	6a 00                	push   $0x0
-  pushl $103
-80105c17:	6a 67                	push   $0x67
-  jmp alltraps
-80105c19:	e9 bf f7 ff ff       	jmp    801053dd <alltraps>
-
-80105c1e <vector104>:
-.globl vector104
-vector104:
-  pushl $0
-80105c1e:	6a 00                	push   $0x0
-  pushl $104
-80105c20:	6a 68                	push   $0x68
-  jmp alltraps
-80105c22:	e9 b6 f7 ff ff       	jmp    801053dd <alltraps>
-
-80105c27 <vector105>:
-.globl vector105
-vector105:
-  pushl $0
-80105c27:	6a 00                	push   $0x0
-  pushl $105
-80105c29:	6a 69                	push   $0x69
-  jmp alltraps
-80105c2b:	e9 ad f7 ff ff       	jmp    801053dd <alltraps>
-
-80105c30 <vector106>:
-.globl vector106
-vector106:
-  pushl $0
-80105c30:	6a 00                	push   $0x0
-  pushl $106
-80105c32:	6a 6a                	push   $0x6a
-  jmp alltraps
-80105c34:	e9 a4 f7 ff ff       	jmp    801053dd <alltraps>
-
-80105c39 <vector107>:
-.globl vector107
-vector107:
-  pushl $0
-80105c39:	6a 00                	push   $0x0
-  pushl $107
-80105c3b:	6a 6b                	push   $0x6b
-  jmp alltraps
-80105c3d:	e9 9b f7 ff ff       	jmp    801053dd <alltraps>
-
-80105c42 <vector108>:
-.globl vector108
-vector108:
-  pushl $0
-80105c42:	6a 00                	push   $0x0
-  pushl $108
-80105c44:	6a 6c                	push   $0x6c
-  jmp alltraps
-80105c46:	e9 92 f7 ff ff       	jmp    801053dd <alltraps>
-
-80105c4b <vector109>:
-.globl vector109
-vector109:
-  pushl $0
-80105c4b:	6a 00                	push   $0x0
-  pushl $109
-80105c4d:	6a 6d                	push   $0x6d
-  jmp alltraps
-80105c4f:	e9 89 f7 ff ff       	jmp    801053dd <alltraps>
-
-80105c54 <vector110>:
-.globl vector110
-vector110:
-  pushl $0
-80105c54:	6a 00                	push   $0x0
-  pushl $110
-80105c56:	6a 6e                	push   $0x6e
-  jmp alltraps
-80105c58:	e9 80 f7 ff ff       	jmp    801053dd <alltraps>
-
-80105c5d <vector111>:
-.globl vector111
-vector111:
-  pushl $0
-80105c5d:	6a 00                	push   $0x0
-  pushl $111
-80105c5f:	6a 6f                	push   $0x6f
-  jmp alltraps
-80105c61:	e9 77 f7 ff ff       	jmp    801053dd <alltraps>
-
-80105c66 <vector112>:
-.globl vector112
-vector112:
-  pushl $0
-80105c66:	6a 00                	push   $0x0
-  pushl $112
-80105c68:	6a 70                	push   $0x70
-  jmp alltraps
-80105c6a:	e9 6e f7 ff ff       	jmp    801053dd <alltraps>
-
-80105c6f <vector113>:
-.globl vector113
-vector113:
-  pushl $0
-80105c6f:	6a 00                	push   $0x0
-  pushl $113
-80105c71:	6a 71                	push   $0x71
-  jmp alltraps
-80105c73:	e9 65 f7 ff ff       	jmp    801053dd <alltraps>
-
-80105c78 <vector114>:
-.globl vector114
-vector114:
-  pushl $0
-80105c78:	6a 00                	push   $0x0
-  pushl $114
-80105c7a:	6a 72                	push   $0x72
-  jmp alltraps
-80105c7c:	e9 5c f7 ff ff       	jmp    801053dd <alltraps>
-
-80105c81 <vector115>:
-.globl vector115
-vector115:
-  pushl $0
-80105c81:	6a 00                	push   $0x0
-  pushl $115
-80105c83:	6a 73                	push   $0x73
-  jmp alltraps
-80105c85:	e9 53 f7 ff ff       	jmp    801053dd <alltraps>
-
-80105c8a <vector116>:
-.globl vector116
-vector116:
-  pushl $0
-80105c8a:	6a 00                	push   $0x0
-  pushl $116
-80105c8c:	6a 74                	push   $0x74
-  jmp alltraps
-80105c8e:	e9 4a f7 ff ff       	jmp    801053dd <alltraps>
-
-80105c93 <vector117>:
-.globl vector117
-vector117:
-  pushl $0
-80105c93:	6a 00                	push   $0x0
-  pushl $117
-80105c95:	6a 75                	push   $0x75
-  jmp alltraps
-80105c97:	e9 41 f7 ff ff       	jmp    801053dd <alltraps>
-
-80105c9c <vector118>:
-.globl vector118
-vector118:
-  pushl $0
-80105c9c:	6a 00                	push   $0x0
-  pushl $118
-80105c9e:	6a 76                	push   $0x76
-  jmp alltraps
-80105ca0:	e9 38 f7 ff ff       	jmp    801053dd <alltraps>
-
-80105ca5 <vector119>:
-.globl vector119
-vector119:
-  pushl $0
-80105ca5:	6a 00                	push   $0x0
-  pushl $119
-80105ca7:	6a 77                	push   $0x77
-  jmp alltraps
-80105ca9:	e9 2f f7 ff ff       	jmp    801053dd <alltraps>
-
-80105cae <vector120>:
-.globl vector120
-vector120:
-  pushl $0
-80105cae:	6a 00                	push   $0x0
-  pushl $120
-80105cb0:	6a 78                	push   $0x78
-  jmp alltraps
-80105cb2:	e9 26 f7 ff ff       	jmp    801053dd <alltraps>
-
-80105cb7 <vector121>:
-.globl vector121
-vector121:
-  pushl $0
-80105cb7:	6a 00                	push   $0x0
-  pushl $121
-80105cb9:	6a 79                	push   $0x79
-  jmp alltraps
-80105cbb:	e9 1d f7 ff ff       	jmp    801053dd <alltraps>
-
-80105cc0 <vector122>:
-.globl vector122
-vector122:
-  pushl $0
-80105cc0:	6a 00                	push   $0x0
-  pushl $122
-80105cc2:	6a 7a                	push   $0x7a
-  jmp alltraps
-80105cc4:	e9 14 f7 ff ff       	jmp    801053dd <alltraps>
-
-80105cc9 <vector123>:
-.globl vector123
-vector123:
-  pushl $0
-80105cc9:	6a 00                	push   $0x0
-  pushl $123
-80105ccb:	6a 7b                	push   $0x7b
-  jmp alltraps
-80105ccd:	e9 0b f7 ff ff       	jmp    801053dd <alltraps>
-
-80105cd2 <vector124>:
-.globl vector124
-vector124:
-  pushl $0
-80105cd2:	6a 00                	push   $0x0
-  pushl $124
-80105cd4:	6a 7c                	push   $0x7c
-  jmp alltraps
-80105cd6:	e9 02 f7 ff ff       	jmp    801053dd <alltraps>
-
-80105cdb <vector125>:
-.globl vector125
-vector125:
-  pushl $0
-80105cdb:	6a 00                	push   $0x0
-  pushl $125
-80105cdd:	6a 7d                	push   $0x7d
-  jmp alltraps
-80105cdf:	e9 f9 f6 ff ff       	jmp    801053dd <alltraps>
-
-80105ce4 <vector126>:
-.globl vector126
-vector126:
-  pushl $0
-80105ce4:	6a 00                	push   $0x0
-  pushl $126
-80105ce6:	6a 7e                	push   $0x7e
-  jmp alltraps
-80105ce8:	e9 f0 f6 ff ff       	jmp    801053dd <alltraps>
-
-80105ced <vector127>:
-.globl vector127
-vector127:
-  pushl $0
-80105ced:	6a 00                	push   $0x0
-  pushl $127
-80105cef:	6a 7f                	push   $0x7f
-  jmp alltraps
-80105cf1:	e9 e7 f6 ff ff       	jmp    801053dd <alltraps>
-
-80105cf6 <vector128>:
-.globl vector128
-vector128:
-  pushl $0
-80105cf6:	6a 00                	push   $0x0
-  pushl $128
-80105cf8:	68 80 00 00 00       	push   $0x80
-  jmp alltraps
-80105cfd:	e9 db f6 ff ff       	jmp    801053dd <alltraps>
-
-80105d02 <vector129>:
-.globl vector129
-vector129:
-  pushl $0
+801058a6:	c7 04 24 80 57 10 80 	movl   $0x80105780,(%esp)
+801058ad:	e8 fe ae ff ff       	call   801007b0 <consoleintr>
+}
+801058b2:	c9                   	leave  
+801058b3:	c3                   	ret    
+
+801058b4 <vector0>:
+801058b4:	6a 00                	push   $0x0
+801058b6:	6a 00                	push   $0x0
+801058b8:	e9 50 fb ff ff       	jmp    8010540d <alltraps>
+
+801058bd <vector1>:
+801058bd:	6a 00                	push   $0x0
+801058bf:	6a 01                	push   $0x1
+801058c1:	e9 47 fb ff ff       	jmp    8010540d <alltraps>
+
+801058c6 <vector2>:
+801058c6:	6a 00                	push   $0x0
+801058c8:	6a 02                	push   $0x2
+801058ca:	e9 3e fb ff ff       	jmp    8010540d <alltraps>
+
+801058cf <vector3>:
+801058cf:	6a 00                	push   $0x0
+801058d1:	6a 03                	push   $0x3
+801058d3:	e9 35 fb ff ff       	jmp    8010540d <alltraps>
+
+801058d8 <vector4>:
+801058d8:	6a 00                	push   $0x0
+801058da:	6a 04                	push   $0x4
+801058dc:	e9 2c fb ff ff       	jmp    8010540d <alltraps>
+
+801058e1 <vector5>:
+801058e1:	6a 00                	push   $0x0
+801058e3:	6a 05                	push   $0x5
+801058e5:	e9 23 fb ff ff       	jmp    8010540d <alltraps>
+
+801058ea <vector6>:
+801058ea:	6a 00                	push   $0x0
+801058ec:	6a 06                	push   $0x6
+801058ee:	e9 1a fb ff ff       	jmp    8010540d <alltraps>
+
+801058f3 <vector7>:
+801058f3:	6a 00                	push   $0x0
+801058f5:	6a 07                	push   $0x7
+801058f7:	e9 11 fb ff ff       	jmp    8010540d <alltraps>
+
+801058fc <vector8>:
+801058fc:	6a 08                	push   $0x8
+801058fe:	e9 0a fb ff ff       	jmp    8010540d <alltraps>
+
+80105903 <vector9>:
+80105903:	6a 00                	push   $0x0
+80105905:	6a 09                	push   $0x9
+80105907:	e9 01 fb ff ff       	jmp    8010540d <alltraps>
+
+8010590c <vector10>:
+8010590c:	6a 0a                	push   $0xa
+8010590e:	e9 fa fa ff ff       	jmp    8010540d <alltraps>
+
+80105913 <vector11>:
+80105913:	6a 0b                	push   $0xb
+80105915:	e9 f3 fa ff ff       	jmp    8010540d <alltraps>
+
+8010591a <vector12>:
+8010591a:	6a 0c                	push   $0xc
+8010591c:	e9 ec fa ff ff       	jmp    8010540d <alltraps>
+
+80105921 <vector13>:
+80105921:	6a 0d                	push   $0xd
+80105923:	e9 e5 fa ff ff       	jmp    8010540d <alltraps>
+
+80105928 <vector14>:
+80105928:	6a 0e                	push   $0xe
+8010592a:	e9 de fa ff ff       	jmp    8010540d <alltraps>
+
+8010592f <vector15>:
+8010592f:	6a 00                	push   $0x0
+80105931:	6a 0f                	push   $0xf
+80105933:	e9 d5 fa ff ff       	jmp    8010540d <alltraps>
+
+80105938 <vector16>:
+80105938:	6a 00                	push   $0x0
+8010593a:	6a 10                	push   $0x10
+8010593c:	e9 cc fa ff ff       	jmp    8010540d <alltraps>
+
+80105941 <vector17>:
+80105941:	6a 11                	push   $0x11
+80105943:	e9 c5 fa ff ff       	jmp    8010540d <alltraps>
+
+80105948 <vector18>:
+80105948:	6a 00                	push   $0x0
+8010594a:	6a 12                	push   $0x12
+8010594c:	e9 bc fa ff ff       	jmp    8010540d <alltraps>
+
+80105951 <vector19>:
+80105951:	6a 00                	push   $0x0
+80105953:	6a 13                	push   $0x13
+80105955:	e9 b3 fa ff ff       	jmp    8010540d <alltraps>
+
+8010595a <vector20>:
+8010595a:	6a 00                	push   $0x0
+8010595c:	6a 14                	push   $0x14
+8010595e:	e9 aa fa ff ff       	jmp    8010540d <alltraps>
+
+80105963 <vector21>:
+80105963:	6a 00                	push   $0x0
+80105965:	6a 15                	push   $0x15
+80105967:	e9 a1 fa ff ff       	jmp    8010540d <alltraps>
+
+8010596c <vector22>:
+8010596c:	6a 00                	push   $0x0
+8010596e:	6a 16                	push   $0x16
+80105970:	e9 98 fa ff ff       	jmp    8010540d <alltraps>
+
+80105975 <vector23>:
+80105975:	6a 00                	push   $0x0
+80105977:	6a 17                	push   $0x17
+80105979:	e9 8f fa ff ff       	jmp    8010540d <alltraps>
+
+8010597e <vector24>:
+8010597e:	6a 00                	push   $0x0
+80105980:	6a 18                	push   $0x18
+80105982:	e9 86 fa ff ff       	jmp    8010540d <alltraps>
+
+80105987 <vector25>:
+80105987:	6a 00                	push   $0x0
+80105989:	6a 19                	push   $0x19
+8010598b:	e9 7d fa ff ff       	jmp    8010540d <alltraps>
+
+80105990 <vector26>:
+80105990:	6a 00                	push   $0x0
+80105992:	6a 1a                	push   $0x1a
+80105994:	e9 74 fa ff ff       	jmp    8010540d <alltraps>
+
+80105999 <vector27>:
+80105999:	6a 00                	push   $0x0
+8010599b:	6a 1b                	push   $0x1b
+8010599d:	e9 6b fa ff ff       	jmp    8010540d <alltraps>
+
+801059a2 <vector28>:
+801059a2:	6a 00                	push   $0x0
+801059a4:	6a 1c                	push   $0x1c
+801059a6:	e9 62 fa ff ff       	jmp    8010540d <alltraps>
+
+801059ab <vector29>:
+801059ab:	6a 00                	push   $0x0
+801059ad:	6a 1d                	push   $0x1d
+801059af:	e9 59 fa ff ff       	jmp    8010540d <alltraps>
+
+801059b4 <vector30>:
+801059b4:	6a 00                	push   $0x0
+801059b6:	6a 1e                	push   $0x1e
+801059b8:	e9 50 fa ff ff       	jmp    8010540d <alltraps>
+
+801059bd <vector31>:
+801059bd:	6a 00                	push   $0x0
+801059bf:	6a 1f                	push   $0x1f
+801059c1:	e9 47 fa ff ff       	jmp    8010540d <alltraps>
+
+801059c6 <vector32>:
+801059c6:	6a 00                	push   $0x0
+801059c8:	6a 20                	push   $0x20
+801059ca:	e9 3e fa ff ff       	jmp    8010540d <alltraps>
+
+801059cf <vector33>:
+801059cf:	6a 00                	push   $0x0
+801059d1:	6a 21                	push   $0x21
+801059d3:	e9 35 fa ff ff       	jmp    8010540d <alltraps>
+
+801059d8 <vector34>:
+801059d8:	6a 00                	push   $0x0
+801059da:	6a 22                	push   $0x22
+801059dc:	e9 2c fa ff ff       	jmp    8010540d <alltraps>
+
+801059e1 <vector35>:
+801059e1:	6a 00                	push   $0x0
+801059e3:	6a 23                	push   $0x23
+801059e5:	e9 23 fa ff ff       	jmp    8010540d <alltraps>
+
+801059ea <vector36>:
+801059ea:	6a 00                	push   $0x0
+801059ec:	6a 24                	push   $0x24
+801059ee:	e9 1a fa ff ff       	jmp    8010540d <alltraps>
+
+801059f3 <vector37>:
+801059f3:	6a 00                	push   $0x0
+801059f5:	6a 25                	push   $0x25
+801059f7:	e9 11 fa ff ff       	jmp    8010540d <alltraps>
+
+801059fc <vector38>:
+801059fc:	6a 00                	push   $0x0
+801059fe:	6a 26                	push   $0x26
+80105a00:	e9 08 fa ff ff       	jmp    8010540d <alltraps>
+
+80105a05 <vector39>:
+80105a05:	6a 00                	push   $0x0
+80105a07:	6a 27                	push   $0x27
+80105a09:	e9 ff f9 ff ff       	jmp    8010540d <alltraps>
+
+80105a0e <vector40>:
+80105a0e:	6a 00                	push   $0x0
+80105a10:	6a 28                	push   $0x28
+80105a12:	e9 f6 f9 ff ff       	jmp    8010540d <alltraps>
+
+80105a17 <vector41>:
+80105a17:	6a 00                	push   $0x0
+80105a19:	6a 29                	push   $0x29
+80105a1b:	e9 ed f9 ff ff       	jmp    8010540d <alltraps>
+
+80105a20 <vector42>:
+80105a20:	6a 00                	push   $0x0
+80105a22:	6a 2a                	push   $0x2a
+80105a24:	e9 e4 f9 ff ff       	jmp    8010540d <alltraps>
+
+80105a29 <vector43>:
+80105a29:	6a 00                	push   $0x0
+80105a2b:	6a 2b                	push   $0x2b
+80105a2d:	e9 db f9 ff ff       	jmp    8010540d <alltraps>
+
+80105a32 <vector44>:
+80105a32:	6a 00                	push   $0x0
+80105a34:	6a 2c                	push   $0x2c
+80105a36:	e9 d2 f9 ff ff       	jmp    8010540d <alltraps>
+
+80105a3b <vector45>:
+80105a3b:	6a 00                	push   $0x0
+80105a3d:	6a 2d                	push   $0x2d
+80105a3f:	e9 c9 f9 ff ff       	jmp    8010540d <alltraps>
+
+80105a44 <vector46>:
+80105a44:	6a 00                	push   $0x0
+80105a46:	6a 2e                	push   $0x2e
+80105a48:	e9 c0 f9 ff ff       	jmp    8010540d <alltraps>
+
+80105a4d <vector47>:
+80105a4d:	6a 00                	push   $0x0
+80105a4f:	6a 2f                	push   $0x2f
+80105a51:	e9 b7 f9 ff ff       	jmp    8010540d <alltraps>
+
+80105a56 <vector48>:
+80105a56:	6a 00                	push   $0x0
+80105a58:	6a 30                	push   $0x30
+80105a5a:	e9 ae f9 ff ff       	jmp    8010540d <alltraps>
+
+80105a5f <vector49>:
+80105a5f:	6a 00                	push   $0x0
+80105a61:	6a 31                	push   $0x31
+80105a63:	e9 a5 f9 ff ff       	jmp    8010540d <alltraps>
+
+80105a68 <vector50>:
+80105a68:	6a 00                	push   $0x0
+80105a6a:	6a 32                	push   $0x32
+80105a6c:	e9 9c f9 ff ff       	jmp    8010540d <alltraps>
+
+80105a71 <vector51>:
+80105a71:	6a 00                	push   $0x0
+80105a73:	6a 33                	push   $0x33
+80105a75:	e9 93 f9 ff ff       	jmp    8010540d <alltraps>
+
+80105a7a <vector52>:
+80105a7a:	6a 00                	push   $0x0
+80105a7c:	6a 34                	push   $0x34
+80105a7e:	e9 8a f9 ff ff       	jmp    8010540d <alltraps>
+
+80105a83 <vector53>:
+80105a83:	6a 00                	push   $0x0
+80105a85:	6a 35                	push   $0x35
+80105a87:	e9 81 f9 ff ff       	jmp    8010540d <alltraps>
+
+80105a8c <vector54>:
+80105a8c:	6a 00                	push   $0x0
+80105a8e:	6a 36                	push   $0x36
+80105a90:	e9 78 f9 ff ff       	jmp    8010540d <alltraps>
+
+80105a95 <vector55>:
+80105a95:	6a 00                	push   $0x0
+80105a97:	6a 37                	push   $0x37
+80105a99:	e9 6f f9 ff ff       	jmp    8010540d <alltraps>
+
+80105a9e <vector56>:
+80105a9e:	6a 00                	push   $0x0
+80105aa0:	6a 38                	push   $0x38
+80105aa2:	e9 66 f9 ff ff       	jmp    8010540d <alltraps>
+
+80105aa7 <vector57>:
+80105aa7:	6a 00                	push   $0x0
+80105aa9:	6a 39                	push   $0x39
+80105aab:	e9 5d f9 ff ff       	jmp    8010540d <alltraps>
+
+80105ab0 <vector58>:
+80105ab0:	6a 00                	push   $0x0
+80105ab2:	6a 3a                	push   $0x3a
+80105ab4:	e9 54 f9 ff ff       	jmp    8010540d <alltraps>
+
+80105ab9 <vector59>:
+80105ab9:	6a 00                	push   $0x0
+80105abb:	6a 3b                	push   $0x3b
+80105abd:	e9 4b f9 ff ff       	jmp    8010540d <alltraps>
+
+80105ac2 <vector60>:
+80105ac2:	6a 00                	push   $0x0
+80105ac4:	6a 3c                	push   $0x3c
+80105ac6:	e9 42 f9 ff ff       	jmp    8010540d <alltraps>
+
+80105acb <vector61>:
+80105acb:	6a 00                	push   $0x0
+80105acd:	6a 3d                	push   $0x3d
+80105acf:	e9 39 f9 ff ff       	jmp    8010540d <alltraps>
+
+80105ad4 <vector62>:
+80105ad4:	6a 00                	push   $0x0
+80105ad6:	6a 3e                	push   $0x3e
+80105ad8:	e9 30 f9 ff ff       	jmp    8010540d <alltraps>
+
+80105add <vector63>:
+80105add:	6a 00                	push   $0x0
+80105adf:	6a 3f                	push   $0x3f
+80105ae1:	e9 27 f9 ff ff       	jmp    8010540d <alltraps>
+
+80105ae6 <vector64>:
+80105ae6:	6a 00                	push   $0x0
+80105ae8:	6a 40                	push   $0x40
+80105aea:	e9 1e f9 ff ff       	jmp    8010540d <alltraps>
+
+80105aef <vector65>:
+80105aef:	6a 00                	push   $0x0
+80105af1:	6a 41                	push   $0x41
+80105af3:	e9 15 f9 ff ff       	jmp    8010540d <alltraps>
+
+80105af8 <vector66>:
+80105af8:	6a 00                	push   $0x0
+80105afa:	6a 42                	push   $0x42
+80105afc:	e9 0c f9 ff ff       	jmp    8010540d <alltraps>
+
+80105b01 <vector67>:
+80105b01:	6a 00                	push   $0x0
+80105b03:	6a 43                	push   $0x43
+80105b05:	e9 03 f9 ff ff       	jmp    8010540d <alltraps>
+
+80105b0a <vector68>:
+80105b0a:	6a 00                	push   $0x0
+80105b0c:	6a 44                	push   $0x44
+80105b0e:	e9 fa f8 ff ff       	jmp    8010540d <alltraps>
+
+80105b13 <vector69>:
+80105b13:	6a 00                	push   $0x0
+80105b15:	6a 45                	push   $0x45
+80105b17:	e9 f1 f8 ff ff       	jmp    8010540d <alltraps>
+
+80105b1c <vector70>:
+80105b1c:	6a 00                	push   $0x0
+80105b1e:	6a 46                	push   $0x46
+80105b20:	e9 e8 f8 ff ff       	jmp    8010540d <alltraps>
+
+80105b25 <vector71>:
+80105b25:	6a 00                	push   $0x0
+80105b27:	6a 47                	push   $0x47
+80105b29:	e9 df f8 ff ff       	jmp    8010540d <alltraps>
+
+80105b2e <vector72>:
+80105b2e:	6a 00                	push   $0x0
+80105b30:	6a 48                	push   $0x48
+80105b32:	e9 d6 f8 ff ff       	jmp    8010540d <alltraps>
+
+80105b37 <vector73>:
+80105b37:	6a 00                	push   $0x0
+80105b39:	6a 49                	push   $0x49
+80105b3b:	e9 cd f8 ff ff       	jmp    8010540d <alltraps>
+
+80105b40 <vector74>:
+80105b40:	6a 00                	push   $0x0
+80105b42:	6a 4a                	push   $0x4a
+80105b44:	e9 c4 f8 ff ff       	jmp    8010540d <alltraps>
+
+80105b49 <vector75>:
+80105b49:	6a 00                	push   $0x0
+80105b4b:	6a 4b                	push   $0x4b
+80105b4d:	e9 bb f8 ff ff       	jmp    8010540d <alltraps>
+
+80105b52 <vector76>:
+80105b52:	6a 00                	push   $0x0
+80105b54:	6a 4c                	push   $0x4c
+80105b56:	e9 b2 f8 ff ff       	jmp    8010540d <alltraps>
+
+80105b5b <vector77>:
+80105b5b:	6a 00                	push   $0x0
+80105b5d:	6a 4d                	push   $0x4d
+80105b5f:	e9 a9 f8 ff ff       	jmp    8010540d <alltraps>
+
+80105b64 <vector78>:
+80105b64:	6a 00                	push   $0x0
+80105b66:	6a 4e                	push   $0x4e
+80105b68:	e9 a0 f8 ff ff       	jmp    8010540d <alltraps>
+
+80105b6d <vector79>:
+80105b6d:	6a 00                	push   $0x0
+80105b6f:	6a 4f                	push   $0x4f
+80105b71:	e9 97 f8 ff ff       	jmp    8010540d <alltraps>
+
+80105b76 <vector80>:
+80105b76:	6a 00                	push   $0x0
+80105b78:	6a 50                	push   $0x50
+80105b7a:	e9 8e f8 ff ff       	jmp    8010540d <alltraps>
+
+80105b7f <vector81>:
+80105b7f:	6a 00                	push   $0x0
+80105b81:	6a 51                	push   $0x51
+80105b83:	e9 85 f8 ff ff       	jmp    8010540d <alltraps>
+
+80105b88 <vector82>:
+80105b88:	6a 00                	push   $0x0
+80105b8a:	6a 52                	push   $0x52
+80105b8c:	e9 7c f8 ff ff       	jmp    8010540d <alltraps>
+
+80105b91 <vector83>:
+80105b91:	6a 00                	push   $0x0
+80105b93:	6a 53                	push   $0x53
+80105b95:	e9 73 f8 ff ff       	jmp    8010540d <alltraps>
+
+80105b9a <vector84>:
+80105b9a:	6a 00                	push   $0x0
+80105b9c:	6a 54                	push   $0x54
+80105b9e:	e9 6a f8 ff ff       	jmp    8010540d <alltraps>
+
+80105ba3 <vector85>:
+80105ba3:	6a 00                	push   $0x0
+80105ba5:	6a 55                	push   $0x55
+80105ba7:	e9 61 f8 ff ff       	jmp    8010540d <alltraps>
+
+80105bac <vector86>:
+80105bac:	6a 00                	push   $0x0
+80105bae:	6a 56                	push   $0x56
+80105bb0:	e9 58 f8 ff ff       	jmp    8010540d <alltraps>
+
+80105bb5 <vector87>:
+80105bb5:	6a 00                	push   $0x0
+80105bb7:	6a 57                	push   $0x57
+80105bb9:	e9 4f f8 ff ff       	jmp    8010540d <alltraps>
+
+80105bbe <vector88>:
+80105bbe:	6a 00                	push   $0x0
+80105bc0:	6a 58                	push   $0x58
+80105bc2:	e9 46 f8 ff ff       	jmp    8010540d <alltraps>
+
+80105bc7 <vector89>:
+80105bc7:	6a 00                	push   $0x0
+80105bc9:	6a 59                	push   $0x59
+80105bcb:	e9 3d f8 ff ff       	jmp    8010540d <alltraps>
+
+80105bd0 <vector90>:
+80105bd0:	6a 00                	push   $0x0
+80105bd2:	6a 5a                	push   $0x5a
+80105bd4:	e9 34 f8 ff ff       	jmp    8010540d <alltraps>
+
+80105bd9 <vector91>:
+80105bd9:	6a 00                	push   $0x0
+80105bdb:	6a 5b                	push   $0x5b
+80105bdd:	e9 2b f8 ff ff       	jmp    8010540d <alltraps>
+
+80105be2 <vector92>:
+80105be2:	6a 00                	push   $0x0
+80105be4:	6a 5c                	push   $0x5c
+80105be6:	e9 22 f8 ff ff       	jmp    8010540d <alltraps>
+
+80105beb <vector93>:
+80105beb:	6a 00                	push   $0x0
+80105bed:	6a 5d                	push   $0x5d
+80105bef:	e9 19 f8 ff ff       	jmp    8010540d <alltraps>
+
+80105bf4 <vector94>:
+80105bf4:	6a 00                	push   $0x0
+80105bf6:	6a 5e                	push   $0x5e
+80105bf8:	e9 10 f8 ff ff       	jmp    8010540d <alltraps>
+
+80105bfd <vector95>:
+80105bfd:	6a 00                	push   $0x0
+80105bff:	6a 5f                	push   $0x5f
+80105c01:	e9 07 f8 ff ff       	jmp    8010540d <alltraps>
+
+80105c06 <vector96>:
+80105c06:	6a 00                	push   $0x0
+80105c08:	6a 60                	push   $0x60
+80105c0a:	e9 fe f7 ff ff       	jmp    8010540d <alltraps>
+
+80105c0f <vector97>:
+80105c0f:	6a 00                	push   $0x0
+80105c11:	6a 61                	push   $0x61
+80105c13:	e9 f5 f7 ff ff       	jmp    8010540d <alltraps>
+
+80105c18 <vector98>:
+80105c18:	6a 00                	push   $0x0
+80105c1a:	6a 62                	push   $0x62
+80105c1c:	e9 ec f7 ff ff       	jmp    8010540d <alltraps>
+
+80105c21 <vector99>:
+80105c21:	6a 00                	push   $0x0
+80105c23:	6a 63                	push   $0x63
+80105c25:	e9 e3 f7 ff ff       	jmp    8010540d <alltraps>
+
+80105c2a <vector100>:
+80105c2a:	6a 00                	push   $0x0
+80105c2c:	6a 64                	push   $0x64
+80105c2e:	e9 da f7 ff ff       	jmp    8010540d <alltraps>
+
+80105c33 <vector101>:
+80105c33:	6a 00                	push   $0x0
+80105c35:	6a 65                	push   $0x65
+80105c37:	e9 d1 f7 ff ff       	jmp    8010540d <alltraps>
+
+80105c3c <vector102>:
+80105c3c:	6a 00                	push   $0x0
+80105c3e:	6a 66                	push   $0x66
+80105c40:	e9 c8 f7 ff ff       	jmp    8010540d <alltraps>
+
+80105c45 <vector103>:
+80105c45:	6a 00                	push   $0x0
+80105c47:	6a 67                	push   $0x67
+80105c49:	e9 bf f7 ff ff       	jmp    8010540d <alltraps>
+
+80105c4e <vector104>:
+80105c4e:	6a 00                	push   $0x0
+80105c50:	6a 68                	push   $0x68
+80105c52:	e9 b6 f7 ff ff       	jmp    8010540d <alltraps>
+
+80105c57 <vector105>:
+80105c57:	6a 00                	push   $0x0
+80105c59:	6a 69                	push   $0x69
+80105c5b:	e9 ad f7 ff ff       	jmp    8010540d <alltraps>
+
+80105c60 <vector106>:
+80105c60:	6a 00                	push   $0x0
+80105c62:	6a 6a                	push   $0x6a
+80105c64:	e9 a4 f7 ff ff       	jmp    8010540d <alltraps>
+
+80105c69 <vector107>:
+80105c69:	6a 00                	push   $0x0
+80105c6b:	6a 6b                	push   $0x6b
+80105c6d:	e9 9b f7 ff ff       	jmp    8010540d <alltraps>
+
+80105c72 <vector108>:
+80105c72:	6a 00                	push   $0x0
+80105c74:	6a 6c                	push   $0x6c
+80105c76:	e9 92 f7 ff ff       	jmp    8010540d <alltraps>
+
+80105c7b <vector109>:
+80105c7b:	6a 00                	push   $0x0
+80105c7d:	6a 6d                	push   $0x6d
+80105c7f:	e9 89 f7 ff ff       	jmp    8010540d <alltraps>
+
+80105c84 <vector110>:
+80105c84:	6a 00                	push   $0x0
+80105c86:	6a 6e                	push   $0x6e
+80105c88:	e9 80 f7 ff ff       	jmp    8010540d <alltraps>
+
+80105c8d <vector111>:
+80105c8d:	6a 00                	push   $0x0
+80105c8f:	6a 6f                	push   $0x6f
+80105c91:	e9 77 f7 ff ff       	jmp    8010540d <alltraps>
+
+80105c96 <vector112>:
+80105c96:	6a 00                	push   $0x0
+80105c98:	6a 70                	push   $0x70
+80105c9a:	e9 6e f7 ff ff       	jmp    8010540d <alltraps>
+
+80105c9f <vector113>:
+80105c9f:	6a 00                	push   $0x0
+80105ca1:	6a 71                	push   $0x71
+80105ca3:	e9 65 f7 ff ff       	jmp    8010540d <alltraps>
+
+80105ca8 <vector114>:
+80105ca8:	6a 00                	push   $0x0
+80105caa:	6a 72                	push   $0x72
+80105cac:	e9 5c f7 ff ff       	jmp    8010540d <alltraps>
+
+80105cb1 <vector115>:
+80105cb1:	6a 00                	push   $0x0
+80105cb3:	6a 73                	push   $0x73
+80105cb5:	e9 53 f7 ff ff       	jmp    8010540d <alltraps>
+
+80105cba <vector116>:
+80105cba:	6a 00                	push   $0x0
+80105cbc:	6a 74                	push   $0x74
+80105cbe:	e9 4a f7 ff ff       	jmp    8010540d <alltraps>
+
+80105cc3 <vector117>:
+80105cc3:	6a 00                	push   $0x0
+80105cc5:	6a 75                	push   $0x75
+80105cc7:	e9 41 f7 ff ff       	jmp    8010540d <alltraps>
+
+80105ccc <vector118>:
+80105ccc:	6a 00                	push   $0x0
+80105cce:	6a 76                	push   $0x76
+80105cd0:	e9 38 f7 ff ff       	jmp    8010540d <alltraps>
+
+80105cd5 <vector119>:
+80105cd5:	6a 00                	push   $0x0
+80105cd7:	6a 77                	push   $0x77
+80105cd9:	e9 2f f7 ff ff       	jmp    8010540d <alltraps>
+
+80105cde <vector120>:
+80105cde:	6a 00                	push   $0x0
+80105ce0:	6a 78                	push   $0x78
+80105ce2:	e9 26 f7 ff ff       	jmp    8010540d <alltraps>
+
+80105ce7 <vector121>:
+80105ce7:	6a 00                	push   $0x0
+80105ce9:	6a 79                	push   $0x79
+80105ceb:	e9 1d f7 ff ff       	jmp    8010540d <alltraps>
+
+80105cf0 <vector122>:
+80105cf0:	6a 00                	push   $0x0
+80105cf2:	6a 7a                	push   $0x7a
+80105cf4:	e9 14 f7 ff ff       	jmp    8010540d <alltraps>
+
+80105cf9 <vector123>:
+80105cf9:	6a 00                	push   $0x0
+80105cfb:	6a 7b                	push   $0x7b
+80105cfd:	e9 0b f7 ff ff       	jmp    8010540d <alltraps>
+
+80105d02 <vector124>:
 80105d02:	6a 00                	push   $0x0
-  pushl $129
-80105d04:	68 81 00 00 00       	push   $0x81
-  jmp alltraps
-80105d09:	e9 cf f6 ff ff       	jmp    801053dd <alltraps>
-
-80105d0e <vector130>:
-.globl vector130
-vector130:
-  pushl $0
-80105d0e:	6a 00                	push   $0x0
-  pushl $130
-80105d10:	68 82 00 00 00       	push   $0x82
-  jmp alltraps
-80105d15:	e9 c3 f6 ff ff       	jmp    801053dd <alltraps>
-
-80105d1a <vector131>:
-.globl vector131
-vector131:
-  pushl $0
-80105d1a:	6a 00                	push   $0x0
-  pushl $131
-80105d1c:	68 83 00 00 00       	push   $0x83
-  jmp alltraps
-80105d21:	e9 b7 f6 ff ff       	jmp    801053dd <alltraps>
-
-80105d26 <vector132>:
-.globl vector132
-vector132:
-  pushl $0
+80105d04:	6a 7c                	push   $0x7c
+80105d06:	e9 02 f7 ff ff       	jmp    8010540d <alltraps>
+
+80105d0b <vector125>:
+80105d0b:	6a 00                	push   $0x0
+80105d0d:	6a 7d                	push   $0x7d
+80105d0f:	e9 f9 f6 ff ff       	jmp    8010540d <alltraps>
+
+80105d14 <vector126>:
+80105d14:	6a 00                	push   $0x0
+80105d16:	6a 7e                	push   $0x7e
+80105d18:	e9 f0 f6 ff ff       	jmp    8010540d <alltraps>
+
+80105d1d <vector127>:
+80105d1d:	6a 00                	push   $0x0
+80105d1f:	6a 7f                	push   $0x7f
+80105d21:	e9 e7 f6 ff ff       	jmp    8010540d <alltraps>
+
+80105d26 <vector128>:
 80105d26:	6a 00                	push   $0x0
-  pushl $132
-80105d28:	68 84 00 00 00       	push   $0x84
-  jmp alltraps
-80105d2d:	e9 ab f6 ff ff       	jmp    801053dd <alltraps>
-
-80105d32 <vector133>:
-.globl vector133
-vector133:
-  pushl $0
+80105d28:	68 80 00 00 00       	push   $0x80
+80105d2d:	e9 db f6 ff ff       	jmp    8010540d <alltraps>
+
+80105d32 <vector129>:
 80105d32:	6a 00                	push   $0x0
-  pushl $133
-80105d34:	68 85 00 00 00       	push   $0x85
-  jmp alltraps
-80105d39:	e9 9f f6 ff ff       	jmp    801053dd <alltraps>
-
-80105d3e <vector134>:
-.globl vector134
-vector134:
-  pushl $0
+80105d34:	68 81 00 00 00       	push   $0x81
+80105d39:	e9 cf f6 ff ff       	jmp    8010540d <alltraps>
+
+80105d3e <vector130>:
 80105d3e:	6a 00                	push   $0x0
-  pushl $134
-80105d40:	68 86 00 00 00       	push   $0x86
-  jmp alltraps
-80105d45:	e9 93 f6 ff ff       	jmp    801053dd <alltraps>
-
-80105d4a <vector135>:
-.globl vector135
-vector135:
-  pushl $0
+80105d40:	68 82 00 00 00       	push   $0x82
+80105d45:	e9 c3 f6 ff ff       	jmp    8010540d <alltraps>
+
+80105d4a <vector131>:
 80105d4a:	6a 00                	push   $0x0
-  pushl $135
-80105d4c:	68 87 00 00 00       	push   $0x87
-  jmp alltraps
-80105d51:	e9 87 f6 ff ff       	jmp    801053dd <alltraps>
-
-80105d56 <vector136>:
-.globl vector136
-vector136:
-  pushl $0
+80105d4c:	68 83 00 00 00       	push   $0x83
+80105d51:	e9 b7 f6 ff ff       	jmp    8010540d <alltraps>
+
+80105d56 <vector132>:
 80105d56:	6a 00                	push   $0x0
-  pushl $136
-80105d58:	68 88 00 00 00       	push   $0x88
-  jmp alltraps
-80105d5d:	e9 7b f6 ff ff       	jmp    801053dd <alltraps>
-
-80105d62 <vector137>:
-.globl vector137
-vector137:
-  pushl $0
+80105d58:	68 84 00 00 00       	push   $0x84
+80105d5d:	e9 ab f6 ff ff       	jmp    8010540d <alltraps>
+
+80105d62 <vector133>:
 80105d62:	6a 00                	push   $0x0
-  pushl $137
-80105d64:	68 89 00 00 00       	push   $0x89
-  jmp alltraps
-80105d69:	e9 6f f6 ff ff       	jmp    801053dd <alltraps>
-
-80105d6e <vector138>:
-.globl vector138
-vector138:
-  pushl $0
+80105d64:	68 85 00 00 00       	push   $0x85
+80105d69:	e9 9f f6 ff ff       	jmp    8010540d <alltraps>
+
+80105d6e <vector134>:
 80105d6e:	6a 00                	push   $0x0
-  pushl $138
-80105d70:	68 8a 00 00 00       	push   $0x8a
-  jmp alltraps
-80105d75:	e9 63 f6 ff ff       	jmp    801053dd <alltraps>
-
-80105d7a <vector139>:
-.globl vector139
-vector139:
-  pushl $0
+80105d70:	68 86 00 00 00       	push   $0x86
+80105d75:	e9 93 f6 ff ff       	jmp    8010540d <alltraps>
+
+80105d7a <vector135>:
 80105d7a:	6a 00                	push   $0x0
-  pushl $139
-80105d7c:	68 8b 00 00 00       	push   $0x8b
-  jmp alltraps
-80105d81:	e9 57 f6 ff ff       	jmp    801053dd <alltraps>
-
-80105d86 <vector140>:
-.globl vector140
-vector140:
-  pushl $0
+80105d7c:	68 87 00 00 00       	push   $0x87
+80105d81:	e9 87 f6 ff ff       	jmp    8010540d <alltraps>
+
+80105d86 <vector136>:
 80105d86:	6a 00                	push   $0x0
-  pushl $140
-80105d88:	68 8c 00 00 00       	push   $0x8c
-  jmp alltraps
-80105d8d:	e9 4b f6 ff ff       	jmp    801053dd <alltraps>
-
-80105d92 <vector141>:
-.globl vector141
-vector141:
-  pushl $0
+80105d88:	68 88 00 00 00       	push   $0x88
+80105d8d:	e9 7b f6 ff ff       	jmp    8010540d <alltraps>
+
+80105d92 <vector137>:
 80105d92:	6a 00                	push   $0x0
-  pushl $141
-80105d94:	68 8d 00 00 00       	push   $0x8d
-  jmp alltraps
-80105d99:	e9 3f f6 ff ff       	jmp    801053dd <alltraps>
-
-80105d9e <vector142>:
-.globl vector142
-vector142:
-  pushl $0
+80105d94:	68 89 00 00 00       	push   $0x89
+80105d99:	e9 6f f6 ff ff       	jmp    8010540d <alltraps>
+
+80105d9e <vector138>:
 80105d9e:	6a 00                	push   $0x0
-  pushl $142
-80105da0:	68 8e 00 00 00       	push   $0x8e
-  jmp alltraps
-80105da5:	e9 33 f6 ff ff       	jmp    801053dd <alltraps>
-
-80105daa <vector143>:
-.globl vector143
-vector143:
-  pushl $0
+80105da0:	68 8a 00 00 00       	push   $0x8a
+80105da5:	e9 63 f6 ff ff       	jmp    8010540d <alltraps>
+
+80105daa <vector139>:
 80105daa:	6a 00                	push   $0x0
-  pushl $143
-80105dac:	68 8f 00 00 00       	push   $0x8f
-  jmp alltraps
-80105db1:	e9 27 f6 ff ff       	jmp    801053dd <alltraps>
-
-80105db6 <vector144>:
-.globl vector144
-vector144:
-  pushl $0
+80105dac:	68 8b 00 00 00       	push   $0x8b
+80105db1:	e9 57 f6 ff ff       	jmp    8010540d <alltraps>
+
+80105db6 <vector140>:
 80105db6:	6a 00                	push   $0x0
-  pushl $144
-80105db8:	68 90 00 00 00       	push   $0x90
-  jmp alltraps
-80105dbd:	e9 1b f6 ff ff       	jmp    801053dd <alltraps>
-
-80105dc2 <vector145>:
-.globl vector145
-vector145:
-  pushl $0
+80105db8:	68 8c 00 00 00       	push   $0x8c
+80105dbd:	e9 4b f6 ff ff       	jmp    8010540d <alltraps>
+
+80105dc2 <vector141>:
 80105dc2:	6a 00                	push   $0x0
-  pushl $145
-80105dc4:	68 91 00 00 00       	push   $0x91
-  jmp alltraps
-80105dc9:	e9 0f f6 ff ff       	jmp    801053dd <alltraps>
-
-80105dce <vector146>:
-.globl vector146
-vector146:
-  pushl $0
+80105dc4:	68 8d 00 00 00       	push   $0x8d
+80105dc9:	e9 3f f6 ff ff       	jmp    8010540d <alltraps>
+
+80105dce <vector142>:
 80105dce:	6a 00                	push   $0x0
-  pushl $146
-80105dd0:	68 92 00 00 00       	push   $0x92
-  jmp alltraps
-80105dd5:	e9 03 f6 ff ff       	jmp    801053dd <alltraps>
-
-80105dda <vector147>:
-.globl vector147
-vector147:
-  pushl $0
+80105dd0:	68 8e 00 00 00       	push   $0x8e
+80105dd5:	e9 33 f6 ff ff       	jmp    8010540d <alltraps>
+
+80105dda <vector143>:
 80105dda:	6a 00                	push   $0x0
-  pushl $147
-80105ddc:	68 93 00 00 00       	push   $0x93
-  jmp alltraps
-80105de1:	e9 f7 f5 ff ff       	jmp    801053dd <alltraps>
-
-80105de6 <vector148>:
-.globl vector148
-vector148:
-  pushl $0
+80105ddc:	68 8f 00 00 00       	push   $0x8f
+80105de1:	e9 27 f6 ff ff       	jmp    8010540d <alltraps>
+
+80105de6 <vector144>:
 80105de6:	6a 00                	push   $0x0
-  pushl $148
-80105de8:	68 94 00 00 00       	push   $0x94
-  jmp alltraps
-80105ded:	e9 eb f5 ff ff       	jmp    801053dd <alltraps>
-
-80105df2 <vector149>:
-.globl vector149
-vector149:
-  pushl $0
+80105de8:	68 90 00 00 00       	push   $0x90
+80105ded:	e9 1b f6 ff ff       	jmp    8010540d <alltraps>
+
+80105df2 <vector145>:
 80105df2:	6a 00                	push   $0x0
-  pushl $149
-80105df4:	68 95 00 00 00       	push   $0x95
-  jmp alltraps
-80105df9:	e9 df f5 ff ff       	jmp    801053dd <alltraps>
-
-80105dfe <vector150>:
-.globl vector150
-vector150:
-  pushl $0
+80105df4:	68 91 00 00 00       	push   $0x91
+80105df9:	e9 0f f6 ff ff       	jmp    8010540d <alltraps>
+
+80105dfe <vector146>:
 80105dfe:	6a 00                	push   $0x0
-  pushl $150
-80105e00:	68 96 00 00 00       	push   $0x96
-  jmp alltraps
-80105e05:	e9 d3 f5 ff ff       	jmp    801053dd <alltraps>
-
-80105e0a <vector151>:
-.globl vector151
-vector151:
-  pushl $0
+80105e00:	68 92 00 00 00       	push   $0x92
+80105e05:	e9 03 f6 ff ff       	jmp    8010540d <alltraps>
+
+80105e0a <vector147>:
 80105e0a:	6a 00                	push   $0x0
-  pushl $151
-80105e0c:	68 97 00 00 00       	push   $0x97
-  jmp alltraps
-80105e11:	e9 c7 f5 ff ff       	jmp    801053dd <alltraps>
-
-80105e16 <vector152>:
-.globl vector152
-vector152:
-  pushl $0
+80105e0c:	68 93 00 00 00       	push   $0x93
+80105e11:	e9 f7 f5 ff ff       	jmp    8010540d <alltraps>
+
+80105e16 <vector148>:
 80105e16:	6a 00                	push   $0x0
-  pushl $152
-80105e18:	68 98 00 00 00       	push   $0x98
-  jmp alltraps
-80105e1d:	e9 bb f5 ff ff       	jmp    801053dd <alltraps>
-
-80105e22 <vector153>:
-.globl vector153
-vector153:
-  pushl $0
+80105e18:	68 94 00 00 00       	push   $0x94
+80105e1d:	e9 eb f5 ff ff       	jmp    8010540d <alltraps>
+
+80105e22 <vector149>:
 80105e22:	6a 00                	push   $0x0
-  pushl $153
-80105e24:	68 99 00 00 00       	push   $0x99
-  jmp alltraps
-80105e29:	e9 af f5 ff ff       	jmp    801053dd <alltraps>
-
-80105e2e <vector154>:
-.globl vector154
-vector154:
-  pushl $0
+80105e24:	68 95 00 00 00       	push   $0x95
+80105e29:	e9 df f5 ff ff       	jmp    8010540d <alltraps>
+
+80105e2e <vector150>:
 80105e2e:	6a 00                	push   $0x0
-  pushl $154
-80105e30:	68 9a 00 00 00       	push   $0x9a
-  jmp alltraps
-80105e35:	e9 a3 f5 ff ff       	jmp    801053dd <alltraps>
-
-80105e3a <vector155>:
-.globl vector155
-vector155:
-  pushl $0
+80105e30:	68 96 00 00 00       	push   $0x96
+80105e35:	e9 d3 f5 ff ff       	jmp    8010540d <alltraps>
+
+80105e3a <vector151>:
 80105e3a:	6a 00                	push   $0x0
-  pushl $155
-80105e3c:	68 9b 00 00 00       	push   $0x9b
-  jmp alltraps
-80105e41:	e9 97 f5 ff ff       	jmp    801053dd <alltraps>
-
-80105e46 <vector156>:
-.globl vector156
-vector156:
-  pushl $0
+80105e3c:	68 97 00 00 00       	push   $0x97
+80105e41:	e9 c7 f5 ff ff       	jmp    8010540d <alltraps>
+
+80105e46 <vector152>:
 80105e46:	6a 00                	push   $0x0
-  pushl $156
-80105e48:	68 9c 00 00 00       	push   $0x9c
-  jmp alltraps
-80105e4d:	e9 8b f5 ff ff       	jmp    801053dd <alltraps>
-
-80105e52 <vector157>:
-.globl vector157
-vector157:
-  pushl $0
+80105e48:	68 98 00 00 00       	push   $0x98
+80105e4d:	e9 bb f5 ff ff       	jmp    8010540d <alltraps>
+
+80105e52 <vector153>:
 80105e52:	6a 00                	push   $0x0
-  pushl $157
-80105e54:	68 9d 00 00 00       	push   $0x9d
-  jmp alltraps
-80105e59:	e9 7f f5 ff ff       	jmp    801053dd <alltraps>
-
-80105e5e <vector158>:
-.globl vector158
-vector158:
-  pushl $0
+80105e54:	68 99 00 00 00       	push   $0x99
+80105e59:	e9 af f5 ff ff       	jmp    8010540d <alltraps>
+
+80105e5e <vector154>:
 80105e5e:	6a 00                	push   $0x0
-  pushl $158
-80105e60:	68 9e 00 00 00       	push   $0x9e
-  jmp alltraps
-80105e65:	e9 73 f5 ff ff       	jmp    801053dd <alltraps>
-
-80105e6a <vector159>:
-.globl vector159
-vector159:
-  pushl $0
+80105e60:	68 9a 00 00 00       	push   $0x9a
+80105e65:	e9 a3 f5 ff ff       	jmp    8010540d <alltraps>
+
+80105e6a <vector155>:
 80105e6a:	6a 00                	push   $0x0
-  pushl $159
-80105e6c:	68 9f 00 00 00       	push   $0x9f
-  jmp alltraps
-80105e71:	e9 67 f5 ff ff       	jmp    801053dd <alltraps>
-
-80105e76 <vector160>:
-.globl vector160
-vector160:
-  pushl $0
+80105e6c:	68 9b 00 00 00       	push   $0x9b
+80105e71:	e9 97 f5 ff ff       	jmp    8010540d <alltraps>
+
+80105e76 <vector156>:
 80105e76:	6a 00                	push   $0x0
-  pushl $160
-80105e78:	68 a0 00 00 00       	push   $0xa0
-  jmp alltraps
-80105e7d:	e9 5b f5 ff ff       	jmp    801053dd <alltraps>
-
-80105e82 <vector161>:
-.globl vector161
-vector161:
-  pushl $0
+80105e78:	68 9c 00 00 00       	push   $0x9c
+80105e7d:	e9 8b f5 ff ff       	jmp    8010540d <alltraps>
+
+80105e82 <vector157>:
 80105e82:	6a 00                	push   $0x0
-  pushl $161
-80105e84:	68 a1 00 00 00       	push   $0xa1
-  jmp alltraps
-80105e89:	e9 4f f5 ff ff       	jmp    801053dd <alltraps>
-
-80105e8e <vector162>:
-.globl vector162
-vector162:
-  pushl $0
+80105e84:	68 9d 00 00 00       	push   $0x9d
+80105e89:	e9 7f f5 ff ff       	jmp    8010540d <alltraps>
+
+80105e8e <vector158>:
 80105e8e:	6a 00                	push   $0x0
-  pushl $162
-80105e90:	68 a2 00 00 00       	push   $0xa2
-  jmp alltraps
-80105e95:	e9 43 f5 ff ff       	jmp    801053dd <alltraps>
-
-80105e9a <vector163>:
-.globl vector163
-vector163:
-  pushl $0
+80105e90:	68 9e 00 00 00       	push   $0x9e
+80105e95:	e9 73 f5 ff ff       	jmp    8010540d <alltraps>
+
+80105e9a <vector159>:
 80105e9a:	6a 00                	push   $0x0
-  pushl $163
-80105e9c:	68 a3 00 00 00       	push   $0xa3
-  jmp alltraps
-80105ea1:	e9 37 f5 ff ff       	jmp    801053dd <alltraps>
-
-80105ea6 <vector164>:
-.globl vector164
-vector164:
-  pushl $0
+80105e9c:	68 9f 00 00 00       	push   $0x9f
+80105ea1:	e9 67 f5 ff ff       	jmp    8010540d <alltraps>
+
+80105ea6 <vector160>:
 80105ea6:	6a 00                	push   $0x0
-  pushl $164
-80105ea8:	68 a4 00 00 00       	push   $0xa4
-  jmp alltraps
-80105ead:	e9 2b f5 ff ff       	jmp    801053dd <alltraps>
-
-80105eb2 <vector165>:
-.globl vector165
-vector165:
-  pushl $0
+80105ea8:	68 a0 00 00 00       	push   $0xa0
+80105ead:	e9 5b f5 ff ff       	jmp    8010540d <alltraps>
+
+80105eb2 <vector161>:
 80105eb2:	6a 00                	push   $0x0
-  pushl $165
-80105eb4:	68 a5 00 00 00       	push   $0xa5
-  jmp alltraps
-80105eb9:	e9 1f f5 ff ff       	jmp    801053dd <alltraps>
-
-80105ebe <vector166>:
-.globl vector166
-vector166:
-  pushl $0
+80105eb4:	68 a1 00 00 00       	push   $0xa1
+80105eb9:	e9 4f f5 ff ff       	jmp    8010540d <alltraps>
+
+80105ebe <vector162>:
 80105ebe:	6a 00                	push   $0x0
-  pushl $166
-80105ec0:	68 a6 00 00 00       	push   $0xa6
-  jmp alltraps
-80105ec5:	e9 13 f5 ff ff       	jmp    801053dd <alltraps>
-
-80105eca <vector167>:
-.globl vector167
-vector167:
-  pushl $0
+80105ec0:	68 a2 00 00 00       	push   $0xa2
+80105ec5:	e9 43 f5 ff ff       	jmp    8010540d <alltraps>
+
+80105eca <vector163>:
 80105eca:	6a 00                	push   $0x0
-  pushl $167
-80105ecc:	68 a7 00 00 00       	push   $0xa7
-  jmp alltraps
-80105ed1:	e9 07 f5 ff ff       	jmp    801053dd <alltraps>
-
-80105ed6 <vector168>:
-.globl vector168
-vector168:
-  pushl $0
+80105ecc:	68 a3 00 00 00       	push   $0xa3
+80105ed1:	e9 37 f5 ff ff       	jmp    8010540d <alltraps>
+
+80105ed6 <vector164>:
 80105ed6:	6a 00                	push   $0x0
-  pushl $168
-80105ed8:	68 a8 00 00 00       	push   $0xa8
-  jmp alltraps
-80105edd:	e9 fb f4 ff ff       	jmp    801053dd <alltraps>
-
-80105ee2 <vector169>:
-.globl vector169
-vector169:
-  pushl $0
+80105ed8:	68 a4 00 00 00       	push   $0xa4
+80105edd:	e9 2b f5 ff ff       	jmp    8010540d <alltraps>
+
+80105ee2 <vector165>:
 80105ee2:	6a 00                	push   $0x0
-  pushl $169
-80105ee4:	68 a9 00 00 00       	push   $0xa9
-  jmp alltraps
-80105ee9:	e9 ef f4 ff ff       	jmp    801053dd <alltraps>
-
-80105eee <vector170>:
-.globl vector170
-vector170:
-  pushl $0
+80105ee4:	68 a5 00 00 00       	push   $0xa5
+80105ee9:	e9 1f f5 ff ff       	jmp    8010540d <alltraps>
+
+80105eee <vector166>:
 80105eee:	6a 00                	push   $0x0
-  pushl $170
-80105ef0:	68 aa 00 00 00       	push   $0xaa
-  jmp alltraps
-80105ef5:	e9 e3 f4 ff ff       	jmp    801053dd <alltraps>
-
-80105efa <vector171>:
-.globl vector171
-vector171:
-  pushl $0
+80105ef0:	68 a6 00 00 00       	push   $0xa6
+80105ef5:	e9 13 f5 ff ff       	jmp    8010540d <alltraps>
+
+80105efa <vector167>:
 80105efa:	6a 00                	push   $0x0
-  pushl $171
-80105efc:	68 ab 00 00 00       	push   $0xab
-  jmp alltraps
-80105f01:	e9 d7 f4 ff ff       	jmp    801053dd <alltraps>
-
-80105f06 <vector172>:
-.globl vector172
-vector172:
-  pushl $0
+80105efc:	68 a7 00 00 00       	push   $0xa7
+80105f01:	e9 07 f5 ff ff       	jmp    8010540d <alltraps>
+
+80105f06 <vector168>:
 80105f06:	6a 00                	push   $0x0
-  pushl $172
-80105f08:	68 ac 00 00 00       	push   $0xac
-  jmp alltraps
-80105f0d:	e9 cb f4 ff ff       	jmp    801053dd <alltraps>
-
-80105f12 <vector173>:
-.globl vector173
-vector173:
-  pushl $0
+80105f08:	68 a8 00 00 00       	push   $0xa8
+80105f0d:	e9 fb f4 ff ff       	jmp    8010540d <alltraps>
+
+80105f12 <vector169>:
 80105f12:	6a 00                	push   $0x0
-  pushl $173
-80105f14:	68 ad 00 00 00       	push   $0xad
-  jmp alltraps
-80105f19:	e9 bf f4 ff ff       	jmp    801053dd <alltraps>
-
-80105f1e <vector174>:
-.globl vector174
-vector174:
-  pushl $0
+80105f14:	68 a9 00 00 00       	push   $0xa9
+80105f19:	e9 ef f4 ff ff       	jmp    8010540d <alltraps>
+
+80105f1e <vector170>:
 80105f1e:	6a 00                	push   $0x0
-  pushl $174
-80105f20:	68 ae 00 00 00       	push   $0xae
-  jmp alltraps
-80105f25:	e9 b3 f4 ff ff       	jmp    801053dd <alltraps>
-
-80105f2a <vector175>:
-.globl vector175
-vector175:
-  pushl $0
+80105f20:	68 aa 00 00 00       	push   $0xaa
+80105f25:	e9 e3 f4 ff ff       	jmp    8010540d <alltraps>
+
+80105f2a <vector171>:
 80105f2a:	6a 00                	push   $0x0
-  pushl $175
-80105f2c:	68 af 00 00 00       	push   $0xaf
-  jmp alltraps
-80105f31:	e9 a7 f4 ff ff       	jmp    801053dd <alltraps>
-
-80105f36 <vector176>:
-.globl vector176
-vector176:
-  pushl $0
+80105f2c:	68 ab 00 00 00       	push   $0xab
+80105f31:	e9 d7 f4 ff ff       	jmp    8010540d <alltraps>
+
+80105f36 <vector172>:
 80105f36:	6a 00                	push   $0x0
-  pushl $176
-80105f38:	68 b0 00 00 00       	push   $0xb0
-  jmp alltraps
-80105f3d:	e9 9b f4 ff ff       	jmp    801053dd <alltraps>
-
-80105f42 <vector177>:
-.globl vector177
-vector177:
-  pushl $0
+80105f38:	68 ac 00 00 00       	push   $0xac
+80105f3d:	e9 cb f4 ff ff       	jmp    8010540d <alltraps>
+
+80105f42 <vector173>:
 80105f42:	6a 00                	push   $0x0
-  pushl $177
-80105f44:	68 b1 00 00 00       	push   $0xb1
-  jmp alltraps
-80105f49:	e9 8f f4 ff ff       	jmp    801053dd <alltraps>
-
-80105f4e <vector178>:
-.globl vector178
-vector178:
-  pushl $0
+80105f44:	68 ad 00 00 00       	push   $0xad
+80105f49:	e9 bf f4 ff ff       	jmp    8010540d <alltraps>
+
+80105f4e <vector174>:
 80105f4e:	6a 00                	push   $0x0
-  pushl $178
-80105f50:	68 b2 00 00 00       	push   $0xb2
-  jmp alltraps
-80105f55:	e9 83 f4 ff ff       	jmp    801053dd <alltraps>
-
-80105f5a <vector179>:
-.globl vector179
-vector179:
-  pushl $0
+80105f50:	68 ae 00 00 00       	push   $0xae
+80105f55:	e9 b3 f4 ff ff       	jmp    8010540d <alltraps>
+
+80105f5a <vector175>:
 80105f5a:	6a 00                	push   $0x0
-  pushl $179
-80105f5c:	68 b3 00 00 00       	push   $0xb3
-  jmp alltraps
-80105f61:	e9 77 f4 ff ff       	jmp    801053dd <alltraps>
-
-80105f66 <vector180>:
-.globl vector180
-vector180:
-  pushl $0
+80105f5c:	68 af 00 00 00       	push   $0xaf
+80105f61:	e9 a7 f4 ff ff       	jmp    8010540d <alltraps>
+
+80105f66 <vector176>:
 80105f66:	6a 00                	push   $0x0
-  pushl $180
-80105f68:	68 b4 00 00 00       	push   $0xb4
-  jmp alltraps
-80105f6d:	e9 6b f4 ff ff       	jmp    801053dd <alltraps>
-
-80105f72 <vector181>:
-.globl vector181
-vector181:
-  pushl $0
+80105f68:	68 b0 00 00 00       	push   $0xb0
+80105f6d:	e9 9b f4 ff ff       	jmp    8010540d <alltraps>
+
+80105f72 <vector177>:
 80105f72:	6a 00                	push   $0x0
-  pushl $181
-80105f74:	68 b5 00 00 00       	push   $0xb5
-  jmp alltraps
-80105f79:	e9 5f f4 ff ff       	jmp    801053dd <alltraps>
-
-80105f7e <vector182>:
-.globl vector182
-vector182:
-  pushl $0
+80105f74:	68 b1 00 00 00       	push   $0xb1
+80105f79:	e9 8f f4 ff ff       	jmp    8010540d <alltraps>
+
+80105f7e <vector178>:
 80105f7e:	6a 00                	push   $0x0
-  pushl $182
-80105f80:	68 b6 00 00 00       	push   $0xb6
-  jmp alltraps
-80105f85:	e9 53 f4 ff ff       	jmp    801053dd <alltraps>
-
-80105f8a <vector183>:
-.globl vector183
-vector183:
-  pushl $0
+80105f80:	68 b2 00 00 00       	push   $0xb2
+80105f85:	e9 83 f4 ff ff       	jmp    8010540d <alltraps>
+
+80105f8a <vector179>:
 80105f8a:	6a 00                	push   $0x0
-  pushl $183
-80105f8c:	68 b7 00 00 00       	push   $0xb7
-  jmp alltraps
-80105f91:	e9 47 f4 ff ff       	jmp    801053dd <alltraps>
-
-80105f96 <vector184>:
-.globl vector184
-vector184:
-  pushl $0
+80105f8c:	68 b3 00 00 00       	push   $0xb3
+80105f91:	e9 77 f4 ff ff       	jmp    8010540d <alltraps>
+
+80105f96 <vector180>:
 80105f96:	6a 00                	push   $0x0
-  pushl $184
-80105f98:	68 b8 00 00 00       	push   $0xb8
-  jmp alltraps
-80105f9d:	e9 3b f4 ff ff       	jmp    801053dd <alltraps>
-
-80105fa2 <vector185>:
-.globl vector185
-vector185:
-  pushl $0
+80105f98:	68 b4 00 00 00       	push   $0xb4
+80105f9d:	e9 6b f4 ff ff       	jmp    8010540d <alltraps>
+
+80105fa2 <vector181>:
 80105fa2:	6a 00                	push   $0x0
-  pushl $185
-80105fa4:	68 b9 00 00 00       	push   $0xb9
-  jmp alltraps
-80105fa9:	e9 2f f4 ff ff       	jmp    801053dd <alltraps>
-
-80105fae <vector186>:
-.globl vector186
-vector186:
-  pushl $0
+80105fa4:	68 b5 00 00 00       	push   $0xb5
+80105fa9:	e9 5f f4 ff ff       	jmp    8010540d <alltraps>
+
+80105fae <vector182>:
 80105fae:	6a 00                	push   $0x0
-  pushl $186
-80105fb0:	68 ba 00 00 00       	push   $0xba
-  jmp alltraps
-80105fb5:	e9 23 f4 ff ff       	jmp    801053dd <alltraps>
-
-80105fba <vector187>:
-.globl vector187
-vector187:
-  pushl $0
+80105fb0:	68 b6 00 00 00       	push   $0xb6
+80105fb5:	e9 53 f4 ff ff       	jmp    8010540d <alltraps>
+
+80105fba <vector183>:
 80105fba:	6a 00                	push   $0x0
-  pushl $187
-80105fbc:	68 bb 00 00 00       	push   $0xbb
-  jmp alltraps
-80105fc1:	e9 17 f4 ff ff       	jmp    801053dd <alltraps>
-
-80105fc6 <vector188>:
-.globl vector188
-vector188:
-  pushl $0
+80105fbc:	68 b7 00 00 00       	push   $0xb7
+80105fc1:	e9 47 f4 ff ff       	jmp    8010540d <alltraps>
+
+80105fc6 <vector184>:
 80105fc6:	6a 00                	push   $0x0
-  pushl $188
-80105fc8:	68 bc 00 00 00       	push   $0xbc
-  jmp alltraps
-80105fcd:	e9 0b f4 ff ff       	jmp    801053dd <alltraps>
-
-80105fd2 <vector189>:
-.globl vector189
-vector189:
-  pushl $0
+80105fc8:	68 b8 00 00 00       	push   $0xb8
+80105fcd:	e9 3b f4 ff ff       	jmp    8010540d <alltraps>
+
+80105fd2 <vector185>:
 80105fd2:	6a 00                	push   $0x0
-  pushl $189
-80105fd4:	68 bd 00 00 00       	push   $0xbd
-  jmp alltraps
-80105fd9:	e9 ff f3 ff ff       	jmp    801053dd <alltraps>
-
-80105fde <vector190>:
-.globl vector190
-vector190:
-  pushl $0
+80105fd4:	68 b9 00 00 00       	push   $0xb9
+80105fd9:	e9 2f f4 ff ff       	jmp    8010540d <alltraps>
+
+80105fde <vector186>:
 80105fde:	6a 00                	push   $0x0
-  pushl $190
-80105fe0:	68 be 00 00 00       	push   $0xbe
-  jmp alltraps
-80105fe5:	e9 f3 f3 ff ff       	jmp    801053dd <alltraps>
-
-80105fea <vector191>:
-.globl vector191
-vector191:
-  pushl $0
+80105fe0:	68 ba 00 00 00       	push   $0xba
+80105fe5:	e9 23 f4 ff ff       	jmp    8010540d <alltraps>
+
+80105fea <vector187>:
 80105fea:	6a 00                	push   $0x0
-  pushl $191
-80105fec:	68 bf 00 00 00       	push   $0xbf
-  jmp alltraps
-80105ff1:	e9 e7 f3 ff ff       	jmp    801053dd <alltraps>
-
-80105ff6 <vector192>:
-.globl vector192
-vector192:
-  pushl $0
+80105fec:	68 bb 00 00 00       	push   $0xbb
+80105ff1:	e9 17 f4 ff ff       	jmp    8010540d <alltraps>
+
+80105ff6 <vector188>:
 80105ff6:	6a 00                	push   $0x0
-  pushl $192
-80105ff8:	68 c0 00 00 00       	push   $0xc0
-  jmp alltraps
-80105ffd:	e9 db f3 ff ff       	jmp    801053dd <alltraps>
-
-80106002 <vector193>:
-.globl vector193
-vector193:
-  pushl $0
+80105ff8:	68 bc 00 00 00       	push   $0xbc
+80105ffd:	e9 0b f4 ff ff       	jmp    8010540d <alltraps>
+
+80106002 <vector189>:
 80106002:	6a 00                	push   $0x0
-  pushl $193
-80106004:	68 c1 00 00 00       	push   $0xc1
-  jmp alltraps
-80106009:	e9 cf f3 ff ff       	jmp    801053dd <alltraps>
-
-8010600e <vector194>:
-.globl vector194
-vector194:
-  pushl $0
+80106004:	68 bd 00 00 00       	push   $0xbd
+80106009:	e9 ff f3 ff ff       	jmp    8010540d <alltraps>
+
+8010600e <vector190>:
 8010600e:	6a 00                	push   $0x0
-  pushl $194
-80106010:	68 c2 00 00 00       	push   $0xc2
-  jmp alltraps
-80106015:	e9 c3 f3 ff ff       	jmp    801053dd <alltraps>
-
-8010601a <vector195>:
-.globl vector195
-vector195:
-  pushl $0
+80106010:	68 be 00 00 00       	push   $0xbe
+80106015:	e9 f3 f3 ff ff       	jmp    8010540d <alltraps>
+
+8010601a <vector191>:
 8010601a:	6a 00                	push   $0x0
-  pushl $195
-8010601c:	68 c3 00 00 00       	push   $0xc3
-  jmp alltraps
-80106021:	e9 b7 f3 ff ff       	jmp    801053dd <alltraps>
-
-80106026 <vector196>:
-.globl vector196
-vector196:
-  pushl $0
+8010601c:	68 bf 00 00 00       	push   $0xbf
+80106021:	e9 e7 f3 ff ff       	jmp    8010540d <alltraps>
+
+80106026 <vector192>:
 80106026:	6a 00                	push   $0x0
-  pushl $196
-80106028:	68 c4 00 00 00       	push   $0xc4
-  jmp alltraps
-8010602d:	e9 ab f3 ff ff       	jmp    801053dd <alltraps>
-
-80106032 <vector197>:
-.globl vector197
-vector197:
-  pushl $0
+80106028:	68 c0 00 00 00       	push   $0xc0
+8010602d:	e9 db f3 ff ff       	jmp    8010540d <alltraps>
+
+80106032 <vector193>:
 80106032:	6a 00                	push   $0x0
-  pushl $197
-80106034:	68 c5 00 00 00       	push   $0xc5
-  jmp alltraps
-80106039:	e9 9f f3 ff ff       	jmp    801053dd <alltraps>
-
-8010603e <vector198>:
-.globl vector198
-vector198:
-  pushl $0
+80106034:	68 c1 00 00 00       	push   $0xc1
+80106039:	e9 cf f3 ff ff       	jmp    8010540d <alltraps>
+
+8010603e <vector194>:
 8010603e:	6a 00                	push   $0x0
-  pushl $198
-80106040:	68 c6 00 00 00       	push   $0xc6
-  jmp alltraps
-80106045:	e9 93 f3 ff ff       	jmp    801053dd <alltraps>
-
-8010604a <vector199>:
-.globl vector199
-vector199:
-  pushl $0
+80106040:	68 c2 00 00 00       	push   $0xc2
+80106045:	e9 c3 f3 ff ff       	jmp    8010540d <alltraps>
+
+8010604a <vector195>:
 8010604a:	6a 00                	push   $0x0
-  pushl $199
-8010604c:	68 c7 00 00 00       	push   $0xc7
-  jmp alltraps
-80106051:	e9 87 f3 ff ff       	jmp    801053dd <alltraps>
-
-80106056 <vector200>:
-.globl vector200
-vector200:
-  pushl $0
+8010604c:	68 c3 00 00 00       	push   $0xc3
+80106051:	e9 b7 f3 ff ff       	jmp    8010540d <alltraps>
+
+80106056 <vector196>:
 80106056:	6a 00                	push   $0x0
-  pushl $200
-80106058:	68 c8 00 00 00       	push   $0xc8
-  jmp alltraps
-8010605d:	e9 7b f3 ff ff       	jmp    801053dd <alltraps>
-
-80106062 <vector201>:
-.globl vector201
-vector201:
-  pushl $0
+80106058:	68 c4 00 00 00       	push   $0xc4
+8010605d:	e9 ab f3 ff ff       	jmp    8010540d <alltraps>
+
+80106062 <vector197>:
 80106062:	6a 00                	push   $0x0
-  pushl $201
-80106064:	68 c9 00 00 00       	push   $0xc9
-  jmp alltraps
-80106069:	e9 6f f3 ff ff       	jmp    801053dd <alltraps>
-
-8010606e <vector202>:
-.globl vector202
-vector202:
-  pushl $0
+80106064:	68 c5 00 00 00       	push   $0xc5
+80106069:	e9 9f f3 ff ff       	jmp    8010540d <alltraps>
+
+8010606e <vector198>:
 8010606e:	6a 00                	push   $0x0
-  pushl $202
-80106070:	68 ca 00 00 00       	push   $0xca
-  jmp alltraps
-80106075:	e9 63 f3 ff ff       	jmp    801053dd <alltraps>
-
-8010607a <vector203>:
-.globl vector203
-vector203:
-  pushl $0
+80106070:	68 c6 00 00 00       	push   $0xc6
+80106075:	e9 93 f3 ff ff       	jmp    8010540d <alltraps>
+
+8010607a <vector199>:
 8010607a:	6a 00                	push   $0x0
-  pushl $203
-8010607c:	68 cb 00 00 00       	push   $0xcb
-  jmp alltraps
-80106081:	e9 57 f3 ff ff       	jmp    801053dd <alltraps>
-
-80106086 <vector204>:
-.globl vector204
-vector204:
-  pushl $0
+8010607c:	68 c7 00 00 00       	push   $0xc7
+80106081:	e9 87 f3 ff ff       	jmp    8010540d <alltraps>
+
+80106086 <vector200>:
 80106086:	6a 00                	push   $0x0
-  pushl $204
-80106088:	68 cc 00 00 00       	push   $0xcc
-  jmp alltraps
-8010608d:	e9 4b f3 ff ff       	jmp    801053dd <alltraps>
-
-80106092 <vector205>:
-.globl vector205
-vector205:
-  pushl $0
+80106088:	68 c8 00 00 00       	push   $0xc8
+8010608d:	e9 7b f3 ff ff       	jmp    8010540d <alltraps>
+
+80106092 <vector201>:
 80106092:	6a 00                	push   $0x0
-  pushl $205
-80106094:	68 cd 00 00 00       	push   $0xcd
-  jmp alltraps
-80106099:	e9 3f f3 ff ff       	jmp    801053dd <alltraps>
-
-8010609e <vector206>:
-.globl vector206
-vector206:
-  pushl $0
+80106094:	68 c9 00 00 00       	push   $0xc9
+80106099:	e9 6f f3 ff ff       	jmp    8010540d <alltraps>
+
+8010609e <vector202>:
 8010609e:	6a 00                	push   $0x0
-  pushl $206
-801060a0:	68 ce 00 00 00       	push   $0xce
-  jmp alltraps
-801060a5:	e9 33 f3 ff ff       	jmp    801053dd <alltraps>
-
-801060aa <vector207>:
-.globl vector207
-vector207:
-  pushl $0
+801060a0:	68 ca 00 00 00       	push   $0xca
+801060a5:	e9 63 f3 ff ff       	jmp    8010540d <alltraps>
+
+801060aa <vector203>:
 801060aa:	6a 00                	push   $0x0
-  pushl $207
-801060ac:	68 cf 00 00 00       	push   $0xcf
-  jmp alltraps
-801060b1:	e9 27 f3 ff ff       	jmp    801053dd <alltraps>
-
-801060b6 <vector208>:
-.globl vector208
-vector208:
-  pushl $0
+801060ac:	68 cb 00 00 00       	push   $0xcb
+801060b1:	e9 57 f3 ff ff       	jmp    8010540d <alltraps>
+
+801060b6 <vector204>:
 801060b6:	6a 00                	push   $0x0
-  pushl $208
-801060b8:	68 d0 00 00 00       	push   $0xd0
-  jmp alltraps
-801060bd:	e9 1b f3 ff ff       	jmp    801053dd <alltraps>
-
-801060c2 <vector209>:
-.globl vector209
-vector209:
-  pushl $0
+801060b8:	68 cc 00 00 00       	push   $0xcc
+801060bd:	e9 4b f3 ff ff       	jmp    8010540d <alltraps>
+
+801060c2 <vector205>:
 801060c2:	6a 00                	push   $0x0
-  pushl $209
-801060c4:	68 d1 00 00 00       	push   $0xd1
-  jmp alltraps
-801060c9:	e9 0f f3 ff ff       	jmp    801053dd <alltraps>
-
-801060ce <vector210>:
-.globl vector210
-vector210:
-  pushl $0
+801060c4:	68 cd 00 00 00       	push   $0xcd
+801060c9:	e9 3f f3 ff ff       	jmp    8010540d <alltraps>
+
+801060ce <vector206>:
 801060ce:	6a 00                	push   $0x0
-  pushl $210
-801060d0:	68 d2 00 00 00       	push   $0xd2
-  jmp alltraps
-801060d5:	e9 03 f3 ff ff       	jmp    801053dd <alltraps>
-
-801060da <vector211>:
-.globl vector211
-vector211:
-  pushl $0
+801060d0:	68 ce 00 00 00       	push   $0xce
+801060d5:	e9 33 f3 ff ff       	jmp    8010540d <alltraps>
+
+801060da <vector207>:
 801060da:	6a 00                	push   $0x0
-  pushl $211
-801060dc:	68 d3 00 00 00       	push   $0xd3
-  jmp alltraps
-801060e1:	e9 f7 f2 ff ff       	jmp    801053dd <alltraps>
-
-801060e6 <vector212>:
-.globl vector212
-vector212:
-  pushl $0
+801060dc:	68 cf 00 00 00       	push   $0xcf
+801060e1:	e9 27 f3 ff ff       	jmp    8010540d <alltraps>
+
+801060e6 <vector208>:
 801060e6:	6a 00                	push   $0x0
-  pushl $212
-801060e8:	68 d4 00 00 00       	push   $0xd4
-  jmp alltraps
-801060ed:	e9 eb f2 ff ff       	jmp    801053dd <alltraps>
-
-801060f2 <vector213>:
-.globl vector213
-vector213:
-  pushl $0
+801060e8:	68 d0 00 00 00       	push   $0xd0
+801060ed:	e9 1b f3 ff ff       	jmp    8010540d <alltraps>
+
+801060f2 <vector209>:
 801060f2:	6a 00                	push   $0x0
-  pushl $213
-801060f4:	68 d5 00 00 00       	push   $0xd5
-  jmp alltraps
-801060f9:	e9 df f2 ff ff       	jmp    801053dd <alltraps>
-
-801060fe <vector214>:
-.globl vector214
-vector214:
-  pushl $0
+801060f4:	68 d1 00 00 00       	push   $0xd1
+801060f9:	e9 0f f3 ff ff       	jmp    8010540d <alltraps>
+
+801060fe <vector210>:
 801060fe:	6a 00                	push   $0x0
-  pushl $214
-80106100:	68 d6 00 00 00       	push   $0xd6
-  jmp alltraps
-80106105:	e9 d3 f2 ff ff       	jmp    801053dd <alltraps>
-
-8010610a <vector215>:
-.globl vector215
-vector215:
-  pushl $0
+80106100:	68 d2 00 00 00       	push   $0xd2
+80106105:	e9 03 f3 ff ff       	jmp    8010540d <alltraps>
+
+8010610a <vector211>:
 8010610a:	6a 00                	push   $0x0
-  pushl $215
-8010610c:	68 d7 00 00 00       	push   $0xd7
-  jmp alltraps
-80106111:	e9 c7 f2 ff ff       	jmp    801053dd <alltraps>
-
-80106116 <vector216>:
-.globl vector216
-vector216:
-  pushl $0
+8010610c:	68 d3 00 00 00       	push   $0xd3
+80106111:	e9 f7 f2 ff ff       	jmp    8010540d <alltraps>
+
+80106116 <vector212>:
 80106116:	6a 00                	push   $0x0
-  pushl $216
-80106118:	68 d8 00 00 00       	push   $0xd8
-  jmp alltraps
-8010611d:	e9 bb f2 ff ff       	jmp    801053dd <alltraps>
-
-80106122 <vector217>:
-.globl vector217
-vector217:
-  pushl $0
+80106118:	68 d4 00 00 00       	push   $0xd4
+8010611d:	e9 eb f2 ff ff       	jmp    8010540d <alltraps>
+
+80106122 <vector213>:
 80106122:	6a 00                	push   $0x0
-  pushl $217
-80106124:	68 d9 00 00 00       	push   $0xd9
-  jmp alltraps
-80106129:	e9 af f2 ff ff       	jmp    801053dd <alltraps>
-
-8010612e <vector218>:
-.globl vector218
-vector218:
-  pushl $0
+80106124:	68 d5 00 00 00       	push   $0xd5
+80106129:	e9 df f2 ff ff       	jmp    8010540d <alltraps>
+
+8010612e <vector214>:
 8010612e:	6a 00                	push   $0x0
-  pushl $218
-80106130:	68 da 00 00 00       	push   $0xda
-  jmp alltraps
-80106135:	e9 a3 f2 ff ff       	jmp    801053dd <alltraps>
-
-8010613a <vector219>:
-.globl vector219
-vector219:
-  pushl $0
+80106130:	68 d6 00 00 00       	push   $0xd6
+80106135:	e9 d3 f2 ff ff       	jmp    8010540d <alltraps>
+
+8010613a <vector215>:
 8010613a:	6a 00                	push   $0x0
-  pushl $219
-8010613c:	68 db 00 00 00       	push   $0xdb
-  jmp alltraps
-80106141:	e9 97 f2 ff ff       	jmp    801053dd <alltraps>
-
-80106146 <vector220>:
-.globl vector220
-vector220:
-  pushl $0
+8010613c:	68 d7 00 00 00       	push   $0xd7
+80106141:	e9 c7 f2 ff ff       	jmp    8010540d <alltraps>
+
+80106146 <vector216>:
 80106146:	6a 00                	push   $0x0
-  pushl $220
-80106148:	68 dc 00 00 00       	push   $0xdc
-  jmp alltraps
-8010614d:	e9 8b f2 ff ff       	jmp    801053dd <alltraps>
-
-80106152 <vector221>:
-.globl vector221
-vector221:
-  pushl $0
+80106148:	68 d8 00 00 00       	push   $0xd8
+8010614d:	e9 bb f2 ff ff       	jmp    8010540d <alltraps>
+
+80106152 <vector217>:
 80106152:	6a 00                	push   $0x0
-  pushl $221
-80106154:	68 dd 00 00 00       	push   $0xdd
-  jmp alltraps
-80106159:	e9 7f f2 ff ff       	jmp    801053dd <alltraps>
-
-8010615e <vector222>:
-.globl vector222
-vector222:
-  pushl $0
+80106154:	68 d9 00 00 00       	push   $0xd9
+80106159:	e9 af f2 ff ff       	jmp    8010540d <alltraps>
+
+8010615e <vector218>:
 8010615e:	6a 00                	push   $0x0
-  pushl $222
-80106160:	68 de 00 00 00       	push   $0xde
-  jmp alltraps
-80106165:	e9 73 f2 ff ff       	jmp    801053dd <alltraps>
-
-8010616a <vector223>:
-.globl vector223
-vector223:
-  pushl $0
+80106160:	68 da 00 00 00       	push   $0xda
+80106165:	e9 a3 f2 ff ff       	jmp    8010540d <alltraps>
+
+8010616a <vector219>:
 8010616a:	6a 00                	push   $0x0
-  pushl $223
-8010616c:	68 df 00 00 00       	push   $0xdf
-  jmp alltraps
-80106171:	e9 67 f2 ff ff       	jmp    801053dd <alltraps>
-
-80106176 <vector224>:
-.globl vector224
-vector224:
-  pushl $0
+8010616c:	68 db 00 00 00       	push   $0xdb
+80106171:	e9 97 f2 ff ff       	jmp    8010540d <alltraps>
+
+80106176 <vector220>:
 80106176:	6a 00                	push   $0x0
-  pushl $224
-80106178:	68 e0 00 00 00       	push   $0xe0
-  jmp alltraps
-8010617d:	e9 5b f2 ff ff       	jmp    801053dd <alltraps>
-
-80106182 <vector225>:
-.globl vector225
-vector225:
-  pushl $0
+80106178:	68 dc 00 00 00       	push   $0xdc
+8010617d:	e9 8b f2 ff ff       	jmp    8010540d <alltraps>
+
+80106182 <vector221>:
 80106182:	6a 00                	push   $0x0
-  pushl $225
-80106184:	68 e1 00 00 00       	push   $0xe1
-  jmp alltraps
-80106189:	e9 4f f2 ff ff       	jmp    801053dd <alltraps>
-
-8010618e <vector226>:
-.globl vector226
-vector226:
-  pushl $0
+80106184:	68 dd 00 00 00       	push   $0xdd
+80106189:	e9 7f f2 ff ff       	jmp    8010540d <alltraps>
+
+8010618e <vector222>:
 8010618e:	6a 00                	push   $0x0
-  pushl $226
-80106190:	68 e2 00 00 00       	push   $0xe2
-  jmp alltraps
-80106195:	e9 43 f2 ff ff       	jmp    801053dd <alltraps>
-
-8010619a <vector227>:
-.globl vector227
-vector227:
-  pushl $0
+80106190:	68 de 00 00 00       	push   $0xde
+80106195:	e9 73 f2 ff ff       	jmp    8010540d <alltraps>
+
+8010619a <vector223>:
 8010619a:	6a 00                	push   $0x0
-  pushl $227
-8010619c:	68 e3 00 00 00       	push   $0xe3
-  jmp alltraps
-801061a1:	e9 37 f2 ff ff       	jmp    801053dd <alltraps>
-
-801061a6 <vector228>:
-.globl vector228
-vector228:
-  pushl $0
+8010619c:	68 df 00 00 00       	push   $0xdf
+801061a1:	e9 67 f2 ff ff       	jmp    8010540d <alltraps>
+
+801061a6 <vector224>:
 801061a6:	6a 00                	push   $0x0
-  pushl $228
-801061a8:	68 e4 00 00 00       	push   $0xe4
-  jmp alltraps
-801061ad:	e9 2b f2 ff ff       	jmp    801053dd <alltraps>
-
-801061b2 <vector229>:
-.globl vector229
-vector229:
-  pushl $0
+801061a8:	68 e0 00 00 00       	push   $0xe0
+801061ad:	e9 5b f2 ff ff       	jmp    8010540d <alltraps>
+
+801061b2 <vector225>:
 801061b2:	6a 00                	push   $0x0
-  pushl $229
-801061b4:	68 e5 00 00 00       	push   $0xe5
-  jmp alltraps
-801061b9:	e9 1f f2 ff ff       	jmp    801053dd <alltraps>
-
-801061be <vector230>:
-.globl vector230
-vector230:
-  pushl $0
+801061b4:	68 e1 00 00 00       	push   $0xe1
+801061b9:	e9 4f f2 ff ff       	jmp    8010540d <alltraps>
+
+801061be <vector226>:
 801061be:	6a 00                	push   $0x0
-  pushl $230
-801061c0:	68 e6 00 00 00       	push   $0xe6
-  jmp alltraps
-801061c5:	e9 13 f2 ff ff       	jmp    801053dd <alltraps>
-
-801061ca <vector231>:
-.globl vector231
-vector231:
-  pushl $0
+801061c0:	68 e2 00 00 00       	push   $0xe2
+801061c5:	e9 43 f2 ff ff       	jmp    8010540d <alltraps>
+
+801061ca <vector227>:
 801061ca:	6a 00                	push   $0x0
-  pushl $231
-801061cc:	68 e7 00 00 00       	push   $0xe7
-  jmp alltraps
-801061d1:	e9 07 f2 ff ff       	jmp    801053dd <alltraps>
-
-801061d6 <vector232>:
-.globl vector232
-vector232:
-  pushl $0
+801061cc:	68 e3 00 00 00       	push   $0xe3
+801061d1:	e9 37 f2 ff ff       	jmp    8010540d <alltraps>
+
+801061d6 <vector228>:
 801061d6:	6a 00                	push   $0x0
-  pushl $232
-801061d8:	68 e8 00 00 00       	push   $0xe8
-  jmp alltraps
-801061dd:	e9 fb f1 ff ff       	jmp    801053dd <alltraps>
-
-801061e2 <vector233>:
-.globl vector233
-vector233:
-  pushl $0
+801061d8:	68 e4 00 00 00       	push   $0xe4
+801061dd:	e9 2b f2 ff ff       	jmp    8010540d <alltraps>
+
+801061e2 <vector229>:
 801061e2:	6a 00                	push   $0x0
-  pushl $233
-801061e4:	68 e9 00 00 00       	push   $0xe9
-  jmp alltraps
-801061e9:	e9 ef f1 ff ff       	jmp    801053dd <alltraps>
-
-801061ee <vector234>:
-.globl vector234
-vector234:
-  pushl $0
+801061e4:	68 e5 00 00 00       	push   $0xe5
+801061e9:	e9 1f f2 ff ff       	jmp    8010540d <alltraps>
+
+801061ee <vector230>:
 801061ee:	6a 00                	push   $0x0
-  pushl $234
-801061f0:	68 ea 00 00 00       	push   $0xea
-  jmp alltraps
-801061f5:	e9 e3 f1 ff ff       	jmp    801053dd <alltraps>
-
-801061fa <vector235>:
-.globl vector235
-vector235:
-  pushl $0
+801061f0:	68 e6 00 00 00       	push   $0xe6
+801061f5:	e9 13 f2 ff ff       	jmp    8010540d <alltraps>
+
+801061fa <vector231>:
 801061fa:	6a 00                	push   $0x0
-  pushl $235
-801061fc:	68 eb 00 00 00       	push   $0xeb
-  jmp alltraps
-80106201:	e9 d7 f1 ff ff       	jmp    801053dd <alltraps>
-
-80106206 <vector236>:
-.globl vector236
-vector236:
-  pushl $0
+801061fc:	68 e7 00 00 00       	push   $0xe7
+80106201:	e9 07 f2 ff ff       	jmp    8010540d <alltraps>
+
+80106206 <vector232>:
 80106206:	6a 00                	push   $0x0
-  pushl $236
-80106208:	68 ec 00 00 00       	push   $0xec
-  jmp alltraps
-8010620d:	e9 cb f1 ff ff       	jmp    801053dd <alltraps>
-
-80106212 <vector237>:
-.globl vector237
-vector237:
-  pushl $0
+80106208:	68 e8 00 00 00       	push   $0xe8
+8010620d:	e9 fb f1 ff ff       	jmp    8010540d <alltraps>
+
+80106212 <vector233>:
 80106212:	6a 00                	push   $0x0
-  pushl $237
-80106214:	68 ed 00 00 00       	push   $0xed
-  jmp alltraps
-80106219:	e9 bf f1 ff ff       	jmp    801053dd <alltraps>
-
-8010621e <vector238>:
-.globl vector238
-vector238:
-  pushl $0
+80106214:	68 e9 00 00 00       	push   $0xe9
+80106219:	e9 ef f1 ff ff       	jmp    8010540d <alltraps>
+
+8010621e <vector234>:
 8010621e:	6a 00                	push   $0x0
-  pushl $238
-80106220:	68 ee 00 00 00       	push   $0xee
-  jmp alltraps
-80106225:	e9 b3 f1 ff ff       	jmp    801053dd <alltraps>
-
-8010622a <vector239>:
-.globl vector239
-vector239:
-  pushl $0
+80106220:	68 ea 00 00 00       	push   $0xea
+80106225:	e9 e3 f1 ff ff       	jmp    8010540d <alltraps>
+
+8010622a <vector235>:
 8010622a:	6a 00                	push   $0x0
-  pushl $239
-8010622c:	68 ef 00 00 00       	push   $0xef
-  jmp alltraps
-80106231:	e9 a7 f1 ff ff       	jmp    801053dd <alltraps>
-
-80106236 <vector240>:
-.globl vector240
-vector240:
-  pushl $0
+8010622c:	68 eb 00 00 00       	push   $0xeb
+80106231:	e9 d7 f1 ff ff       	jmp    8010540d <alltraps>
+
+80106236 <vector236>:
 80106236:	6a 00                	push   $0x0
-  pushl $240
-80106238:	68 f0 00 00 00       	push   $0xf0
-  jmp alltraps
-8010623d:	e9 9b f1 ff ff       	jmp    801053dd <alltraps>
-
-80106242 <vector241>:
-.globl vector241
-vector241:
-  pushl $0
+80106238:	68 ec 00 00 00       	push   $0xec
+8010623d:	e9 cb f1 ff ff       	jmp    8010540d <alltraps>
+
+80106242 <vector237>:
 80106242:	6a 00                	push   $0x0
-  pushl $241
-80106244:	68 f1 00 00 00       	push   $0xf1
-  jmp alltraps
-80106249:	e9 8f f1 ff ff       	jmp    801053dd <alltraps>
-
-8010624e <vector242>:
-.globl vector242
-vector242:
-  pushl $0
+80106244:	68 ed 00 00 00       	push   $0xed
+80106249:	e9 bf f1 ff ff       	jmp    8010540d <alltraps>
+
+8010624e <vector238>:
 8010624e:	6a 00                	push   $0x0
-  pushl $242
-80106250:	68 f2 00 00 00       	push   $0xf2
-  jmp alltraps
-80106255:	e9 83 f1 ff ff       	jmp    801053dd <alltraps>
-
-8010625a <vector243>:
-.globl vector243
-vector243:
-  pushl $0
+80106250:	68 ee 00 00 00       	push   $0xee
+80106255:	e9 b3 f1 ff ff       	jmp    8010540d <alltraps>
+
+8010625a <vector239>:
 8010625a:	6a 00                	push   $0x0
-  pushl $243
-8010625c:	68 f3 00 00 00       	push   $0xf3
-  jmp alltraps
-80106261:	e9 77 f1 ff ff       	jmp    801053dd <alltraps>
-
-80106266 <vector244>:
-.globl vector244
-vector244:
-  pushl $0
+8010625c:	68 ef 00 00 00       	push   $0xef
+80106261:	e9 a7 f1 ff ff       	jmp    8010540d <alltraps>
+
+80106266 <vector240>:
 80106266:	6a 00                	push   $0x0
-  pushl $244
-80106268:	68 f4 00 00 00       	push   $0xf4
-  jmp alltraps
-8010626d:	e9 6b f1 ff ff       	jmp    801053dd <alltraps>
-
-80106272 <vector245>:
-.globl vector245
-vector245:
-  pushl $0
+80106268:	68 f0 00 00 00       	push   $0xf0
+8010626d:	e9 9b f1 ff ff       	jmp    8010540d <alltraps>
+
+80106272 <vector241>:
 80106272:	6a 00                	push   $0x0
-  pushl $245
-80106274:	68 f5 00 00 00       	push   $0xf5
-  jmp alltraps
-80106279:	e9 5f f1 ff ff       	jmp    801053dd <alltraps>
-
-8010627e <vector246>:
-.globl vector246
-vector246:
-  pushl $0
+80106274:	68 f1 00 00 00       	push   $0xf1
+80106279:	e9 8f f1 ff ff       	jmp    8010540d <alltraps>
+
+8010627e <vector242>:
 8010627e:	6a 00                	push   $0x0
-  pushl $246
-80106280:	68 f6 00 00 00       	push   $0xf6
-  jmp alltraps
-80106285:	e9 53 f1 ff ff       	jmp    801053dd <alltraps>
-
-8010628a <vector247>:
-.globl vector247
-vector247:
-  pushl $0
+80106280:	68 f2 00 00 00       	push   $0xf2
+80106285:	e9 83 f1 ff ff       	jmp    8010540d <alltraps>
+
+8010628a <vector243>:
 8010628a:	6a 00                	push   $0x0
-  pushl $247
-8010628c:	68 f7 00 00 00       	push   $0xf7
-  jmp alltraps
-80106291:	e9 47 f1 ff ff       	jmp    801053dd <alltraps>
-
-80106296 <vector248>:
-.globl vector248
-vector248:
-  pushl $0
+8010628c:	68 f3 00 00 00       	push   $0xf3
+80106291:	e9 77 f1 ff ff       	jmp    8010540d <alltraps>
+
+80106296 <vector244>:
 80106296:	6a 00                	push   $0x0
-  pushl $248
-80106298:	68 f8 00 00 00       	push   $0xf8
-  jmp alltraps
-8010629d:	e9 3b f1 ff ff       	jmp    801053dd <alltraps>
-
-801062a2 <vector249>:
-.globl vector249
-vector249:
-  pushl $0
+80106298:	68 f4 00 00 00       	push   $0xf4
+8010629d:	e9 6b f1 ff ff       	jmp    8010540d <alltraps>
+
+801062a2 <vector245>:
 801062a2:	6a 00                	push   $0x0
-  pushl $249
-801062a4:	68 f9 00 00 00       	push   $0xf9
-  jmp alltraps
-801062a9:	e9 2f f1 ff ff       	jmp    801053dd <alltraps>
-
-801062ae <vector250>:
-.globl vector250
-vector250:
-  pushl $0
+801062a4:	68 f5 00 00 00       	push   $0xf5
+801062a9:	e9 5f f1 ff ff       	jmp    8010540d <alltraps>
+
+801062ae <vector246>:
 801062ae:	6a 00                	push   $0x0
-  pushl $250
-801062b0:	68 fa 00 00 00       	push   $0xfa
-  jmp alltraps
-801062b5:	e9 23 f1 ff ff       	jmp    801053dd <alltraps>
-
-801062ba <vector251>:
-.globl vector251
-vector251:
-  pushl $0
+801062b0:	68 f6 00 00 00       	push   $0xf6
+801062b5:	e9 53 f1 ff ff       	jmp    8010540d <alltraps>
+
+801062ba <vector247>:
 801062ba:	6a 00                	push   $0x0
-  pushl $251
-801062bc:	68 fb 00 00 00       	push   $0xfb
-  jmp alltraps
-801062c1:	e9 17 f1 ff ff       	jmp    801053dd <alltraps>
-
-801062c6 <vector252>:
-.globl vector252
-vector252:
-  pushl $0
+801062bc:	68 f7 00 00 00       	push   $0xf7
+801062c1:	e9 47 f1 ff ff       	jmp    8010540d <alltraps>
+
+801062c6 <vector248>:
 801062c6:	6a 00                	push   $0x0
-  pushl $252
-801062c8:	68 fc 00 00 00       	push   $0xfc
-  jmp alltraps
-801062cd:	e9 0b f1 ff ff       	jmp    801053dd <alltraps>
-
-801062d2 <vector253>:
-.globl vector253
-vector253:
-  pushl $0
+801062c8:	68 f8 00 00 00       	push   $0xf8
+801062cd:	e9 3b f1 ff ff       	jmp    8010540d <alltraps>
+
+801062d2 <vector249>:
 801062d2:	6a 00                	push   $0x0
-  pushl $253
-801062d4:	68 fd 00 00 00       	push   $0xfd
-  jmp alltraps
-801062d9:	e9 ff f0 ff ff       	jmp    801053dd <alltraps>
-
-801062de <vector254>:
-.globl vector254
-vector254:
-  pushl $0
+801062d4:	68 f9 00 00 00       	push   $0xf9
+801062d9:	e9 2f f1 ff ff       	jmp    8010540d <alltraps>
+
+801062de <vector250>:
 801062de:	6a 00                	push   $0x0
-  pushl $254
-801062e0:	68 fe 00 00 00       	push   $0xfe
-  jmp alltraps
-801062e5:	e9 f3 f0 ff ff       	jmp    801053dd <alltraps>
-
-801062ea <vector255>:
-.globl vector255
-vector255:
-  pushl $0
+801062e0:	68 fa 00 00 00       	push   $0xfa
+801062e5:	e9 23 f1 ff ff       	jmp    8010540d <alltraps>
+
+801062ea <vector251>:
 801062ea:	6a 00                	push   $0x0
-  pushl $255
-801062ec:	68 ff 00 00 00       	push   $0xff
-  jmp alltraps
-801062f1:	e9 e7 f0 ff ff       	jmp    801053dd <alltraps>
-801062f6:	66 90                	xchg   %ax,%ax
-801062f8:	66 90                	xchg   %ax,%ax
-801062fa:	66 90                	xchg   %ax,%ax
-801062fc:	66 90                	xchg   %ax,%ax
-801062fe:	66 90                	xchg   %ax,%ax
-
-80106300 <walkpgdir>:
+801062ec:	68 fb 00 00 00       	push   $0xfb
+801062f1:	e9 17 f1 ff ff       	jmp    8010540d <alltraps>
+
+801062f6 <vector252>:
+801062f6:	6a 00                	push   $0x0
+801062f8:	68 fc 00 00 00       	push   $0xfc
+801062fd:	e9 0b f1 ff ff       	jmp    8010540d <alltraps>
+
+80106302 <vector253>:
+80106302:	6a 00                	push   $0x0
+80106304:	68 fd 00 00 00       	push   $0xfd
+80106309:	e9 ff f0 ff ff       	jmp    8010540d <alltraps>
+
+8010630e <vector254>:
+8010630e:	6a 00                	push   $0x0
+80106310:	68 fe 00 00 00       	push   $0xfe
+80106315:	e9 f3 f0 ff ff       	jmp    8010540d <alltraps>
+
+8010631a <vector255>:
+8010631a:	6a 00                	push   $0x0
+8010631c:	68 ff 00 00 00       	push   $0xff
+80106321:	e9 e7 f0 ff ff       	jmp    8010540d <alltraps>
+80106326:	66 90                	xchg   %ax,%ax
+80106328:	66 90                	xchg   %ax,%ax
+8010632a:	66 90                	xchg   %ax,%ax
+8010632c:	66 90                	xchg   %ax,%ax
+8010632e:	66 90                	xchg   %ax,%ax
+
+80106330 <walkpgdir>:
 // Return the address of the PTE in page table pgdir
 // that corresponds to virtual address va.  If alloc!=0,
 // create any required page table pages.
 static pte_t *
 walkpgdir(pde_t *pgdir, const void *va, int alloc)
 {
-80106300:	55                   	push   %ebp
-80106301:	89 e5                	mov    %esp,%ebp
-80106303:	57                   	push   %edi
-80106304:	56                   	push   %esi
-80106305:	89 d6                	mov    %edx,%esi
+80106330:	55                   	push   %ebp
+80106331:	89 e5                	mov    %esp,%ebp
+80106333:	57                   	push   %edi
+80106334:	56                   	push   %esi
+80106335:	89 d6                	mov    %edx,%esi
   pde_t *pde;
   pte_t *pgtab;
 
   pde = &pgdir[PDX(va)];
-80106307:	c1 ea 16             	shr    $0x16,%edx
+80106337:	c1 ea 16             	shr    $0x16,%edx
 {
-8010630a:	53                   	push   %ebx
+8010633a:	53                   	push   %ebx
   pde = &pgdir[PDX(va)];
-8010630b:	8d 3c 90             	lea    (%eax,%edx,4),%edi
+8010633b:	8d 3c 90             	lea    (%eax,%edx,4),%edi
 {
-8010630e:	83 ec 1c             	sub    $0x1c,%esp
+8010633e:	83 ec 1c             	sub    $0x1c,%esp
   if(*pde & PTE_P){
-80106311:	8b 1f                	mov    (%edi),%ebx
-80106313:	f6 c3 01             	test   $0x1,%bl
-80106316:	74 28                	je     80106340 <walkpgdir+0x40>
+80106341:	8b 1f                	mov    (%edi),%ebx
+80106343:	f6 c3 01             	test   $0x1,%bl
+80106346:	74 28                	je     80106370 <walkpgdir+0x40>
     pgtab = (pte_t*)P2V(PTE_ADDR(*pde));
-80106318:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
-8010631e:	81 c3 00 00 00 80    	add    $0x80000000,%ebx
+80106348:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+8010634e:	81 c3 00 00 00 80    	add    $0x80000000,%ebx
     // The permissions here are overly generous, but they can
     // be further restricted by the permissions in the page table
     // entries, if necessary.
     *pde = V2P(pgtab) | PTE_P | PTE_W | PTE_U;
   }
   return &pgtab[PTX(va)];
-80106324:	c1 ee 0a             	shr    $0xa,%esi
+80106354:	c1 ee 0a             	shr    $0xa,%esi
 }
-80106327:	83 c4 1c             	add    $0x1c,%esp
+80106357:	83 c4 1c             	add    $0x1c,%esp
   return &pgtab[PTX(va)];
-8010632a:	89 f2                	mov    %esi,%edx
-8010632c:	81 e2 fc 0f 00 00    	and    $0xffc,%edx
-80106332:	8d 04 13             	lea    (%ebx,%edx,1),%eax
-}
-80106335:	5b                   	pop    %ebx
-80106336:	5e                   	pop    %esi
-80106337:	5f                   	pop    %edi
-80106338:	5d                   	pop    %ebp
-80106339:	c3                   	ret    
-8010633a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+8010635a:	89 f2                	mov    %esi,%edx
+8010635c:	81 e2 fc 0f 00 00    	and    $0xffc,%edx
+80106362:	8d 04 13             	lea    (%ebx,%edx,1),%eax
+}
+80106365:	5b                   	pop    %ebx
+80106366:	5e                   	pop    %esi
+80106367:	5f                   	pop    %edi
+80106368:	5d                   	pop    %ebp
+80106369:	c3                   	ret    
+8010636a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     if(!alloc || (pgtab = (pte_t*)kalloc()) == 0)
-80106340:	85 c9                	test   %ecx,%ecx
-80106342:	74 34                	je     80106378 <walkpgdir+0x78>
-80106344:	e8 57 c1 ff ff       	call   801024a0 <kalloc>
-80106349:	85 c0                	test   %eax,%eax
-8010634b:	89 c3                	mov    %eax,%ebx
-8010634d:	74 29                	je     80106378 <walkpgdir+0x78>
+80106370:	85 c9                	test   %ecx,%ecx
+80106372:	74 34                	je     801063a8 <walkpgdir+0x78>
+80106374:	e8 27 c1 ff ff       	call   801024a0 <kalloc>
+80106379:	85 c0                	test   %eax,%eax
+8010637b:	89 c3                	mov    %eax,%ebx
+8010637d:	74 29                	je     801063a8 <walkpgdir+0x78>
     memset(pgtab, 0, PGSIZE);
-8010634f:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
-80106356:	00 
-80106357:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-8010635e:	00 
-8010635f:	89 04 24             	mov    %eax,(%esp)
-80106362:	e8 39 df ff ff       	call   801042a0 <memset>
+8010637f:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
+80106386:	00 
+80106387:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+8010638e:	00 
+8010638f:	89 04 24             	mov    %eax,(%esp)
+80106392:	e8 09 df ff ff       	call   801042a0 <memset>
     *pde = V2P(pgtab) | PTE_P | PTE_W | PTE_U;
-80106367:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
-8010636d:	83 c8 07             	or     $0x7,%eax
-80106370:	89 07                	mov    %eax,(%edi)
-80106372:	eb b0                	jmp    80106324 <walkpgdir+0x24>
-80106374:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80106397:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
+8010639d:	83 c8 07             	or     $0x7,%eax
+801063a0:	89 07                	mov    %eax,(%edi)
+801063a2:	eb b0                	jmp    80106354 <walkpgdir+0x24>
+801063a4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 }
-80106378:	83 c4 1c             	add    $0x1c,%esp
+801063a8:	83 c4 1c             	add    $0x1c,%esp
       return 0;
-8010637b:	31 c0                	xor    %eax,%eax
+801063ab:	31 c0                	xor    %eax,%eax
 }
-8010637d:	5b                   	pop    %ebx
-8010637e:	5e                   	pop    %esi
-8010637f:	5f                   	pop    %edi
-80106380:	5d                   	pop    %ebp
-80106381:	c3                   	ret    
-80106382:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106389:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+801063ad:	5b                   	pop    %ebx
+801063ae:	5e                   	pop    %esi
+801063af:	5f                   	pop    %edi
+801063b0:	5d                   	pop    %ebp
+801063b1:	c3                   	ret    
+801063b2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801063b9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-80106390 <mappages>:
+801063c0 <mappages>:
 // Create PTEs for virtual addresses starting at va that refer to
 // physical addresses starting at pa. va and size might not
 // be page-aligned.
 static int
 mappages(pde_t *pgdir, void *va, uint size, uint pa, int perm)
 {
-80106390:	55                   	push   %ebp
-80106391:	89 e5                	mov    %esp,%ebp
-80106393:	57                   	push   %edi
-80106394:	56                   	push   %esi
-80106395:	53                   	push   %ebx
+801063c0:	55                   	push   %ebp
+801063c1:	89 e5                	mov    %esp,%ebp
+801063c3:	57                   	push   %edi
+801063c4:	56                   	push   %esi
+801063c5:	53                   	push   %ebx
   char *a, *last;
   pte_t *pte;
 
   a = (char*)PGROUNDDOWN((uint)va);
-80106396:	89 d3                	mov    %edx,%ebx
+801063c6:	89 d3                	mov    %edx,%ebx
 {
-80106398:	83 ec 1c             	sub    $0x1c,%esp
-8010639b:	8b 7d 08             	mov    0x8(%ebp),%edi
+801063c8:	83 ec 1c             	sub    $0x1c,%esp
+801063cb:	8b 7d 08             	mov    0x8(%ebp),%edi
   a = (char*)PGROUNDDOWN((uint)va);
-8010639e:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+801063ce:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
 {
-801063a4:	89 45 e0             	mov    %eax,-0x20(%ebp)
+801063d4:	89 45 e0             	mov    %eax,-0x20(%ebp)
   last = (char*)PGROUNDDOWN(((uint)va) + size - 1);
-801063a7:	8d 44 0a ff          	lea    -0x1(%edx,%ecx,1),%eax
-801063ab:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+801063d7:	8d 44 0a ff          	lea    -0x1(%edx,%ecx,1),%eax
+801063db:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   for(;;){
     if((pte = walkpgdir(pgdir, a, 1)) == 0)
       return -1;
     if(*pte & PTE_P)
       panic("remap");
     *pte = pa | perm | PTE_P;
-801063ae:	83 4d 0c 01          	orl    $0x1,0xc(%ebp)
+801063de:	83 4d 0c 01          	orl    $0x1,0xc(%ebp)
   last = (char*)PGROUNDDOWN(((uint)va) + size - 1);
-801063b2:	81 65 e4 00 f0 ff ff 	andl   $0xfffff000,-0x1c(%ebp)
-801063b9:	29 df                	sub    %ebx,%edi
-801063bb:	eb 18                	jmp    801063d5 <mappages+0x45>
-801063bd:	8d 76 00             	lea    0x0(%esi),%esi
+801063e2:	81 65 e4 00 f0 ff ff 	andl   $0xfffff000,-0x1c(%ebp)
+801063e9:	29 df                	sub    %ebx,%edi
+801063eb:	eb 18                	jmp    80106405 <mappages+0x45>
+801063ed:	8d 76 00             	lea    0x0(%esi),%esi
     if(*pte & PTE_P)
-801063c0:	f6 00 01             	testb  $0x1,(%eax)
-801063c3:	75 3d                	jne    80106402 <mappages+0x72>
+801063f0:	f6 00 01             	testb  $0x1,(%eax)
+801063f3:	75 3d                	jne    80106432 <mappages+0x72>
     *pte = pa | perm | PTE_P;
-801063c5:	0b 75 0c             	or     0xc(%ebp),%esi
+801063f5:	0b 75 0c             	or     0xc(%ebp),%esi
     if(a == last)
-801063c8:	3b 5d e4             	cmp    -0x1c(%ebp),%ebx
+801063f8:	3b 5d e4             	cmp    -0x1c(%ebp),%ebx
     *pte = pa | perm | PTE_P;
-801063cb:	89 30                	mov    %esi,(%eax)
+801063fb:	89 30                	mov    %esi,(%eax)
     if(a == last)
-801063cd:	74 29                	je     801063f8 <mappages+0x68>
+801063fd:	74 29                	je     80106428 <mappages+0x68>
       break;
     a += PGSIZE;
-801063cf:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+801063ff:	81 c3 00 10 00 00    	add    $0x1000,%ebx
     if((pte = walkpgdir(pgdir, a, 1)) == 0)
-801063d5:	8b 45 e0             	mov    -0x20(%ebp),%eax
-801063d8:	b9 01 00 00 00       	mov    $0x1,%ecx
-801063dd:	89 da                	mov    %ebx,%edx
-801063df:	8d 34 3b             	lea    (%ebx,%edi,1),%esi
-801063e2:	e8 19 ff ff ff       	call   80106300 <walkpgdir>
-801063e7:	85 c0                	test   %eax,%eax
-801063e9:	75 d5                	jne    801063c0 <mappages+0x30>
+80106405:	8b 45 e0             	mov    -0x20(%ebp),%eax
+80106408:	b9 01 00 00 00       	mov    $0x1,%ecx
+8010640d:	89 da                	mov    %ebx,%edx
+8010640f:	8d 34 3b             	lea    (%ebx,%edi,1),%esi
+80106412:	e8 19 ff ff ff       	call   80106330 <walkpgdir>
+80106417:	85 c0                	test   %eax,%eax
+80106419:	75 d5                	jne    801063f0 <mappages+0x30>
     pa += PGSIZE;
   }
   return 0;
 }
-801063eb:	83 c4 1c             	add    $0x1c,%esp
+8010641b:	83 c4 1c             	add    $0x1c,%esp
       return -1;
-801063ee:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-801063f3:	5b                   	pop    %ebx
-801063f4:	5e                   	pop    %esi
-801063f5:	5f                   	pop    %edi
-801063f6:	5d                   	pop    %ebp
-801063f7:	c3                   	ret    
-801063f8:	83 c4 1c             	add    $0x1c,%esp
+8010641e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80106423:	5b                   	pop    %ebx
+80106424:	5e                   	pop    %esi
+80106425:	5f                   	pop    %edi
+80106426:	5d                   	pop    %ebp
+80106427:	c3                   	ret    
+80106428:	83 c4 1c             	add    $0x1c,%esp
   return 0;
-801063fb:	31 c0                	xor    %eax,%eax
+8010642b:	31 c0                	xor    %eax,%eax
 }
-801063fd:	5b                   	pop    %ebx
-801063fe:	5e                   	pop    %esi
-801063ff:	5f                   	pop    %edi
-80106400:	5d                   	pop    %ebp
-80106401:	c3                   	ret    
+8010642d:	5b                   	pop    %ebx
+8010642e:	5e                   	pop    %esi
+8010642f:	5f                   	pop    %edi
+80106430:	5d                   	pop    %ebp
+80106431:	c3                   	ret    
       panic("remap");
-80106402:	c7 04 24 e8 74 10 80 	movl   $0x801074e8,(%esp)
-80106409:	e8 52 9f ff ff       	call   80100360 <panic>
-8010640e:	66 90                	xchg   %ax,%ax
+80106432:	c7 04 24 08 75 10 80 	movl   $0x80107508,(%esp)
+80106439:	e8 22 9f ff ff       	call   80100360 <panic>
+8010643e:	66 90                	xchg   %ax,%ax
 
-80106410 <deallocuvm.part.0>:
+80106440 <deallocuvm.part.0>:
 // Deallocate user pages to bring the process size from oldsz to
 // newsz.  oldsz and newsz need not be page-aligned, nor does newsz
 // need to be less than oldsz.  oldsz can be larger than the actual
 // process size.  Returns the new process size.
 int
 deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
-80106410:	55                   	push   %ebp
-80106411:	89 e5                	mov    %esp,%ebp
-80106413:	57                   	push   %edi
-80106414:	89 c7                	mov    %eax,%edi
-80106416:	56                   	push   %esi
-80106417:	89 d6                	mov    %edx,%esi
-80106419:	53                   	push   %ebx
+80106440:	55                   	push   %ebp
+80106441:	89 e5                	mov    %esp,%ebp
+80106443:	57                   	push   %edi
+80106444:	89 c7                	mov    %eax,%edi
+80106446:	56                   	push   %esi
+80106447:	89 d6                	mov    %edx,%esi
+80106449:	53                   	push   %ebx
   uint a, pa;
 
   if(newsz >= oldsz)
     return oldsz;
 
   a = PGROUNDUP(newsz);
-8010641a:	8d 99 ff 0f 00 00    	lea    0xfff(%ecx),%ebx
+8010644a:	8d 99 ff 0f 00 00    	lea    0xfff(%ecx),%ebx
 deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
-80106420:	83 ec 1c             	sub    $0x1c,%esp
+80106450:	83 ec 1c             	sub    $0x1c,%esp
   a = PGROUNDUP(newsz);
-80106423:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+80106453:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
   for(; a  < oldsz; a += PGSIZE){
-80106429:	39 d3                	cmp    %edx,%ebx
+80106459:	39 d3                	cmp    %edx,%ebx
 deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
-8010642b:	89 4d e0             	mov    %ecx,-0x20(%ebp)
+8010645b:	89 4d e0             	mov    %ecx,-0x20(%ebp)
   for(; a  < oldsz; a += PGSIZE){
-8010642e:	72 3b                	jb     8010646b <deallocuvm.part.0+0x5b>
-80106430:	eb 5e                	jmp    80106490 <deallocuvm.part.0+0x80>
-80106432:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+8010645e:	72 3b                	jb     8010649b <deallocuvm.part.0+0x5b>
+80106460:	eb 5e                	jmp    801064c0 <deallocuvm.part.0+0x80>
+80106462:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     pte = walkpgdir(pgdir, (char*)a, 0);
     if(!pte)
       a = PGADDR(PDX(a) + 1, 0, 0) - PGSIZE;
     else if((*pte & PTE_P) != 0){
-80106438:	8b 10                	mov    (%eax),%edx
-8010643a:	f6 c2 01             	test   $0x1,%dl
-8010643d:	74 22                	je     80106461 <deallocuvm.part.0+0x51>
+80106468:	8b 10                	mov    (%eax),%edx
+8010646a:	f6 c2 01             	test   $0x1,%dl
+8010646d:	74 22                	je     80106491 <deallocuvm.part.0+0x51>
       pa = PTE_ADDR(*pte);
       if(pa == 0)
-8010643f:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
-80106445:	74 54                	je     8010649b <deallocuvm.part.0+0x8b>
+8010646f:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
+80106475:	74 54                	je     801064cb <deallocuvm.part.0+0x8b>
         panic("kfree");
       char *v = P2V(pa);
-80106447:	81 c2 00 00 00 80    	add    $0x80000000,%edx
+80106477:	81 c2 00 00 00 80    	add    $0x80000000,%edx
       kfree(v);
-8010644d:	89 14 24             	mov    %edx,(%esp)
-80106450:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-80106453:	e8 98 be ff ff       	call   801022f0 <kfree>
+8010647d:	89 14 24             	mov    %edx,(%esp)
+80106480:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80106483:	e8 68 be ff ff       	call   801022f0 <kfree>
       *pte = 0;
-80106458:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-8010645b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+80106488:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+8010648b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   for(; a  < oldsz; a += PGSIZE){
-80106461:	81 c3 00 10 00 00    	add    $0x1000,%ebx
-80106467:	39 f3                	cmp    %esi,%ebx
-80106469:	73 25                	jae    80106490 <deallocuvm.part.0+0x80>
+80106491:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+80106497:	39 f3                	cmp    %esi,%ebx
+80106499:	73 25                	jae    801064c0 <deallocuvm.part.0+0x80>
     pte = walkpgdir(pgdir, (char*)a, 0);
-8010646b:	31 c9                	xor    %ecx,%ecx
-8010646d:	89 da                	mov    %ebx,%edx
-8010646f:	89 f8                	mov    %edi,%eax
-80106471:	e8 8a fe ff ff       	call   80106300 <walkpgdir>
+8010649b:	31 c9                	xor    %ecx,%ecx
+8010649d:	89 da                	mov    %ebx,%edx
+8010649f:	89 f8                	mov    %edi,%eax
+801064a1:	e8 8a fe ff ff       	call   80106330 <walkpgdir>
     if(!pte)
-80106476:	85 c0                	test   %eax,%eax
-80106478:	75 be                	jne    80106438 <deallocuvm.part.0+0x28>
+801064a6:	85 c0                	test   %eax,%eax
+801064a8:	75 be                	jne    80106468 <deallocuvm.part.0+0x28>
       a = PGADDR(PDX(a) + 1, 0, 0) - PGSIZE;
-8010647a:	81 e3 00 00 c0 ff    	and    $0xffc00000,%ebx
-80106480:	81 c3 00 f0 3f 00    	add    $0x3ff000,%ebx
+801064aa:	81 e3 00 00 c0 ff    	and    $0xffc00000,%ebx
+801064b0:	81 c3 00 f0 3f 00    	add    $0x3ff000,%ebx
   for(; a  < oldsz; a += PGSIZE){
-80106486:	81 c3 00 10 00 00    	add    $0x1000,%ebx
-8010648c:	39 f3                	cmp    %esi,%ebx
-8010648e:	72 db                	jb     8010646b <deallocuvm.part.0+0x5b>
+801064b6:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+801064bc:	39 f3                	cmp    %esi,%ebx
+801064be:	72 db                	jb     8010649b <deallocuvm.part.0+0x5b>
     }
   }
   return newsz;
 }
-80106490:	8b 45 e0             	mov    -0x20(%ebp),%eax
-80106493:	83 c4 1c             	add    $0x1c,%esp
-80106496:	5b                   	pop    %ebx
-80106497:	5e                   	pop    %esi
-80106498:	5f                   	pop    %edi
-80106499:	5d                   	pop    %ebp
-8010649a:	c3                   	ret    
+801064c0:	8b 45 e0             	mov    -0x20(%ebp),%eax
+801064c3:	83 c4 1c             	add    $0x1c,%esp
+801064c6:	5b                   	pop    %ebx
+801064c7:	5e                   	pop    %esi
+801064c8:	5f                   	pop    %edi
+801064c9:	5d                   	pop    %ebp
+801064ca:	c3                   	ret    
         panic("kfree");
-8010649b:	c7 04 24 86 6e 10 80 	movl   $0x80106e86,(%esp)
-801064a2:	e8 b9 9e ff ff       	call   80100360 <panic>
-801064a7:	89 f6                	mov    %esi,%esi
-801064a9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+801064cb:	c7 04 24 a6 6e 10 80 	movl   $0x80106ea6,(%esp)
+801064d2:	e8 89 9e ff ff       	call   80100360 <panic>
+801064d7:	89 f6                	mov    %esi,%esi
+801064d9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-801064b0 <seginit>:
+801064e0 <seginit>:
 {
-801064b0:	55                   	push   %ebp
-801064b1:	89 e5                	mov    %esp,%ebp
-801064b3:	83 ec 18             	sub    $0x18,%esp
+801064e0:	55                   	push   %ebp
+801064e1:	89 e5                	mov    %esp,%ebp
+801064e3:	83 ec 18             	sub    $0x18,%esp
   c = &cpus[cpuid()];
-801064b6:	e8 c5 d1 ff ff       	call   80103680 <cpuid>
+801064e6:	e8 95 d1 ff ff       	call   80103680 <cpuid>
   c->gdt[SEG_KCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, 0);
-801064bb:	31 c9                	xor    %ecx,%ecx
-801064bd:	ba ff ff ff ff       	mov    $0xffffffff,%edx
+801064eb:	31 c9                	xor    %ecx,%ecx
+801064ed:	ba ff ff ff ff       	mov    $0xffffffff,%edx
   c = &cpus[cpuid()];
-801064c2:	69 c0 b0 00 00 00    	imul   $0xb0,%eax,%eax
-801064c8:	05 80 27 11 80       	add    $0x80112780,%eax
+801064f2:	69 c0 b0 00 00 00    	imul   $0xb0,%eax,%eax
+801064f8:	05 80 27 11 80       	add    $0x80112780,%eax
   c->gdt[SEG_KCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, 0);
-801064cd:	66 89 50 78          	mov    %dx,0x78(%eax)
+801064fd:	66 89 50 78          	mov    %dx,0x78(%eax)
   c->gdt[SEG_KDATA] = SEG(STA_W, 0, 0xffffffff, 0);
-801064d1:	ba ff ff ff ff       	mov    $0xffffffff,%edx
+80106501:	ba ff ff ff ff       	mov    $0xffffffff,%edx
   lgdt(c->gdt, sizeof(c->gdt));
-801064d6:	83 c0 70             	add    $0x70,%eax
+80106506:	83 c0 70             	add    $0x70,%eax
   c->gdt[SEG_KCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, 0);
-801064d9:	66 89 48 0a          	mov    %cx,0xa(%eax)
+80106509:	66 89 48 0a          	mov    %cx,0xa(%eax)
   c->gdt[SEG_KDATA] = SEG(STA_W, 0, 0xffffffff, 0);
-801064dd:	31 c9                	xor    %ecx,%ecx
-801064df:	66 89 50 10          	mov    %dx,0x10(%eax)
+8010650d:	31 c9                	xor    %ecx,%ecx
+8010650f:	66 89 50 10          	mov    %dx,0x10(%eax)
   c->gdt[SEG_UCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, DPL_USER);
-801064e3:	ba ff ff ff ff       	mov    $0xffffffff,%edx
+80106513:	ba ff ff ff ff       	mov    $0xffffffff,%edx
   c->gdt[SEG_KDATA] = SEG(STA_W, 0, 0xffffffff, 0);
-801064e8:	66 89 48 12          	mov    %cx,0x12(%eax)
+80106518:	66 89 48 12          	mov    %cx,0x12(%eax)
   c->gdt[SEG_UCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, DPL_USER);
-801064ec:	31 c9                	xor    %ecx,%ecx
-801064ee:	66 89 50 18          	mov    %dx,0x18(%eax)
+8010651c:	31 c9                	xor    %ecx,%ecx
+8010651e:	66 89 50 18          	mov    %dx,0x18(%eax)
   c->gdt[SEG_UDATA] = SEG(STA_W, 0, 0xffffffff, DPL_USER);
-801064f2:	ba ff ff ff ff       	mov    $0xffffffff,%edx
+80106522:	ba ff ff ff ff       	mov    $0xffffffff,%edx
   c->gdt[SEG_UCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, DPL_USER);
-801064f7:	66 89 48 1a          	mov    %cx,0x1a(%eax)
+80106527:	66 89 48 1a          	mov    %cx,0x1a(%eax)
   c->gdt[SEG_UDATA] = SEG(STA_W, 0, 0xffffffff, DPL_USER);
-801064fb:	31 c9                	xor    %ecx,%ecx
+8010652b:	31 c9                	xor    %ecx,%ecx
   c->gdt[SEG_KCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, 0);
-801064fd:	c6 40 0d 9a          	movb   $0x9a,0xd(%eax)
-80106501:	c6 40 0e cf          	movb   $0xcf,0xe(%eax)
+8010652d:	c6 40 0d 9a          	movb   $0x9a,0xd(%eax)
+80106531:	c6 40 0e cf          	movb   $0xcf,0xe(%eax)
   c->gdt[SEG_KDATA] = SEG(STA_W, 0, 0xffffffff, 0);
-80106505:	c6 40 15 92          	movb   $0x92,0x15(%eax)
-80106509:	c6 40 16 cf          	movb   $0xcf,0x16(%eax)
+80106535:	c6 40 15 92          	movb   $0x92,0x15(%eax)
+80106539:	c6 40 16 cf          	movb   $0xcf,0x16(%eax)
   c->gdt[SEG_UCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, DPL_USER);
-8010650d:	c6 40 1d fa          	movb   $0xfa,0x1d(%eax)
-80106511:	c6 40 1e cf          	movb   $0xcf,0x1e(%eax)
+8010653d:	c6 40 1d fa          	movb   $0xfa,0x1d(%eax)
+80106541:	c6 40 1e cf          	movb   $0xcf,0x1e(%eax)
   c->gdt[SEG_UDATA] = SEG(STA_W, 0, 0xffffffff, DPL_USER);
-80106515:	c6 40 25 f2          	movb   $0xf2,0x25(%eax)
-80106519:	c6 40 26 cf          	movb   $0xcf,0x26(%eax)
-8010651d:	66 89 50 20          	mov    %dx,0x20(%eax)
+80106545:	c6 40 25 f2          	movb   $0xf2,0x25(%eax)
+80106549:	c6 40 26 cf          	movb   $0xcf,0x26(%eax)
+8010654d:	66 89 50 20          	mov    %dx,0x20(%eax)
   pd[0] = size-1;
-80106521:	ba 2f 00 00 00       	mov    $0x2f,%edx
+80106551:	ba 2f 00 00 00       	mov    $0x2f,%edx
   c->gdt[SEG_KCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, 0);
-80106526:	c6 40 0c 00          	movb   $0x0,0xc(%eax)
-8010652a:	c6 40 0f 00          	movb   $0x0,0xf(%eax)
+80106556:	c6 40 0c 00          	movb   $0x0,0xc(%eax)
+8010655a:	c6 40 0f 00          	movb   $0x0,0xf(%eax)
   c->gdt[SEG_KDATA] = SEG(STA_W, 0, 0xffffffff, 0);
-8010652e:	c6 40 14 00          	movb   $0x0,0x14(%eax)
-80106532:	c6 40 17 00          	movb   $0x0,0x17(%eax)
+8010655e:	c6 40 14 00          	movb   $0x0,0x14(%eax)
+80106562:	c6 40 17 00          	movb   $0x0,0x17(%eax)
   c->gdt[SEG_UCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, DPL_USER);
-80106536:	c6 40 1c 00          	movb   $0x0,0x1c(%eax)
-8010653a:	c6 40 1f 00          	movb   $0x0,0x1f(%eax)
+80106566:	c6 40 1c 00          	movb   $0x0,0x1c(%eax)
+8010656a:	c6 40 1f 00          	movb   $0x0,0x1f(%eax)
   c->gdt[SEG_UDATA] = SEG(STA_W, 0, 0xffffffff, DPL_USER);
-8010653e:	66 89 48 22          	mov    %cx,0x22(%eax)
-80106542:	c6 40 24 00          	movb   $0x0,0x24(%eax)
-80106546:	c6 40 27 00          	movb   $0x0,0x27(%eax)
-8010654a:	66 89 55 f2          	mov    %dx,-0xe(%ebp)
+8010656e:	66 89 48 22          	mov    %cx,0x22(%eax)
+80106572:	c6 40 24 00          	movb   $0x0,0x24(%eax)
+80106576:	c6 40 27 00          	movb   $0x0,0x27(%eax)
+8010657a:	66 89 55 f2          	mov    %dx,-0xe(%ebp)
   pd[1] = (uint)p;
-8010654e:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
+8010657e:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
   pd[2] = (uint)p >> 16;
-80106552:	c1 e8 10             	shr    $0x10,%eax
-80106555:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
+80106582:	c1 e8 10             	shr    $0x10,%eax
+80106585:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
   asm volatile("lgdt (%0)" : : "r" (pd));
-80106559:	8d 45 f2             	lea    -0xe(%ebp),%eax
-8010655c:	0f 01 10             	lgdtl  (%eax)
-}
-8010655f:	c9                   	leave  
-80106560:	c3                   	ret    
-80106561:	eb 0d                	jmp    80106570 <switchkvm>
-80106563:	90                   	nop
-80106564:	90                   	nop
-80106565:	90                   	nop
-80106566:	90                   	nop
-80106567:	90                   	nop
-80106568:	90                   	nop
-80106569:	90                   	nop
-8010656a:	90                   	nop
-8010656b:	90                   	nop
-8010656c:	90                   	nop
-8010656d:	90                   	nop
-8010656e:	90                   	nop
-8010656f:	90                   	nop
-
-80106570 <switchkvm>:
+80106589:	8d 45 f2             	lea    -0xe(%ebp),%eax
+8010658c:	0f 01 10             	lgdtl  (%eax)
+}
+8010658f:	c9                   	leave  
+80106590:	c3                   	ret    
+80106591:	eb 0d                	jmp    801065a0 <switchkvm>
+80106593:	90                   	nop
+80106594:	90                   	nop
+80106595:	90                   	nop
+80106596:	90                   	nop
+80106597:	90                   	nop
+80106598:	90                   	nop
+80106599:	90                   	nop
+8010659a:	90                   	nop
+8010659b:	90                   	nop
+8010659c:	90                   	nop
+8010659d:	90                   	nop
+8010659e:	90                   	nop
+8010659f:	90                   	nop
+
+801065a0 <switchkvm>:
   lcr3(V2P(kpgdir));   // switch to the kernel page table
-80106570:	a1 a4 55 11 80       	mov    0x801155a4,%eax
+801065a0:	a1 a4 55 11 80       	mov    0x801155a4,%eax
 {
-80106575:	55                   	push   %ebp
-80106576:	89 e5                	mov    %esp,%ebp
+801065a5:	55                   	push   %ebp
+801065a6:	89 e5                	mov    %esp,%ebp
   lcr3(V2P(kpgdir));   // switch to the kernel page table
-80106578:	05 00 00 00 80       	add    $0x80000000,%eax
+801065a8:	05 00 00 00 80       	add    $0x80000000,%eax
 }
 
 static inline void
 lcr3(uint val)
 {
   asm volatile("movl %0,%%cr3" : : "r" (val));
-8010657d:	0f 22 d8             	mov    %eax,%cr3
-}
-80106580:	5d                   	pop    %ebp
-80106581:	c3                   	ret    
-80106582:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106589:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
-
-80106590 <switchuvm>:
-{
-80106590:	55                   	push   %ebp
-80106591:	89 e5                	mov    %esp,%ebp
-80106593:	57                   	push   %edi
-80106594:	56                   	push   %esi
-80106595:	53                   	push   %ebx
-80106596:	83 ec 1c             	sub    $0x1c,%esp
-80106599:	8b 75 08             	mov    0x8(%ebp),%esi
+801065ad:	0f 22 d8             	mov    %eax,%cr3
+}
+801065b0:	5d                   	pop    %ebp
+801065b1:	c3                   	ret    
+801065b2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801065b9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+801065c0 <switchuvm>:
+{
+801065c0:	55                   	push   %ebp
+801065c1:	89 e5                	mov    %esp,%ebp
+801065c3:	57                   	push   %edi
+801065c4:	56                   	push   %esi
+801065c5:	53                   	push   %ebx
+801065c6:	83 ec 1c             	sub    $0x1c,%esp
+801065c9:	8b 75 08             	mov    0x8(%ebp),%esi
   if(p == 0)
-8010659c:	85 f6                	test   %esi,%esi
-8010659e:	0f 84 cd 00 00 00    	je     80106671 <switchuvm+0xe1>
+801065cc:	85 f6                	test   %esi,%esi
+801065ce:	0f 84 cd 00 00 00    	je     801066a1 <switchuvm+0xe1>
   if(p->kstack == 0)
-801065a4:	8b 46 08             	mov    0x8(%esi),%eax
-801065a7:	85 c0                	test   %eax,%eax
-801065a9:	0f 84 da 00 00 00    	je     80106689 <switchuvm+0xf9>
+801065d4:	8b 46 08             	mov    0x8(%esi),%eax
+801065d7:	85 c0                	test   %eax,%eax
+801065d9:	0f 84 da 00 00 00    	je     801066b9 <switchuvm+0xf9>
   if(p->pgdir == 0)
-801065af:	8b 7e 04             	mov    0x4(%esi),%edi
-801065b2:	85 ff                	test   %edi,%edi
-801065b4:	0f 84 c3 00 00 00    	je     8010667d <switchuvm+0xed>
+801065df:	8b 7e 04             	mov    0x4(%esi),%edi
+801065e2:	85 ff                	test   %edi,%edi
+801065e4:	0f 84 c3 00 00 00    	je     801066ad <switchuvm+0xed>
   pushcli();
-801065ba:	e8 31 db ff ff       	call   801040f0 <pushcli>
+801065ea:	e8 01 db ff ff       	call   801040f0 <pushcli>
   mycpu()->gdt[SEG_TSS] = SEG16(STS_T32A, &mycpu()->ts,
-801065bf:	e8 3c d0 ff ff       	call   80103600 <mycpu>
-801065c4:	89 c3                	mov    %eax,%ebx
-801065c6:	e8 35 d0 ff ff       	call   80103600 <mycpu>
-801065cb:	89 c7                	mov    %eax,%edi
-801065cd:	e8 2e d0 ff ff       	call   80103600 <mycpu>
-801065d2:	83 c7 08             	add    $0x8,%edi
-801065d5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-801065d8:	e8 23 d0 ff ff       	call   80103600 <mycpu>
-801065dd:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
-801065e0:	ba 67 00 00 00       	mov    $0x67,%edx
-801065e5:	66 89 93 98 00 00 00 	mov    %dx,0x98(%ebx)
-801065ec:	66 89 bb 9a 00 00 00 	mov    %di,0x9a(%ebx)
-801065f3:	c6 83 9d 00 00 00 99 	movb   $0x99,0x9d(%ebx)
-801065fa:	83 c1 08             	add    $0x8,%ecx
-801065fd:	c1 e9 10             	shr    $0x10,%ecx
-80106600:	83 c0 08             	add    $0x8,%eax
-80106603:	c1 e8 18             	shr    $0x18,%eax
-80106606:	88 8b 9c 00 00 00    	mov    %cl,0x9c(%ebx)
-8010660c:	c6 83 9e 00 00 00 40 	movb   $0x40,0x9e(%ebx)
-80106613:	88 83 9f 00 00 00    	mov    %al,0x9f(%ebx)
+801065ef:	e8 0c d0 ff ff       	call   80103600 <mycpu>
+801065f4:	89 c3                	mov    %eax,%ebx
+801065f6:	e8 05 d0 ff ff       	call   80103600 <mycpu>
+801065fb:	89 c7                	mov    %eax,%edi
+801065fd:	e8 fe cf ff ff       	call   80103600 <mycpu>
+80106602:	83 c7 08             	add    $0x8,%edi
+80106605:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80106608:	e8 f3 cf ff ff       	call   80103600 <mycpu>
+8010660d:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+80106610:	ba 67 00 00 00       	mov    $0x67,%edx
+80106615:	66 89 93 98 00 00 00 	mov    %dx,0x98(%ebx)
+8010661c:	66 89 bb 9a 00 00 00 	mov    %di,0x9a(%ebx)
+80106623:	c6 83 9d 00 00 00 99 	movb   $0x99,0x9d(%ebx)
+8010662a:	83 c1 08             	add    $0x8,%ecx
+8010662d:	c1 e9 10             	shr    $0x10,%ecx
+80106630:	83 c0 08             	add    $0x8,%eax
+80106633:	c1 e8 18             	shr    $0x18,%eax
+80106636:	88 8b 9c 00 00 00    	mov    %cl,0x9c(%ebx)
+8010663c:	c6 83 9e 00 00 00 40 	movb   $0x40,0x9e(%ebx)
+80106643:	88 83 9f 00 00 00    	mov    %al,0x9f(%ebx)
   mycpu()->ts.iomb = (ushort) 0xFFFF;
-80106619:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+80106649:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
   mycpu()->gdt[SEG_TSS].s = 0;
-8010661e:	e8 dd cf ff ff       	call   80103600 <mycpu>
-80106623:	80 a0 9d 00 00 00 ef 	andb   $0xef,0x9d(%eax)
+8010664e:	e8 ad cf ff ff       	call   80103600 <mycpu>
+80106653:	80 a0 9d 00 00 00 ef 	andb   $0xef,0x9d(%eax)
   mycpu()->ts.ss0 = SEG_KDATA << 3;
-8010662a:	e8 d1 cf ff ff       	call   80103600 <mycpu>
-8010662f:	b9 10 00 00 00       	mov    $0x10,%ecx
-80106634:	66 89 48 10          	mov    %cx,0x10(%eax)
+8010665a:	e8 a1 cf ff ff       	call   80103600 <mycpu>
+8010665f:	b9 10 00 00 00       	mov    $0x10,%ecx
+80106664:	66 89 48 10          	mov    %cx,0x10(%eax)
   mycpu()->ts.esp0 = (uint)p->kstack + KSTACKSIZE;
-80106638:	e8 c3 cf ff ff       	call   80103600 <mycpu>
-8010663d:	8b 56 08             	mov    0x8(%esi),%edx
-80106640:	8d 8a 00 10 00 00    	lea    0x1000(%edx),%ecx
-80106646:	89 48 0c             	mov    %ecx,0xc(%eax)
+80106668:	e8 93 cf ff ff       	call   80103600 <mycpu>
+8010666d:	8b 56 08             	mov    0x8(%esi),%edx
+80106670:	8d 8a 00 10 00 00    	lea    0x1000(%edx),%ecx
+80106676:	89 48 0c             	mov    %ecx,0xc(%eax)
   mycpu()->ts.iomb = (ushort) 0xFFFF;
-80106649:	e8 b2 cf ff ff       	call   80103600 <mycpu>
-8010664e:	66 89 58 6e          	mov    %bx,0x6e(%eax)
+80106679:	e8 82 cf ff ff       	call   80103600 <mycpu>
+8010667e:	66 89 58 6e          	mov    %bx,0x6e(%eax)
   asm volatile("ltr %0" : : "r" (sel));
-80106652:	b8 28 00 00 00       	mov    $0x28,%eax
-80106657:	0f 00 d8             	ltr    %ax
+80106682:	b8 28 00 00 00       	mov    $0x28,%eax
+80106687:	0f 00 d8             	ltr    %ax
   lcr3(V2P(p->pgdir));  // switch to process's address space
-8010665a:	8b 46 04             	mov    0x4(%esi),%eax
-8010665d:	05 00 00 00 80       	add    $0x80000000,%eax
+8010668a:	8b 46 04             	mov    0x4(%esi),%eax
+8010668d:	05 00 00 00 80       	add    $0x80000000,%eax
   asm volatile("movl %0,%%cr3" : : "r" (val));
-80106662:	0f 22 d8             	mov    %eax,%cr3
+80106692:	0f 22 d8             	mov    %eax,%cr3
 }
-80106665:	83 c4 1c             	add    $0x1c,%esp
-80106668:	5b                   	pop    %ebx
-80106669:	5e                   	pop    %esi
-8010666a:	5f                   	pop    %edi
-8010666b:	5d                   	pop    %ebp
+80106695:	83 c4 1c             	add    $0x1c,%esp
+80106698:	5b                   	pop    %ebx
+80106699:	5e                   	pop    %esi
+8010669a:	5f                   	pop    %edi
+8010669b:	5d                   	pop    %ebp
   popcli();
-8010666c:	e9 bf da ff ff       	jmp    80104130 <popcli>
+8010669c:	e9 8f da ff ff       	jmp    80104130 <popcli>
     panic("switchuvm: no process");
-80106671:	c7 04 24 ee 74 10 80 	movl   $0x801074ee,(%esp)
-80106678:	e8 e3 9c ff ff       	call   80100360 <panic>
+801066a1:	c7 04 24 0e 75 10 80 	movl   $0x8010750e,(%esp)
+801066a8:	e8 b3 9c ff ff       	call   80100360 <panic>
     panic("switchuvm: no pgdir");
-8010667d:	c7 04 24 19 75 10 80 	movl   $0x80107519,(%esp)
-80106684:	e8 d7 9c ff ff       	call   80100360 <panic>
+801066ad:	c7 04 24 39 75 10 80 	movl   $0x80107539,(%esp)
+801066b4:	e8 a7 9c ff ff       	call   80100360 <panic>
     panic("switchuvm: no kstack");
-80106689:	c7 04 24 04 75 10 80 	movl   $0x80107504,(%esp)
-80106690:	e8 cb 9c ff ff       	call   80100360 <panic>
-80106695:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80106699:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
-
-801066a0 <inituvm>:
-{
-801066a0:	55                   	push   %ebp
-801066a1:	89 e5                	mov    %esp,%ebp
-801066a3:	57                   	push   %edi
-801066a4:	56                   	push   %esi
-801066a5:	53                   	push   %ebx
-801066a6:	83 ec 1c             	sub    $0x1c,%esp
-801066a9:	8b 75 10             	mov    0x10(%ebp),%esi
-801066ac:	8b 45 08             	mov    0x8(%ebp),%eax
-801066af:	8b 7d 0c             	mov    0xc(%ebp),%edi
+801066b9:	c7 04 24 24 75 10 80 	movl   $0x80107524,(%esp)
+801066c0:	e8 9b 9c ff ff       	call   80100360 <panic>
+801066c5:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801066c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+801066d0 <inituvm>:
+{
+801066d0:	55                   	push   %ebp
+801066d1:	89 e5                	mov    %esp,%ebp
+801066d3:	57                   	push   %edi
+801066d4:	56                   	push   %esi
+801066d5:	53                   	push   %ebx
+801066d6:	83 ec 1c             	sub    $0x1c,%esp
+801066d9:	8b 75 10             	mov    0x10(%ebp),%esi
+801066dc:	8b 45 08             	mov    0x8(%ebp),%eax
+801066df:	8b 7d 0c             	mov    0xc(%ebp),%edi
   if(sz >= PGSIZE)
-801066b2:	81 fe ff 0f 00 00    	cmp    $0xfff,%esi
+801066e2:	81 fe ff 0f 00 00    	cmp    $0xfff,%esi
 {
-801066b8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+801066e8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   if(sz >= PGSIZE)
-801066bb:	77 54                	ja     80106711 <inituvm+0x71>
+801066eb:	77 54                	ja     80106741 <inituvm+0x71>
   mem = kalloc();
-801066bd:	e8 de bd ff ff       	call   801024a0 <kalloc>
+801066ed:	e8 ae bd ff ff       	call   801024a0 <kalloc>
   memset(mem, 0, PGSIZE);
-801066c2:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
-801066c9:	00 
-801066ca:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-801066d1:	00 
+801066f2:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
+801066f9:	00 
+801066fa:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+80106701:	00 
   mem = kalloc();
-801066d2:	89 c3                	mov    %eax,%ebx
+80106702:	89 c3                	mov    %eax,%ebx
   memset(mem, 0, PGSIZE);
-801066d4:	89 04 24             	mov    %eax,(%esp)
-801066d7:	e8 c4 db ff ff       	call   801042a0 <memset>
+80106704:	89 04 24             	mov    %eax,(%esp)
+80106707:	e8 94 db ff ff       	call   801042a0 <memset>
   mappages(pgdir, 0, PGSIZE, V2P(mem), PTE_W|PTE_U);
-801066dc:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
-801066e2:	b9 00 10 00 00       	mov    $0x1000,%ecx
-801066e7:	89 04 24             	mov    %eax,(%esp)
-801066ea:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-801066ed:	31 d2                	xor    %edx,%edx
-801066ef:	c7 44 24 04 06 00 00 	movl   $0x6,0x4(%esp)
-801066f6:	00 
-801066f7:	e8 94 fc ff ff       	call   80106390 <mappages>
+8010670c:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
+80106712:	b9 00 10 00 00       	mov    $0x1000,%ecx
+80106717:	89 04 24             	mov    %eax,(%esp)
+8010671a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+8010671d:	31 d2                	xor    %edx,%edx
+8010671f:	c7 44 24 04 06 00 00 	movl   $0x6,0x4(%esp)
+80106726:	00 
+80106727:	e8 94 fc ff ff       	call   801063c0 <mappages>
   memmove(mem, init, sz);
-801066fc:	89 75 10             	mov    %esi,0x10(%ebp)
-801066ff:	89 7d 0c             	mov    %edi,0xc(%ebp)
-80106702:	89 5d 08             	mov    %ebx,0x8(%ebp)
-}
-80106705:	83 c4 1c             	add    $0x1c,%esp
-80106708:	5b                   	pop    %ebx
-80106709:	5e                   	pop    %esi
-8010670a:	5f                   	pop    %edi
-8010670b:	5d                   	pop    %ebp
+8010672c:	89 75 10             	mov    %esi,0x10(%ebp)
+8010672f:	89 7d 0c             	mov    %edi,0xc(%ebp)
+80106732:	89 5d 08             	mov    %ebx,0x8(%ebp)
+}
+80106735:	83 c4 1c             	add    $0x1c,%esp
+80106738:	5b                   	pop    %ebx
+80106739:	5e                   	pop    %esi
+8010673a:	5f                   	pop    %edi
+8010673b:	5d                   	pop    %ebp
   memmove(mem, init, sz);
-8010670c:	e9 2f dc ff ff       	jmp    80104340 <memmove>
+8010673c:	e9 ff db ff ff       	jmp    80104340 <memmove>
     panic("inituvm: more than a page");
-80106711:	c7 04 24 2d 75 10 80 	movl   $0x8010752d,(%esp)
-80106718:	e8 43 9c ff ff       	call   80100360 <panic>
-8010671d:	8d 76 00             	lea    0x0(%esi),%esi
-
-80106720 <loaduvm>:
-{
-80106720:	55                   	push   %ebp
-80106721:	89 e5                	mov    %esp,%ebp
-80106723:	57                   	push   %edi
-80106724:	56                   	push   %esi
-80106725:	53                   	push   %ebx
-80106726:	83 ec 1c             	sub    $0x1c,%esp
+80106741:	c7 04 24 4d 75 10 80 	movl   $0x8010754d,(%esp)
+80106748:	e8 13 9c ff ff       	call   80100360 <panic>
+8010674d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80106750 <loaduvm>:
+{
+80106750:	55                   	push   %ebp
+80106751:	89 e5                	mov    %esp,%ebp
+80106753:	57                   	push   %edi
+80106754:	56                   	push   %esi
+80106755:	53                   	push   %ebx
+80106756:	83 ec 1c             	sub    $0x1c,%esp
   if((uint) addr % PGSIZE != 0)
-80106729:	f7 45 0c ff 0f 00 00 	testl  $0xfff,0xc(%ebp)
-80106730:	0f 85 98 00 00 00    	jne    801067ce <loaduvm+0xae>
+80106759:	f7 45 0c ff 0f 00 00 	testl  $0xfff,0xc(%ebp)
+80106760:	0f 85 98 00 00 00    	jne    801067fe <loaduvm+0xae>
   for(i = 0; i < sz; i += PGSIZE){
-80106736:	8b 75 18             	mov    0x18(%ebp),%esi
-80106739:	31 db                	xor    %ebx,%ebx
-8010673b:	85 f6                	test   %esi,%esi
-8010673d:	75 1a                	jne    80106759 <loaduvm+0x39>
-8010673f:	eb 77                	jmp    801067b8 <loaduvm+0x98>
-80106741:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106748:	81 c3 00 10 00 00    	add    $0x1000,%ebx
-8010674e:	81 ee 00 10 00 00    	sub    $0x1000,%esi
-80106754:	39 5d 18             	cmp    %ebx,0x18(%ebp)
-80106757:	76 5f                	jbe    801067b8 <loaduvm+0x98>
-80106759:	8b 55 0c             	mov    0xc(%ebp),%edx
+80106766:	8b 75 18             	mov    0x18(%ebp),%esi
+80106769:	31 db                	xor    %ebx,%ebx
+8010676b:	85 f6                	test   %esi,%esi
+8010676d:	75 1a                	jne    80106789 <loaduvm+0x39>
+8010676f:	eb 77                	jmp    801067e8 <loaduvm+0x98>
+80106771:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106778:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+8010677e:	81 ee 00 10 00 00    	sub    $0x1000,%esi
+80106784:	39 5d 18             	cmp    %ebx,0x18(%ebp)
+80106787:	76 5f                	jbe    801067e8 <loaduvm+0x98>
+80106789:	8b 55 0c             	mov    0xc(%ebp),%edx
     if((pte = walkpgdir(pgdir, addr+i, 0)) == 0)
-8010675c:	31 c9                	xor    %ecx,%ecx
-8010675e:	8b 45 08             	mov    0x8(%ebp),%eax
-80106761:	01 da                	add    %ebx,%edx
-80106763:	e8 98 fb ff ff       	call   80106300 <walkpgdir>
-80106768:	85 c0                	test   %eax,%eax
-8010676a:	74 56                	je     801067c2 <loaduvm+0xa2>
+8010678c:	31 c9                	xor    %ecx,%ecx
+8010678e:	8b 45 08             	mov    0x8(%ebp),%eax
+80106791:	01 da                	add    %ebx,%edx
+80106793:	e8 98 fb ff ff       	call   80106330 <walkpgdir>
+80106798:	85 c0                	test   %eax,%eax
+8010679a:	74 56                	je     801067f2 <loaduvm+0xa2>
     pa = PTE_ADDR(*pte);
-8010676c:	8b 00                	mov    (%eax),%eax
+8010679c:	8b 00                	mov    (%eax),%eax
       n = PGSIZE;
-8010676e:	bf 00 10 00 00       	mov    $0x1000,%edi
-80106773:	8b 4d 14             	mov    0x14(%ebp),%ecx
+8010679e:	bf 00 10 00 00       	mov    $0x1000,%edi
+801067a3:	8b 4d 14             	mov    0x14(%ebp),%ecx
     pa = PTE_ADDR(*pte);
-80106776:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+801067a6:	25 00 f0 ff ff       	and    $0xfffff000,%eax
       n = PGSIZE;
-8010677b:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
-80106781:	0f 42 fe             	cmovb  %esi,%edi
+801067ab:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+801067b1:	0f 42 fe             	cmovb  %esi,%edi
     if(readi(ip, P2V(pa), offset+i, n) != n)
-80106784:	05 00 00 00 80       	add    $0x80000000,%eax
-80106789:	89 44 24 04          	mov    %eax,0x4(%esp)
-8010678d:	8b 45 10             	mov    0x10(%ebp),%eax
-80106790:	01 d9                	add    %ebx,%ecx
-80106792:	89 7c 24 0c          	mov    %edi,0xc(%esp)
-80106796:	89 4c 24 08          	mov    %ecx,0x8(%esp)
-8010679a:	89 04 24             	mov    %eax,(%esp)
-8010679d:	e8 be b1 ff ff       	call   80101960 <readi>
-801067a2:	39 f8                	cmp    %edi,%eax
-801067a4:	74 a2                	je     80106748 <loaduvm+0x28>
-}
-801067a6:	83 c4 1c             	add    $0x1c,%esp
+801067b4:	05 00 00 00 80       	add    $0x80000000,%eax
+801067b9:	89 44 24 04          	mov    %eax,0x4(%esp)
+801067bd:	8b 45 10             	mov    0x10(%ebp),%eax
+801067c0:	01 d9                	add    %ebx,%ecx
+801067c2:	89 7c 24 0c          	mov    %edi,0xc(%esp)
+801067c6:	89 4c 24 08          	mov    %ecx,0x8(%esp)
+801067ca:	89 04 24             	mov    %eax,(%esp)
+801067cd:	e8 8e b1 ff ff       	call   80101960 <readi>
+801067d2:	39 f8                	cmp    %edi,%eax
+801067d4:	74 a2                	je     80106778 <loaduvm+0x28>
+}
+801067d6:	83 c4 1c             	add    $0x1c,%esp
       return -1;
-801067a9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-801067ae:	5b                   	pop    %ebx
-801067af:	5e                   	pop    %esi
-801067b0:	5f                   	pop    %edi
-801067b1:	5d                   	pop    %ebp
-801067b2:	c3                   	ret    
-801067b3:	90                   	nop
-801067b4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801067b8:	83 c4 1c             	add    $0x1c,%esp
+801067d9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+801067de:	5b                   	pop    %ebx
+801067df:	5e                   	pop    %esi
+801067e0:	5f                   	pop    %edi
+801067e1:	5d                   	pop    %ebp
+801067e2:	c3                   	ret    
+801067e3:	90                   	nop
+801067e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801067e8:	83 c4 1c             	add    $0x1c,%esp
   return 0;
-801067bb:	31 c0                	xor    %eax,%eax
+801067eb:	31 c0                	xor    %eax,%eax
 }
-801067bd:	5b                   	pop    %ebx
-801067be:	5e                   	pop    %esi
-801067bf:	5f                   	pop    %edi
-801067c0:	5d                   	pop    %ebp
-801067c1:	c3                   	ret    
+801067ed:	5b                   	pop    %ebx
+801067ee:	5e                   	pop    %esi
+801067ef:	5f                   	pop    %edi
+801067f0:	5d                   	pop    %ebp
+801067f1:	c3                   	ret    
       panic("loaduvm: address should exist");
-801067c2:	c7 04 24 47 75 10 80 	movl   $0x80107547,(%esp)
-801067c9:	e8 92 9b ff ff       	call   80100360 <panic>
+801067f2:	c7 04 24 67 75 10 80 	movl   $0x80107567,(%esp)
+801067f9:	e8 62 9b ff ff       	call   80100360 <panic>
     panic("loaduvm: addr must be page aligned");
-801067ce:	c7 04 24 e8 75 10 80 	movl   $0x801075e8,(%esp)
-801067d5:	e8 86 9b ff ff       	call   80100360 <panic>
-801067da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-801067e0 <allocuvm>:
-{
-801067e0:	55                   	push   %ebp
-801067e1:	89 e5                	mov    %esp,%ebp
-801067e3:	57                   	push   %edi
-801067e4:	56                   	push   %esi
-801067e5:	53                   	push   %ebx
-801067e6:	83 ec 1c             	sub    $0x1c,%esp
-801067e9:	8b 7d 10             	mov    0x10(%ebp),%edi
+801067fe:	c7 04 24 08 76 10 80 	movl   $0x80107608,(%esp)
+80106805:	e8 56 9b ff ff       	call   80100360 <panic>
+8010680a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80106810 <allocuvm>:
+{
+80106810:	55                   	push   %ebp
+80106811:	89 e5                	mov    %esp,%ebp
+80106813:	57                   	push   %edi
+80106814:	56                   	push   %esi
+80106815:	53                   	push   %ebx
+80106816:	83 ec 1c             	sub    $0x1c,%esp
+80106819:	8b 7d 10             	mov    0x10(%ebp),%edi
   if(newsz >= KERNBASE)
-801067ec:	85 ff                	test   %edi,%edi
-801067ee:	0f 88 7e 00 00 00    	js     80106872 <allocuvm+0x92>
+8010681c:	85 ff                	test   %edi,%edi
+8010681e:	0f 88 7e 00 00 00    	js     801068a2 <allocuvm+0x92>
   if(newsz < oldsz)
-801067f4:	3b 7d 0c             	cmp    0xc(%ebp),%edi
+80106824:	3b 7d 0c             	cmp    0xc(%ebp),%edi
     return oldsz;
-801067f7:	8b 45 0c             	mov    0xc(%ebp),%eax
+80106827:	8b 45 0c             	mov    0xc(%ebp),%eax
   if(newsz < oldsz)
-801067fa:	72 78                	jb     80106874 <allocuvm+0x94>
+8010682a:	72 78                	jb     801068a4 <allocuvm+0x94>
   a = PGROUNDUP(oldsz);
-801067fc:	8d 98 ff 0f 00 00    	lea    0xfff(%eax),%ebx
-80106802:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+8010682c:	8d 98 ff 0f 00 00    	lea    0xfff(%eax),%ebx
+80106832:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
   for(; a < newsz; a += PGSIZE){
-80106808:	39 df                	cmp    %ebx,%edi
-8010680a:	77 4a                	ja     80106856 <allocuvm+0x76>
-8010680c:	eb 72                	jmp    80106880 <allocuvm+0xa0>
-8010680e:	66 90                	xchg   %ax,%ax
+80106838:	39 df                	cmp    %ebx,%edi
+8010683a:	77 4a                	ja     80106886 <allocuvm+0x76>
+8010683c:	eb 72                	jmp    801068b0 <allocuvm+0xa0>
+8010683e:	66 90                	xchg   %ax,%ax
     memset(mem, 0, PGSIZE);
-80106810:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
-80106817:	00 
-80106818:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-8010681f:	00 
-80106820:	89 04 24             	mov    %eax,(%esp)
-80106823:	e8 78 da ff ff       	call   801042a0 <memset>
+80106840:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
+80106847:	00 
+80106848:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+8010684f:	00 
+80106850:	89 04 24             	mov    %eax,(%esp)
+80106853:	e8 48 da ff ff       	call   801042a0 <memset>
     if(mappages(pgdir, (char*)a, PGSIZE, V2P(mem), PTE_W|PTE_U) < 0){
-80106828:	8d 86 00 00 00 80    	lea    -0x80000000(%esi),%eax
-8010682e:	b9 00 10 00 00       	mov    $0x1000,%ecx
-80106833:	89 04 24             	mov    %eax,(%esp)
-80106836:	8b 45 08             	mov    0x8(%ebp),%eax
-80106839:	89 da                	mov    %ebx,%edx
-8010683b:	c7 44 24 04 06 00 00 	movl   $0x6,0x4(%esp)
-80106842:	00 
-80106843:	e8 48 fb ff ff       	call   80106390 <mappages>
-80106848:	85 c0                	test   %eax,%eax
-8010684a:	78 44                	js     80106890 <allocuvm+0xb0>
+80106858:	8d 86 00 00 00 80    	lea    -0x80000000(%esi),%eax
+8010685e:	b9 00 10 00 00       	mov    $0x1000,%ecx
+80106863:	89 04 24             	mov    %eax,(%esp)
+80106866:	8b 45 08             	mov    0x8(%ebp),%eax
+80106869:	89 da                	mov    %ebx,%edx
+8010686b:	c7 44 24 04 06 00 00 	movl   $0x6,0x4(%esp)
+80106872:	00 
+80106873:	e8 48 fb ff ff       	call   801063c0 <mappages>
+80106878:	85 c0                	test   %eax,%eax
+8010687a:	78 44                	js     801068c0 <allocuvm+0xb0>
   for(; a < newsz; a += PGSIZE){
-8010684c:	81 c3 00 10 00 00    	add    $0x1000,%ebx
-80106852:	39 df                	cmp    %ebx,%edi
-80106854:	76 2a                	jbe    80106880 <allocuvm+0xa0>
+8010687c:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+80106882:	39 df                	cmp    %ebx,%edi
+80106884:	76 2a                	jbe    801068b0 <allocuvm+0xa0>
     mem = kalloc();
-80106856:	e8 45 bc ff ff       	call   801024a0 <kalloc>
+80106886:	e8 15 bc ff ff       	call   801024a0 <kalloc>
     if(mem == 0){
-8010685b:	85 c0                	test   %eax,%eax
+8010688b:	85 c0                	test   %eax,%eax
     mem = kalloc();
-8010685d:	89 c6                	mov    %eax,%esi
+8010688d:	89 c6                	mov    %eax,%esi
     if(mem == 0){
-8010685f:	75 af                	jne    80106810 <allocuvm+0x30>
+8010688f:	75 af                	jne    80106840 <allocuvm+0x30>
       cprintf("allocuvm out of memory\n");
-80106861:	c7 04 24 65 75 10 80 	movl   $0x80107565,(%esp)
-80106868:	e8 e3 9d ff ff       	call   80100650 <cprintf>
+80106891:	c7 04 24 85 75 10 80 	movl   $0x80107585,(%esp)
+80106898:	e8 b3 9d ff ff       	call   80100650 <cprintf>
   if(newsz >= oldsz)
-8010686d:	3b 7d 0c             	cmp    0xc(%ebp),%edi
-80106870:	77 48                	ja     801068ba <allocuvm+0xda>
+8010689d:	3b 7d 0c             	cmp    0xc(%ebp),%edi
+801068a0:	77 48                	ja     801068ea <allocuvm+0xda>
       return 0;
-80106872:	31 c0                	xor    %eax,%eax
-}
-80106874:	83 c4 1c             	add    $0x1c,%esp
-80106877:	5b                   	pop    %ebx
-80106878:	5e                   	pop    %esi
-80106879:	5f                   	pop    %edi
-8010687a:	5d                   	pop    %ebp
-8010687b:	c3                   	ret    
-8010687c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80106880:	83 c4 1c             	add    $0x1c,%esp
-80106883:	89 f8                	mov    %edi,%eax
-80106885:	5b                   	pop    %ebx
-80106886:	5e                   	pop    %esi
-80106887:	5f                   	pop    %edi
-80106888:	5d                   	pop    %ebp
-80106889:	c3                   	ret    
-8010688a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801068a2:	31 c0                	xor    %eax,%eax
+}
+801068a4:	83 c4 1c             	add    $0x1c,%esp
+801068a7:	5b                   	pop    %ebx
+801068a8:	5e                   	pop    %esi
+801068a9:	5f                   	pop    %edi
+801068aa:	5d                   	pop    %ebp
+801068ab:	c3                   	ret    
+801068ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801068b0:	83 c4 1c             	add    $0x1c,%esp
+801068b3:	89 f8                	mov    %edi,%eax
+801068b5:	5b                   	pop    %ebx
+801068b6:	5e                   	pop    %esi
+801068b7:	5f                   	pop    %edi
+801068b8:	5d                   	pop    %ebp
+801068b9:	c3                   	ret    
+801068ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
       cprintf("allocuvm out of memory (2)\n");
-80106890:	c7 04 24 7d 75 10 80 	movl   $0x8010757d,(%esp)
-80106897:	e8 b4 9d ff ff       	call   80100650 <cprintf>
+801068c0:	c7 04 24 9d 75 10 80 	movl   $0x8010759d,(%esp)
+801068c7:	e8 84 9d ff ff       	call   80100650 <cprintf>
   if(newsz >= oldsz)
-8010689c:	3b 7d 0c             	cmp    0xc(%ebp),%edi
-8010689f:	76 0d                	jbe    801068ae <allocuvm+0xce>
-801068a1:	8b 4d 0c             	mov    0xc(%ebp),%ecx
-801068a4:	89 fa                	mov    %edi,%edx
-801068a6:	8b 45 08             	mov    0x8(%ebp),%eax
-801068a9:	e8 62 fb ff ff       	call   80106410 <deallocuvm.part.0>
+801068cc:	3b 7d 0c             	cmp    0xc(%ebp),%edi
+801068cf:	76 0d                	jbe    801068de <allocuvm+0xce>
+801068d1:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+801068d4:	89 fa                	mov    %edi,%edx
+801068d6:	8b 45 08             	mov    0x8(%ebp),%eax
+801068d9:	e8 62 fb ff ff       	call   80106440 <deallocuvm.part.0>
       kfree(mem);
-801068ae:	89 34 24             	mov    %esi,(%esp)
-801068b1:	e8 3a ba ff ff       	call   801022f0 <kfree>
+801068de:	89 34 24             	mov    %esi,(%esp)
+801068e1:	e8 0a ba ff ff       	call   801022f0 <kfree>
       return 0;
-801068b6:	31 c0                	xor    %eax,%eax
-801068b8:	eb ba                	jmp    80106874 <allocuvm+0x94>
-801068ba:	8b 4d 0c             	mov    0xc(%ebp),%ecx
-801068bd:	89 fa                	mov    %edi,%edx
-801068bf:	8b 45 08             	mov    0x8(%ebp),%eax
-801068c2:	e8 49 fb ff ff       	call   80106410 <deallocuvm.part.0>
+801068e6:	31 c0                	xor    %eax,%eax
+801068e8:	eb ba                	jmp    801068a4 <allocuvm+0x94>
+801068ea:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+801068ed:	89 fa                	mov    %edi,%edx
+801068ef:	8b 45 08             	mov    0x8(%ebp),%eax
+801068f2:	e8 49 fb ff ff       	call   80106440 <deallocuvm.part.0>
       return 0;
-801068c7:	31 c0                	xor    %eax,%eax
-801068c9:	eb a9                	jmp    80106874 <allocuvm+0x94>
-801068cb:	90                   	nop
-801068cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-801068d0 <deallocuvm>:
-{
-801068d0:	55                   	push   %ebp
-801068d1:	89 e5                	mov    %esp,%ebp
-801068d3:	8b 55 0c             	mov    0xc(%ebp),%edx
-801068d6:	8b 4d 10             	mov    0x10(%ebp),%ecx
-801068d9:	8b 45 08             	mov    0x8(%ebp),%eax
+801068f7:	31 c0                	xor    %eax,%eax
+801068f9:	eb a9                	jmp    801068a4 <allocuvm+0x94>
+801068fb:	90                   	nop
+801068fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80106900 <deallocuvm>:
+{
+80106900:	55                   	push   %ebp
+80106901:	89 e5                	mov    %esp,%ebp
+80106903:	8b 55 0c             	mov    0xc(%ebp),%edx
+80106906:	8b 4d 10             	mov    0x10(%ebp),%ecx
+80106909:	8b 45 08             	mov    0x8(%ebp),%eax
   if(newsz >= oldsz)
-801068dc:	39 d1                	cmp    %edx,%ecx
-801068de:	73 08                	jae    801068e8 <deallocuvm+0x18>
+8010690c:	39 d1                	cmp    %edx,%ecx
+8010690e:	73 08                	jae    80106918 <deallocuvm+0x18>
 }
-801068e0:	5d                   	pop    %ebp
-801068e1:	e9 2a fb ff ff       	jmp    80106410 <deallocuvm.part.0>
-801068e6:	66 90                	xchg   %ax,%ax
-801068e8:	89 d0                	mov    %edx,%eax
-801068ea:	5d                   	pop    %ebp
-801068eb:	c3                   	ret    
-801068ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80106910:	5d                   	pop    %ebp
+80106911:	e9 2a fb ff ff       	jmp    80106440 <deallocuvm.part.0>
+80106916:	66 90                	xchg   %ax,%ax
+80106918:	89 d0                	mov    %edx,%eax
+8010691a:	5d                   	pop    %ebp
+8010691b:	c3                   	ret    
+8010691c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-801068f0 <freevm>:
+80106920 <freevm>:
 
 // Free a page table and all the physical memory pages
 // in the user part.
 void
 freevm(pde_t *pgdir)
 {
-801068f0:	55                   	push   %ebp
-801068f1:	89 e5                	mov    %esp,%ebp
-801068f3:	56                   	push   %esi
-801068f4:	53                   	push   %ebx
-801068f5:	83 ec 10             	sub    $0x10,%esp
-801068f8:	8b 75 08             	mov    0x8(%ebp),%esi
+80106920:	55                   	push   %ebp
+80106921:	89 e5                	mov    %esp,%ebp
+80106923:	56                   	push   %esi
+80106924:	53                   	push   %ebx
+80106925:	83 ec 10             	sub    $0x10,%esp
+80106928:	8b 75 08             	mov    0x8(%ebp),%esi
   uint i;
 
   if(pgdir == 0)
-801068fb:	85 f6                	test   %esi,%esi
-801068fd:	74 59                	je     80106958 <freevm+0x68>
-801068ff:	31 c9                	xor    %ecx,%ecx
-80106901:	ba 00 00 00 80       	mov    $0x80000000,%edx
-80106906:	89 f0                	mov    %esi,%eax
+8010692b:	85 f6                	test   %esi,%esi
+8010692d:	74 59                	je     80106988 <freevm+0x68>
+8010692f:	31 c9                	xor    %ecx,%ecx
+80106931:	ba 00 00 00 80       	mov    $0x80000000,%edx
+80106936:	89 f0                	mov    %esi,%eax
     panic("freevm: no pgdir");
   deallocuvm(pgdir, KERNBASE, 0);
   for(i = 0; i < NPDENTRIES; i++){
-80106908:	31 db                	xor    %ebx,%ebx
-8010690a:	e8 01 fb ff ff       	call   80106410 <deallocuvm.part.0>
-8010690f:	eb 12                	jmp    80106923 <freevm+0x33>
-80106911:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106918:	83 c3 01             	add    $0x1,%ebx
-8010691b:	81 fb 00 04 00 00    	cmp    $0x400,%ebx
-80106921:	74 27                	je     8010694a <freevm+0x5a>
+80106938:	31 db                	xor    %ebx,%ebx
+8010693a:	e8 01 fb ff ff       	call   80106440 <deallocuvm.part.0>
+8010693f:	eb 12                	jmp    80106953 <freevm+0x33>
+80106941:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106948:	83 c3 01             	add    $0x1,%ebx
+8010694b:	81 fb 00 04 00 00    	cmp    $0x400,%ebx
+80106951:	74 27                	je     8010697a <freevm+0x5a>
     if(pgdir[i] & PTE_P){
-80106923:	8b 14 9e             	mov    (%esi,%ebx,4),%edx
-80106926:	f6 c2 01             	test   $0x1,%dl
-80106929:	74 ed                	je     80106918 <freevm+0x28>
+80106953:	8b 14 9e             	mov    (%esi,%ebx,4),%edx
+80106956:	f6 c2 01             	test   $0x1,%dl
+80106959:	74 ed                	je     80106948 <freevm+0x28>
       char * v = P2V(PTE_ADDR(pgdir[i]));
-8010692b:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
+8010695b:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
   for(i = 0; i < NPDENTRIES; i++){
-80106931:	83 c3 01             	add    $0x1,%ebx
+80106961:	83 c3 01             	add    $0x1,%ebx
       char * v = P2V(PTE_ADDR(pgdir[i]));
-80106934:	81 c2 00 00 00 80    	add    $0x80000000,%edx
+80106964:	81 c2 00 00 00 80    	add    $0x80000000,%edx
       kfree(v);
-8010693a:	89 14 24             	mov    %edx,(%esp)
-8010693d:	e8 ae b9 ff ff       	call   801022f0 <kfree>
+8010696a:	89 14 24             	mov    %edx,(%esp)
+8010696d:	e8 7e b9 ff ff       	call   801022f0 <kfree>
   for(i = 0; i < NPDENTRIES; i++){
-80106942:	81 fb 00 04 00 00    	cmp    $0x400,%ebx
-80106948:	75 d9                	jne    80106923 <freevm+0x33>
+80106972:	81 fb 00 04 00 00    	cmp    $0x400,%ebx
+80106978:	75 d9                	jne    80106953 <freevm+0x33>
     }
   }
   kfree((char*)pgdir);
-8010694a:	89 75 08             	mov    %esi,0x8(%ebp)
+8010697a:	89 75 08             	mov    %esi,0x8(%ebp)
 }
-8010694d:	83 c4 10             	add    $0x10,%esp
-80106950:	5b                   	pop    %ebx
-80106951:	5e                   	pop    %esi
-80106952:	5d                   	pop    %ebp
+8010697d:	83 c4 10             	add    $0x10,%esp
+80106980:	5b                   	pop    %ebx
+80106981:	5e                   	pop    %esi
+80106982:	5d                   	pop    %ebp
   kfree((char*)pgdir);
-80106953:	e9 98 b9 ff ff       	jmp    801022f0 <kfree>
+80106983:	e9 68 b9 ff ff       	jmp    801022f0 <kfree>
     panic("freevm: no pgdir");
-80106958:	c7 04 24 99 75 10 80 	movl   $0x80107599,(%esp)
-8010695f:	e8 fc 99 ff ff       	call   80100360 <panic>
-80106964:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-8010696a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
-
-80106970 <setupkvm>:
-{
-80106970:	55                   	push   %ebp
-80106971:	89 e5                	mov    %esp,%ebp
-80106973:	56                   	push   %esi
-80106974:	53                   	push   %ebx
-80106975:	83 ec 10             	sub    $0x10,%esp
+80106988:	c7 04 24 b9 75 10 80 	movl   $0x801075b9,(%esp)
+8010698f:	e8 cc 99 ff ff       	call   80100360 <panic>
+80106994:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+8010699a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+801069a0 <setupkvm>:
+{
+801069a0:	55                   	push   %ebp
+801069a1:	89 e5                	mov    %esp,%ebp
+801069a3:	56                   	push   %esi
+801069a4:	53                   	push   %ebx
+801069a5:	83 ec 10             	sub    $0x10,%esp
   if((pgdir = (pde_t*)kalloc()) == 0)
-80106978:	e8 23 bb ff ff       	call   801024a0 <kalloc>
-8010697d:	85 c0                	test   %eax,%eax
-8010697f:	89 c6                	mov    %eax,%esi
-80106981:	74 6d                	je     801069f0 <setupkvm+0x80>
+801069a8:	e8 f3 ba ff ff       	call   801024a0 <kalloc>
+801069ad:	85 c0                	test   %eax,%eax
+801069af:	89 c6                	mov    %eax,%esi
+801069b1:	74 6d                	je     80106a20 <setupkvm+0x80>
   memset(pgdir, 0, PGSIZE);
-80106983:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
-8010698a:	00 
+801069b3:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
+801069ba:	00 
   for(k = kmap; k < &kmap[NELEM(kmap)]; k++)
-8010698b:	bb 20 a4 10 80       	mov    $0x8010a420,%ebx
+801069bb:	bb 20 a4 10 80       	mov    $0x8010a420,%ebx
   memset(pgdir, 0, PGSIZE);
-80106990:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-80106997:	00 
-80106998:	89 04 24             	mov    %eax,(%esp)
-8010699b:	e8 00 d9 ff ff       	call   801042a0 <memset>
+801069c0:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+801069c7:	00 
+801069c8:	89 04 24             	mov    %eax,(%esp)
+801069cb:	e8 d0 d8 ff ff       	call   801042a0 <memset>
     if(mappages(pgdir, k->virt, k->phys_end - k->phys_start,
-801069a0:	8b 53 0c             	mov    0xc(%ebx),%edx
-801069a3:	8b 43 04             	mov    0x4(%ebx),%eax
-801069a6:	8b 4b 08             	mov    0x8(%ebx),%ecx
-801069a9:	89 54 24 04          	mov    %edx,0x4(%esp)
-801069ad:	8b 13                	mov    (%ebx),%edx
-801069af:	89 04 24             	mov    %eax,(%esp)
-801069b2:	29 c1                	sub    %eax,%ecx
-801069b4:	89 f0                	mov    %esi,%eax
-801069b6:	e8 d5 f9 ff ff       	call   80106390 <mappages>
-801069bb:	85 c0                	test   %eax,%eax
-801069bd:	78 19                	js     801069d8 <setupkvm+0x68>
+801069d0:	8b 53 0c             	mov    0xc(%ebx),%edx
+801069d3:	8b 43 04             	mov    0x4(%ebx),%eax
+801069d6:	8b 4b 08             	mov    0x8(%ebx),%ecx
+801069d9:	89 54 24 04          	mov    %edx,0x4(%esp)
+801069dd:	8b 13                	mov    (%ebx),%edx
+801069df:	89 04 24             	mov    %eax,(%esp)
+801069e2:	29 c1                	sub    %eax,%ecx
+801069e4:	89 f0                	mov    %esi,%eax
+801069e6:	e8 d5 f9 ff ff       	call   801063c0 <mappages>
+801069eb:	85 c0                	test   %eax,%eax
+801069ed:	78 19                	js     80106a08 <setupkvm+0x68>
   for(k = kmap; k < &kmap[NELEM(kmap)]; k++)
-801069bf:	83 c3 10             	add    $0x10,%ebx
-801069c2:	81 fb 60 a4 10 80    	cmp    $0x8010a460,%ebx
-801069c8:	72 d6                	jb     801069a0 <setupkvm+0x30>
-801069ca:	89 f0                	mov    %esi,%eax
-}
-801069cc:	83 c4 10             	add    $0x10,%esp
-801069cf:	5b                   	pop    %ebx
-801069d0:	5e                   	pop    %esi
-801069d1:	5d                   	pop    %ebp
-801069d2:	c3                   	ret    
-801069d3:	90                   	nop
-801069d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801069ef:	83 c3 10             	add    $0x10,%ebx
+801069f2:	81 fb 60 a4 10 80    	cmp    $0x8010a460,%ebx
+801069f8:	72 d6                	jb     801069d0 <setupkvm+0x30>
+801069fa:	89 f0                	mov    %esi,%eax
+}
+801069fc:	83 c4 10             	add    $0x10,%esp
+801069ff:	5b                   	pop    %ebx
+80106a00:	5e                   	pop    %esi
+80106a01:	5d                   	pop    %ebp
+80106a02:	c3                   	ret    
+80106a03:	90                   	nop
+80106a04:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
       freevm(pgdir);
-801069d8:	89 34 24             	mov    %esi,(%esp)
-801069db:	e8 10 ff ff ff       	call   801068f0 <freevm>
+80106a08:	89 34 24             	mov    %esi,(%esp)
+80106a0b:	e8 10 ff ff ff       	call   80106920 <freevm>
 }
-801069e0:	83 c4 10             	add    $0x10,%esp
+80106a10:	83 c4 10             	add    $0x10,%esp
       return 0;
-801069e3:	31 c0                	xor    %eax,%eax
+80106a13:	31 c0                	xor    %eax,%eax
 }
-801069e5:	5b                   	pop    %ebx
-801069e6:	5e                   	pop    %esi
-801069e7:	5d                   	pop    %ebp
-801069e8:	c3                   	ret    
-801069e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106a15:	5b                   	pop    %ebx
+80106a16:	5e                   	pop    %esi
+80106a17:	5d                   	pop    %ebp
+80106a18:	c3                   	ret    
+80106a19:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     return 0;
-801069f0:	31 c0                	xor    %eax,%eax
-801069f2:	eb d8                	jmp    801069cc <setupkvm+0x5c>
-801069f4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-801069fa:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+80106a20:	31 c0                	xor    %eax,%eax
+80106a22:	eb d8                	jmp    801069fc <setupkvm+0x5c>
+80106a24:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80106a2a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
 
-80106a00 <kvmalloc>:
+80106a30 <kvmalloc>:
 {
-80106a00:	55                   	push   %ebp
-80106a01:	89 e5                	mov    %esp,%ebp
-80106a03:	83 ec 08             	sub    $0x8,%esp
+80106a30:	55                   	push   %ebp
+80106a31:	89 e5                	mov    %esp,%ebp
+80106a33:	83 ec 08             	sub    $0x8,%esp
   kpgdir = setupkvm();
-80106a06:	e8 65 ff ff ff       	call   80106970 <setupkvm>
-80106a0b:	a3 a4 55 11 80       	mov    %eax,0x801155a4
+80106a36:	e8 65 ff ff ff       	call   801069a0 <setupkvm>
+80106a3b:	a3 a4 55 11 80       	mov    %eax,0x801155a4
   lcr3(V2P(kpgdir));   // switch to the kernel page table
-80106a10:	05 00 00 00 80       	add    $0x80000000,%eax
-80106a15:	0f 22 d8             	mov    %eax,%cr3
+80106a40:	05 00 00 00 80       	add    $0x80000000,%eax
+80106a45:	0f 22 d8             	mov    %eax,%cr3
 }
-80106a18:	c9                   	leave  
-80106a19:	c3                   	ret    
-80106a1a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80106a48:	c9                   	leave  
+80106a49:	c3                   	ret    
+80106a4a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-80106a20 <clearpteu>:
+80106a50 <clearpteu>:
 
 // Clear PTE_U on a page. Used to create an inaccessible
 // page beneath the user stack.
 void
 clearpteu(pde_t *pgdir, char *uva)
 {
-80106a20:	55                   	push   %ebp
+80106a50:	55                   	push   %ebp
   pte_t *pte;
 
   pte = walkpgdir(pgdir, uva, 0);
-80106a21:	31 c9                	xor    %ecx,%ecx
+80106a51:	31 c9                	xor    %ecx,%ecx
 {
-80106a23:	89 e5                	mov    %esp,%ebp
-80106a25:	83 ec 18             	sub    $0x18,%esp
+80106a53:	89 e5                	mov    %esp,%ebp
+80106a55:	83 ec 18             	sub    $0x18,%esp
   pte = walkpgdir(pgdir, uva, 0);
-80106a28:	8b 55 0c             	mov    0xc(%ebp),%edx
-80106a2b:	8b 45 08             	mov    0x8(%ebp),%eax
-80106a2e:	e8 cd f8 ff ff       	call   80106300 <walkpgdir>
+80106a58:	8b 55 0c             	mov    0xc(%ebp),%edx
+80106a5b:	8b 45 08             	mov    0x8(%ebp),%eax
+80106a5e:	e8 cd f8 ff ff       	call   80106330 <walkpgdir>
   if(pte == 0)
-80106a33:	85 c0                	test   %eax,%eax
-80106a35:	74 05                	je     80106a3c <clearpteu+0x1c>
+80106a63:	85 c0                	test   %eax,%eax
+80106a65:	74 05                	je     80106a6c <clearpteu+0x1c>
     panic("clearpteu");
   *pte &= ~PTE_U;
-80106a37:	83 20 fb             	andl   $0xfffffffb,(%eax)
+80106a67:	83 20 fb             	andl   $0xfffffffb,(%eax)
 }
-80106a3a:	c9                   	leave  
-80106a3b:	c3                   	ret    
+80106a6a:	c9                   	leave  
+80106a6b:	c3                   	ret    
     panic("clearpteu");
-80106a3c:	c7 04 24 aa 75 10 80 	movl   $0x801075aa,(%esp)
-80106a43:	e8 18 99 ff ff       	call   80100360 <panic>
-80106a48:	90                   	nop
-80106a49:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106a6c:	c7 04 24 ca 75 10 80 	movl   $0x801075ca,(%esp)
+80106a73:	e8 e8 98 ff ff       	call   80100360 <panic>
+80106a78:	90                   	nop
+80106a79:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-80106a50 <copyuvm>:
+80106a80 <copyuvm>:
 
 // Given a parent process's page table, create a copy
 // of it for a child.
 pde_t*
 copyuvm(pde_t *pgdir, uint sz)
 {
-80106a50:	55                   	push   %ebp
-80106a51:	89 e5                	mov    %esp,%ebp
-80106a53:	57                   	push   %edi
-80106a54:	56                   	push   %esi
-80106a55:	53                   	push   %ebx
-80106a56:	83 ec 2c             	sub    $0x2c,%esp
+80106a80:	55                   	push   %ebp
+80106a81:	89 e5                	mov    %esp,%ebp
+80106a83:	57                   	push   %edi
+80106a84:	56                   	push   %esi
+80106a85:	53                   	push   %ebx
+80106a86:	83 ec 2c             	sub    $0x2c,%esp
   pde_t *d;
   pte_t *pte;
   uint pa, i, flags;
   char *mem;
 
   if((d = setupkvm()) == 0)
-80106a59:	e8 12 ff ff ff       	call   80106970 <setupkvm>
-80106a5e:	85 c0                	test   %eax,%eax
-80106a60:	89 45 e0             	mov    %eax,-0x20(%ebp)
-80106a63:	0f 84 b9 00 00 00    	je     80106b22 <copyuvm+0xd2>
+80106a89:	e8 12 ff ff ff       	call   801069a0 <setupkvm>
+80106a8e:	85 c0                	test   %eax,%eax
+80106a90:	89 45 e0             	mov    %eax,-0x20(%ebp)
+80106a93:	0f 84 b9 00 00 00    	je     80106b52 <copyuvm+0xd2>
     return 0;
   for(i = 0; i < sz; i += PGSIZE){
-80106a69:	8b 45 0c             	mov    0xc(%ebp),%eax
-80106a6c:	85 c0                	test   %eax,%eax
-80106a6e:	0f 84 94 00 00 00    	je     80106b08 <copyuvm+0xb8>
-80106a74:	31 ff                	xor    %edi,%edi
-80106a76:	eb 48                	jmp    80106ac0 <copyuvm+0x70>
+80106a99:	8b 45 0c             	mov    0xc(%ebp),%eax
+80106a9c:	85 c0                	test   %eax,%eax
+80106a9e:	0f 84 94 00 00 00    	je     80106b38 <copyuvm+0xb8>
+80106aa4:	31 ff                	xor    %edi,%edi
+80106aa6:	eb 48                	jmp    80106af0 <copyuvm+0x70>
       panic("copyuvm: page not present");
     pa = PTE_ADDR(*pte);
     flags = PTE_FLAGS(*pte);
     if((mem = kalloc()) == 0)
       goto bad;
     memmove(mem, (char*)P2V(pa), PGSIZE);
-80106a78:	81 c6 00 00 00 80    	add    $0x80000000,%esi
-80106a7e:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
-80106a85:	00 
-80106a86:	89 74 24 04          	mov    %esi,0x4(%esp)
-80106a8a:	89 04 24             	mov    %eax,(%esp)
-80106a8d:	e8 ae d8 ff ff       	call   80104340 <memmove>
+80106aa8:	81 c6 00 00 00 80    	add    $0x80000000,%esi
+80106aae:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
+80106ab5:	00 
+80106ab6:	89 74 24 04          	mov    %esi,0x4(%esp)
+80106aba:	89 04 24             	mov    %eax,(%esp)
+80106abd:	e8 7e d8 ff ff       	call   80104340 <memmove>
     if(mappages(d, (void*)i, PGSIZE, V2P(mem), flags) < 0) {
-80106a92:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80106a95:	b9 00 10 00 00       	mov    $0x1000,%ecx
-80106a9a:	89 fa                	mov    %edi,%edx
-80106a9c:	89 44 24 04          	mov    %eax,0x4(%esp)
-80106aa0:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
-80106aa6:	89 04 24             	mov    %eax,(%esp)
-80106aa9:	8b 45 e0             	mov    -0x20(%ebp),%eax
-80106aac:	e8 df f8 ff ff       	call   80106390 <mappages>
-80106ab1:	85 c0                	test   %eax,%eax
-80106ab3:	78 63                	js     80106b18 <copyuvm+0xc8>
+80106ac2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80106ac5:	b9 00 10 00 00       	mov    $0x1000,%ecx
+80106aca:	89 fa                	mov    %edi,%edx
+80106acc:	89 44 24 04          	mov    %eax,0x4(%esp)
+80106ad0:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
+80106ad6:	89 04 24             	mov    %eax,(%esp)
+80106ad9:	8b 45 e0             	mov    -0x20(%ebp),%eax
+80106adc:	e8 df f8 ff ff       	call   801063c0 <mappages>
+80106ae1:	85 c0                	test   %eax,%eax
+80106ae3:	78 63                	js     80106b48 <copyuvm+0xc8>
   for(i = 0; i < sz; i += PGSIZE){
-80106ab5:	81 c7 00 10 00 00    	add    $0x1000,%edi
-80106abb:	39 7d 0c             	cmp    %edi,0xc(%ebp)
-80106abe:	76 48                	jbe    80106b08 <copyuvm+0xb8>
+80106ae5:	81 c7 00 10 00 00    	add    $0x1000,%edi
+80106aeb:	39 7d 0c             	cmp    %edi,0xc(%ebp)
+80106aee:	76 48                	jbe    80106b38 <copyuvm+0xb8>
     if((pte = walkpgdir(pgdir, (void *) i, 0)) == 0)
-80106ac0:	8b 45 08             	mov    0x8(%ebp),%eax
-80106ac3:	31 c9                	xor    %ecx,%ecx
-80106ac5:	89 fa                	mov    %edi,%edx
-80106ac7:	e8 34 f8 ff ff       	call   80106300 <walkpgdir>
-80106acc:	85 c0                	test   %eax,%eax
-80106ace:	74 62                	je     80106b32 <copyuvm+0xe2>
+80106af0:	8b 45 08             	mov    0x8(%ebp),%eax
+80106af3:	31 c9                	xor    %ecx,%ecx
+80106af5:	89 fa                	mov    %edi,%edx
+80106af7:	e8 34 f8 ff ff       	call   80106330 <walkpgdir>
+80106afc:	85 c0                	test   %eax,%eax
+80106afe:	74 62                	je     80106b62 <copyuvm+0xe2>
     if(!(*pte & PTE_P))
-80106ad0:	8b 00                	mov    (%eax),%eax
-80106ad2:	a8 01                	test   $0x1,%al
-80106ad4:	74 50                	je     80106b26 <copyuvm+0xd6>
+80106b00:	8b 00                	mov    (%eax),%eax
+80106b02:	a8 01                	test   $0x1,%al
+80106b04:	74 50                	je     80106b56 <copyuvm+0xd6>
     pa = PTE_ADDR(*pte);
-80106ad6:	89 c6                	mov    %eax,%esi
+80106b06:	89 c6                	mov    %eax,%esi
     flags = PTE_FLAGS(*pte);
-80106ad8:	25 ff 0f 00 00       	and    $0xfff,%eax
-80106add:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80106b08:	25 ff 0f 00 00       	and    $0xfff,%eax
+80106b0d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
     pa = PTE_ADDR(*pte);
-80106ae0:	81 e6 00 f0 ff ff    	and    $0xfffff000,%esi
+80106b10:	81 e6 00 f0 ff ff    	and    $0xfffff000,%esi
     if((mem = kalloc()) == 0)
-80106ae6:	e8 b5 b9 ff ff       	call   801024a0 <kalloc>
-80106aeb:	85 c0                	test   %eax,%eax
-80106aed:	89 c3                	mov    %eax,%ebx
-80106aef:	75 87                	jne    80106a78 <copyuvm+0x28>
+80106b16:	e8 85 b9 ff ff       	call   801024a0 <kalloc>
+80106b1b:	85 c0                	test   %eax,%eax
+80106b1d:	89 c3                	mov    %eax,%ebx
+80106b1f:	75 87                	jne    80106aa8 <copyuvm+0x28>
     }
   }
   return d;
 
 bad:
   freevm(d);
-80106af1:	8b 45 e0             	mov    -0x20(%ebp),%eax
-80106af4:	89 04 24             	mov    %eax,(%esp)
-80106af7:	e8 f4 fd ff ff       	call   801068f0 <freevm>
+80106b21:	8b 45 e0             	mov    -0x20(%ebp),%eax
+80106b24:	89 04 24             	mov    %eax,(%esp)
+80106b27:	e8 f4 fd ff ff       	call   80106920 <freevm>
   return 0;
-80106afc:	31 c0                	xor    %eax,%eax
-}
-80106afe:	83 c4 2c             	add    $0x2c,%esp
-80106b01:	5b                   	pop    %ebx
-80106b02:	5e                   	pop    %esi
-80106b03:	5f                   	pop    %edi
-80106b04:	5d                   	pop    %ebp
-80106b05:	c3                   	ret    
-80106b06:	66 90                	xchg   %ax,%ax
-80106b08:	8b 45 e0             	mov    -0x20(%ebp),%eax
-80106b0b:	83 c4 2c             	add    $0x2c,%esp
-80106b0e:	5b                   	pop    %ebx
-80106b0f:	5e                   	pop    %esi
-80106b10:	5f                   	pop    %edi
-80106b11:	5d                   	pop    %ebp
-80106b12:	c3                   	ret    
-80106b13:	90                   	nop
-80106b14:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80106b2c:	31 c0                	xor    %eax,%eax
+}
+80106b2e:	83 c4 2c             	add    $0x2c,%esp
+80106b31:	5b                   	pop    %ebx
+80106b32:	5e                   	pop    %esi
+80106b33:	5f                   	pop    %edi
+80106b34:	5d                   	pop    %ebp
+80106b35:	c3                   	ret    
+80106b36:	66 90                	xchg   %ax,%ax
+80106b38:	8b 45 e0             	mov    -0x20(%ebp),%eax
+80106b3b:	83 c4 2c             	add    $0x2c,%esp
+80106b3e:	5b                   	pop    %ebx
+80106b3f:	5e                   	pop    %esi
+80106b40:	5f                   	pop    %edi
+80106b41:	5d                   	pop    %ebp
+80106b42:	c3                   	ret    
+80106b43:	90                   	nop
+80106b44:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
       kfree(mem);
-80106b18:	89 1c 24             	mov    %ebx,(%esp)
-80106b1b:	e8 d0 b7 ff ff       	call   801022f0 <kfree>
+80106b48:	89 1c 24             	mov    %ebx,(%esp)
+80106b4b:	e8 a0 b7 ff ff       	call   801022f0 <kfree>
       goto bad;
-80106b20:	eb cf                	jmp    80106af1 <copyuvm+0xa1>
+80106b50:	eb cf                	jmp    80106b21 <copyuvm+0xa1>
     return 0;
-80106b22:	31 c0                	xor    %eax,%eax
-80106b24:	eb d8                	jmp    80106afe <copyuvm+0xae>
+80106b52:	31 c0                	xor    %eax,%eax
+80106b54:	eb d8                	jmp    80106b2e <copyuvm+0xae>
       panic("copyuvm: page not present");
-80106b26:	c7 04 24 ce 75 10 80 	movl   $0x801075ce,(%esp)
-80106b2d:	e8 2e 98 ff ff       	call   80100360 <panic>
+80106b56:	c7 04 24 ee 75 10 80 	movl   $0x801075ee,(%esp)
+80106b5d:	e8 fe 97 ff ff       	call   80100360 <panic>
       panic("copyuvm: pte should exist");
-80106b32:	c7 04 24 b4 75 10 80 	movl   $0x801075b4,(%esp)
-80106b39:	e8 22 98 ff ff       	call   80100360 <panic>
-80106b3e:	66 90                	xchg   %ax,%ax
+80106b62:	c7 04 24 d4 75 10 80 	movl   $0x801075d4,(%esp)
+80106b69:	e8 f2 97 ff ff       	call   80100360 <panic>
+80106b6e:	66 90                	xchg   %ax,%ax
 
-80106b40 <uva2ka>:
+80106b70 <uva2ka>:
 
 //PAGEBREAK!
 // Map user virtual address to kernel address.
 char*
 uva2ka(pde_t *pgdir, char *uva)
 {
-80106b40:	55                   	push   %ebp
+80106b70:	55                   	push   %ebp
   pte_t *pte;
 
   pte = walkpgdir(pgdir, uva, 0);
-80106b41:	31 c9                	xor    %ecx,%ecx
+80106b71:	31 c9                	xor    %ecx,%ecx
 {
-80106b43:	89 e5                	mov    %esp,%ebp
-80106b45:	83 ec 08             	sub    $0x8,%esp
+80106b73:	89 e5                	mov    %esp,%ebp
+80106b75:	83 ec 08             	sub    $0x8,%esp
   pte = walkpgdir(pgdir, uva, 0);
-80106b48:	8b 55 0c             	mov    0xc(%ebp),%edx
-80106b4b:	8b 45 08             	mov    0x8(%ebp),%eax
-80106b4e:	e8 ad f7 ff ff       	call   80106300 <walkpgdir>
+80106b78:	8b 55 0c             	mov    0xc(%ebp),%edx
+80106b7b:	8b 45 08             	mov    0x8(%ebp),%eax
+80106b7e:	e8 ad f7 ff ff       	call   80106330 <walkpgdir>
   if((*pte & PTE_P) == 0)
-80106b53:	8b 00                	mov    (%eax),%eax
-80106b55:	89 c2                	mov    %eax,%edx
-80106b57:	83 e2 05             	and    $0x5,%edx
+80106b83:	8b 00                	mov    (%eax),%eax
+80106b85:	89 c2                	mov    %eax,%edx
+80106b87:	83 e2 05             	and    $0x5,%edx
     return 0;
   if((*pte & PTE_U) == 0)
-80106b5a:	83 fa 05             	cmp    $0x5,%edx
-80106b5d:	75 11                	jne    80106b70 <uva2ka+0x30>
+80106b8a:	83 fa 05             	cmp    $0x5,%edx
+80106b8d:	75 11                	jne    80106ba0 <uva2ka+0x30>
     return 0;
   return (char*)P2V(PTE_ADDR(*pte));
-80106b5f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
-80106b64:	05 00 00 00 80       	add    $0x80000000,%eax
+80106b8f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+80106b94:	05 00 00 00 80       	add    $0x80000000,%eax
 }
-80106b69:	c9                   	leave  
-80106b6a:	c3                   	ret    
-80106b6b:	90                   	nop
-80106b6c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80106b99:	c9                   	leave  
+80106b9a:	c3                   	ret    
+80106b9b:	90                   	nop
+80106b9c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     return 0;
-80106b70:	31 c0                	xor    %eax,%eax
+80106ba0:	31 c0                	xor    %eax,%eax
 }
-80106b72:	c9                   	leave  
-80106b73:	c3                   	ret    
-80106b74:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-80106b7a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+80106ba2:	c9                   	leave  
+80106ba3:	c3                   	ret    
+80106ba4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80106baa:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
 
-80106b80 <copyout>:
+80106bb0 <copyout>:
 // Copy len bytes from p to user address va in page table pgdir.
 // Most useful when pgdir is not the current page table.
 // uva2ka ensures this only works for PTE_U pages.
 int
 copyout(pde_t *pgdir, uint va, void *p, uint len)
 {
-80106b80:	55                   	push   %ebp
-80106b81:	89 e5                	mov    %esp,%ebp
-80106b83:	57                   	push   %edi
-80106b84:	56                   	push   %esi
-80106b85:	53                   	push   %ebx
-80106b86:	83 ec 1c             	sub    $0x1c,%esp
-80106b89:	8b 5d 14             	mov    0x14(%ebp),%ebx
-80106b8c:	8b 4d 0c             	mov    0xc(%ebp),%ecx
-80106b8f:	8b 7d 10             	mov    0x10(%ebp),%edi
+80106bb0:	55                   	push   %ebp
+80106bb1:	89 e5                	mov    %esp,%ebp
+80106bb3:	57                   	push   %edi
+80106bb4:	56                   	push   %esi
+80106bb5:	53                   	push   %ebx
+80106bb6:	83 ec 1c             	sub    $0x1c,%esp
+80106bb9:	8b 5d 14             	mov    0x14(%ebp),%ebx
+80106bbc:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+80106bbf:	8b 7d 10             	mov    0x10(%ebp),%edi
   char *buf, *pa0;
   uint n, va0;
 
   buf = (char*)p;
   while(len > 0){
-80106b92:	85 db                	test   %ebx,%ebx
-80106b94:	75 3a                	jne    80106bd0 <copyout+0x50>
-80106b96:	eb 68                	jmp    80106c00 <copyout+0x80>
+80106bc2:	85 db                	test   %ebx,%ebx
+80106bc4:	75 3a                	jne    80106c00 <copyout+0x50>
+80106bc6:	eb 68                	jmp    80106c30 <copyout+0x80>
     va0 = (uint)PGROUNDDOWN(va);
     pa0 = uva2ka(pgdir, (char*)va0);
     if(pa0 == 0)
       return -1;
     n = PGSIZE - (va - va0);
-80106b98:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
-80106b9b:	89 f2                	mov    %esi,%edx
+80106bc8:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+80106bcb:	89 f2                	mov    %esi,%edx
     if(n > len)
       n = len;
     memmove(pa0 + (va - va0), buf, n);
-80106b9d:	89 7c 24 04          	mov    %edi,0x4(%esp)
+80106bcd:	89 7c 24 04          	mov    %edi,0x4(%esp)
     n = PGSIZE - (va - va0);
-80106ba1:	29 ca                	sub    %ecx,%edx
-80106ba3:	81 c2 00 10 00 00    	add    $0x1000,%edx
-80106ba9:	39 da                	cmp    %ebx,%edx
-80106bab:	0f 47 d3             	cmova  %ebx,%edx
+80106bd1:	29 ca                	sub    %ecx,%edx
+80106bd3:	81 c2 00 10 00 00    	add    $0x1000,%edx
+80106bd9:	39 da                	cmp    %ebx,%edx
+80106bdb:	0f 47 d3             	cmova  %ebx,%edx
     memmove(pa0 + (va - va0), buf, n);
-80106bae:	29 f1                	sub    %esi,%ecx
-80106bb0:	01 c8                	add    %ecx,%eax
-80106bb2:	89 54 24 08          	mov    %edx,0x8(%esp)
-80106bb6:	89 04 24             	mov    %eax,(%esp)
-80106bb9:	89 55 e4             	mov    %edx,-0x1c(%ebp)
-80106bbc:	e8 7f d7 ff ff       	call   80104340 <memmove>
+80106bde:	29 f1                	sub    %esi,%ecx
+80106be0:	01 c8                	add    %ecx,%eax
+80106be2:	89 54 24 08          	mov    %edx,0x8(%esp)
+80106be6:	89 04 24             	mov    %eax,(%esp)
+80106be9:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+80106bec:	e8 4f d7 ff ff       	call   80104340 <memmove>
     len -= n;
     buf += n;
-80106bc1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+80106bf1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
     va = va0 + PGSIZE;
-80106bc4:	8d 8e 00 10 00 00    	lea    0x1000(%esi),%ecx
+80106bf4:	8d 8e 00 10 00 00    	lea    0x1000(%esi),%ecx
     buf += n;
-80106bca:	01 d7                	add    %edx,%edi
+80106bfa:	01 d7                	add    %edx,%edi
   while(len > 0){
-80106bcc:	29 d3                	sub    %edx,%ebx
-80106bce:	74 30                	je     80106c00 <copyout+0x80>
+80106bfc:	29 d3                	sub    %edx,%ebx
+80106bfe:	74 30                	je     80106c30 <copyout+0x80>
     pa0 = uva2ka(pgdir, (char*)va0);
-80106bd0:	8b 45 08             	mov    0x8(%ebp),%eax
+80106c00:	8b 45 08             	mov    0x8(%ebp),%eax
     va0 = (uint)PGROUNDDOWN(va);
-80106bd3:	89 ce                	mov    %ecx,%esi
-80106bd5:	81 e6 00 f0 ff ff    	and    $0xfffff000,%esi
+80106c03:	89 ce                	mov    %ecx,%esi
+80106c05:	81 e6 00 f0 ff ff    	and    $0xfffff000,%esi
     pa0 = uva2ka(pgdir, (char*)va0);
-80106bdb:	89 74 24 04          	mov    %esi,0x4(%esp)
+80106c0b:	89 74 24 04          	mov    %esi,0x4(%esp)
     va0 = (uint)PGROUNDDOWN(va);
-80106bdf:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+80106c0f:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
     pa0 = uva2ka(pgdir, (char*)va0);
-80106be2:	89 04 24             	mov    %eax,(%esp)
-80106be5:	e8 56 ff ff ff       	call   80106b40 <uva2ka>
+80106c12:	89 04 24             	mov    %eax,(%esp)
+80106c15:	e8 56 ff ff ff       	call   80106b70 <uva2ka>
     if(pa0 == 0)
-80106bea:	85 c0                	test   %eax,%eax
-80106bec:	75 aa                	jne    80106b98 <copyout+0x18>
+80106c1a:	85 c0                	test   %eax,%eax
+80106c1c:	75 aa                	jne    80106bc8 <copyout+0x18>
   }
   return 0;
 }
-80106bee:	83 c4 1c             	add    $0x1c,%esp
+80106c1e:	83 c4 1c             	add    $0x1c,%esp
       return -1;
-80106bf1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-80106bf6:	5b                   	pop    %ebx
-80106bf7:	5e                   	pop    %esi
-80106bf8:	5f                   	pop    %edi
-80106bf9:	5d                   	pop    %ebp
-80106bfa:	c3                   	ret    
-80106bfb:	90                   	nop
-80106bfc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80106c00:	83 c4 1c             	add    $0x1c,%esp
+80106c21:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80106c26:	5b                   	pop    %ebx
+80106c27:	5e                   	pop    %esi
+80106c28:	5f                   	pop    %edi
+80106c29:	5d                   	pop    %ebp
+80106c2a:	c3                   	ret    
+80106c2b:	90                   	nop
+80106c2c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80106c30:	83 c4 1c             	add    $0x1c,%esp
   return 0;
-80106c03:	31 c0                	xor    %eax,%eax
+80106c33:	31 c0                	xor    %eax,%eax
 }
-80106c05:	5b                   	pop    %ebx
-80106c06:	5e                   	pop    %esi
-80106c07:	5f                   	pop    %edi
-80106c08:	5d                   	pop    %ebp
-80106c09:	c3                   	ret    
+80106c35:	5b                   	pop    %ebx
+80106c36:	5e                   	pop    %esi
+80106c37:	5f                   	pop    %edi
+80106c38:	5d                   	pop    %ebp
+80106c39:	c3                   	ret    
diff --git a/kernel.sym b/kernel.sym
index 363573f..c44986b 100644
--- a/kernel.sym
+++ b/kernel.sym
@@ -1,5 +1,5 @@
 80100000 .text
-80106c20 .rodata
+80106c40 .rodata
 80108000 .data
 8010a520 .bss
 00000000 .debug_line
@@ -16,7 +16,7 @@
 8010a558 panicked
 801003e0 consputc
 80100570 printint
-80106c90 digits.1847
+80106cb0 digits.1847
 00000000 exec.c
 00000000 file.c
 00000000 fs.c
@@ -34,9 +34,9 @@
 00000000 kalloc.c
 00000000 kbd.c
 8010a5b4 shift.1687
-80106fc0 shiftcode
-80106ec0 togglecode
-80106ea0 charcode.1688
+80106fe0 shiftcode
+80106ee0 togglecode
+80106ec0 charcode.1688
 80108200 normalmap
 80108100 shiftmap
 80108000 ctlmap
@@ -56,12 +56,12 @@
 801034c0 allocproc
 8010a000 first.1889
 8010a5b8 initproc
-80107280 states.1915
+801072a0 states.1915
 00000000 sleeplock.c
 00000000 spinlock.c
 00000000 string.c
 00000000 syscall.c
-80107300 syscalls
+80107320 syscalls
 00000000 sysfile.c
 801046d0 fdalloc
 80104710 create
@@ -69,449 +69,449 @@
 00000000 sysproc.c
 00000000 trap.c
 00000000 uart.c
-80105750 uartgetc
+80105780 uartgetc
 8010a5bc uart
 00000000 vm.c
-80106300 walkpgdir
-80106390 mappages
-80106410 deallocuvm.part.0
+80106330 walkpgdir
+801063c0 mappages
+80106440 deallocuvm.part.0
 8010a420 kmap
 80100270 consoleread
-8010624e vector242
-80105ca5 vector119
+8010627e vector242
+80105cd5 vector119
 8010000c entry
-80105b85 vector87
-80105b7c vector86
+80105bb5 vector87
+80105bac vector86
 80104480 safestrcpy
 80104a20 sys_close
-801062ba vector251
-80105ba9 vector91
-8010599f vector33
-80105e8e vector162
+801062ea vector251
+80105bd9 vector91
+801059cf vector33
+80105ebe vector162
 80103bc0 yield
 80112680 log
 80112640 kmem
-801060f2 vector213
-80105c42 vector108
-801057d0 uartinit
-801059f9 vector43
+80106122 vector213
+80105c72 vector108
+80105800 uartinit
+80105a29 vector43
 80102780 lapiceoi
-80105eb2 vector165
-80105fa2 vector185
+80105ee2 vector165
+80105fd2 vector185
 80102200 ioapicinit
-80105c81 vector115
+80105cb1 vector115
 80100f40 fileread
-80105cc0 vector122
-801052b0 sys_sbrk
+80105cf0 vector122
+801052e0 sys_sbrk
 80112760 ioapicid
-80105e46 vector156
-80106272 vector245
+80105e76 vector156
+801062a2 vector245
 80112634 ioapic
-80105fd2 vector189
-801058c3 vector7
-80105a9b vector61
-8010594e vector24
-80105c5d vector111
-80106056 vector200
-80105ad1 vector67
-80105d6e vector138
-80105b10 vector74
+80106002 vector189
+801058f3 vector7
+80105acb vector61
+8010597e vector24
+80105c8d vector111
+80106086 vector200
+80105b01 vector67
+80105d9e vector138
+80105b40 vector74
 80103a00 sched
 80104340 memmove
-80105a77 vector57
+80105aa7 vector57
 80104660 syscall
-801060fe vector214
-80105bf1 vector99
+8010612e vector214
+80105c21 vector99
 80103680 cpuid
 80101a60 writei
-80105d92 vector141
+80105dc2 vector141
 80105210 sys_fork
 8010b5c0 bcache
-80105f06 vector172
-80106242 vector241
+80105f36 vector172
+80106272 vector241
 80104090 getcallerpcs
 80104f00 sys_mkdir
-801062d2 vector253
-8010589f vector3
-80105896 vector2
+80106302 vector253
+801058cf vector3
+801058c6 vector2
 80101b90 namecmp
-8010619a vector227
-801060ce vector210
+801061ca vector227
+801060fe vector210
 80104620 argstr
-80106176 vector224
-801059e7 vector41
+801061a6 vector224
+80105a17 vector41
 80100650 cprintf
 80100de0 filedup
 80101f00 namei
-80105933 vector21
+80105963 vector21
 80100040 binit
-80105f42 vector177
-80105c9c vector118
-80105aec vector70
-80105ae3 vector69
-80106212 vector237
-80105ab6 vector64
-80105969 vector27
-80105d26 vector132
-80105fae vector186
+80105f72 vector177
+80105ccc vector118
+80105b1c vector70
+80105b13 vector69
+80106242 vector237
+80105ae6 vector64
+80105999 vector27
+80105d56 vector132
+80105fde vector186
 80104940 sys_read
-80106122 vector217
+80106152 vector217
 801044f0 fetchint
-80106970 setupkvm
+801069a0 setupkvm
 801043b0 memcpy
-801068f0 freevm
-8010588d vector1
-80105f4e vector178
-801059cc vector38
+80106920 freevm
+801058bd vector1
+80105f7e vector178
+801059fc vector38
 801022f0 kfree
-8010621e vector238
+8010624e vector238
 80103600 mycpu
 801017d0 iput
-80105d32 vector133
-80105b07 vector73
-80105db6 vector144
-801062de vector254
+80105d62 vector133
+80105b37 vector73
+80105de6 vector144
+8010630e vector254
 80101420 readsb
 8010a004 nextpid
-80105c03 vector101
-801060da vector211
+80105c33 vector101
+8010610a vector211
 80102f90 mpinit
-80105f1e vector174
-8010625a vector243
+80105f4e vector174
+8010628a vector243
 80100d50 fileinit
 80104070 initlock
-80105cf6 vector128
-80106b80 copyout
-80105b4f vector81
+80105d26 vector128
+80106bb0 copyout
+80105b7f vector81
 80103c00 sleep
 801027a0 microdelay
-801058f1 vector13
-80105a41 vector51
-80105908 vector16
+80105921 vector13
+80105a71 vector51
+80105938 vector16
 8010ff20 input
-80106236 vector240
-80105a5c vector54
-80105921 vector19
-80105bb2 vector92
-80106266 vector244
+80106266 vector240
+80105a8c vector54
+80105951 vector19
+80105be2 vector92
+80106296 vector244
 80101930 stati
-80105d86 vector140
-80105260 sys_kill
-80105a0b vector45
-80105b3d vector79
+80105db6 vector140
+80105290 sys_kill
+80105a3b vector45
+80105b6d vector79
 80103260 pipeclose
-801061b2 vector229
-80105e5e vector158
+801061e2 vector229
+80105e8e vector158
 80104a60 sys_fstat
 801005f0 consolewrite
-801059d5 vector39
-80105ed6 vector168
+80105a05 vector39
+80105f06 vector168
 80102b80 end_op
-801059b1 vector35
-80105c6f vector113
+801059e1 vector35
+80105c9f vector113
 80102390 freerange
-80105cdb vector125
-801067e0 allocuvm
-801053f5 trapret
-80106116 vector216
-80105aad vector63
-80105960 vector26
-80106002 vector193
+80105d0b vector125
+80106810 allocuvm
+80105425 trapret
+80106146 vector216
+80105add vector63
+80105990 vector26
+80106032 vector193
 80102670 lapicinit
-80106026 vector196
-801060c2 vector209
-801058a8 vector4
-80105eee vector170
+80106056 vector196
+801060f2 vector209
+801058d8 vector4
+80105f1e vector170
 8010a5c0 stack
-80105d56 vector136
-801058dc vector10
-8010609e vector206
+80105d86 vector136
+8010590c vector10
+801060ce vector206
 80101790 iunlock
-80105300 sys_sleep
-801062ea vector255
-80105f72 vector181
-80105a89 vector59
-80105b73 vector85
-80105b6a vector84
-80105f8a vector183
-80105e6a vector159
-801060e6 vector212
+80105330 sys_sleep
+8010631a vector255
+80105fa2 vector181
+80105ab9 vector59
+80105ba3 vector85
+80105b9a vector84
+80105fba vector183
+80105e9a vector159
+80106116 vector212
 80104ab0 sys_link
-80105a1d vector47
-801061a6 vector228
-801059f0 vector42
-80105c78 vector114
-80106b40 uva2ka
-80105f2a vector175
-80105daa vector143
+80105a4d vector47
+801061d6 vector228
+80105a20 vector42
+80105ca8 vector114
+80106b70 uva2ka
+80105f5a vector175
+80105dda vector143
 80100d70 filealloc
 80103d90 wakeup
-80105d0e vector130
-8010627e vector246
-801058d3 vector9
-80105d9e vector142
-80105bfa vector100
-80106062 vector201
-80106a20 clearpteu
+80105d3e vector130
+801062ae vector246
+80105903 vector9
+80105dce vector142
+80105c2a vector100
+80106092 vector201
+80106a50 clearpteu
 801036a0 myproc
-80105400 tvinit
-80105a92 vector60
-80105945 vector23
+80105430 tvinit
+80105ac2 vector60
+80105975 vector23
 80101680 idup
-80106206 vector236
+80106236 vector236
 801025d0 kbdintr
 80104dc0 sys_open
-801061ca vector231
-80105ac8 vector66
-8010597b vector29
+801061fa vector231
+80105af8 vector66
+801059ab vector29
 80101960 readi
-80105d4a vector135
+80105d7a vector135
 801007b0 consoleintr
 80103df0 kill
-80105b2b vector77
+80105b5b vector77
 80101520 ialloc
-80105f66 vector180
+80105f96 vector180
 801155a4 kpgdir
-801060b6 vector208
+801060e6 vector208
 80102840 cmostime
-80105870 uartintr
-80105be8 vector98
-80105bdf vector97
-80105f36 vector176
-8010600e vector194
-80105996 vector32
+801058a0 uartintr
+80105c18 vector98
+80105c0f vector97
+80105f66 vector176
+8010603e vector194
+801059c6 vector32
 801155a8 end
-8010604a vector199
-80105d1a vector131
-801062c6 vector252
+8010607a vector199
+80105d4a vector131
+801062f6 vector252
 80100fe0 filewrite
-80105884 vector0
+801058b4 vector0
 80104590 argint
 801009a0 exec
-80105dc2 vector145
+80105df2 vector145
 801049b0 sys_write
 80104250 release
 80104530 fetchstr
-80105c39 vector107
-801059de vector40
+80105c69 vector107
+80105a0e vector40
 80103cb0 wait
-80105c0c vector102
+80105c3c vector102
 80109000 entrypgdir
 0010000c _start
-80105a6e vector56
-80105ada vector68
-801058ba vector6
+80105a9e vector56
+80105b0a vector68
+801058ea vector6
 8010a48c _binary_initcode_end
 80100000 multiboot_header
-80105d02 vector129
+80105d32 vector129
 80103960 scheduler
 80101bc0 dirlookup
-80106032 vector197
+80106062 vector197
 80100e30 fileclose
 80102b10 begin_op
-80105e16 vector152
-80106a00 kvmalloc
-801061be vector230
+80105e46 vector152
+80106a30 kvmalloc
+801061ee vector230
 801043c0 strncmp
-801059c3 vector37
-80106092 vector205
-80105e82 vector161
+801059f3 vector37
+801060c2 vector205
+80105eb2 vector161
 80114d60 tickslock
 801032f0 pipewrite
 80104430 strncpy
-80105af5 vector71
-80106a50 copyuvm
+80105b25 vector71
+80106a80 copyuvm
 8010ffc0 ftable
-80105e76 vector160
+80105ea6 vector160
 801045c0 argptr
-8010610a vector215
-80105e52 vector157
+8010613a vector215
+80105e82 vector157
 80104900 sys_dup
-80105c66 vector112
+80105c96 vector112
 80100360 panic
 80103590 forkret
-80105f7e vector182
-801058ea vector12
+80105fae vector182
+8010591a vector12
 801042f0 memcmp
 80102500 kbdgetc
-80105c4b vector109
-8010592a vector20
+80105c7b vector109
+8010595a vector20
 80103850 fork
-80105a53 vector53
-80105918 vector18
+80105a83 vector53
+80105948 vector18
 0000008a _binary_entryother_size
 80112780 cpus
 80103fe0 releasesleep
-80105bcd vector95
+80105bfd vector95
 801041a0 holding
 801109c0 sb
 801041e0 acquire
-8010618e vector226
+801061be vector226
 80101f20 nameiparent
-80105a2f vector49
-80105a02 vector44
+80105a5f vector49
+80105a32 vector44
 8011267c lapic
-80105b34 vector78
-801053dd alltraps
-80105f12 vector173
-80105c93 vector117
-80105b58 vector82
-8010615e vector222
-801058cc vector8
-80105df2 vector149
+80105b64 vector78
+8010540d alltraps
+80105f42 vector173
+80105cc3 vector117
+80105b88 vector82
+8010618e vector222
+801058fc vector8
+80105e22 vector149
 801015f0 iupdate
 80108000 data
 801042a0 memset
-801061d6 vector232
+80106206 vector232
 80102df0 main
-80106570 switchkvm
-80105c30 vector106
-80106146 vector220
-80105ba0 vector90
-80105e9a vector163
-801061ee vector234
+801065a0 switchkvm
+80105c60 vector106
+80106176 vector220
+80105bd0 vector90
+80105eca vector163
+8010621e vector234
 80102cb0 log_write
 80103f80 acquiresleep
 80104bd0 sys_unlink
-80105aa4 vector62
-80105957 vector25
-8010603e vector198
-80105cae vector120
+80105ad4 vector62
+80105987 vector25
+8010606e vector198
+80105cde vector120
 8010a48c _binary_entryother_start
 801023e0 kinit1
-80105a38 vector50
-801058ff vector15
-80105e0a vector151
-80105b61 vector83
-80105b97 vector89
-80105b8e vector88
-801054d0 trap
-801053b0 sys_uptime
-80105f5a vector179
-801059a8 vector34
-80105a14 vector46
-80105d3e vector134
-8010616a vector223
+80105a68 vector50
+8010592f vector15
+80105e3a vector151
+80105b91 vector83
+80105bc7 vector89
+80105bbe vector88
+80105500 trap
+801053e0 sys_uptime
+80105f8a vector179
+801059d8 vector34
+80105a44 vector46
+80105d6e vector134
+8010619a vector223
 80114da0 idt
-8010612e vector218
+8010615e vector218
 801035e0 pinit
-801068d0 deallocuvm
-80106182 vector225
+80106900 deallocuvm
+801061b2 vector225
 80102760 lapicid
-80105fba vector187
+80105fea vector187
 801037e0 growproc
 80104020 holdingsleep
 80112d00 ncpu
-80105984 vector30
+801059b4 vector30
 801036d0 userinit
 801000d0 bread
-80105ced vector127
+80105d1d vector127
 801033e0 piperead
 801155a0 ticks
-80105ff6 vector192
-80105ebe vector166
+80106026 vector192
+80105eee vector166
 80100950 consoleinit
-80105b22 vector76
-80105b19 vector75
+80105b52 vector76
+80105b49 vector75
 80102080 ideintr
-8010601a vector195
-80105dfe vector150
-80105a80 vector58
-80106296 vector248
-80105cc9 vector123
-80105bd6 vector96
-8010598d vector31
-8010607a vector203
-80105d7a vector139
-80105e22 vector153
-80105ea6 vector164
+8010604a vector195
+80105e2e vector150
+80105ab0 vector58
+801062c6 vector248
+80105cf9 vector123
+80105c06 vector96
+801059bd vector31
+801060aa vector203
+80105daa vector139
+80105e52 vector153
+80105ed6 vector164
 80103e70 procdump
-80105cb7 vector121
-80105780 uartputc
-801058b1 vector5
-80105eca vector167
-80105e3a vector155
-801062a2 vector249
+80105ce7 vector121
+801057b0 uartputc
+801058e1 vector5
+80105efa vector167
+80105e6a vector155
+801062d2 vector249
 801001e0 brelse
-801062ae vector250
-80105cd2 vector124
-80105c54 vector110
-80106086 vector204
+801062de vector250
+80105d02 vector124
+80105c84 vector110
+801060b6 vector204
 801016b0 ilock
 80105080 sys_exec
-80105d62 vector137
+80105d92 vector137
 8010a460 _binary_initcode_start
 801044db swtch
-8010628a vector247
-8010593c vector22
-8010606e vector202
-801064b0 seginit
+801062ba vector247
+8010596c vector22
+8010609e vector202
+801064e0 seginit
 80101910 iunlockput
-80105afe vector72
-80105a65 vector55
-80105ce4 vector126
-80105abf vector65
-80105972 vector28
+80105b2e vector72
+80105a95 vector55
+80105d14 vector126
+80105aef vector65
+801059a2 vector28
 8010a516 _binary_entryother_end
-80105ee2 vector169
+80105f12 vector169
 801001a0 bwrite
-801061e2 vector233
-801054a0 idtinit
+80106212 vector233
+801054d0 idtinit
 80103aa0 exit
 80105250 sys_wait
 80105220 sys_exit
 80101e20 dirlink
 0000002c _binary_initcode_size
-80105dda vector147
+80105e0a vector147
 80103f40 initsleeplock
 80102000 ideinit
-80106720 loaduvm
-80105c1e vector104
-80105c8a vector116
+80106750 loaduvm
+80105c4e vector104
+80105cba vector116
 80112d20 ptable
 801022b0 ioapicenable
 80104130 popcli
 8010a008 vectors
-80105a4a vector52
-80105911 vector17
-80105f96 vector184
+80105a7a vector52
+80105941 vector17
+80105fc6 vector184
 801044c0 strlen
 80105170 sys_pipe
 80101470 iinit
 80103150 picinit
-801060aa vector207
-801066a0 inituvm
-80105fde vector190
-8010622a vector239
-80105bc4 vector94
-80105bbb vector93
+801060da vector207
+801066d0 inituvm
+8010600e vector190
+8010625a vector239
+80105bf4 vector94
+80105beb vector93
 80102a70 initlog
-80105fc6 vector188
-80105a26 vector48
+80105ff6 vector188
+80105a56 vector48
 80102120 iderw
-8010613a vector219
-80105de6 vector148
-80106152 vector221
+8010616a vector219
+80105e16 vector148
+80106182 vector221
 801024a0 kalloc
 80110960 devsw
-801052a0 sys_getpid
-80105b46 vector80
-80105efa vector171
-80105e2e vector154
-801059ba vector36
+801052d0 sys_getpid
+80105b76 vector80
+80105f2a vector171
+80105e5e vector154
+801059ea vector36
 80103170 pipealloc
-801061fa vector235
-80105c27 vector105
+8010622a vector235
+80105c57 vector105
 80104ff0 sys_chdir
 801109e0 icache
-80105dce vector146
-80105fea vector191
-80105c15 vector103
+80105dfe vector146
+8010601a vector191
+80105c45 vector103
 80104f60 sys_mknod
 801027b0 lapicstartap
-80106590 switchuvm
+801065c0 switchuvm
 801040f0 pushcli
 80102450 kinit2
-801058e3 vector11
-801058f8 vector14
+80105913 vector11
+80105928 vector14
 80100ef0 filestat
diff --git a/kill.asm b/kill.asm
index 6ceed17..214df6a 100644
--- a/kill.asm
+++ b/kill.asm
@@ -445,132 +445,106 @@ memmove(void *vdst, const void *vsrc, int n)
  289:	c3                   	ret    
 
 0000028a <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
  28a:	b8 01 00 00 00       	mov    $0x1,%eax
  28f:	cd 40                	int    $0x40
  291:	c3                   	ret    
 
 00000292 <exit>:
-SYSCALL(exit)
  292:	b8 02 00 00 00       	mov    $0x2,%eax
  297:	cd 40                	int    $0x40
  299:	c3                   	ret    
 
 0000029a <wait>:
-SYSCALL(wait)
  29a:	b8 03 00 00 00       	mov    $0x3,%eax
  29f:	cd 40                	int    $0x40
  2a1:	c3                   	ret    
 
 000002a2 <pipe>:
-SYSCALL(pipe)
  2a2:	b8 04 00 00 00       	mov    $0x4,%eax
  2a7:	cd 40                	int    $0x40
  2a9:	c3                   	ret    
 
 000002aa <read>:
-SYSCALL(read)
  2aa:	b8 05 00 00 00       	mov    $0x5,%eax
  2af:	cd 40                	int    $0x40
  2b1:	c3                   	ret    
 
 000002b2 <write>:
-SYSCALL(write)
  2b2:	b8 10 00 00 00       	mov    $0x10,%eax
  2b7:	cd 40                	int    $0x40
  2b9:	c3                   	ret    
 
 000002ba <close>:
-SYSCALL(close)
  2ba:	b8 15 00 00 00       	mov    $0x15,%eax
  2bf:	cd 40                	int    $0x40
  2c1:	c3                   	ret    
 
 000002c2 <kill>:
-SYSCALL(kill)
  2c2:	b8 06 00 00 00       	mov    $0x6,%eax
  2c7:	cd 40                	int    $0x40
  2c9:	c3                   	ret    
 
 000002ca <exec>:
-SYSCALL(exec)
  2ca:	b8 07 00 00 00       	mov    $0x7,%eax
  2cf:	cd 40                	int    $0x40
  2d1:	c3                   	ret    
 
 000002d2 <open>:
-SYSCALL(open)
  2d2:	b8 0f 00 00 00       	mov    $0xf,%eax
  2d7:	cd 40                	int    $0x40
  2d9:	c3                   	ret    
 
 000002da <mknod>:
-SYSCALL(mknod)
  2da:	b8 11 00 00 00       	mov    $0x11,%eax
  2df:	cd 40                	int    $0x40
  2e1:	c3                   	ret    
 
 000002e2 <unlink>:
-SYSCALL(unlink)
  2e2:	b8 12 00 00 00       	mov    $0x12,%eax
  2e7:	cd 40                	int    $0x40
  2e9:	c3                   	ret    
 
 000002ea <fstat>:
-SYSCALL(fstat)
  2ea:	b8 08 00 00 00       	mov    $0x8,%eax
  2ef:	cd 40                	int    $0x40
  2f1:	c3                   	ret    
 
 000002f2 <link>:
-SYSCALL(link)
  2f2:	b8 13 00 00 00       	mov    $0x13,%eax
  2f7:	cd 40                	int    $0x40
  2f9:	c3                   	ret    
 
 000002fa <mkdir>:
-SYSCALL(mkdir)
  2fa:	b8 14 00 00 00       	mov    $0x14,%eax
  2ff:	cd 40                	int    $0x40
  301:	c3                   	ret    
 
 00000302 <chdir>:
-SYSCALL(chdir)
  302:	b8 09 00 00 00       	mov    $0x9,%eax
  307:	cd 40                	int    $0x40
  309:	c3                   	ret    
 
 0000030a <dup>:
-SYSCALL(dup)
  30a:	b8 0a 00 00 00       	mov    $0xa,%eax
  30f:	cd 40                	int    $0x40
  311:	c3                   	ret    
 
 00000312 <getpid>:
-SYSCALL(getpid)
  312:	b8 0b 00 00 00       	mov    $0xb,%eax
  317:	cd 40                	int    $0x40
  319:	c3                   	ret    
 
 0000031a <sbrk>:
-SYSCALL(sbrk)
  31a:	b8 0c 00 00 00       	mov    $0xc,%eax
  31f:	cd 40                	int    $0x40
  321:	c3                   	ret    
 
 00000322 <sleep>:
-SYSCALL(sleep)
  322:	b8 0d 00 00 00       	mov    $0xd,%eax
  327:	cd 40                	int    $0x40
  329:	c3                   	ret    
 
 0000032a <uptime>:
-SYSCALL(uptime)
  32a:	b8 0e 00 00 00       	mov    $0xe,%eax
  32f:	cd 40                	int    $0x40
  331:	c3                   	ret    
diff --git a/kill.o b/kill.o
index 24e3a1d..50af6fc 100644
Binary files a/kill.o and b/kill.o differ
diff --git a/lapic.o b/lapic.o
index 0d53d1d..425323d 100644
Binary files a/lapic.o and b/lapic.o differ
diff --git a/ln.asm b/ln.asm
index ff0123f..385df16 100644
--- a/ln.asm
+++ b/ln.asm
@@ -439,132 +439,106 @@ memmove(void *vdst, const void *vsrc, int n)
  299:	c3                   	ret    
 
 0000029a <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
  29a:	b8 01 00 00 00       	mov    $0x1,%eax
  29f:	cd 40                	int    $0x40
  2a1:	c3                   	ret    
 
 000002a2 <exit>:
-SYSCALL(exit)
  2a2:	b8 02 00 00 00       	mov    $0x2,%eax
  2a7:	cd 40                	int    $0x40
  2a9:	c3                   	ret    
 
 000002aa <wait>:
-SYSCALL(wait)
  2aa:	b8 03 00 00 00       	mov    $0x3,%eax
  2af:	cd 40                	int    $0x40
  2b1:	c3                   	ret    
 
 000002b2 <pipe>:
-SYSCALL(pipe)
  2b2:	b8 04 00 00 00       	mov    $0x4,%eax
  2b7:	cd 40                	int    $0x40
  2b9:	c3                   	ret    
 
 000002ba <read>:
-SYSCALL(read)
  2ba:	b8 05 00 00 00       	mov    $0x5,%eax
  2bf:	cd 40                	int    $0x40
  2c1:	c3                   	ret    
 
 000002c2 <write>:
-SYSCALL(write)
  2c2:	b8 10 00 00 00       	mov    $0x10,%eax
  2c7:	cd 40                	int    $0x40
  2c9:	c3                   	ret    
 
 000002ca <close>:
-SYSCALL(close)
  2ca:	b8 15 00 00 00       	mov    $0x15,%eax
  2cf:	cd 40                	int    $0x40
  2d1:	c3                   	ret    
 
 000002d2 <kill>:
-SYSCALL(kill)
  2d2:	b8 06 00 00 00       	mov    $0x6,%eax
  2d7:	cd 40                	int    $0x40
  2d9:	c3                   	ret    
 
 000002da <exec>:
-SYSCALL(exec)
  2da:	b8 07 00 00 00       	mov    $0x7,%eax
  2df:	cd 40                	int    $0x40
  2e1:	c3                   	ret    
 
 000002e2 <open>:
-SYSCALL(open)
  2e2:	b8 0f 00 00 00       	mov    $0xf,%eax
  2e7:	cd 40                	int    $0x40
  2e9:	c3                   	ret    
 
 000002ea <mknod>:
-SYSCALL(mknod)
  2ea:	b8 11 00 00 00       	mov    $0x11,%eax
  2ef:	cd 40                	int    $0x40
  2f1:	c3                   	ret    
 
 000002f2 <unlink>:
-SYSCALL(unlink)
  2f2:	b8 12 00 00 00       	mov    $0x12,%eax
  2f7:	cd 40                	int    $0x40
  2f9:	c3                   	ret    
 
 000002fa <fstat>:
-SYSCALL(fstat)
  2fa:	b8 08 00 00 00       	mov    $0x8,%eax
  2ff:	cd 40                	int    $0x40
  301:	c3                   	ret    
 
 00000302 <link>:
-SYSCALL(link)
  302:	b8 13 00 00 00       	mov    $0x13,%eax
  307:	cd 40                	int    $0x40
  309:	c3                   	ret    
 
 0000030a <mkdir>:
-SYSCALL(mkdir)
  30a:	b8 14 00 00 00       	mov    $0x14,%eax
  30f:	cd 40                	int    $0x40
  311:	c3                   	ret    
 
 00000312 <chdir>:
-SYSCALL(chdir)
  312:	b8 09 00 00 00       	mov    $0x9,%eax
  317:	cd 40                	int    $0x40
  319:	c3                   	ret    
 
 0000031a <dup>:
-SYSCALL(dup)
  31a:	b8 0a 00 00 00       	mov    $0xa,%eax
  31f:	cd 40                	int    $0x40
  321:	c3                   	ret    
 
 00000322 <getpid>:
-SYSCALL(getpid)
  322:	b8 0b 00 00 00       	mov    $0xb,%eax
  327:	cd 40                	int    $0x40
  329:	c3                   	ret    
 
 0000032a <sbrk>:
-SYSCALL(sbrk)
  32a:	b8 0c 00 00 00       	mov    $0xc,%eax
  32f:	cd 40                	int    $0x40
  331:	c3                   	ret    
 
 00000332 <sleep>:
-SYSCALL(sleep)
  332:	b8 0d 00 00 00       	mov    $0xd,%eax
  337:	cd 40                	int    $0x40
  339:	c3                   	ret    
 
 0000033a <uptime>:
-SYSCALL(uptime)
  33a:	b8 0e 00 00 00       	mov    $0xe,%eax
  33f:	cd 40                	int    $0x40
  341:	c3                   	ret    
diff --git a/ln.o b/ln.o
index a656291..b532648 100644
Binary files a/ln.o and b/ln.o differ
diff --git a/log.o b/log.o
index 153ceb7..447f2bd 100644
Binary files a/log.o and b/log.o differ
diff --git a/ls.asm b/ls.asm
index edd7177..d5bfbdb 100644
--- a/ls.asm
+++ b/ls.asm
@@ -690,132 +690,106 @@ memmove(void *vdst, const void *vsrc, int n)
  5a9:	c3                   	ret    
 
 000005aa <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
  5aa:	b8 01 00 00 00       	mov    $0x1,%eax
  5af:	cd 40                	int    $0x40
  5b1:	c3                   	ret    
 
 000005b2 <exit>:
-SYSCALL(exit)
  5b2:	b8 02 00 00 00       	mov    $0x2,%eax
  5b7:	cd 40                	int    $0x40
  5b9:	c3                   	ret    
 
 000005ba <wait>:
-SYSCALL(wait)
  5ba:	b8 03 00 00 00       	mov    $0x3,%eax
  5bf:	cd 40                	int    $0x40
  5c1:	c3                   	ret    
 
 000005c2 <pipe>:
-SYSCALL(pipe)
  5c2:	b8 04 00 00 00       	mov    $0x4,%eax
  5c7:	cd 40                	int    $0x40
  5c9:	c3                   	ret    
 
 000005ca <read>:
-SYSCALL(read)
  5ca:	b8 05 00 00 00       	mov    $0x5,%eax
  5cf:	cd 40                	int    $0x40
  5d1:	c3                   	ret    
 
 000005d2 <write>:
-SYSCALL(write)
  5d2:	b8 10 00 00 00       	mov    $0x10,%eax
  5d7:	cd 40                	int    $0x40
  5d9:	c3                   	ret    
 
 000005da <close>:
-SYSCALL(close)
  5da:	b8 15 00 00 00       	mov    $0x15,%eax
  5df:	cd 40                	int    $0x40
  5e1:	c3                   	ret    
 
 000005e2 <kill>:
-SYSCALL(kill)
  5e2:	b8 06 00 00 00       	mov    $0x6,%eax
  5e7:	cd 40                	int    $0x40
  5e9:	c3                   	ret    
 
 000005ea <exec>:
-SYSCALL(exec)
  5ea:	b8 07 00 00 00       	mov    $0x7,%eax
  5ef:	cd 40                	int    $0x40
  5f1:	c3                   	ret    
 
 000005f2 <open>:
-SYSCALL(open)
  5f2:	b8 0f 00 00 00       	mov    $0xf,%eax
  5f7:	cd 40                	int    $0x40
  5f9:	c3                   	ret    
 
 000005fa <mknod>:
-SYSCALL(mknod)
  5fa:	b8 11 00 00 00       	mov    $0x11,%eax
  5ff:	cd 40                	int    $0x40
  601:	c3                   	ret    
 
 00000602 <unlink>:
-SYSCALL(unlink)
  602:	b8 12 00 00 00       	mov    $0x12,%eax
  607:	cd 40                	int    $0x40
  609:	c3                   	ret    
 
 0000060a <fstat>:
-SYSCALL(fstat)
  60a:	b8 08 00 00 00       	mov    $0x8,%eax
  60f:	cd 40                	int    $0x40
  611:	c3                   	ret    
 
 00000612 <link>:
-SYSCALL(link)
  612:	b8 13 00 00 00       	mov    $0x13,%eax
  617:	cd 40                	int    $0x40
  619:	c3                   	ret    
 
 0000061a <mkdir>:
-SYSCALL(mkdir)
  61a:	b8 14 00 00 00       	mov    $0x14,%eax
  61f:	cd 40                	int    $0x40
  621:	c3                   	ret    
 
 00000622 <chdir>:
-SYSCALL(chdir)
  622:	b8 09 00 00 00       	mov    $0x9,%eax
  627:	cd 40                	int    $0x40
  629:	c3                   	ret    
 
 0000062a <dup>:
-SYSCALL(dup)
  62a:	b8 0a 00 00 00       	mov    $0xa,%eax
  62f:	cd 40                	int    $0x40
  631:	c3                   	ret    
 
 00000632 <getpid>:
-SYSCALL(getpid)
  632:	b8 0b 00 00 00       	mov    $0xb,%eax
  637:	cd 40                	int    $0x40
  639:	c3                   	ret    
 
 0000063a <sbrk>:
-SYSCALL(sbrk)
  63a:	b8 0c 00 00 00       	mov    $0xc,%eax
  63f:	cd 40                	int    $0x40
  641:	c3                   	ret    
 
 00000642 <sleep>:
-SYSCALL(sleep)
  642:	b8 0d 00 00 00       	mov    $0xd,%eax
  647:	cd 40                	int    $0x40
  649:	c3                   	ret    
 
 0000064a <uptime>:
-SYSCALL(uptime)
  64a:	b8 0e 00 00 00       	mov    $0xe,%eax
  64f:	cd 40                	int    $0x40
  651:	c3                   	ret    
diff --git a/ls.o b/ls.o
index d404964..e9be43b 100644
Binary files a/ls.o and b/ls.o differ
diff --git a/main.o b/main.o
index 3dd7a07..3c7c71e 100644
Binary files a/main.o and b/main.o differ
diff --git a/mkdir.asm b/mkdir.asm
index ea3076c..499ec60 100644
--- a/mkdir.asm
+++ b/mkdir.asm
@@ -455,132 +455,106 @@ memmove(void *vdst, const void *vsrc, int n)
  299:	c3                   	ret    
 
 0000029a <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
  29a:	b8 01 00 00 00       	mov    $0x1,%eax
  29f:	cd 40                	int    $0x40
  2a1:	c3                   	ret    
 
 000002a2 <exit>:
-SYSCALL(exit)
  2a2:	b8 02 00 00 00       	mov    $0x2,%eax
  2a7:	cd 40                	int    $0x40
  2a9:	c3                   	ret    
 
 000002aa <wait>:
-SYSCALL(wait)
  2aa:	b8 03 00 00 00       	mov    $0x3,%eax
  2af:	cd 40                	int    $0x40
  2b1:	c3                   	ret    
 
 000002b2 <pipe>:
-SYSCALL(pipe)
  2b2:	b8 04 00 00 00       	mov    $0x4,%eax
  2b7:	cd 40                	int    $0x40
  2b9:	c3                   	ret    
 
 000002ba <read>:
-SYSCALL(read)
  2ba:	b8 05 00 00 00       	mov    $0x5,%eax
  2bf:	cd 40                	int    $0x40
  2c1:	c3                   	ret    
 
 000002c2 <write>:
-SYSCALL(write)
  2c2:	b8 10 00 00 00       	mov    $0x10,%eax
  2c7:	cd 40                	int    $0x40
  2c9:	c3                   	ret    
 
 000002ca <close>:
-SYSCALL(close)
  2ca:	b8 15 00 00 00       	mov    $0x15,%eax
  2cf:	cd 40                	int    $0x40
  2d1:	c3                   	ret    
 
 000002d2 <kill>:
-SYSCALL(kill)
  2d2:	b8 06 00 00 00       	mov    $0x6,%eax
  2d7:	cd 40                	int    $0x40
  2d9:	c3                   	ret    
 
 000002da <exec>:
-SYSCALL(exec)
  2da:	b8 07 00 00 00       	mov    $0x7,%eax
  2df:	cd 40                	int    $0x40
  2e1:	c3                   	ret    
 
 000002e2 <open>:
-SYSCALL(open)
  2e2:	b8 0f 00 00 00       	mov    $0xf,%eax
  2e7:	cd 40                	int    $0x40
  2e9:	c3                   	ret    
 
 000002ea <mknod>:
-SYSCALL(mknod)
  2ea:	b8 11 00 00 00       	mov    $0x11,%eax
  2ef:	cd 40                	int    $0x40
  2f1:	c3                   	ret    
 
 000002f2 <unlink>:
-SYSCALL(unlink)
  2f2:	b8 12 00 00 00       	mov    $0x12,%eax
  2f7:	cd 40                	int    $0x40
  2f9:	c3                   	ret    
 
 000002fa <fstat>:
-SYSCALL(fstat)
  2fa:	b8 08 00 00 00       	mov    $0x8,%eax
  2ff:	cd 40                	int    $0x40
  301:	c3                   	ret    
 
 00000302 <link>:
-SYSCALL(link)
  302:	b8 13 00 00 00       	mov    $0x13,%eax
  307:	cd 40                	int    $0x40
  309:	c3                   	ret    
 
 0000030a <mkdir>:
-SYSCALL(mkdir)
  30a:	b8 14 00 00 00       	mov    $0x14,%eax
  30f:	cd 40                	int    $0x40
  311:	c3                   	ret    
 
 00000312 <chdir>:
-SYSCALL(chdir)
  312:	b8 09 00 00 00       	mov    $0x9,%eax
  317:	cd 40                	int    $0x40
  319:	c3                   	ret    
 
 0000031a <dup>:
-SYSCALL(dup)
  31a:	b8 0a 00 00 00       	mov    $0xa,%eax
  31f:	cd 40                	int    $0x40
  321:	c3                   	ret    
 
 00000322 <getpid>:
-SYSCALL(getpid)
  322:	b8 0b 00 00 00       	mov    $0xb,%eax
  327:	cd 40                	int    $0x40
  329:	c3                   	ret    
 
 0000032a <sbrk>:
-SYSCALL(sbrk)
  32a:	b8 0c 00 00 00       	mov    $0xc,%eax
  32f:	cd 40                	int    $0x40
  331:	c3                   	ret    
 
 00000332 <sleep>:
-SYSCALL(sleep)
  332:	b8 0d 00 00 00       	mov    $0xd,%eax
  337:	cd 40                	int    $0x40
  339:	c3                   	ret    
 
 0000033a <uptime>:
-SYSCALL(uptime)
  33a:	b8 0e 00 00 00       	mov    $0xe,%eax
  33f:	cd 40                	int    $0x40
  341:	c3                   	ret    
diff --git a/mkdir.o b/mkdir.o
index 026691f..d3eeeca 100644
Binary files a/mkdir.o and b/mkdir.o differ
diff --git a/mp.o b/mp.o
index baae68d..c3c74d5 100644
Binary files a/mp.o and b/mp.o differ
diff --git a/mycode.diff b/mycode.diff
index c091f0c..741a2da 100644
--- a/mycode.diff
+++ b/mycode.diff
@@ -1,1745 +0,0 @@
-diff --git a/cat.c b/cat.c
-index 5ddc820..ed1987d 100644
---- a/cat.c
-+++ b/cat.c
-@@ -12,12 +12,12 @@ cat(int fd)
-   while((n = read(fd, buf, sizeof(buf))) > 0) {
-     if (write(1, buf, n) != n) {
-       printf(1, "cat: write error\n");
--      exit();
-+      exit(0);
-     }
-   }
-   if(n < 0){
-     printf(1, "cat: read error\n");
--    exit();
-+    exit(0);
-   }
- }
- 
-@@ -28,16 +28,16 @@ main(int argc, char *argv[])
- 
-   if(argc <= 1){
-     cat(0);
--    exit();
-+    exit(0);
-   }
- 
-   for(i = 1; i < argc; i++){
-     if((fd = open(argv[i], 0)) < 0){
-       printf(1, "cat: cannot open %s\n", argv[i]);
--      exit();
-+      exit(0);
-     }
-     cat(fd);
-     close(fd);
-   }
--  exit();
-+  exit(0);
- }
-diff --git a/defs.h b/defs.h
-index 82fb982..94cda70 100644
---- a/defs.h
-+++ b/defs.h
-@@ -104,7 +104,7 @@ int             pipewrite(struct pipe*, char*, int);
- //PAGEBREAK: 16
- // proc.c
- int             cpuid(void);
--void            exit(void);
-+void            exit(int);   //change to have status parameter
- int             fork(void);
- int             growproc(int);
- int             kill(int);
-diff --git a/echo.c b/echo.c
-index 806dee0..eed68a0 100644
---- a/echo.c
-+++ b/echo.c
-@@ -9,5 +9,5 @@ main(int argc, char *argv[])
- 
-   for(i = 1; i < argc; i++)
-     printf(1, "%s%s", argv[i], i+1 < argc ? " " : "\n");
--  exit();
-+  exit(0);
- }
-diff --git a/forktest.c b/forktest.c
-index 8bc984d..227810c 100644
---- a/forktest.c
-+++ b/forktest.c
-@@ -25,24 +25,24 @@ forktest(void)
-     if(pid < 0)
-       break;
-     if(pid == 0)
--      exit();
-+      exit(0);
-   }
- 
-   if(n == N){
-     printf(1, "fork claimed to work N times!\n", N);
--    exit();
-+    exit(0);
-   }
- 
-   for(; n > 0; n--){
-     if(wait() < 0){
-       printf(1, "wait stopped early\n");
--      exit();
-+      exit(0);
-     }
-   }
- 
-   if(wait() != -1){
-     printf(1, "wait got too many\n");
--    exit();
-+    exit(0);
-   }
- 
-   printf(1, "fork test OK\n");
-@@ -52,5 +52,5 @@ int
- main(void)
- {
-   forktest();
--  exit();
-+  exit(0);
- }
-diff --git a/grep.c b/grep.c
-index adc4835..1aa1081 100644
---- a/grep.c
-+++ b/grep.c
-@@ -43,24 +43,24 @@ main(int argc, char *argv[])
- 
-   if(argc <= 1){
-     printf(2, "usage: grep pattern [file ...]\n");
--    exit();
-+    exit(0);
-   }
-   pattern = argv[1];
- 
-   if(argc <= 2){
-     grep(pattern, 0);
--    exit();
-+    exit(0);
-   }
- 
-   for(i = 2; i < argc; i++){
-     if((fd = open(argv[i], 0)) < 0){
-       printf(1, "grep: cannot open %s\n", argv[i]);
--      exit();
-+      exit(0);
-     }
-     grep(pattern, fd);
-     close(fd);
-   }
--  exit();
-+  exit(0);
- }
- 
- // Regexp matcher from Kernighan & Pike,
-diff --git a/hello.c b/hello.c
-index c5c30a6..702f187 100644
---- a/hello.c
-+++ b/hello.c
-@@ -4,5 +4,5 @@
- int main( int argc, char **argv) {
- 
- 	printf(1, "Hello World!\n");
--	exit();
-+	exit(0);
- }
-diff --git a/init.c b/init.c
-index 046b551..dd46de4 100644
---- a/init.c
-+++ b/init.c
-@@ -24,12 +24,12 @@ main(void)
-     pid = fork();
-     if(pid < 0){
-       printf(1, "init: fork failed\n");
--      exit();
-+      exit(0);
-     }
-     if(pid == 0){
-       exec("sh", argv);
-       printf(1, "init: exec sh failed\n");
--      exit();
-+      exit(0);
-     }
-     while((wpid=wait()) >= 0 && wpid != pid)
-       printf(1, "zombie!\n");
-diff --git a/initcode.S b/initcode.S
-index 80ac5d8..b8229b8 100644
---- a/initcode.S
-+++ b/initcode.S
-@@ -14,7 +14,7 @@ start:
-   movl $SYS_exec, %eax
-   int $T_SYSCALL
- 
--# for(;;) exit();
-+# for(;;) exit(0);
- exit:
-   movl $SYS_exit, %eax
-   int $T_SYSCALL
-diff --git a/kill.c b/kill.c
-index 364f6af..5a2e450 100644
---- a/kill.c
-+++ b/kill.c
-@@ -9,9 +9,9 @@ main(int argc, char **argv)
- 
-   if(argc < 2){
-     printf(2, "usage: kill pid...\n");
--    exit();
-+    exit(0);
-   }
-   for(i=1; i<argc; i++)
-     kill(atoi(argv[i]));
--  exit();
-+  exit(0);
- }
-diff --git a/ln.c b/ln.c
-index cf8a64e..14acdc8 100644
---- a/ln.c
-+++ b/ln.c
-@@ -7,9 +7,9 @@ main(int argc, char *argv[])
- {
-   if(argc != 3){
-     printf(2, "Usage: ln old new\n");
--    exit();
-+    exit(0);
-   }
-   if(link(argv[1], argv[2]) < 0)
-     printf(2, "link %s %s: failed\n", argv[1], argv[2]);
--  exit();
-+  exit(0);
- }
-diff --git a/ls.c b/ls.c
-index 2862913..27742c2 100644
---- a/ls.c
-+++ b/ls.c
-@@ -77,9 +77,9 @@ main(int argc, char *argv[])
- 
-   if(argc < 2){
-     ls(".");
--    exit();
-+    exit(0);
-   }
-   for(i=1; i<argc; i++)
-     ls(argv[i]);
--  exit();
-+  exit(0);
- }
-diff --git a/mkdir.c b/mkdir.c
-index 6e4c954..d101838 100644
---- a/mkdir.c
-+++ b/mkdir.c
-@@ -9,7 +9,7 @@ main(int argc, char *argv[])
- 
-   if(argc < 2){
-     printf(2, "Usage: mkdir files...\n");
--    exit();
-+    exit(0);
-   }
- 
-   for(i = 1; i < argc; i++){
-@@ -19,5 +19,5 @@ main(int argc, char *argv[])
-     }
-   }
- 
--  exit();
-+  exit(0);
- }
-diff --git a/proc.c b/proc.c
-index 806b1b1..622d42d 100644
---- a/proc.c
-+++ b/proc.c
-@@ -225,7 +225,7 @@ fork(void)
- // An exited process remains in the zombie state
- // until its parent calls wait() to find out it exited.
- void
--exit(void)
-+exit(int status)
- {
-   struct proc *curproc = myproc();
-   struct proc *p;
-diff --git a/proc.h b/proc.h
-index 1647114..6947d4a 100644
---- a/proc.h
-+++ b/proc.h
-@@ -49,6 +49,7 @@ struct proc {
-   struct file *ofile[NOFILE];  // Open files
-   struct inode *cwd;           // Current directory
-   char name[16];               // Process name (debugging)
-+  int status;                   // exit status
- };
- 
- // Process memory is laid out contiguously, low addresses first:
-diff --git a/rm.c b/rm.c
-index 4fd33c8..83c5f36 100644
---- a/rm.c
-+++ b/rm.c
-@@ -9,7 +9,7 @@ main(int argc, char *argv[])
- 
-   if(argc < 2){
-     printf(2, "Usage: rm files...\n");
--    exit();
-+    exit(0);
-   }
- 
-   for(i = 1; i < argc; i++){
-@@ -19,5 +19,5 @@ main(int argc, char *argv[])
-     }
-   }
- 
--  exit();
-+  exit(0);
- }
-diff --git a/sh.c b/sh.c
-index 054bab9..238ff10 100644
---- a/sh.c
-+++ b/sh.c
-@@ -65,7 +65,7 @@ runcmd(struct cmd *cmd)
-   struct redircmd *rcmd;
- 
-   if(cmd == 0)
--    exit();
-+    exit(0);
- 
-   switch(cmd->type){
-   default:
-@@ -74,7 +74,7 @@ runcmd(struct cmd *cmd)
-   case EXEC:
-     ecmd = (struct execcmd*)cmd;
-     if(ecmd->argv[0] == 0)
--      exit();
-+      exit(0);
-     exec(ecmd->argv[0], ecmd->argv);
-     printf(2, "exec %s failed\n", ecmd->argv[0]);
-     break;
-@@ -84,7 +84,7 @@ runcmd(struct cmd *cmd)
-     close(rcmd->fd);
-     if(open(rcmd->file, rcmd->mode) < 0){
-       printf(2, "open %s failed\n", rcmd->file);
--      exit();
-+      exit(0);
-     }
-     runcmd(rcmd->cmd);
-     break;
-@@ -127,7 +127,7 @@ runcmd(struct cmd *cmd)
-       runcmd(bcmd->cmd);
-     break;
-   }
--  exit();
-+  exit(0);
- }
- 
- int
-@@ -168,14 +168,14 @@ main(void)
-       runcmd(parsecmd(buf));
-     wait();
-   }
--  exit();
-+  exit(0);
- }
- 
- void
- panic(char *s)
- {
-   printf(2, "%s\n", s);
--  exit();
-+  exit(0);
- }
- 
- int
-diff --git a/stressfs.c b/stressfs.c
-index c0a4743..8829be2 100644
---- a/stressfs.c
-+++ b/stressfs.c
-@@ -45,5 +45,5 @@ main(int argc, char *argv[])
- 
-   wait();
- 
--  exit();
-+  exit(0);
- }
-diff --git a/sysproc.c b/sysproc.c
-index 0686d29..1ccc484 100644
---- a/sysproc.c
-+++ b/sysproc.c
-@@ -16,7 +16,9 @@ sys_fork(void)
- int
- sys_exit(void)
- {
--  exit();
-+  int status;
-+  argint(0, &status);
-+  exit(status);
-   return 0;  // not reached
- }
- 
-diff --git a/trap.c b/trap.c
-index 41c66eb..dbc9f6f 100644
---- a/trap.c
-+++ b/trap.c
-@@ -38,11 +38,11 @@ trap(struct trapframe *tf)
- {
-   if(tf->trapno == T_SYSCALL){
-     if(myproc()->killed)
--      exit();
-+      exit(0);
-     myproc()->tf = tf;
-     syscall();
-     if(myproc()->killed)
--      exit();
-+      exit(0);
-     return;
-   }
- 
-@@ -98,7 +98,7 @@ trap(struct trapframe *tf)
-   // (If it is still executing in the kernel, let it keep running
-   // until it gets to the regular system call return.)
-   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
--    exit();
-+    exit(0);
- 
-   // Force process to give up CPU on clock tick.
-   // If interrupts were on while locks held, would need to check nlock.
-@@ -108,5 +108,5 @@ trap(struct trapframe *tf)
- 
-   // Check if the process has been killed since we yielded
-   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
--    exit();
-+    exit(0);
- }
-diff --git a/user.h b/user.h
-index 4f99c52..3498e6d 100644
---- a/user.h
-+++ b/user.h
-@@ -3,7 +3,7 @@ struct rtcdate;
- 
- // system calls
- int fork(void);
--int exit(void) __attribute__((noreturn));
-+int exit(int) __attribute__((noreturn));
- int wait(void);
- int pipe(int*);
- int write(int, const void*, int);
-diff --git a/usertests.c b/usertests.c
-index a1e97e7..d25d9ef 100644
---- a/usertests.c
-+++ b/usertests.c
-@@ -21,24 +21,24 @@ iputtest(void)
- 
-   if(mkdir("iputdir") < 0){
-     printf(stdout, "mkdir failed\n");
--    exit();
-+    exit(0);
-   }
-   if(chdir("iputdir") < 0){
-     printf(stdout, "chdir iputdir failed\n");
--    exit();
-+    exit(0);
-   }
-   if(unlink("../iputdir") < 0){
-     printf(stdout, "unlink ../iputdir failed\n");
--    exit();
-+    exit(0);
-   }
-   if(chdir("/") < 0){
-     printf(stdout, "chdir / failed\n");
--    exit();
-+    exit(0);
-   }
-   printf(stdout, "iput test ok\n");
- }
- 
--// does exit() call iput(p->cwd) in a transaction?
-+// does exit(0) call iput(p->cwd) in a transaction?
- void
- exitiputtest(void)
- {
-@@ -49,22 +49,22 @@ exitiputtest(void)
-   pid = fork();
-   if(pid < 0){
-     printf(stdout, "fork failed\n");
--    exit();
-+    exit(0);
-   }
-   if(pid == 0){
-     if(mkdir("iputdir") < 0){
-       printf(stdout, "mkdir failed\n");
--      exit();
-+      exit(0);
-     }
-     if(chdir("iputdir") < 0){
-       printf(stdout, "child chdir failed\n");
--      exit();
-+      exit(0);
-     }
-     if(unlink("../iputdir") < 0){
-       printf(stdout, "unlink ../iputdir failed\n");
--      exit();
-+      exit(0);
-     }
--    exit();
-+    exit(0);
-   }
-   wait();
-   printf(stdout, "exitiput test ok\n");
-@@ -89,25 +89,25 @@ openiputtest(void)
-   printf(stdout, "openiput test\n");
-   if(mkdir("oidir") < 0){
-     printf(stdout, "mkdir oidir failed\n");
--    exit();
-+    exit(0);
-   }
-   pid = fork();
-   if(pid < 0){
-     printf(stdout, "fork failed\n");
--    exit();
-+    exit(0);
-   }
-   if(pid == 0){
-     int fd = open("oidir", O_RDWR);
-     if(fd >= 0){
-       printf(stdout, "open directory for write succeeded\n");
--      exit();
-+      exit(0);
-     }
--    exit();
-+    exit(0);
-   }
-   sleep(1);
-   if(unlink("oidir") != 0){
-     printf(stdout, "unlink failed\n");
--    exit();
-+    exit(0);
-   }
-   wait();
-   printf(stdout, "openiput test ok\n");
-@@ -124,13 +124,13 @@ opentest(void)
-   fd = open("echo", 0);
-   if(fd < 0){
-     printf(stdout, "open echo failed!\n");
--    exit();
-+    exit(0);
-   }
-   close(fd);
-   fd = open("doesnotexist", 0);
-   if(fd >= 0){
-     printf(stdout, "open doesnotexist succeeded!\n");
--    exit();
-+    exit(0);
-   }
-   printf(stdout, "open test ok\n");
- }
-@@ -147,16 +147,16 @@ writetest(void)
-     printf(stdout, "creat small succeeded; ok\n");
-   } else {
-     printf(stdout, "error: creat small failed!\n");
--    exit();
-+    exit(0);
-   }
-   for(i = 0; i < 100; i++){
-     if(write(fd, "aaaaaaaaaa", 10) != 10){
-       printf(stdout, "error: write aa %d new file failed\n", i);
--      exit();
-+      exit(0);
-     }
-     if(write(fd, "bbbbbbbbbb", 10) != 10){
-       printf(stdout, "error: write bb %d new file failed\n", i);
--      exit();
-+      exit(0);
-     }
-   }
-   printf(stdout, "writes ok\n");
-@@ -166,20 +166,20 @@ writetest(void)
-     printf(stdout, "open small succeeded ok\n");
-   } else {
-     printf(stdout, "error: open small failed!\n");
--    exit();
-+    exit(0);
-   }
-   i = read(fd, buf, 2000);
-   if(i == 2000){
-     printf(stdout, "read succeeded ok\n");
-   } else {
-     printf(stdout, "read failed\n");
--    exit();
-+    exit(0);
-   }
-   close(fd);
- 
-   if(unlink("small") < 0){
-     printf(stdout, "unlink small failed\n");
--    exit();
-+    exit(0);
-   }
-   printf(stdout, "small file test ok\n");
- }
-@@ -194,14 +194,14 @@ writetest1(void)
-   fd = open("big", O_CREATE|O_RDWR);
-   if(fd < 0){
-     printf(stdout, "error: creat big failed!\n");
--    exit();
-+    exit(0);
-   }
- 
-   for(i = 0; i < MAXFILE; i++){
-     ((int*)buf)[0] = i;
-     if(write(fd, buf, 512) != 512){
-       printf(stdout, "error: write big file failed\n", i);
--      exit();
-+      exit(0);
-     }
-   }
- 
-@@ -210,7 +210,7 @@ writetest1(void)
-   fd = open("big", O_RDONLY);
-   if(fd < 0){
-     printf(stdout, "error: open big failed!\n");
--    exit();
-+    exit(0);
-   }
- 
-   n = 0;
-@@ -219,24 +219,24 @@ writetest1(void)
-     if(i == 0){
-       if(n == MAXFILE - 1){
-         printf(stdout, "read only %d blocks from big", n);
--        exit();
-+        exit(0);
-       }
-       break;
-     } else if(i != 512){
-       printf(stdout, "read failed %d\n", i);
--      exit();
-+      exit(0);
-     }
-     if(((int*)buf)[0] != n){
-       printf(stdout, "read content of block %d is %d\n",
-              n, ((int*)buf)[0]);
--      exit();
-+      exit(0);
-     }
-     n++;
-   }
-   close(fd);
-   if(unlink("big") < 0){
-     printf(stdout, "unlink big failed\n");
--    exit();
-+    exit(0);
-   }
-   printf(stdout, "big files ok\n");
- }
-@@ -270,22 +270,22 @@ void dirtest(void)
- 
-   if(mkdir("dir0") < 0){
-     printf(stdout, "mkdir failed\n");
--    exit();
-+    exit(0);
-   }
- 
-   if(chdir("dir0") < 0){
-     printf(stdout, "chdir dir0 failed\n");
--    exit();
-+    exit(0);
-   }
- 
-   if(chdir("..") < 0){
-     printf(stdout, "chdir .. failed\n");
--    exit();
-+    exit(0);
-   }
- 
-   if(unlink("dir0") < 0){
-     printf(stdout, "unlink dir0 failed\n");
--    exit();
-+    exit(0);
-   }
-   printf(stdout, "mkdir test ok\n");
- }
-@@ -296,7 +296,7 @@ exectest(void)
-   printf(stdout, "exec test\n");
-   if(exec("echo", echoargv) < 0){
-     printf(stdout, "exec echo failed\n");
--    exit();
-+    exit(0);
-   }
- }
- 
-@@ -310,7 +310,7 @@ pipe1(void)
- 
-   if(pipe(fds) != 0){
-     printf(1, "pipe() failed\n");
--    exit();
-+    exit(0);
-   }
-   pid = fork();
-   seq = 0;
-@@ -321,10 +321,10 @@ pipe1(void)
-         buf[i] = seq++;
-       if(write(fds[1], buf, 1033) != 1033){
-         printf(1, "pipe1 oops 1\n");
--        exit();
-+        exit(0);
-       }
-     }
--    exit();
-+    exit(0);
-   } else if(pid > 0){
-     close(fds[1]);
-     total = 0;
-@@ -343,13 +343,13 @@ pipe1(void)
-     }
-     if(total != 5 * 1033){
-       printf(1, "pipe1 oops 3 total %d\n", total);
--      exit();
-+      exit(0);
-     }
-     close(fds[0]);
-     wait();
-   } else {
-     printf(1, "fork() failed\n");
--    exit();
-+    exit(0);
-   }
-   printf(1, "pipe1 ok\n");
- }
-@@ -418,7 +418,7 @@ exitwait(void)
-         return;
-       }
-     } else {
--      exit();
-+      exit(0);
-     }
-   }
-   printf(1, "exitwait ok\n");
-@@ -447,11 +447,11 @@ mem(void)
-     if(m1 == 0){
-       printf(1, "couldn't allocate mem?!!\n");
-       kill(ppid);
--      exit();
-+      exit(0);
-     }
-     free(m1);
-     printf(1, "mem ok\n");
--    exit();
-+    exit(0);
-   } else {
-     wait();
-   }
-@@ -484,7 +484,7 @@ sharedfd(void)
-     }
-   }
-   if(pid == 0)
--    exit();
-+    exit(0);
-   else
-     wait();
-   close(fd);
-@@ -508,7 +508,7 @@ sharedfd(void)
-     printf(1, "sharedfd ok\n");
-   } else {
-     printf(1, "sharedfd oops %d %d\n", nc, np);
--    exit();
-+    exit(0);
-   }
- }
- 
-@@ -530,24 +530,24 @@ fourfiles(void)
-     pid = fork();
-     if(pid < 0){
-       printf(1, "fork failed\n");
--      exit();
-+      exit(0);
-     }
- 
-     if(pid == 0){
-       fd = open(fname, O_CREATE | O_RDWR);
-       if(fd < 0){
-         printf(1, "create failed\n");
--        exit();
-+        exit(0);
-       }
- 
-       memset(buf, '0'+pi, 512);
-       for(i = 0; i < 12; i++){
-         if((n = write(fd, buf, 500)) != 500){
-           printf(1, "write failed %d\n", n);
--          exit();
-+          exit(0);
-         }
-       }
--      exit();
-+      exit(0);
-     }
-   }
- 
-@@ -563,7 +563,7 @@ fourfiles(void)
-       for(j = 0; j < n; j++){
-         if(buf[j] != '0'+i){
-           printf(1, "wrong char\n");
--          exit();
-+          exit(0);
-         }
-       }
-       total += n;
-@@ -571,7 +571,7 @@ fourfiles(void)
-     close(fd);
-     if(total != 12*500){
-       printf(1, "wrong length %d\n", total);
--      exit();
-+      exit(0);
-     }
-     unlink(fname);
-   }
-@@ -593,7 +593,7 @@ createdelete(void)
-     pid = fork();
-     if(pid < 0){
-       printf(1, "fork failed\n");
--      exit();
-+      exit(0);
-     }
- 
-     if(pid == 0){
-@@ -604,18 +604,18 @@ createdelete(void)
-         fd = open(name, O_CREATE | O_RDWR);
-         if(fd < 0){
-           printf(1, "create failed\n");
--          exit();
-+          exit(0);
-         }
-         close(fd);
-         if(i > 0 && (i % 2 ) == 0){
-           name[1] = '0' + (i / 2);
-           if(unlink(name) < 0){
-             printf(1, "unlink failed\n");
--            exit();
-+            exit(0);
-           }
-         }
-       }
--      exit();
-+      exit(0);
-     }
-   }
- 
-@@ -631,10 +631,10 @@ createdelete(void)
-       fd = open(name, 0);
-       if((i == 0 || i >= N/2) && fd < 0){
-         printf(1, "oops createdelete %s didn't exist\n", name);
--        exit();
-+        exit(0);
-       } else if((i >= 1 && i < N/2) && fd >= 0){
-         printf(1, "oops createdelete %s did exist\n", name);
--        exit();
-+        exit(0);
-       }
-       if(fd >= 0)
-         close(fd);
-@@ -662,7 +662,7 @@ unlinkread(void)
-   fd = open("unlinkread", O_CREATE | O_RDWR);
-   if(fd < 0){
-     printf(1, "create unlinkread failed\n");
--    exit();
-+    exit(0);
-   }
-   write(fd, "hello", 5);
-   close(fd);
-@@ -670,11 +670,11 @@ unlinkread(void)
-   fd = open("unlinkread", O_RDWR);
-   if(fd < 0){
-     printf(1, "open unlinkread failed\n");
--    exit();
-+    exit(0);
-   }
-   if(unlink("unlinkread") != 0){
-     printf(1, "unlink unlinkread failed\n");
--    exit();
-+    exit(0);
-   }
- 
-   fd1 = open("unlinkread", O_CREATE | O_RDWR);
-@@ -683,15 +683,15 @@ unlinkread(void)
- 
-   if(read(fd, buf, sizeof(buf)) != 5){
-     printf(1, "unlinkread read failed");
--    exit();
-+    exit(0);
-   }
-   if(buf[0] != 'h'){
-     printf(1, "unlinkread wrong data\n");
--    exit();
-+    exit(0);
-   }
-   if(write(fd, buf, 10) != 10){
-     printf(1, "unlinkread write failed\n");
--    exit();
-+    exit(0);
-   }
-   close(fd);
-   unlink("unlinkread");
-@@ -711,50 +711,50 @@ linktest(void)
-   fd = open("lf1", O_CREATE|O_RDWR);
-   if(fd < 0){
-     printf(1, "create lf1 failed\n");
--    exit();
-+    exit(0);
-   }
-   if(write(fd, "hello", 5) != 5){
-     printf(1, "write lf1 failed\n");
--    exit();
-+    exit(0);
-   }
-   close(fd);
- 
-   if(link("lf1", "lf2") < 0){
-     printf(1, "link lf1 lf2 failed\n");
--    exit();
-+    exit(0);
-   }
-   unlink("lf1");
- 
-   if(open("lf1", 0) >= 0){
-     printf(1, "unlinked lf1 but it is still there!\n");
--    exit();
-+    exit(0);
-   }
- 
-   fd = open("lf2", 0);
-   if(fd < 0){
-     printf(1, "open lf2 failed\n");
--    exit();
-+    exit(0);
-   }
-   if(read(fd, buf, sizeof(buf)) != 5){
-     printf(1, "read lf2 failed\n");
--    exit();
-+    exit(0);
-   }
-   close(fd);
- 
-   if(link("lf2", "lf2") >= 0){
-     printf(1, "link lf2 lf2 succeeded! oops\n");
--    exit();
-+    exit(0);
-   }
- 
-   unlink("lf2");
-   if(link("lf2", "lf1") >= 0){
-     printf(1, "link non-existant succeeded! oops\n");
--    exit();
-+    exit(0);
-   }
- 
-   if(link(".", "lf1") >= 0){
-     printf(1, "link . lf1 succeeded! oops\n");
--    exit();
-+    exit(0);
-   }
- 
-   printf(1, "linktest ok\n");
-@@ -787,12 +787,12 @@ concreate(void)
-       fd = open(file, O_CREATE | O_RDWR);
-       if(fd < 0){
-         printf(1, "concreate create %s failed\n", file);
--        exit();
-+        exit(0);
-       }
-       close(fd);
-     }
-     if(pid == 0)
--      exit();
-+      exit(0);
-     else
-       wait();
-   }
-@@ -807,11 +807,11 @@ concreate(void)
-       i = de.name[1] - '0';
-       if(i < 0 || i >= sizeof(fa)){
-         printf(1, "concreate weird file %s\n", de.name);
--        exit();
-+        exit(0);
-       }
-       if(fa[i]){
-         printf(1, "concreate duplicate file %s\n", de.name);
--        exit();
-+        exit(0);
-       }
-       fa[i] = 1;
-       n++;
-@@ -821,7 +821,7 @@ concreate(void)
- 
-   if(n != 40){
-     printf(1, "concreate not enough files in directory listing\n");
--    exit();
-+    exit(0);
-   }
- 
-   for(i = 0; i < 40; i++){
-@@ -829,7 +829,7 @@ concreate(void)
-     pid = fork();
-     if(pid < 0){
-       printf(1, "fork failed\n");
--      exit();
-+      exit(0);
-     }
-     if(((i % 3) == 0 && pid == 0) ||
-        ((i % 3) == 1 && pid != 0)){
-@@ -844,7 +844,7 @@ concreate(void)
-       unlink(file);
-     }
-     if(pid == 0)
--      exit();
-+      exit(0);
-     else
-       wait();
-   }
-@@ -865,7 +865,7 @@ linkunlink()
-   pid = fork();
-   if(pid < 0){
-     printf(1, "fork failed\n");
--    exit();
-+    exit(0);
-   }
- 
-   unsigned int x = (pid ? 1 : 97);
-@@ -883,7 +883,7 @@ linkunlink()
-   if(pid)
-     wait();
-   else
--    exit();
-+    exit(0);
- 
-   printf(1, "linkunlink ok\n");
- }
-@@ -901,7 +901,7 @@ bigdir(void)
-   fd = open("bd", O_CREATE);
-   if(fd < 0){
-     printf(1, "bigdir create failed\n");
--    exit();
-+    exit(0);
-   }
-   close(fd);
- 
-@@ -912,7 +912,7 @@ bigdir(void)
-     name[3] = '\0';
-     if(link("bd", name) != 0){
-       printf(1, "bigdir link failed\n");
--      exit();
-+      exit(0);
-     }
-   }
- 
-@@ -924,7 +924,7 @@ bigdir(void)
-     name[3] = '\0';
-     if(unlink(name) != 0){
-       printf(1, "bigdir unlink failed");
--      exit();
-+      exit(0);
-     }
-   }
- 
-@@ -941,31 +941,31 @@ subdir(void)
-   unlink("ff");
-   if(mkdir("dd") != 0){
-     printf(1, "subdir mkdir dd failed\n");
--    exit();
-+    exit(0);
-   }
- 
-   fd = open("dd/ff", O_CREATE | O_RDWR);
-   if(fd < 0){
-     printf(1, "create dd/ff failed\n");
--    exit();
-+    exit(0);
-   }
-   write(fd, "ff", 2);
-   close(fd);
- 
-   if(unlink("dd") >= 0){
-     printf(1, "unlink dd (non-empty dir) succeeded!\n");
--    exit();
-+    exit(0);
-   }
- 
-   if(mkdir("/dd/dd") != 0){
-     printf(1, "subdir mkdir dd/dd failed\n");
--    exit();
-+    exit(0);
-   }
- 
-   fd = open("dd/dd/ff", O_CREATE | O_RDWR);
-   if(fd < 0){
-     printf(1, "create dd/dd/ff failed\n");
--    exit();
-+    exit(0);
-   }
-   write(fd, "FF", 2);
-   close(fd);
-@@ -973,142 +973,142 @@ subdir(void)
-   fd = open("dd/dd/../ff", 0);
-   if(fd < 0){
-     printf(1, "open dd/dd/../ff failed\n");
--    exit();
-+    exit(0);
-   }
-   cc = read(fd, buf, sizeof(buf));
-   if(cc != 2 || buf[0] != 'f'){
-     printf(1, "dd/dd/../ff wrong content\n");
--    exit();
-+    exit(0);
-   }
-   close(fd);
- 
-   if(link("dd/dd/ff", "dd/dd/ffff") != 0){
-     printf(1, "link dd/dd/ff dd/dd/ffff failed\n");
--    exit();
-+    exit(0);
-   }
- 
-   if(unlink("dd/dd/ff") != 0){
-     printf(1, "unlink dd/dd/ff failed\n");
--    exit();
-+    exit(0);
-   }
-   if(open("dd/dd/ff", O_RDONLY) >= 0){
-     printf(1, "open (unlinked) dd/dd/ff succeeded\n");
--    exit();
-+    exit(0);
-   }
- 
-   if(chdir("dd") != 0){
-     printf(1, "chdir dd failed\n");
--    exit();
-+    exit(0);
-   }
-   if(chdir("dd/../../dd") != 0){
-     printf(1, "chdir dd/../../dd failed\n");
--    exit();
-+    exit(0);
-   }
-   if(chdir("dd/../../../dd") != 0){
-     printf(1, "chdir dd/../../dd failed\n");
--    exit();
-+    exit(0);
-   }
-   if(chdir("./..") != 0){
-     printf(1, "chdir ./.. failed\n");
--    exit();
-+    exit(0);
-   }
- 
-   fd = open("dd/dd/ffff", 0);
-   if(fd < 0){
-     printf(1, "open dd/dd/ffff failed\n");
--    exit();
-+    exit(0);
-   }
-   if(read(fd, buf, sizeof(buf)) != 2){
-     printf(1, "read dd/dd/ffff wrong len\n");
--    exit();
-+    exit(0);
-   }
-   close(fd);
- 
-   if(open("dd/dd/ff", O_RDONLY) >= 0){
-     printf(1, "open (unlinked) dd/dd/ff succeeded!\n");
--    exit();
-+    exit(0);
-   }
- 
-   if(open("dd/ff/ff", O_CREATE|O_RDWR) >= 0){
-     printf(1, "create dd/ff/ff succeeded!\n");
--    exit();
-+    exit(0);
-   }
-   if(open("dd/xx/ff", O_CREATE|O_RDWR) >= 0){
-     printf(1, "create dd/xx/ff succeeded!\n");
--    exit();
-+    exit(0);
-   }
-   if(open("dd", O_CREATE) >= 0){
-     printf(1, "create dd succeeded!\n");
--    exit();
-+    exit(0);
-   }
-   if(open("dd", O_RDWR) >= 0){
-     printf(1, "open dd rdwr succeeded!\n");
--    exit();
-+    exit(0);
-   }
-   if(open("dd", O_WRONLY) >= 0){
-     printf(1, "open dd wronly succeeded!\n");
--    exit();
-+    exit(0);
-   }
-   if(link("dd/ff/ff", "dd/dd/xx") == 0){
-     printf(1, "link dd/ff/ff dd/dd/xx succeeded!\n");
--    exit();
-+    exit(0);
-   }
-   if(link("dd/xx/ff", "dd/dd/xx") == 0){
-     printf(1, "link dd/xx/ff dd/dd/xx succeeded!\n");
--    exit();
-+    exit(0);
-   }
-   if(link("dd/ff", "dd/dd/ffff") == 0){
-     printf(1, "link dd/ff dd/dd/ffff succeeded!\n");
--    exit();
-+    exit(0);
-   }
-   if(mkdir("dd/ff/ff") == 0){
-     printf(1, "mkdir dd/ff/ff succeeded!\n");
--    exit();
-+    exit(0);
-   }
-   if(mkdir("dd/xx/ff") == 0){
-     printf(1, "mkdir dd/xx/ff succeeded!\n");
--    exit();
-+    exit(0);
-   }
-   if(mkdir("dd/dd/ffff") == 0){
-     printf(1, "mkdir dd/dd/ffff succeeded!\n");
--    exit();
-+    exit(0);
-   }
-   if(unlink("dd/xx/ff") == 0){
-     printf(1, "unlink dd/xx/ff succeeded!\n");
--    exit();
-+    exit(0);
-   }
-   if(unlink("dd/ff/ff") == 0){
-     printf(1, "unlink dd/ff/ff succeeded!\n");
--    exit();
-+    exit(0);
-   }
-   if(chdir("dd/ff") == 0){
-     printf(1, "chdir dd/ff succeeded!\n");
--    exit();
-+    exit(0);
-   }
-   if(chdir("dd/xx") == 0){
-     printf(1, "chdir dd/xx succeeded!\n");
--    exit();
-+    exit(0);
-   }
- 
-   if(unlink("dd/dd/ffff") != 0){
-     printf(1, "unlink dd/dd/ff failed\n");
--    exit();
-+    exit(0);
-   }
-   if(unlink("dd/ff") != 0){
-     printf(1, "unlink dd/ff failed\n");
--    exit();
-+    exit(0);
-   }
-   if(unlink("dd") == 0){
-     printf(1, "unlink non-empty dd succeeded!\n");
--    exit();
-+    exit(0);
-   }
-   if(unlink("dd/dd") < 0){
-     printf(1, "unlink dd/dd failed\n");
--    exit();
-+    exit(0);
-   }
-   if(unlink("dd") < 0){
-     printf(1, "unlink dd failed\n");
--    exit();
-+    exit(0);
-   }
- 
-   printf(1, "subdir ok\n");
-@@ -1127,14 +1127,14 @@ bigwrite(void)
-     fd = open("bigwrite", O_CREATE | O_RDWR);
-     if(fd < 0){
-       printf(1, "cannot create bigwrite\n");
--      exit();
-+      exit(0);
-     }
-     int i;
-     for(i = 0; i < 2; i++){
-       int cc = write(fd, buf, sz);
-       if(cc != sz){
-         printf(1, "write(%d) ret %d\n", sz, cc);
--        exit();
-+        exit(0);
-       }
-     }
-     close(fd);
-@@ -1155,13 +1155,13 @@ bigfile(void)
-   fd = open("bigfile", O_CREATE | O_RDWR);
-   if(fd < 0){
-     printf(1, "cannot create bigfile");
--    exit();
-+    exit(0);
-   }
-   for(i = 0; i < 20; i++){
-     memset(buf, i, 600);
-     if(write(fd, buf, 600) != 600){
-       printf(1, "write bigfile failed\n");
--      exit();
-+      exit(0);
-     }
-   }
-   close(fd);
-@@ -1169,31 +1169,31 @@ bigfile(void)
-   fd = open("bigfile", 0);
-   if(fd < 0){
-     printf(1, "cannot open bigfile\n");
--    exit();
-+    exit(0);
-   }
-   total = 0;
-   for(i = 0; ; i++){
-     cc = read(fd, buf, 300);
-     if(cc < 0){
-       printf(1, "read bigfile failed\n");
--      exit();
-+      exit(0);
-     }
-     if(cc == 0)
-       break;
-     if(cc != 300){
-       printf(1, "short read bigfile\n");
--      exit();
-+      exit(0);
-     }
-     if(buf[0] != i/2 || buf[299] != i/2){
-       printf(1, "read bigfile wrong data\n");
--      exit();
-+      exit(0);
-     }
-     total += cc;
-   }
-   close(fd);
-   if(total != 20*600){
-     printf(1, "read bigfile wrong total\n");
--    exit();
-+    exit(0);
-   }
-   unlink("bigfile");
- 
-@@ -1210,32 +1210,32 @@ fourteen(void)
- 
-   if(mkdir("12345678901234") != 0){
-     printf(1, "mkdir 12345678901234 failed\n");
--    exit();
-+    exit(0);
-   }
-   if(mkdir("12345678901234/123456789012345") != 0){
-     printf(1, "mkdir 12345678901234/123456789012345 failed\n");
--    exit();
-+    exit(0);
-   }
-   fd = open("123456789012345/123456789012345/123456789012345", O_CREATE);
-   if(fd < 0){
-     printf(1, "create 123456789012345/123456789012345/123456789012345 failed\n");
--    exit();
-+    exit(0);
-   }
-   close(fd);
-   fd = open("12345678901234/12345678901234/12345678901234", 0);
-   if(fd < 0){
-     printf(1, "open 12345678901234/12345678901234/12345678901234 failed\n");
--    exit();
-+    exit(0);
-   }
-   close(fd);
- 
-   if(mkdir("12345678901234/12345678901234") == 0){
-     printf(1, "mkdir 12345678901234/12345678901234 succeeded!\n");
--    exit();
-+    exit(0);
-   }
-   if(mkdir("123456789012345/12345678901234") == 0){
-     printf(1, "mkdir 12345678901234/123456789012345 succeeded!\n");
--    exit();
-+    exit(0);
-   }
- 
-   printf(1, "fourteen ok\n");
-@@ -1247,35 +1247,35 @@ rmdot(void)
-   printf(1, "rmdot test\n");
-   if(mkdir("dots") != 0){
-     printf(1, "mkdir dots failed\n");
--    exit();
-+    exit(0);
-   }
-   if(chdir("dots") != 0){
-     printf(1, "chdir dots failed\n");
--    exit();
-+    exit(0);
-   }
-   if(unlink(".") == 0){
-     printf(1, "rm . worked!\n");
--    exit();
-+    exit(0);
-   }
-   if(unlink("..") == 0){
-     printf(1, "rm .. worked!\n");
--    exit();
-+    exit(0);
-   }
-   if(chdir("/") != 0){
-     printf(1, "chdir / failed\n");
--    exit();
-+    exit(0);
-   }
-   if(unlink("dots/.") == 0){
-     printf(1, "unlink dots/. worked!\n");
--    exit();
-+    exit(0);
-   }
-   if(unlink("dots/..") == 0){
-     printf(1, "unlink dots/.. worked!\n");
--    exit();
-+    exit(0);
-   }
-   if(unlink("dots") != 0){
-     printf(1, "unlink dots failed!\n");
--    exit();
-+    exit(0);
-   }
-   printf(1, "rmdot ok\n");
- }
-@@ -1290,49 +1290,49 @@ dirfile(void)
-   fd = open("dirfile", O_CREATE);
-   if(fd < 0){
-     printf(1, "create dirfile failed\n");
--    exit();
-+    exit(0);
-   }
-   close(fd);
-   if(chdir("dirfile") == 0){
-     printf(1, "chdir dirfile succeeded!\n");
--    exit();
-+    exit(0);
-   }
-   fd = open("dirfile/xx", 0);
-   if(fd >= 0){
-     printf(1, "create dirfile/xx succeeded!\n");
--    exit();
-+    exit(0);
-   }
-   fd = open("dirfile/xx", O_CREATE);
-   if(fd >= 0){
-     printf(1, "create dirfile/xx succeeded!\n");
--    exit();
-+    exit(0);
-   }
-   if(mkdir("dirfile/xx") == 0){
-     printf(1, "mkdir dirfile/xx succeeded!\n");
--    exit();
-+    exit(0);
-   }
-   if(unlink("dirfile/xx") == 0){
-     printf(1, "unlink dirfile/xx succeeded!\n");
--    exit();
-+    exit(0);
-   }
-   if(link("README", "dirfile/xx") == 0){
-     printf(1, "link to dirfile/xx succeeded!\n");
--    exit();
-+    exit(0);
-   }
-   if(unlink("dirfile") != 0){
-     printf(1, "unlink dirfile failed!\n");
--    exit();
-+    exit(0);
-   }
- 
-   fd = open(".", O_RDWR);
-   if(fd >= 0){
-     printf(1, "open . for writing succeeded!\n");
--    exit();
-+    exit(0);
-   }
-   fd = open(".", 0);
-   if(write(fd, "x", 1) > 0){
-     printf(1, "write . succeeded!\n");
--    exit();
-+    exit(0);
-   }
-   close(fd);
- 
-@@ -1351,11 +1351,11 @@ iref(void)
-   for(i = 0; i < 50 + 1; i++){
-     if(mkdir("irefd") != 0){
-       printf(1, "mkdir irefd failed\n");
--      exit();
-+      exit(0);
-     }
-     if(chdir("irefd") != 0){
-       printf(1, "chdir irefd failed\n");
--      exit();
-+      exit(0);
-     }
- 
-     mkdir("");
-@@ -1388,24 +1388,24 @@ forktest(void)
-     if(pid < 0)
-       break;
-     if(pid == 0)
--      exit();
-+      exit(0);
-   }
- 
-   if(n == 1000){
-     printf(1, "fork claimed to work 1000 times!\n");
--    exit();
-+    exit(0);
-   }
- 
-   for(; n > 0; n--){
-     if(wait() < 0){
-       printf(1, "wait stopped early\n");
--      exit();
-+      exit(0);
-     }
-   }
- 
-   if(wait() != -1){
-     printf(1, "wait got too many\n");
--    exit();
-+    exit(0);
-   }
- 
-   printf(1, "fork test OK\n");
-@@ -1428,7 +1428,7 @@ sbrktest(void)
-     b = sbrk(1);
-     if(b != a){
-       printf(stdout, "sbrk test failed %d %x %x\n", i, a, b);
--      exit();
-+      exit(0);
-     }
-     *b = 1;
-     a = b + 1;
-@@ -1436,16 +1436,16 @@ sbrktest(void)
-   pid = fork();
-   if(pid < 0){
-     printf(stdout, "sbrk test fork failed\n");
--    exit();
-+    exit(0);
-   }
-   c = sbrk(1);
-   c = sbrk(1);
-   if(c != a + 1){
-     printf(stdout, "sbrk test failed post-fork\n");
--    exit();
-+    exit(0);
-   }
-   if(pid == 0)
--    exit();
-+    exit(0);
-   wait();
- 
-   // can one grow address space to something big?
-@@ -1455,7 +1455,7 @@ sbrktest(void)
-   p = sbrk(amt);
-   if (p != a) {
-     printf(stdout, "sbrk test failed to grow big address space; enough phys mem?\n");
--    exit();
-+    exit(0);
-   }
-   lastaddr = (char*) (BIG-1);
-   *lastaddr = 99;
-@@ -1465,12 +1465,12 @@ sbrktest(void)
-   c = sbrk(-4096);
-   if(c == (char*)0xffffffff){
-     printf(stdout, "sbrk could not deallocate\n");
--    exit();
-+    exit(0);
-   }
-   c = sbrk(0);
-   if(c != a - 4096){
-     printf(stdout, "sbrk deallocation produced wrong address, a %x c %x\n", a, c);
--    exit();
-+    exit(0);
-   }
- 
-   // can one re-allocate that page?
-@@ -1478,19 +1478,19 @@ sbrktest(void)
-   c = sbrk(4096);
-   if(c != a || sbrk(0) != a + 4096){
-     printf(stdout, "sbrk re-allocation failed, a %x c %x\n", a, c);
--    exit();
-+    exit(0);
-   }
-   if(*lastaddr == 99){
-     // should be zero
-     printf(stdout, "sbrk de-allocation didn't really deallocate\n");
--    exit();
-+    exit(0);
-   }
- 
-   a = sbrk(0);
-   c = sbrk(-(sbrk(0) - oldbrk));
-   if(c != a){
-     printf(stdout, "sbrk downsize failed, a %x c %x\n", a, c);
--    exit();
-+    exit(0);
-   }
- 
-   // can we read the kernel's memory?
-@@ -1499,12 +1499,12 @@ sbrktest(void)
-     pid = fork();
-     if(pid < 0){
-       printf(stdout, "fork failed\n");
--      exit();
-+      exit(0);
-     }
-     if(pid == 0){
-       printf(stdout, "oops could read %x = %x\n", a, *a);
-       kill(ppid);
--      exit();
-+      exit(0);
-     }
-     wait();
-   }
-@@ -1513,7 +1513,7 @@ sbrktest(void)
-   // failed allocation?
-   if(pipe(fds) != 0){
-     printf(1, "pipe() failed\n");
--    exit();
-+    exit(0);
-   }
-   for(i = 0; i < sizeof(pids)/sizeof(pids[0]); i++){
-     if((pids[i] = fork()) == 0){
-@@ -1537,7 +1537,7 @@ sbrktest(void)
-   }
-   if(c == (char*)0xffffffff){
-     printf(stdout, "failed sbrk leaked memory\n");
--    exit();
-+    exit(0);
-   }
- 
-   if(sbrk(0) > oldbrk)
-@@ -1572,7 +1572,7 @@ validatetest(void)
-     if((pid = fork()) == 0){
-       // try to crash the kernel by passing in a badly placed integer
-       validateint((int*)p);
--      exit();
-+      exit(0);
-     }
-     sleep(0);
-     sleep(0);
-@@ -1582,7 +1582,7 @@ validatetest(void)
-     // try to crash the kernel by passing in a bad string pointer
-     if(link("nosuchfile", (char*)p) != -1){
-       printf(stdout, "link should not succeed\n");
--      exit();
-+      exit(0);
-     }
-   }
- 
-@@ -1600,7 +1600,7 @@ bsstest(void)
-   for(i = 0; i < sizeof(uninit); i++){
-     if(uninit[i] != '\0'){
-       printf(stdout, "bss test failed\n");
--      exit();
-+      exit(0);
-     }
-   }
-   printf(stdout, "bss test ok\n");
-@@ -1627,16 +1627,16 @@ bigargtest(void)
-     printf(stdout, "bigarg test ok\n");
-     fd = open("bigarg-ok", O_CREATE);
-     close(fd);
--    exit();
-+    exit(0);
-   } else if(pid < 0){
-     printf(stdout, "bigargtest: fork failed\n");
--    exit();
-+    exit(0);
-   }
-   wait();
-   fd = open("bigarg-ok", 0);
-   if(fd < 0){
-     printf(stdout, "bigarg test failed!\n");
--    exit();
-+    exit(0);
-   }
-   close(fd);
-   unlink("bigarg-ok");
-@@ -1715,10 +1715,10 @@ uio()
-     port = RTC_DATA;
-     asm volatile("inb %1,%0" : "=a" (val) : "d" (port));
-     printf(1, "uio: uio succeeded; test FAILED\n");
--    exit();
-+    exit(0);
-   } else if(pid < 0){
-     printf (1, "fork failed\n");
--    exit();
-+    exit(0);
-   }
-   wait();
-   printf(1, "uio test done\n");
-@@ -1730,7 +1730,7 @@ void argptest()
-   fd = open("init", O_RDONLY);
-   if (fd < 0) {
-     printf(2, "open failed\n");
--    exit();
-+    exit(0);
-   }
-   read(fd, sbrk(0) - 1, -1);
-   close(fd);
-@@ -1752,7 +1752,7 @@ main(int argc, char *argv[])
- 
-   if(open("usertests.ran", 0) >= 0){
-     printf(1, "already ran user tests -- rebuild fs.img\n");
--    exit();
-+    exit(0);
-   }
-   close(open("usertests.ran", O_CREATE));
- 
-@@ -1799,5 +1799,5 @@ main(int argc, char *argv[])
- 
-   exectest();
- 
--  exit();
-+  exit(0);
- }
-diff --git a/wc.c b/wc.c
-index d6a54df..1d4f708 100644
---- a/wc.c
-+++ b/wc.c
-@@ -27,7 +27,7 @@ wc(int fd, char *name)
-   }
-   if(n < 0){
-     printf(1, "wc: read error\n");
--    exit();
-+    exit(0);
-   }
-   printf(1, "%d %d %d %s\n", l, w, c, name);
- }
-@@ -39,16 +39,16 @@ main(int argc, char *argv[])
- 
-   if(argc <= 1){
-     wc(0, "");
--    exit();
-+    exit(0);
-   }
- 
-   for(i = 1; i < argc; i++){
-     if((fd = open(argv[i], 0)) < 0){
-       printf(1, "wc: cannot open %s\n", argv[i]);
--      exit();
-+      exit(0);
-     }
-     wc(fd, argv[i]);
-     close(fd);
-   }
--  exit();
-+  exit(0);
- }
-diff --git a/zombie.c b/zombie.c
-index ee817da..c96b92d 100644
---- a/zombie.c
-+++ b/zombie.c
-@@ -10,5 +10,5 @@ main(void)
- {
-   if(fork() > 0)
-     sleep(5);  // Let child exit before parent.
--  exit();
-+  exit(0);
- }
diff --git a/pipe.o b/pipe.o
index 5673452..9ae157c 100644
Binary files a/pipe.o and b/pipe.o differ
diff --git a/printf.o b/printf.o
index 979384c..e429caa 100644
Binary files a/printf.o and b/printf.o differ
diff --git a/proc.c b/proc.c
index 622d42d..7933a38 100644
--- a/proc.c
+++ b/proc.c
@@ -7,7 +7,8 @@
 #include "proc.h"
 #include "spinlock.h"
 
-struct {
+struct
+{
   struct spinlock lock;
   struct proc proc[NPROC];
 } ptable;
@@ -20,32 +21,32 @@ extern void trapret(void);
 
 static void wakeup1(void *chan);
 
-void
-pinit(void)
+void pinit(void)
 {
   initlock(&ptable.lock, "ptable");
 }
 
 // Must be called with interrupts disabled
-int
-cpuid() {
-  return mycpu()-cpus;
+int cpuid()
+{
+  return mycpu() - cpus;
 }
 
 // Must be called with interrupts disabled to avoid the caller being
 // rescheduled between reading lapicid and running through the loop.
-struct cpu*
+struct cpu *
 mycpu(void)
 {
   int apicid, i;
-  
-  if(readeflags()&FL_IF)
+
+  if (readeflags() & FL_IF)
     panic("mycpu called with interrupts enabled\n");
-  
+
   apicid = lapicid();
   // APIC IDs are not guaranteed to be contiguous. Maybe we should have
   // a reverse map, or reserve a register to store &cpus[i].
-  for (i = 0; i < ncpu; ++i) {
+  for (i = 0; i < ncpu; ++i)
+  {
     if (cpus[i].apicid == apicid)
       return &cpus[i];
   }
@@ -54,8 +55,9 @@ mycpu(void)
 
 // Disable interrupts so that we are not rescheduled
 // while reading proc from the cpu structure
-struct proc*
-myproc(void) {
+struct proc *
+myproc(void)
+{
   struct cpu *c;
   struct proc *p;
   pushcli();
@@ -65,12 +67,12 @@ myproc(void) {
   return p;
 }
 
-//PAGEBREAK: 32
-// Look in the process table for an UNUSED proc.
-// If found, change state to EMBRYO and initialize
-// state required to run in the kernel.
-// Otherwise return 0.
-static struct proc*
+// PAGEBREAK: 32
+//  Look in the process table for an UNUSED proc.
+//  If found, change state to EMBRYO and initialize
+//  state required to run in the kernel.
+//  Otherwise return 0.
+static struct proc *
 allocproc(void)
 {
   struct proc *p;
@@ -78,8 +80,8 @@ allocproc(void)
 
   acquire(&ptable.lock);
 
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-    if(p->state == UNUSED)
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+    if (p->state == UNUSED)
       goto found;
 
   release(&ptable.lock);
@@ -92,7 +94,8 @@ found:
   release(&ptable.lock);
 
   // Allocate kernel stack.
-  if((p->kstack = kalloc()) == 0){
+  if ((p->kstack = kalloc()) == 0)
+  {
     p->state = UNUSED;
     return 0;
   }
@@ -100,33 +103,32 @@ found:
 
   // Leave room for trap frame.
   sp -= sizeof *p->tf;
-  p->tf = (struct trapframe*)sp;
+  p->tf = (struct trapframe *)sp;
 
   // Set up new context to start executing at forkret,
   // which returns to trapret.
   sp -= 4;
-  *(uint*)sp = (uint)trapret;
+  *(uint *)sp = (uint)trapret;
 
   sp -= sizeof *p->context;
-  p->context = (struct context*)sp;
+  p->context = (struct context *)sp;
   memset(p->context, 0, sizeof *p->context);
   p->context->eip = (uint)forkret;
 
   return p;
 }
 
-//PAGEBREAK: 32
-// Set up first user process.
-void
-userinit(void)
+// PAGEBREAK: 32
+//  Set up first user process.
+void userinit(void)
 {
   struct proc *p;
   extern char _binary_initcode_start[], _binary_initcode_size[];
 
   p = allocproc();
-  
+
   initproc = p;
-  if((p->pgdir = setupkvm()) == 0)
+  if ((p->pgdir = setupkvm()) == 0)
     panic("userinit: out of memory?");
   inituvm(p->pgdir, _binary_initcode_start, (int)_binary_initcode_size);
   p->sz = PGSIZE;
@@ -137,7 +139,7 @@ userinit(void)
   p->tf->ss = p->tf->ds;
   p->tf->eflags = FL_IF;
   p->tf->esp = PGSIZE;
-  p->tf->eip = 0;  // beginning of initcode.S
+  p->tf->eip = 0; // beginning of initcode.S
 
   safestrcpy(p->name, "initcode", sizeof(p->name));
   p->cwd = namei("/");
@@ -155,18 +157,20 @@ userinit(void)
 
 // Grow current process's memory by n bytes.
 // Return 0 on success, -1 on failure.
-int
-growproc(int n)
+int growproc(int n)
 {
   uint sz;
   struct proc *curproc = myproc();
 
   sz = curproc->sz;
-  if(n > 0){
-    if((sz = allocuvm(curproc->pgdir, sz, sz + n)) == 0)
+  if (n > 0)
+  {
+    if ((sz = allocuvm(curproc->pgdir, sz, sz + n)) == 0)
       return -1;
-  } else if(n < 0){
-    if((sz = deallocuvm(curproc->pgdir, sz, sz + n)) == 0)
+  }
+  else if (n < 0)
+  {
+    if ((sz = deallocuvm(curproc->pgdir, sz, sz + n)) == 0)
       return -1;
   }
   curproc->sz = sz;
@@ -177,20 +181,21 @@ growproc(int n)
 // Create a new process copying p as the parent.
 // Sets up stack to return as if from system call.
 // Caller must set state of returned proc to RUNNABLE.
-int
-fork(void)
+int fork(void)
 {
   int i, pid;
   struct proc *np;
   struct proc *curproc = myproc();
 
   // Allocate process.
-  if((np = allocproc()) == 0){
+  if ((np = allocproc()) == 0)
+  {
     return -1;
   }
 
   // Copy process state from proc.
-  if((np->pgdir = copyuvm(curproc->pgdir, curproc->sz)) == 0){
+  if ((np->pgdir = copyuvm(curproc->pgdir, curproc->sz)) == 0)
+  {
     kfree(np->kstack);
     np->kstack = 0;
     np->state = UNUSED;
@@ -203,8 +208,8 @@ fork(void)
   // Clear %eax so that fork returns 0 in the child.
   np->tf->eax = 0;
 
-  for(i = 0; i < NOFILE; i++)
-    if(curproc->ofile[i])
+  for (i = 0; i < NOFILE; i++)
+    if (curproc->ofile[i])
       np->ofile[i] = filedup(curproc->ofile[i]);
   np->cwd = idup(curproc->cwd);
 
@@ -223,20 +228,21 @@ fork(void)
 
 // Exit the current process.  Does not return.
 // An exited process remains in the zombie state
-// until its parent calls wait() to find out it exited.
-void
-exit(int status)
+// until its parent calls wait(0) to find out it exited.
+void exit(int status)
 {
   struct proc *curproc = myproc();
   struct proc *p;
   int fd;
 
-  if(curproc == initproc)
+  if (curproc == initproc)
     panic("init exiting");
 
   // Close all open files.
-  for(fd = 0; fd < NOFILE; fd++){
-    if(curproc->ofile[fd]){
+  for (fd = 0; fd < NOFILE; fd++)
+  {
+    if (curproc->ofile[fd])
+    {
       fileclose(curproc->ofile[fd]);
       curproc->ofile[fd] = 0;
     }
@@ -249,14 +255,16 @@ exit(int status)
 
   acquire(&ptable.lock);
 
-  // Parent might be sleeping in wait().
+  // Parent might be sleeping in wait(0);.
   wakeup1(curproc->parent);
 
   // Pass abandoned children to init.
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-    if(p->parent == curproc){
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+  {
+    if (p->parent == curproc)
+    {
       p->parent = initproc;
-      if(p->state == ZOMBIE)
+      if (p->state == ZOMBIE)
         wakeup1(initproc);
     }
   }
@@ -269,22 +277,24 @@ exit(int status)
 
 // Wait for a child process to exit and return its pid.
 // Return -1 if this process has no children.
-int
-wait(void)
+int wait(int *status)
 {
   struct proc *p;
   int havekids, pid;
   struct proc *curproc = myproc();
-  
+
   acquire(&ptable.lock);
-  for(;;){
+  for (;;)
+  {
     // Scan through table looking for exited children.
     havekids = 0;
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-      if(p->parent != curproc)
+    for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+    {
+      if (p->parent != curproc)
         continue;
       havekids = 1;
-      if(p->state == ZOMBIE){
+      if (p->state == ZOMBIE)
+      {
         // Found one.
         pid = p->pid;
         kfree(p->kstack);
@@ -301,39 +311,41 @@ wait(void)
     }
 
     // No point waiting if we don't have any children.
-    if(!havekids || curproc->killed){
+    if (!havekids || curproc->killed)
+    {
       release(&ptable.lock);
       return -1;
     }
 
     // Wait for children to exit.  (See wakeup1 call in proc_exit.)
-    sleep(curproc, &ptable.lock);  //DOC: wait-sleep
+    sleep(curproc, &ptable.lock); // DOC: wait-sleep
   }
 }
 
-//PAGEBREAK: 42
-// Per-CPU process scheduler.
-// Each CPU calls scheduler() after setting itself up.
-// Scheduler never returns.  It loops, doing:
-//  - choose a process to run
-//  - swtch to start running that process
-//  - eventually that process transfers control
-//      via swtch back to the scheduler.
-void
-scheduler(void)
+// PAGEBREAK: 42
+//  Per-CPU process scheduler.
+//  Each CPU calls scheduler() after setting itself up.
+//  Scheduler never returns.  It loops, doing:
+//   - choose a process to run
+//   - swtch to start running that process
+//   - eventually that process transfers control
+//       via swtch back to the scheduler.
+void scheduler(void)
 {
   struct proc *p;
   struct cpu *c = mycpu();
   c->proc = 0;
-  
-  for(;;){
+
+  for (;;)
+  {
     // Enable interrupts on this processor.
     sti();
 
     // Loop over process table looking for process to run.
     acquire(&ptable.lock);
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-      if(p->state != RUNNABLE)
+    for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+    {
+      if (p->state != RUNNABLE)
         continue;
 
       // Switch to chosen process.  It is the process's job
@@ -351,7 +363,6 @@ scheduler(void)
       c->proc = 0;
     }
     release(&ptable.lock);
-
   }
 }
 
@@ -362,19 +373,18 @@ scheduler(void)
 // be proc->intena and proc->ncli, but that would
 // break in the few places where a lock is held but
 // there's no process.
-void
-sched(void)
+void sched(void)
 {
   int intena;
   struct proc *p = myproc();
 
-  if(!holding(&ptable.lock))
+  if (!holding(&ptable.lock))
     panic("sched ptable.lock");
-  if(mycpu()->ncli != 1)
+  if (mycpu()->ncli != 1)
     panic("sched locks");
-  if(p->state == RUNNING)
+  if (p->state == RUNNING)
     panic("sched running");
-  if(readeflags()&FL_IF)
+  if (readeflags() & FL_IF)
     panic("sched interruptible");
   intena = mycpu()->intena;
   swtch(&p->context, mycpu()->scheduler);
@@ -382,10 +392,9 @@ sched(void)
 }
 
 // Give up the CPU for one scheduling round.
-void
-yield(void)
+void yield(void)
 {
-  acquire(&ptable.lock);  //DOC: yieldlock
+  acquire(&ptable.lock); // DOC: yieldlock
   myproc()->state = RUNNABLE;
   sched();
   release(&ptable.lock);
@@ -393,14 +402,14 @@ yield(void)
 
 // A fork child's very first scheduling by scheduler()
 // will swtch here.  "Return" to user space.
-void
-forkret(void)
+void forkret(void)
 {
   static int first = 1;
   // Still holding ptable.lock from scheduler.
   release(&ptable.lock);
 
-  if (first) {
+  if (first)
+  {
     // Some initialization functions must be run in the context
     // of a regular process (e.g., they call sleep), and thus cannot
     // be run from main().
@@ -414,15 +423,14 @@ forkret(void)
 
 // Atomically release lock and sleep on chan.
 // Reacquires lock when awakened.
-void
-sleep(void *chan, struct spinlock *lk)
+void sleep(void *chan, struct spinlock *lk)
 {
   struct proc *p = myproc();
-  
-  if(p == 0)
+
+  if (p == 0)
     panic("sleep");
 
-  if(lk == 0)
+  if (lk == 0)
     panic("sleep without lk");
 
   // Must acquire ptable.lock in order to
@@ -431,8 +439,9 @@ sleep(void *chan, struct spinlock *lk)
   // guaranteed that we won't miss any wakeup
   // (wakeup runs with ptable.lock locked),
   // so it's okay to release lk.
-  if(lk != &ptable.lock){  //DOC: sleeplock0
-    acquire(&ptable.lock);  //DOC: sleeplock1
+  if (lk != &ptable.lock)
+  {                        // DOC: sleeplock0
+    acquire(&ptable.lock); // DOC: sleeplock1
     release(lk);
   }
   // Go to sleep.
@@ -445,28 +454,28 @@ sleep(void *chan, struct spinlock *lk)
   p->chan = 0;
 
   // Reacquire original lock.
-  if(lk != &ptable.lock){  //DOC: sleeplock2
+  if (lk != &ptable.lock)
+  { // DOC: sleeplock2
     release(&ptable.lock);
     acquire(lk);
   }
 }
 
-//PAGEBREAK!
-// Wake up all processes sleeping on chan.
-// The ptable lock must be held.
+// PAGEBREAK!
+//  Wake up all processes sleeping on chan.
+//  The ptable lock must be held.
 static void
 wakeup1(void *chan)
 {
   struct proc *p;
 
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-    if(p->state == SLEEPING && p->chan == chan)
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+    if (p->state == SLEEPING && p->chan == chan)
       p->state = RUNNABLE;
 }
 
 // Wake up all processes sleeping on chan.
-void
-wakeup(void *chan)
+void wakeup(void *chan)
 {
   acquire(&ptable.lock);
   wakeup1(chan);
@@ -476,17 +485,18 @@ wakeup(void *chan)
 // Kill the process with the given pid.
 // Process won't exit until it returns
 // to user space (see trap in trap.c).
-int
-kill(int pid)
+int kill(int pid)
 {
   struct proc *p;
 
   acquire(&ptable.lock);
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-    if(p->pid == pid){
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+  {
+    if (p->pid == pid)
+    {
       p->killed = 1;
       // Wake process from sleep if necessary.
-      if(p->state == SLEEPING)
+      if (p->state == SLEEPING)
         p->state = RUNNABLE;
       release(&ptable.lock);
       return 0;
@@ -496,37 +506,37 @@ kill(int pid)
   return -1;
 }
 
-//PAGEBREAK: 36
-// Print a process listing to console.  For debugging.
-// Runs when user types ^P on console.
-// No lock to avoid wedging a stuck machine further.
-void
-procdump(void)
+// PAGEBREAK: 36
+//  Print a process listing to console.  For debugging.
+//  Runs when user types ^P on console.
+//  No lock to avoid wedging a stuck machine further.
+void procdump(void)
 {
   static char *states[] = {
-  [UNUSED]    "unused",
-  [EMBRYO]    "embryo",
-  [SLEEPING]  "sleep ",
-  [RUNNABLE]  "runble",
-  [RUNNING]   "run   ",
-  [ZOMBIE]    "zombie"
-  };
+      [UNUSED] "unused",
+      [EMBRYO] "embryo",
+      [SLEEPING] "sleep ",
+      [RUNNABLE] "runble",
+      [RUNNING] "run   ",
+      [ZOMBIE] "zombie"};
   int i;
   struct proc *p;
   char *state;
   uint pc[10];
 
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-    if(p->state == UNUSED)
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+  {
+    if (p->state == UNUSED)
       continue;
-    if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
+    if (p->state >= 0 && p->state < NELEM(states) && states[p->state])
       state = states[p->state];
     else
       state = "???";
     cprintf("%d %s %s", p->pid, state, p->name);
-    if(p->state == SLEEPING){
-      getcallerpcs((uint*)p->context->ebp+2, pc);
-      for(i=0; i<10 && pc[i] != 0; i++)
+    if (p->state == SLEEPING)
+    {
+      getcallerpcs((uint *)p->context->ebp + 2, pc);
+      for (i = 0; i < 10 && pc[i] != 0; i++)
         cprintf(" %p", pc[i]);
     }
     cprintf("\n");
diff --git a/proc.o b/proc.o
index 3e4140f..7c27fc3 100644
Binary files a/proc.o and b/proc.o differ
diff --git a/rm.asm b/rm.asm
index 7c65a29..ec5bd3d 100644
--- a/rm.asm
+++ b/rm.asm
@@ -455,132 +455,106 @@ memmove(void *vdst, const void *vsrc, int n)
  299:	c3                   	ret    
 
 0000029a <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
  29a:	b8 01 00 00 00       	mov    $0x1,%eax
  29f:	cd 40                	int    $0x40
  2a1:	c3                   	ret    
 
 000002a2 <exit>:
-SYSCALL(exit)
  2a2:	b8 02 00 00 00       	mov    $0x2,%eax
  2a7:	cd 40                	int    $0x40
  2a9:	c3                   	ret    
 
 000002aa <wait>:
-SYSCALL(wait)
  2aa:	b8 03 00 00 00       	mov    $0x3,%eax
  2af:	cd 40                	int    $0x40
  2b1:	c3                   	ret    
 
 000002b2 <pipe>:
-SYSCALL(pipe)
  2b2:	b8 04 00 00 00       	mov    $0x4,%eax
  2b7:	cd 40                	int    $0x40
  2b9:	c3                   	ret    
 
 000002ba <read>:
-SYSCALL(read)
  2ba:	b8 05 00 00 00       	mov    $0x5,%eax
  2bf:	cd 40                	int    $0x40
  2c1:	c3                   	ret    
 
 000002c2 <write>:
-SYSCALL(write)
  2c2:	b8 10 00 00 00       	mov    $0x10,%eax
  2c7:	cd 40                	int    $0x40
  2c9:	c3                   	ret    
 
 000002ca <close>:
-SYSCALL(close)
  2ca:	b8 15 00 00 00       	mov    $0x15,%eax
  2cf:	cd 40                	int    $0x40
  2d1:	c3                   	ret    
 
 000002d2 <kill>:
-SYSCALL(kill)
  2d2:	b8 06 00 00 00       	mov    $0x6,%eax
  2d7:	cd 40                	int    $0x40
  2d9:	c3                   	ret    
 
 000002da <exec>:
-SYSCALL(exec)
  2da:	b8 07 00 00 00       	mov    $0x7,%eax
  2df:	cd 40                	int    $0x40
  2e1:	c3                   	ret    
 
 000002e2 <open>:
-SYSCALL(open)
  2e2:	b8 0f 00 00 00       	mov    $0xf,%eax
  2e7:	cd 40                	int    $0x40
  2e9:	c3                   	ret    
 
 000002ea <mknod>:
-SYSCALL(mknod)
  2ea:	b8 11 00 00 00       	mov    $0x11,%eax
  2ef:	cd 40                	int    $0x40
  2f1:	c3                   	ret    
 
 000002f2 <unlink>:
-SYSCALL(unlink)
  2f2:	b8 12 00 00 00       	mov    $0x12,%eax
  2f7:	cd 40                	int    $0x40
  2f9:	c3                   	ret    
 
 000002fa <fstat>:
-SYSCALL(fstat)
  2fa:	b8 08 00 00 00       	mov    $0x8,%eax
  2ff:	cd 40                	int    $0x40
  301:	c3                   	ret    
 
 00000302 <link>:
-SYSCALL(link)
  302:	b8 13 00 00 00       	mov    $0x13,%eax
  307:	cd 40                	int    $0x40
  309:	c3                   	ret    
 
 0000030a <mkdir>:
-SYSCALL(mkdir)
  30a:	b8 14 00 00 00       	mov    $0x14,%eax
  30f:	cd 40                	int    $0x40
  311:	c3                   	ret    
 
 00000312 <chdir>:
-SYSCALL(chdir)
  312:	b8 09 00 00 00       	mov    $0x9,%eax
  317:	cd 40                	int    $0x40
  319:	c3                   	ret    
 
 0000031a <dup>:
-SYSCALL(dup)
  31a:	b8 0a 00 00 00       	mov    $0xa,%eax
  31f:	cd 40                	int    $0x40
  321:	c3                   	ret    
 
 00000322 <getpid>:
-SYSCALL(getpid)
  322:	b8 0b 00 00 00       	mov    $0xb,%eax
  327:	cd 40                	int    $0x40
  329:	c3                   	ret    
 
 0000032a <sbrk>:
-SYSCALL(sbrk)
  32a:	b8 0c 00 00 00       	mov    $0xc,%eax
  32f:	cd 40                	int    $0x40
  331:	c3                   	ret    
 
 00000332 <sleep>:
-SYSCALL(sleep)
  332:	b8 0d 00 00 00       	mov    $0xd,%eax
  337:	cd 40                	int    $0x40
  339:	c3                   	ret    
 
 0000033a <uptime>:
-SYSCALL(uptime)
  33a:	b8 0e 00 00 00       	mov    $0xe,%eax
  33f:	cd 40                	int    $0x40
  341:	c3                   	ret    
diff --git a/rm.o b/rm.o
index 0d6340d..ac9b714 100644
Binary files a/rm.o and b/rm.o differ
diff --git a/sh.asm b/sh.asm
index c1325cf..ccb7431 100644
--- a/sh.asm
+++ b/sh.asm
@@ -5,11 +5,11 @@ _sh:     file format elf32-i386
 Disassembly of section .text:
 
 00000000 <main>:
+    return -1;
   return 0;
 }
 
-int
-main(void)
+int main(void)
 {
        0:	55                   	push   %ebp
        1:	89 e5                	mov    %esp,%ebp
@@ -19,2477 +19,2458 @@ main(void)
   int fd;
 
   // Ensure that three file descriptors are open.
-  while((fd = open("console", O_RDWR)) >= 0){
+  while ((fd = open("console", O_RDWR)) >= 0)
        9:	eb 0e                	jmp    19 <main+0x19>
        b:	90                   	nop
        c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    if(fd >= 3){
+  {
+    if (fd >= 3)
       10:	83 f8 02             	cmp    $0x2,%eax
-      13:	0f 8f d4 00 00 00    	jg     ed <main+0xed>
-  while((fd = open("console", O_RDWR)) >= 0){
+      13:	0f 8f db 00 00 00    	jg     f4 <main+0xf4>
+  while ((fd = open("console", O_RDWR)) >= 0)
       19:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
       20:	00 
-      21:	c7 04 24 39 13 00 00 	movl   $0x1339,(%esp)
-      28:	e8 f5 0d 00 00       	call   e22 <open>
+      21:	c7 04 24 59 13 00 00 	movl   $0x1359,(%esp)
+      28:	e8 15 0e 00 00       	call   e42 <open>
       2d:	85 c0                	test   %eax,%eax
       2f:	79 df                	jns    10 <main+0x10>
-      31:	eb 23                	jmp    56 <main+0x56>
+      31:	eb 2a                	jmp    5d <main+0x5d>
       33:	90                   	nop
       34:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    }
   }
 
   // Read and run input commands.
-  while(getcmd(buf, sizeof(buf)) >= 0){
-    if(buf[0] == 'c' && buf[1] == 'd' && buf[2] == ' '){
-      38:	80 3d 42 19 00 00 20 	cmpb   $0x20,0x1942
+  while (getcmd(buf, sizeof(buf)) >= 0)
+  {
+    if (buf[0] == 'c' && buf[1] == 'd' && buf[2] == ' ')
+      38:	80 3d 62 19 00 00 20 	cmpb   $0x20,0x1962
       3f:	90                   	nop
-      40:	74 67                	je     a9 <main+0xa9>
+      40:	74 6e                	je     b0 <main+0xb0>
       42:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-      buf[strlen(buf)-1] = 0;  // chop \n
-      if(chdir(buf+3) < 0)
-        printf(2, "cannot cd %s\n", buf+3);
+      buf[strlen(buf) - 1] = 0; // chop \n
+      if (chdir(buf + 3) < 0)
+        printf(2, "cannot cd %s\n", buf + 3);
       continue;
     }
-    if(fork1() == 0)
-      48:	e8 43 01 00 00       	call   190 <fork1>
+    if (fork1() == 0)
+      48:	e8 53 01 00 00       	call   1a0 <fork1>
       4d:	85 c0                	test   %eax,%eax
-      4f:	74 38                	je     89 <main+0x89>
+      4f:	74 3f                	je     90 <main+0x90>
       runcmd(parsecmd(buf));
-    wait();
-      51:	e8 94 0d 00 00       	call   dea <wait>
-  while(getcmd(buf, sizeof(buf)) >= 0){
-      56:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
-      5d:	00 
-      5e:	c7 04 24 40 19 00 00 	movl   $0x1940,(%esp)
-      65:	e8 96 00 00 00       	call   100 <getcmd>
-      6a:	85 c0                	test   %eax,%eax
-      6c:	78 2f                	js     9d <main+0x9d>
-    if(buf[0] == 'c' && buf[1] == 'd' && buf[2] == ' '){
-      6e:	80 3d 40 19 00 00 63 	cmpb   $0x63,0x1940
-      75:	75 d1                	jne    48 <main+0x48>
-      77:	80 3d 41 19 00 00 64 	cmpb   $0x64,0x1941
-      7e:	74 b8                	je     38 <main+0x38>
-    if(fork1() == 0)
-      80:	e8 0b 01 00 00       	call   190 <fork1>
-      85:	85 c0                	test   %eax,%eax
-      87:	75 c8                	jne    51 <main+0x51>
+    wait(0);
+      51:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+      58:	e8 ad 0d 00 00       	call   e0a <wait>
+  while (getcmd(buf, sizeof(buf)) >= 0)
+      5d:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
+      64:	00 
+      65:	c7 04 24 60 19 00 00 	movl   $0x1960,(%esp)
+      6c:	e8 9f 00 00 00       	call   110 <getcmd>
+      71:	85 c0                	test   %eax,%eax
+      73:	78 2f                	js     a4 <main+0xa4>
+    if (buf[0] == 'c' && buf[1] == 'd' && buf[2] == ' ')
+      75:	80 3d 60 19 00 00 63 	cmpb   $0x63,0x1960
+      7c:	75 ca                	jne    48 <main+0x48>
+      7e:	80 3d 61 19 00 00 64 	cmpb   $0x64,0x1961
+      85:	74 b1                	je     38 <main+0x38>
+    if (fork1() == 0)
+      87:	e8 14 01 00 00       	call   1a0 <fork1>
+      8c:	85 c0                	test   %eax,%eax
+      8e:	75 c1                	jne    51 <main+0x51>
       runcmd(parsecmd(buf));
-      89:	c7 04 24 40 19 00 00 	movl   $0x1940,(%esp)
-      90:	e8 ab 0a 00 00       	call   b40 <parsecmd>
-      95:	89 04 24             	mov    %eax,(%esp)
-      98:	e8 13 01 00 00       	call   1b0 <runcmd>
+      90:	c7 04 24 60 19 00 00 	movl   $0x1960,(%esp)
+      97:	e8 c4 0a 00 00       	call   b60 <parsecmd>
+      9c:	89 04 24             	mov    %eax,(%esp)
+      9f:	e8 1c 01 00 00       	call   1c0 <runcmd>
+    ;
   }
   exit(0);
-      9d:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-      a4:	e8 39 0d 00 00       	call   de2 <exit>
-      buf[strlen(buf)-1] = 0;  // chop \n
-      a9:	c7 04 24 40 19 00 00 	movl   $0x1940,(%esp)
-      b0:	e8 8b 0b 00 00       	call   c40 <strlen>
-      if(chdir(buf+3) < 0)
-      b5:	c7 04 24 43 19 00 00 	movl   $0x1943,(%esp)
-      buf[strlen(buf)-1] = 0;  // chop \n
-      bc:	c6 80 3f 19 00 00 00 	movb   $0x0,0x193f(%eax)
-      if(chdir(buf+3) < 0)
-      c3:	e8 8a 0d 00 00       	call   e52 <chdir>
-      c8:	85 c0                	test   %eax,%eax
-      ca:	79 8a                	jns    56 <main+0x56>
-        printf(2, "cannot cd %s\n", buf+3);
-      cc:	c7 44 24 08 43 19 00 	movl   $0x1943,0x8(%esp)
-      d3:	00 
-      d4:	c7 44 24 04 41 13 00 	movl   $0x1341,0x4(%esp)
-      db:	00 
-      dc:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-      e3:	e8 48 0e 00 00       	call   f30 <printf>
-      e8:	e9 69 ff ff ff       	jmp    56 <main+0x56>
+      a4:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+      ab:	e8 52 0d 00 00       	call   e02 <exit>
+      buf[strlen(buf) - 1] = 0; // chop \n
+      b0:	c7 04 24 60 19 00 00 	movl   $0x1960,(%esp)
+      b7:	e8 a4 0b 00 00       	call   c60 <strlen>
+      if (chdir(buf + 3) < 0)
+      bc:	c7 04 24 63 19 00 00 	movl   $0x1963,(%esp)
+      buf[strlen(buf) - 1] = 0; // chop \n
+      c3:	c6 80 5f 19 00 00 00 	movb   $0x0,0x195f(%eax)
+      if (chdir(buf + 3) < 0)
+      ca:	e8 a3 0d 00 00       	call   e72 <chdir>
+      cf:	85 c0                	test   %eax,%eax
+      d1:	79 8a                	jns    5d <main+0x5d>
+        printf(2, "cannot cd %s\n", buf + 3);
+      d3:	c7 44 24 08 63 19 00 	movl   $0x1963,0x8(%esp)
+      da:	00 
+      db:	c7 44 24 04 61 13 00 	movl   $0x1361,0x4(%esp)
+      e2:	00 
+      e3:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+      ea:	e8 61 0e 00 00       	call   f50 <printf>
+      ef:	e9 69 ff ff ff       	jmp    5d <main+0x5d>
       close(fd);
-      ed:	89 04 24             	mov    %eax,(%esp)
-      f0:	e8 15 0d 00 00       	call   e0a <close>
+      f4:	89 04 24             	mov    %eax,(%esp)
+      f7:	e8 2e 0d 00 00       	call   e2a <close>
+      fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
       break;
-      f5:	e9 5c ff ff ff       	jmp    56 <main+0x56>
-      fa:	66 90                	xchg   %ax,%ax
-      fc:	66 90                	xchg   %ax,%ax
-      fe:	66 90                	xchg   %ax,%ax
-
-00000100 <getcmd>:
+     100:	e9 58 ff ff ff       	jmp    5d <main+0x5d>
+     105:	66 90                	xchg   %ax,%ax
+     107:	66 90                	xchg   %ax,%ax
+     109:	66 90                	xchg   %ax,%ax
+     10b:	66 90                	xchg   %ax,%ax
+     10d:	66 90                	xchg   %ax,%ax
+     10f:	90                   	nop
+
+00000110 <getcmd>:
 {
-     100:	55                   	push   %ebp
-     101:	89 e5                	mov    %esp,%ebp
-     103:	56                   	push   %esi
-     104:	53                   	push   %ebx
-     105:	83 ec 10             	sub    $0x10,%esp
-     108:	8b 5d 08             	mov    0x8(%ebp),%ebx
-     10b:	8b 75 0c             	mov    0xc(%ebp),%esi
+     110:	55                   	push   %ebp
+     111:	89 e5                	mov    %esp,%ebp
+     113:	56                   	push   %esi
+     114:	53                   	push   %ebx
+     115:	83 ec 10             	sub    $0x10,%esp
+     118:	8b 5d 08             	mov    0x8(%ebp),%ebx
+     11b:	8b 75 0c             	mov    0xc(%ebp),%esi
   printf(2, "$ ");
-     10e:	c7 44 24 04 98 12 00 	movl   $0x1298,0x4(%esp)
-     115:	00 
-     116:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-     11d:	e8 0e 0e 00 00       	call   f30 <printf>
+     11e:	c7 44 24 04 b8 12 00 	movl   $0x12b8,0x4(%esp)
+     125:	00 
+     126:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+     12d:	e8 1e 0e 00 00       	call   f50 <printf>
   memset(buf, 0, nbuf);
-     122:	89 74 24 08          	mov    %esi,0x8(%esp)
-     126:	89 1c 24             	mov    %ebx,(%esp)
-     129:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-     130:	00 
-     131:	e8 3a 0b 00 00       	call   c70 <memset>
+     132:	89 74 24 08          	mov    %esi,0x8(%esp)
+     136:	89 1c 24             	mov    %ebx,(%esp)
+     139:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+     140:	00 
+     141:	e8 4a 0b 00 00       	call   c90 <memset>
   gets(buf, nbuf);
-     136:	89 74 24 04          	mov    %esi,0x4(%esp)
-     13a:	89 1c 24             	mov    %ebx,(%esp)
-     13d:	e8 8e 0b 00 00       	call   cd0 <gets>
-  if(buf[0] == 0) // EOF
-     142:	31 c0                	xor    %eax,%eax
-     144:	80 3b 00             	cmpb   $0x0,(%ebx)
-     147:	0f 94 c0             	sete   %al
+     146:	89 74 24 04          	mov    %esi,0x4(%esp)
+     14a:	89 1c 24             	mov    %ebx,(%esp)
+     14d:	e8 9e 0b 00 00       	call   cf0 <gets>
+  if (buf[0] == 0) // EOF
+     152:	31 c0                	xor    %eax,%eax
+     154:	80 3b 00             	cmpb   $0x0,(%ebx)
+     157:	0f 94 c0             	sete   %al
 }
-     14a:	83 c4 10             	add    $0x10,%esp
-     14d:	5b                   	pop    %ebx
-  if(buf[0] == 0) // EOF
-     14e:	f7 d8                	neg    %eax
+     15a:	83 c4 10             	add    $0x10,%esp
+     15d:	5b                   	pop    %ebx
+  if (buf[0] == 0) // EOF
+     15e:	f7 d8                	neg    %eax
 }
-     150:	5e                   	pop    %esi
-     151:	5d                   	pop    %ebp
-     152:	c3                   	ret    
-     153:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-     159:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+     160:	5e                   	pop    %esi
+     161:	5d                   	pop    %ebp
+     162:	c3                   	ret    
+     163:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+     169:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-00000160 <panic>:
+00000170 <panic>:
 }
 
-void
-panic(char *s)
+void panic(char *s)
 {
-     160:	55                   	push   %ebp
-     161:	89 e5                	mov    %esp,%ebp
-     163:	83 ec 18             	sub    $0x18,%esp
+     170:	55                   	push   %ebp
+     171:	89 e5                	mov    %esp,%ebp
+     173:	83 ec 18             	sub    $0x18,%esp
   printf(2, "%s\n", s);
-     166:	8b 45 08             	mov    0x8(%ebp),%eax
-     169:	c7 44 24 04 35 13 00 	movl   $0x1335,0x4(%esp)
-     170:	00 
-     171:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-     178:	89 44 24 08          	mov    %eax,0x8(%esp)
-     17c:	e8 af 0d 00 00       	call   f30 <printf>
+     176:	8b 45 08             	mov    0x8(%ebp),%eax
+     179:	c7 44 24 04 55 13 00 	movl   $0x1355,0x4(%esp)
+     180:	00 
+     181:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+     188:	89 44 24 08          	mov    %eax,0x8(%esp)
+     18c:	e8 bf 0d 00 00       	call   f50 <printf>
   exit(0);
-     181:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-     188:	e8 55 0c 00 00       	call   de2 <exit>
-     18d:	8d 76 00             	lea    0x0(%esi),%esi
+     191:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+     198:	e8 65 0c 00 00       	call   e02 <exit>
+     19d:	8d 76 00             	lea    0x0(%esi),%esi
 
-00000190 <fork1>:
+000001a0 <fork1>:
 }
 
-int
-fork1(void)
+int fork1(void)
 {
-     190:	55                   	push   %ebp
-     191:	89 e5                	mov    %esp,%ebp
-     193:	83 ec 18             	sub    $0x18,%esp
+     1a0:	55                   	push   %ebp
+     1a1:	89 e5                	mov    %esp,%ebp
+     1a3:	83 ec 18             	sub    $0x18,%esp
   int pid;
 
   pid = fork();
-     196:	e8 3f 0c 00 00       	call   dda <fork>
-  if(pid == -1)
-     19b:	83 f8 ff             	cmp    $0xffffffff,%eax
-     19e:	74 02                	je     1a2 <fork1+0x12>
+     1a6:	e8 4f 0c 00 00       	call   dfa <fork>
+  if (pid == -1)
+     1ab:	83 f8 ff             	cmp    $0xffffffff,%eax
+     1ae:	74 02                	je     1b2 <fork1+0x12>
     panic("fork");
   return pid;
 }
-     1a0:	c9                   	leave  
-     1a1:	c3                   	ret    
+     1b0:	c9                   	leave  
+     1b1:	c3                   	ret    
     panic("fork");
-     1a2:	c7 04 24 9b 12 00 00 	movl   $0x129b,(%esp)
-     1a9:	e8 b2 ff ff ff       	call   160 <panic>
-     1ae:	66 90                	xchg   %ax,%ax
+     1b2:	c7 04 24 bb 12 00 00 	movl   $0x12bb,(%esp)
+     1b9:	e8 b2 ff ff ff       	call   170 <panic>
+     1be:	66 90                	xchg   %ax,%ax
 
-000001b0 <runcmd>:
+000001c0 <runcmd>:
 {
-     1b0:	55                   	push   %ebp
-     1b1:	89 e5                	mov    %esp,%ebp
-     1b3:	53                   	push   %ebx
-     1b4:	83 ec 24             	sub    $0x24,%esp
-     1b7:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  if(cmd == 0)
-     1ba:	85 db                	test   %ebx,%ebx
-     1bc:	74 5f                	je     21d <runcmd+0x6d>
-  switch(cmd->type){
-     1be:	83 3b 05             	cmpl   $0x5,(%ebx)
-     1c1:	0f 87 e7 00 00 00    	ja     2ae <runcmd+0xfe>
-     1c7:	8b 03                	mov    (%ebx),%eax
-     1c9:	ff 24 85 50 13 00 00 	jmp    *0x1350(,%eax,4)
-    if(pipe(p) < 0)
-     1d0:	8d 45 f0             	lea    -0x10(%ebp),%eax
-     1d3:	89 04 24             	mov    %eax,(%esp)
-     1d6:	e8 17 0c 00 00       	call   df2 <pipe>
-     1db:	85 c0                	test   %eax,%eax
-     1dd:	0f 88 d7 00 00 00    	js     2ba <runcmd+0x10a>
-    if(fork1() == 0){
-     1e3:	e8 a8 ff ff ff       	call   190 <fork1>
-     1e8:	85 c0                	test   %eax,%eax
-     1ea:	0f 84 2e 01 00 00    	je     31e <runcmd+0x16e>
-    if(fork1() == 0){
-     1f0:	e8 9b ff ff ff       	call   190 <fork1>
-     1f5:	85 c0                	test   %eax,%eax
-     1f7:	0f 84 e9 00 00 00    	je     2e6 <runcmd+0x136>
+     1c0:	55                   	push   %ebp
+     1c1:	89 e5                	mov    %esp,%ebp
+     1c3:	53                   	push   %ebx
+     1c4:	83 ec 24             	sub    $0x24,%esp
+     1c7:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  if (cmd == 0)
+     1ca:	85 db                	test   %ebx,%ebx
+     1cc:	74 6d                	je     23b <runcmd+0x7b>
+  switch (cmd->type)
+     1ce:	83 3b 05             	cmpl   $0x5,(%ebx)
+     1d1:	0f 87 fe 00 00 00    	ja     2d5 <runcmd+0x115>
+     1d7:	8b 03                	mov    (%ebx),%eax
+     1d9:	ff 24 85 70 13 00 00 	jmp    *0x1370(,%eax,4)
+    if (pipe(p) < 0)
+     1e0:	8d 45 f0             	lea    -0x10(%ebp),%eax
+     1e3:	89 04 24             	mov    %eax,(%esp)
+     1e6:	e8 27 0c 00 00       	call   e12 <pipe>
+     1eb:	85 c0                	test   %eax,%eax
+     1ed:	0f 88 ee 00 00 00    	js     2e1 <runcmd+0x121>
+    if (fork1() == 0)
+     1f3:	e8 a8 ff ff ff       	call   1a0 <fork1>
+     1f8:	85 c0                	test   %eax,%eax
+     1fa:	0f 84 45 01 00 00    	je     345 <runcmd+0x185>
+    if (fork1() == 0)
+     200:	e8 9b ff ff ff       	call   1a0 <fork1>
+     205:	85 c0                	test   %eax,%eax
+     207:	0f 84 00 01 00 00    	je     30d <runcmd+0x14d>
     close(p[0]);
-     1fd:	8b 45 f0             	mov    -0x10(%ebp),%eax
-     200:	89 04 24             	mov    %eax,(%esp)
-     203:	e8 02 0c 00 00       	call   e0a <close>
+     20d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+     210:	89 04 24             	mov    %eax,(%esp)
+     213:	e8 12 0c 00 00       	call   e2a <close>
     close(p[1]);
-     208:	8b 45 f4             	mov    -0xc(%ebp),%eax
-     20b:	89 04 24             	mov    %eax,(%esp)
-     20e:	e8 f7 0b 00 00       	call   e0a <close>
-    wait();
-     213:	e8 d2 0b 00 00       	call   dea <wait>
-    wait();
-     218:	e8 cd 0b 00 00       	call   dea <wait>
+     218:	8b 45 f4             	mov    -0xc(%ebp),%eax
+     21b:	89 04 24             	mov    %eax,(%esp)
+     21e:	e8 07 0c 00 00       	call   e2a <close>
+    wait(0);
+     223:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+     22a:	e8 db 0b 00 00       	call   e0a <wait>
+    wait(0);
+     22f:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+     236:	e8 cf 0b 00 00       	call   e0a <wait>
       exit(0);
-     21d:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-     224:	e8 b9 0b 00 00       	call   de2 <exit>
-    if(fork1() == 0)
-     229:	e8 62 ff ff ff       	call   190 <fork1>
-     22e:	85 c0                	test   %eax,%eax
-     230:	75 eb                	jne    21d <runcmd+0x6d>
-     232:	eb 6f                	jmp    2a3 <runcmd+0xf3>
-    if(ecmd->argv[0] == 0)
-     234:	8b 43 04             	mov    0x4(%ebx),%eax
-     237:	85 c0                	test   %eax,%eax
-     239:	74 e2                	je     21d <runcmd+0x6d>
+     23b:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+     242:	e8 bb 0b 00 00       	call   e02 <exit>
+    if (fork1() == 0)
+     247:	e8 54 ff ff ff       	call   1a0 <fork1>
+     24c:	85 c0                	test   %eax,%eax
+     24e:	75 eb                	jne    23b <runcmd+0x7b>
+     250:	eb 78                	jmp    2ca <runcmd+0x10a>
+    if (ecmd->argv[0] == 0)
+     252:	8b 43 04             	mov    0x4(%ebx),%eax
+     255:	85 c0                	test   %eax,%eax
+     257:	74 e2                	je     23b <runcmd+0x7b>
     exec(ecmd->argv[0], ecmd->argv);
-     23b:	8d 53 04             	lea    0x4(%ebx),%edx
-     23e:	89 54 24 04          	mov    %edx,0x4(%esp)
-     242:	89 04 24             	mov    %eax,(%esp)
-     245:	e8 d0 0b 00 00       	call   e1a <exec>
+     259:	8d 53 04             	lea    0x4(%ebx),%edx
+     25c:	89 54 24 04          	mov    %edx,0x4(%esp)
+     260:	89 04 24             	mov    %eax,(%esp)
+     263:	e8 d2 0b 00 00       	call   e3a <exec>
     printf(2, "exec %s failed\n", ecmd->argv[0]);
-     24a:	8b 43 04             	mov    0x4(%ebx),%eax
-     24d:	c7 44 24 04 a7 12 00 	movl   $0x12a7,0x4(%esp)
-     254:	00 
-     255:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-     25c:	89 44 24 08          	mov    %eax,0x8(%esp)
-     260:	e8 cb 0c 00 00       	call   f30 <printf>
+     268:	8b 43 04             	mov    0x4(%ebx),%eax
+     26b:	c7 44 24 04 c7 12 00 	movl   $0x12c7,0x4(%esp)
+     272:	00 
+     273:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+     27a:	89 44 24 08          	mov    %eax,0x8(%esp)
+     27e:	e8 cd 0c 00 00       	call   f50 <printf>
     break;
-     265:	eb b6                	jmp    21d <runcmd+0x6d>
-    if(fork1() == 0)
-     267:	e8 24 ff ff ff       	call   190 <fork1>
-     26c:	85 c0                	test   %eax,%eax
-     26e:	66 90                	xchg   %ax,%ax
-     270:	74 31                	je     2a3 <runcmd+0xf3>
-    wait();
-     272:	e8 73 0b 00 00       	call   dea <wait>
+     283:	eb b6                	jmp    23b <runcmd+0x7b>
+    if (fork1() == 0)
+     285:	e8 16 ff ff ff       	call   1a0 <fork1>
+     28a:	85 c0                	test   %eax,%eax
+     28c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     290:	74 38                	je     2ca <runcmd+0x10a>
+    wait(0);
+     292:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+     299:	e8 6c 0b 00 00       	call   e0a <wait>
     runcmd(lcmd->right);
-     277:	8b 43 08             	mov    0x8(%ebx),%eax
-     27a:	89 04 24             	mov    %eax,(%esp)
-     27d:	e8 2e ff ff ff       	call   1b0 <runcmd>
+     29e:	8b 43 08             	mov    0x8(%ebx),%eax
+     2a1:	89 04 24             	mov    %eax,(%esp)
+     2a4:	e8 17 ff ff ff       	call   1c0 <runcmd>
     close(rcmd->fd);
-     282:	8b 43 14             	mov    0x14(%ebx),%eax
-     285:	89 04 24             	mov    %eax,(%esp)
-     288:	e8 7d 0b 00 00       	call   e0a <close>
-    if(open(rcmd->file, rcmd->mode) < 0){
-     28d:	8b 43 10             	mov    0x10(%ebx),%eax
-     290:	89 44 24 04          	mov    %eax,0x4(%esp)
-     294:	8b 43 08             	mov    0x8(%ebx),%eax
-     297:	89 04 24             	mov    %eax,(%esp)
-     29a:	e8 83 0b 00 00       	call   e22 <open>
-     29f:	85 c0                	test   %eax,%eax
-     2a1:	78 23                	js     2c6 <runcmd+0x116>
+     2a9:	8b 43 14             	mov    0x14(%ebx),%eax
+     2ac:	89 04 24             	mov    %eax,(%esp)
+     2af:	e8 76 0b 00 00       	call   e2a <close>
+    if (open(rcmd->file, rcmd->mode) < 0)
+     2b4:	8b 43 10             	mov    0x10(%ebx),%eax
+     2b7:	89 44 24 04          	mov    %eax,0x4(%esp)
+     2bb:	8b 43 08             	mov    0x8(%ebx),%eax
+     2be:	89 04 24             	mov    %eax,(%esp)
+     2c1:	e8 7c 0b 00 00       	call   e42 <open>
+     2c6:	85 c0                	test   %eax,%eax
+     2c8:	78 23                	js     2ed <runcmd+0x12d>
       runcmd(bcmd->cmd);
-     2a3:	8b 43 04             	mov    0x4(%ebx),%eax
-     2a6:	89 04 24             	mov    %eax,(%esp)
-     2a9:	e8 02 ff ff ff       	call   1b0 <runcmd>
+     2ca:	8b 43 04             	mov    0x4(%ebx),%eax
+     2cd:	89 04 24             	mov    %eax,(%esp)
+     2d0:	e8 eb fe ff ff       	call   1c0 <runcmd>
     panic("runcmd");
-     2ae:	c7 04 24 a0 12 00 00 	movl   $0x12a0,(%esp)
-     2b5:	e8 a6 fe ff ff       	call   160 <panic>
+     2d5:	c7 04 24 c0 12 00 00 	movl   $0x12c0,(%esp)
+     2dc:	e8 8f fe ff ff       	call   170 <panic>
       panic("pipe");
-     2ba:	c7 04 24 c7 12 00 00 	movl   $0x12c7,(%esp)
-     2c1:	e8 9a fe ff ff       	call   160 <panic>
+     2e1:	c7 04 24 e7 12 00 00 	movl   $0x12e7,(%esp)
+     2e8:	e8 83 fe ff ff       	call   170 <panic>
       printf(2, "open %s failed\n", rcmd->file);
-     2c6:	8b 43 08             	mov    0x8(%ebx),%eax
-     2c9:	c7 44 24 04 b7 12 00 	movl   $0x12b7,0x4(%esp)
-     2d0:	00 
-     2d1:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-     2d8:	89 44 24 08          	mov    %eax,0x8(%esp)
-     2dc:	e8 4f 0c 00 00       	call   f30 <printf>
-     2e1:	e9 37 ff ff ff       	jmp    21d <runcmd+0x6d>
+     2ed:	8b 43 08             	mov    0x8(%ebx),%eax
+     2f0:	c7 44 24 04 d7 12 00 	movl   $0x12d7,0x4(%esp)
+     2f7:	00 
+     2f8:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+     2ff:	89 44 24 08          	mov    %eax,0x8(%esp)
+     303:	e8 48 0c 00 00       	call   f50 <printf>
+     308:	e9 2e ff ff ff       	jmp    23b <runcmd+0x7b>
       close(0);
-     2e6:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-     2ed:	e8 18 0b 00 00       	call   e0a <close>
+     30d:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+     314:	e8 11 0b 00 00       	call   e2a <close>
       dup(p[0]);
-     2f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
-     2f5:	89 04 24             	mov    %eax,(%esp)
-     2f8:	e8 5d 0b 00 00       	call   e5a <dup>
+     319:	8b 45 f0             	mov    -0x10(%ebp),%eax
+     31c:	89 04 24             	mov    %eax,(%esp)
+     31f:	e8 56 0b 00 00       	call   e7a <dup>
       close(p[0]);
-     2fd:	8b 45 f0             	mov    -0x10(%ebp),%eax
-     300:	89 04 24             	mov    %eax,(%esp)
-     303:	e8 02 0b 00 00       	call   e0a <close>
+     324:	8b 45 f0             	mov    -0x10(%ebp),%eax
+     327:	89 04 24             	mov    %eax,(%esp)
+     32a:	e8 fb 0a 00 00       	call   e2a <close>
       close(p[1]);
-     308:	8b 45 f4             	mov    -0xc(%ebp),%eax
-     30b:	89 04 24             	mov    %eax,(%esp)
-     30e:	e8 f7 0a 00 00       	call   e0a <close>
+     32f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+     332:	89 04 24             	mov    %eax,(%esp)
+     335:	e8 f0 0a 00 00       	call   e2a <close>
       runcmd(pcmd->right);
-     313:	8b 43 08             	mov    0x8(%ebx),%eax
-     316:	89 04 24             	mov    %eax,(%esp)
-     319:	e8 92 fe ff ff       	call   1b0 <runcmd>
+     33a:	8b 43 08             	mov    0x8(%ebx),%eax
+     33d:	89 04 24             	mov    %eax,(%esp)
+     340:	e8 7b fe ff ff       	call   1c0 <runcmd>
       close(1);
-     31e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-     325:	e8 e0 0a 00 00       	call   e0a <close>
+     345:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+     34c:	e8 d9 0a 00 00       	call   e2a <close>
       dup(p[1]);
-     32a:	8b 45 f4             	mov    -0xc(%ebp),%eax
-     32d:	89 04 24             	mov    %eax,(%esp)
-     330:	e8 25 0b 00 00       	call   e5a <dup>
+     351:	8b 45 f4             	mov    -0xc(%ebp),%eax
+     354:	89 04 24             	mov    %eax,(%esp)
+     357:	e8 1e 0b 00 00       	call   e7a <dup>
       close(p[0]);
-     335:	8b 45 f0             	mov    -0x10(%ebp),%eax
-     338:	89 04 24             	mov    %eax,(%esp)
-     33b:	e8 ca 0a 00 00       	call   e0a <close>
+     35c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+     35f:	89 04 24             	mov    %eax,(%esp)
+     362:	e8 c3 0a 00 00       	call   e2a <close>
       close(p[1]);
-     340:	8b 45 f4             	mov    -0xc(%ebp),%eax
-     343:	89 04 24             	mov    %eax,(%esp)
-     346:	e8 bf 0a 00 00       	call   e0a <close>
+     367:	8b 45 f4             	mov    -0xc(%ebp),%eax
+     36a:	89 04 24             	mov    %eax,(%esp)
+     36d:	e8 b8 0a 00 00       	call   e2a <close>
       runcmd(pcmd->left);
-     34b:	8b 43 04             	mov    0x4(%ebx),%eax
-     34e:	89 04 24             	mov    %eax,(%esp)
-     351:	e8 5a fe ff ff       	call   1b0 <runcmd>
-     356:	8d 76 00             	lea    0x0(%esi),%esi
-     359:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+     372:	8b 43 04             	mov    0x4(%ebx),%eax
+     375:	89 04 24             	mov    %eax,(%esp)
+     378:	e8 43 fe ff ff       	call   1c0 <runcmd>
+     37d:	8d 76 00             	lea    0x0(%esi),%esi
 
-00000360 <execcmd>:
-//PAGEBREAK!
-// Constructors
+00000380 <execcmd>:
+// PAGEBREAK!
+//  Constructors
 
-struct cmd*
+struct cmd *
 execcmd(void)
 {
-     360:	55                   	push   %ebp
-     361:	89 e5                	mov    %esp,%ebp
-     363:	53                   	push   %ebx
-     364:	83 ec 14             	sub    $0x14,%esp
+     380:	55                   	push   %ebp
+     381:	89 e5                	mov    %esp,%ebp
+     383:	53                   	push   %ebx
+     384:	83 ec 14             	sub    $0x14,%esp
   struct execcmd *cmd;
 
   cmd = malloc(sizeof(*cmd));
-     367:	c7 04 24 54 00 00 00 	movl   $0x54,(%esp)
-     36e:	e8 3d 0e 00 00       	call   11b0 <malloc>
+     387:	c7 04 24 54 00 00 00 	movl   $0x54,(%esp)
+     38e:	e8 3d 0e 00 00       	call   11d0 <malloc>
   memset(cmd, 0, sizeof(*cmd));
-     373:	c7 44 24 08 54 00 00 	movl   $0x54,0x8(%esp)
-     37a:	00 
-     37b:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-     382:	00 
+     393:	c7 44 24 08 54 00 00 	movl   $0x54,0x8(%esp)
+     39a:	00 
+     39b:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+     3a2:	00 
   cmd = malloc(sizeof(*cmd));
-     383:	89 c3                	mov    %eax,%ebx
+     3a3:	89 c3                	mov    %eax,%ebx
   memset(cmd, 0, sizeof(*cmd));
-     385:	89 04 24             	mov    %eax,(%esp)
-     388:	e8 e3 08 00 00       	call   c70 <memset>
+     3a5:	89 04 24             	mov    %eax,(%esp)
+     3a8:	e8 e3 08 00 00       	call   c90 <memset>
   cmd->type = EXEC;
-  return (struct cmd*)cmd;
+  return (struct cmd *)cmd;
 }
-     38d:	89 d8                	mov    %ebx,%eax
+     3ad:	89 d8                	mov    %ebx,%eax
   cmd->type = EXEC;
-     38f:	c7 03 01 00 00 00    	movl   $0x1,(%ebx)
+     3af:	c7 03 01 00 00 00    	movl   $0x1,(%ebx)
 }
-     395:	83 c4 14             	add    $0x14,%esp
-     398:	5b                   	pop    %ebx
-     399:	5d                   	pop    %ebp
-     39a:	c3                   	ret    
-     39b:	90                   	nop
-     39c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     3b5:	83 c4 14             	add    $0x14,%esp
+     3b8:	5b                   	pop    %ebx
+     3b9:	5d                   	pop    %ebp
+     3ba:	c3                   	ret    
+     3bb:	90                   	nop
+     3bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-000003a0 <redircmd>:
+000003c0 <redircmd>:
 
-struct cmd*
+struct cmd *
 redircmd(struct cmd *subcmd, char *file, char *efile, int mode, int fd)
 {
-     3a0:	55                   	push   %ebp
-     3a1:	89 e5                	mov    %esp,%ebp
-     3a3:	53                   	push   %ebx
-     3a4:	83 ec 14             	sub    $0x14,%esp
+     3c0:	55                   	push   %ebp
+     3c1:	89 e5                	mov    %esp,%ebp
+     3c3:	53                   	push   %ebx
+     3c4:	83 ec 14             	sub    $0x14,%esp
   struct redircmd *cmd;
 
   cmd = malloc(sizeof(*cmd));
-     3a7:	c7 04 24 18 00 00 00 	movl   $0x18,(%esp)
-     3ae:	e8 fd 0d 00 00       	call   11b0 <malloc>
+     3c7:	c7 04 24 18 00 00 00 	movl   $0x18,(%esp)
+     3ce:	e8 fd 0d 00 00       	call   11d0 <malloc>
   memset(cmd, 0, sizeof(*cmd));
-     3b3:	c7 44 24 08 18 00 00 	movl   $0x18,0x8(%esp)
-     3ba:	00 
-     3bb:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-     3c2:	00 
-     3c3:	89 04 24             	mov    %eax,(%esp)
+     3d3:	c7 44 24 08 18 00 00 	movl   $0x18,0x8(%esp)
+     3da:	00 
+     3db:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+     3e2:	00 
+     3e3:	89 04 24             	mov    %eax,(%esp)
   cmd = malloc(sizeof(*cmd));
-     3c6:	89 c3                	mov    %eax,%ebx
+     3e6:	89 c3                	mov    %eax,%ebx
   memset(cmd, 0, sizeof(*cmd));
-     3c8:	e8 a3 08 00 00       	call   c70 <memset>
+     3e8:	e8 a3 08 00 00       	call   c90 <memset>
   cmd->type = REDIR;
   cmd->cmd = subcmd;
-     3cd:	8b 45 08             	mov    0x8(%ebp),%eax
+     3ed:	8b 45 08             	mov    0x8(%ebp),%eax
   cmd->type = REDIR;
-     3d0:	c7 03 02 00 00 00    	movl   $0x2,(%ebx)
+     3f0:	c7 03 02 00 00 00    	movl   $0x2,(%ebx)
   cmd->cmd = subcmd;
-     3d6:	89 43 04             	mov    %eax,0x4(%ebx)
+     3f6:	89 43 04             	mov    %eax,0x4(%ebx)
   cmd->file = file;
-     3d9:	8b 45 0c             	mov    0xc(%ebp),%eax
-     3dc:	89 43 08             	mov    %eax,0x8(%ebx)
+     3f9:	8b 45 0c             	mov    0xc(%ebp),%eax
+     3fc:	89 43 08             	mov    %eax,0x8(%ebx)
   cmd->efile = efile;
-     3df:	8b 45 10             	mov    0x10(%ebp),%eax
-     3e2:	89 43 0c             	mov    %eax,0xc(%ebx)
+     3ff:	8b 45 10             	mov    0x10(%ebp),%eax
+     402:	89 43 0c             	mov    %eax,0xc(%ebx)
   cmd->mode = mode;
-     3e5:	8b 45 14             	mov    0x14(%ebp),%eax
-     3e8:	89 43 10             	mov    %eax,0x10(%ebx)
+     405:	8b 45 14             	mov    0x14(%ebp),%eax
+     408:	89 43 10             	mov    %eax,0x10(%ebx)
   cmd->fd = fd;
-     3eb:	8b 45 18             	mov    0x18(%ebp),%eax
-     3ee:	89 43 14             	mov    %eax,0x14(%ebx)
-  return (struct cmd*)cmd;
+     40b:	8b 45 18             	mov    0x18(%ebp),%eax
+     40e:	89 43 14             	mov    %eax,0x14(%ebx)
+  return (struct cmd *)cmd;
 }
-     3f1:	83 c4 14             	add    $0x14,%esp
-     3f4:	89 d8                	mov    %ebx,%eax
-     3f6:	5b                   	pop    %ebx
-     3f7:	5d                   	pop    %ebp
-     3f8:	c3                   	ret    
-     3f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     411:	83 c4 14             	add    $0x14,%esp
+     414:	89 d8                	mov    %ebx,%eax
+     416:	5b                   	pop    %ebx
+     417:	5d                   	pop    %ebp
+     418:	c3                   	ret    
+     419:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-00000400 <pipecmd>:
+00000420 <pipecmd>:
 
-struct cmd*
+struct cmd *
 pipecmd(struct cmd *left, struct cmd *right)
 {
-     400:	55                   	push   %ebp
-     401:	89 e5                	mov    %esp,%ebp
-     403:	53                   	push   %ebx
-     404:	83 ec 14             	sub    $0x14,%esp
+     420:	55                   	push   %ebp
+     421:	89 e5                	mov    %esp,%ebp
+     423:	53                   	push   %ebx
+     424:	83 ec 14             	sub    $0x14,%esp
   struct pipecmd *cmd;
 
   cmd = malloc(sizeof(*cmd));
-     407:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
-     40e:	e8 9d 0d 00 00       	call   11b0 <malloc>
+     427:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
+     42e:	e8 9d 0d 00 00       	call   11d0 <malloc>
   memset(cmd, 0, sizeof(*cmd));
-     413:	c7 44 24 08 0c 00 00 	movl   $0xc,0x8(%esp)
-     41a:	00 
-     41b:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-     422:	00 
-     423:	89 04 24             	mov    %eax,(%esp)
+     433:	c7 44 24 08 0c 00 00 	movl   $0xc,0x8(%esp)
+     43a:	00 
+     43b:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+     442:	00 
+     443:	89 04 24             	mov    %eax,(%esp)
   cmd = malloc(sizeof(*cmd));
-     426:	89 c3                	mov    %eax,%ebx
+     446:	89 c3                	mov    %eax,%ebx
   memset(cmd, 0, sizeof(*cmd));
-     428:	e8 43 08 00 00       	call   c70 <memset>
+     448:	e8 43 08 00 00       	call   c90 <memset>
   cmd->type = PIPE;
   cmd->left = left;
-     42d:	8b 45 08             	mov    0x8(%ebp),%eax
+     44d:	8b 45 08             	mov    0x8(%ebp),%eax
   cmd->type = PIPE;
-     430:	c7 03 03 00 00 00    	movl   $0x3,(%ebx)
+     450:	c7 03 03 00 00 00    	movl   $0x3,(%ebx)
   cmd->left = left;
-     436:	89 43 04             	mov    %eax,0x4(%ebx)
+     456:	89 43 04             	mov    %eax,0x4(%ebx)
   cmd->right = right;
-     439:	8b 45 0c             	mov    0xc(%ebp),%eax
-     43c:	89 43 08             	mov    %eax,0x8(%ebx)
-  return (struct cmd*)cmd;
+     459:	8b 45 0c             	mov    0xc(%ebp),%eax
+     45c:	89 43 08             	mov    %eax,0x8(%ebx)
+  return (struct cmd *)cmd;
 }
-     43f:	83 c4 14             	add    $0x14,%esp
-     442:	89 d8                	mov    %ebx,%eax
-     444:	5b                   	pop    %ebx
-     445:	5d                   	pop    %ebp
-     446:	c3                   	ret    
-     447:	89 f6                	mov    %esi,%esi
-     449:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+     45f:	83 c4 14             	add    $0x14,%esp
+     462:	89 d8                	mov    %ebx,%eax
+     464:	5b                   	pop    %ebx
+     465:	5d                   	pop    %ebp
+     466:	c3                   	ret    
+     467:	89 f6                	mov    %esi,%esi
+     469:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-00000450 <listcmd>:
+00000470 <listcmd>:
 
-struct cmd*
+struct cmd *
 listcmd(struct cmd *left, struct cmd *right)
 {
-     450:	55                   	push   %ebp
-     451:	89 e5                	mov    %esp,%ebp
-     453:	53                   	push   %ebx
-     454:	83 ec 14             	sub    $0x14,%esp
+     470:	55                   	push   %ebp
+     471:	89 e5                	mov    %esp,%ebp
+     473:	53                   	push   %ebx
+     474:	83 ec 14             	sub    $0x14,%esp
   struct listcmd *cmd;
 
   cmd = malloc(sizeof(*cmd));
-     457:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
-     45e:	e8 4d 0d 00 00       	call   11b0 <malloc>
+     477:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
+     47e:	e8 4d 0d 00 00       	call   11d0 <malloc>
   memset(cmd, 0, sizeof(*cmd));
-     463:	c7 44 24 08 0c 00 00 	movl   $0xc,0x8(%esp)
-     46a:	00 
-     46b:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-     472:	00 
-     473:	89 04 24             	mov    %eax,(%esp)
+     483:	c7 44 24 08 0c 00 00 	movl   $0xc,0x8(%esp)
+     48a:	00 
+     48b:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+     492:	00 
+     493:	89 04 24             	mov    %eax,(%esp)
   cmd = malloc(sizeof(*cmd));
-     476:	89 c3                	mov    %eax,%ebx
+     496:	89 c3                	mov    %eax,%ebx
   memset(cmd, 0, sizeof(*cmd));
-     478:	e8 f3 07 00 00       	call   c70 <memset>
+     498:	e8 f3 07 00 00       	call   c90 <memset>
   cmd->type = LIST;
   cmd->left = left;
-     47d:	8b 45 08             	mov    0x8(%ebp),%eax
+     49d:	8b 45 08             	mov    0x8(%ebp),%eax
   cmd->type = LIST;
-     480:	c7 03 04 00 00 00    	movl   $0x4,(%ebx)
+     4a0:	c7 03 04 00 00 00    	movl   $0x4,(%ebx)
   cmd->left = left;
-     486:	89 43 04             	mov    %eax,0x4(%ebx)
+     4a6:	89 43 04             	mov    %eax,0x4(%ebx)
   cmd->right = right;
-     489:	8b 45 0c             	mov    0xc(%ebp),%eax
-     48c:	89 43 08             	mov    %eax,0x8(%ebx)
-  return (struct cmd*)cmd;
+     4a9:	8b 45 0c             	mov    0xc(%ebp),%eax
+     4ac:	89 43 08             	mov    %eax,0x8(%ebx)
+  return (struct cmd *)cmd;
 }
-     48f:	83 c4 14             	add    $0x14,%esp
-     492:	89 d8                	mov    %ebx,%eax
-     494:	5b                   	pop    %ebx
-     495:	5d                   	pop    %ebp
-     496:	c3                   	ret    
-     497:	89 f6                	mov    %esi,%esi
-     499:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+     4af:	83 c4 14             	add    $0x14,%esp
+     4b2:	89 d8                	mov    %ebx,%eax
+     4b4:	5b                   	pop    %ebx
+     4b5:	5d                   	pop    %ebp
+     4b6:	c3                   	ret    
+     4b7:	89 f6                	mov    %esi,%esi
+     4b9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-000004a0 <backcmd>:
+000004c0 <backcmd>:
 
-struct cmd*
+struct cmd *
 backcmd(struct cmd *subcmd)
 {
-     4a0:	55                   	push   %ebp
-     4a1:	89 e5                	mov    %esp,%ebp
-     4a3:	53                   	push   %ebx
-     4a4:	83 ec 14             	sub    $0x14,%esp
+     4c0:	55                   	push   %ebp
+     4c1:	89 e5                	mov    %esp,%ebp
+     4c3:	53                   	push   %ebx
+     4c4:	83 ec 14             	sub    $0x14,%esp
   struct backcmd *cmd;
 
   cmd = malloc(sizeof(*cmd));
-     4a7:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
-     4ae:	e8 fd 0c 00 00       	call   11b0 <malloc>
+     4c7:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
+     4ce:	e8 fd 0c 00 00       	call   11d0 <malloc>
   memset(cmd, 0, sizeof(*cmd));
-     4b3:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
-     4ba:	00 
-     4bb:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-     4c2:	00 
-     4c3:	89 04 24             	mov    %eax,(%esp)
+     4d3:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
+     4da:	00 
+     4db:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+     4e2:	00 
+     4e3:	89 04 24             	mov    %eax,(%esp)
   cmd = malloc(sizeof(*cmd));
-     4c6:	89 c3                	mov    %eax,%ebx
+     4e6:	89 c3                	mov    %eax,%ebx
   memset(cmd, 0, sizeof(*cmd));
-     4c8:	e8 a3 07 00 00       	call   c70 <memset>
+     4e8:	e8 a3 07 00 00       	call   c90 <memset>
   cmd->type = BACK;
   cmd->cmd = subcmd;
-     4cd:	8b 45 08             	mov    0x8(%ebp),%eax
+     4ed:	8b 45 08             	mov    0x8(%ebp),%eax
   cmd->type = BACK;
-     4d0:	c7 03 05 00 00 00    	movl   $0x5,(%ebx)
+     4f0:	c7 03 05 00 00 00    	movl   $0x5,(%ebx)
   cmd->cmd = subcmd;
-     4d6:	89 43 04             	mov    %eax,0x4(%ebx)
-  return (struct cmd*)cmd;
+     4f6:	89 43 04             	mov    %eax,0x4(%ebx)
+  return (struct cmd *)cmd;
 }
-     4d9:	83 c4 14             	add    $0x14,%esp
-     4dc:	89 d8                	mov    %ebx,%eax
-     4de:	5b                   	pop    %ebx
-     4df:	5d                   	pop    %ebp
-     4e0:	c3                   	ret    
-     4e1:	eb 0d                	jmp    4f0 <gettoken>
-     4e3:	90                   	nop
-     4e4:	90                   	nop
-     4e5:	90                   	nop
-     4e6:	90                   	nop
-     4e7:	90                   	nop
-     4e8:	90                   	nop
-     4e9:	90                   	nop
-     4ea:	90                   	nop
-     4eb:	90                   	nop
-     4ec:	90                   	nop
-     4ed:	90                   	nop
-     4ee:	90                   	nop
-     4ef:	90                   	nop
-
-000004f0 <gettoken>:
+     4f9:	83 c4 14             	add    $0x14,%esp
+     4fc:	89 d8                	mov    %ebx,%eax
+     4fe:	5b                   	pop    %ebx
+     4ff:	5d                   	pop    %ebp
+     500:	c3                   	ret    
+     501:	eb 0d                	jmp    510 <gettoken>
+     503:	90                   	nop
+     504:	90                   	nop
+     505:	90                   	nop
+     506:	90                   	nop
+     507:	90                   	nop
+     508:	90                   	nop
+     509:	90                   	nop
+     50a:	90                   	nop
+     50b:	90                   	nop
+     50c:	90                   	nop
+     50d:	90                   	nop
+     50e:	90                   	nop
+     50f:	90                   	nop
+
+00000510 <gettoken>:
+
 char whitespace[] = " \t\r\n\v";
 char symbols[] = "<|>&;()";
 
-int
-gettoken(char **ps, char *es, char **q, char **eq)
+int gettoken(char **ps, char *es, char **q, char **eq)
 {
-     4f0:	55                   	push   %ebp
-     4f1:	89 e5                	mov    %esp,%ebp
-     4f3:	57                   	push   %edi
-     4f4:	56                   	push   %esi
-     4f5:	53                   	push   %ebx
-     4f6:	83 ec 1c             	sub    $0x1c,%esp
+     510:	55                   	push   %ebp
+     511:	89 e5                	mov    %esp,%ebp
+     513:	57                   	push   %edi
+     514:	56                   	push   %esi
+     515:	53                   	push   %ebx
+     516:	83 ec 1c             	sub    $0x1c,%esp
   char *s;
   int ret;
 
   s = *ps;
-     4f9:	8b 45 08             	mov    0x8(%ebp),%eax
+     519:	8b 45 08             	mov    0x8(%ebp),%eax
 {
-     4fc:	8b 5d 0c             	mov    0xc(%ebp),%ebx
-     4ff:	8b 75 10             	mov    0x10(%ebp),%esi
+     51c:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+     51f:	8b 75 10             	mov    0x10(%ebp),%esi
   s = *ps;
-     502:	8b 38                	mov    (%eax),%edi
-  while(s < es && strchr(whitespace, *s))
-     504:	39 df                	cmp    %ebx,%edi
-     506:	72 0f                	jb     517 <gettoken+0x27>
-     508:	eb 24                	jmp    52e <gettoken+0x3e>
-     50a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+     522:	8b 38                	mov    (%eax),%edi
+  while (s < es && strchr(whitespace, *s))
+     524:	39 df                	cmp    %ebx,%edi
+     526:	72 0f                	jb     537 <gettoken+0x27>
+     528:	eb 24                	jmp    54e <gettoken+0x3e>
+     52a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     s++;
-     510:	83 c7 01             	add    $0x1,%edi
-  while(s < es && strchr(whitespace, *s))
-     513:	39 df                	cmp    %ebx,%edi
-     515:	74 17                	je     52e <gettoken+0x3e>
-     517:	0f be 07             	movsbl (%edi),%eax
-     51a:	c7 04 24 20 19 00 00 	movl   $0x1920,(%esp)
-     521:	89 44 24 04          	mov    %eax,0x4(%esp)
-     525:	e8 66 07 00 00       	call   c90 <strchr>
-     52a:	85 c0                	test   %eax,%eax
-     52c:	75 e2                	jne    510 <gettoken+0x20>
-  if(q)
-     52e:	85 f6                	test   %esi,%esi
-     530:	74 02                	je     534 <gettoken+0x44>
+     530:	83 c7 01             	add    $0x1,%edi
+  while (s < es && strchr(whitespace, *s))
+     533:	39 df                	cmp    %ebx,%edi
+     535:	74 17                	je     54e <gettoken+0x3e>
+     537:	0f be 07             	movsbl (%edi),%eax
+     53a:	c7 04 24 40 19 00 00 	movl   $0x1940,(%esp)
+     541:	89 44 24 04          	mov    %eax,0x4(%esp)
+     545:	e8 66 07 00 00       	call   cb0 <strchr>
+     54a:	85 c0                	test   %eax,%eax
+     54c:	75 e2                	jne    530 <gettoken+0x20>
+  if (q)
+     54e:	85 f6                	test   %esi,%esi
+     550:	74 02                	je     554 <gettoken+0x44>
     *q = s;
-     532:	89 3e                	mov    %edi,(%esi)
+     552:	89 3e                	mov    %edi,(%esi)
   ret = *s;
-     534:	0f b6 0f             	movzbl (%edi),%ecx
-     537:	0f be f1             	movsbl %cl,%esi
-  switch(*s){
-     53a:	80 f9 29             	cmp    $0x29,%cl
+     554:	0f b6 0f             	movzbl (%edi),%ecx
+     557:	0f be f1             	movsbl %cl,%esi
+  switch (*s)
+     55a:	80 f9 29             	cmp    $0x29,%cl
   ret = *s;
-     53d:	89 f0                	mov    %esi,%eax
-  switch(*s){
-     53f:	7f 4f                	jg     590 <gettoken+0xa0>
-     541:	80 f9 28             	cmp    $0x28,%cl
-     544:	7d 55                	jge    59b <gettoken+0xab>
-     546:	84 c9                	test   %cl,%cl
-     548:	0f 85 ca 00 00 00    	jne    618 <gettoken+0x128>
+     55d:	89 f0                	mov    %esi,%eax
+  switch (*s)
+     55f:	7f 4f                	jg     5b0 <gettoken+0xa0>
+     561:	80 f9 28             	cmp    $0x28,%cl
+     564:	7d 55                	jge    5bb <gettoken+0xab>
+     566:	84 c9                	test   %cl,%cl
+     568:	0f 85 ca 00 00 00    	jne    638 <gettoken+0x128>
     ret = 'a';
-    while(s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
+    while (s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
       s++;
     break;
   }
-  if(eq)
-     54e:	8b 45 14             	mov    0x14(%ebp),%eax
-     551:	85 c0                	test   %eax,%eax
-     553:	74 05                	je     55a <gettoken+0x6a>
+  if (eq)
+     56e:	8b 45 14             	mov    0x14(%ebp),%eax
+     571:	85 c0                	test   %eax,%eax
+     573:	74 05                	je     57a <gettoken+0x6a>
     *eq = s;
-     555:	8b 45 14             	mov    0x14(%ebp),%eax
-     558:	89 38                	mov    %edi,(%eax)
+     575:	8b 45 14             	mov    0x14(%ebp),%eax
+     578:	89 38                	mov    %edi,(%eax)
 
-  while(s < es && strchr(whitespace, *s))
-     55a:	39 df                	cmp    %ebx,%edi
-     55c:	72 09                	jb     567 <gettoken+0x77>
-     55e:	eb 1e                	jmp    57e <gettoken+0x8e>
+  while (s < es && strchr(whitespace, *s))
+     57a:	39 df                	cmp    %ebx,%edi
+     57c:	72 09                	jb     587 <gettoken+0x77>
+     57e:	eb 1e                	jmp    59e <gettoken+0x8e>
     s++;
-     560:	83 c7 01             	add    $0x1,%edi
-  while(s < es && strchr(whitespace, *s))
-     563:	39 df                	cmp    %ebx,%edi
-     565:	74 17                	je     57e <gettoken+0x8e>
-     567:	0f be 07             	movsbl (%edi),%eax
-     56a:	c7 04 24 20 19 00 00 	movl   $0x1920,(%esp)
-     571:	89 44 24 04          	mov    %eax,0x4(%esp)
-     575:	e8 16 07 00 00       	call   c90 <strchr>
-     57a:	85 c0                	test   %eax,%eax
-     57c:	75 e2                	jne    560 <gettoken+0x70>
+     580:	83 c7 01             	add    $0x1,%edi
+  while (s < es && strchr(whitespace, *s))
+     583:	39 df                	cmp    %ebx,%edi
+     585:	74 17                	je     59e <gettoken+0x8e>
+     587:	0f be 07             	movsbl (%edi),%eax
+     58a:	c7 04 24 40 19 00 00 	movl   $0x1940,(%esp)
+     591:	89 44 24 04          	mov    %eax,0x4(%esp)
+     595:	e8 16 07 00 00       	call   cb0 <strchr>
+     59a:	85 c0                	test   %eax,%eax
+     59c:	75 e2                	jne    580 <gettoken+0x70>
   *ps = s;
-     57e:	8b 45 08             	mov    0x8(%ebp),%eax
-     581:	89 38                	mov    %edi,(%eax)
+     59e:	8b 45 08             	mov    0x8(%ebp),%eax
+     5a1:	89 38                	mov    %edi,(%eax)
   return ret;
 }
-     583:	83 c4 1c             	add    $0x1c,%esp
-     586:	89 f0                	mov    %esi,%eax
-     588:	5b                   	pop    %ebx
-     589:	5e                   	pop    %esi
-     58a:	5f                   	pop    %edi
-     58b:	5d                   	pop    %ebp
-     58c:	c3                   	ret    
-     58d:	8d 76 00             	lea    0x0(%esi),%esi
-  switch(*s){
-     590:	80 f9 3e             	cmp    $0x3e,%cl
-     593:	75 0b                	jne    5a0 <gettoken+0xb0>
-    if(*s == '>'){
-     595:	80 7f 01 3e          	cmpb   $0x3e,0x1(%edi)
-     599:	74 6d                	je     608 <gettoken+0x118>
+     5a3:	83 c4 1c             	add    $0x1c,%esp
+     5a6:	89 f0                	mov    %esi,%eax
+     5a8:	5b                   	pop    %ebx
+     5a9:	5e                   	pop    %esi
+     5aa:	5f                   	pop    %edi
+     5ab:	5d                   	pop    %ebp
+     5ac:	c3                   	ret    
+     5ad:	8d 76 00             	lea    0x0(%esi),%esi
+  switch (*s)
+     5b0:	80 f9 3e             	cmp    $0x3e,%cl
+     5b3:	75 0b                	jne    5c0 <gettoken+0xb0>
+    if (*s == '>')
+     5b5:	80 7f 01 3e          	cmpb   $0x3e,0x1(%edi)
+     5b9:	74 6d                	je     628 <gettoken+0x118>
     s++;
-     59b:	83 c7 01             	add    $0x1,%edi
-     59e:	eb ae                	jmp    54e <gettoken+0x5e>
-  switch(*s){
-     5a0:	7f 56                	jg     5f8 <gettoken+0x108>
-     5a2:	83 e9 3b             	sub    $0x3b,%ecx
-     5a5:	80 f9 01             	cmp    $0x1,%cl
-     5a8:	76 f1                	jbe    59b <gettoken+0xab>
-    while(s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
-     5aa:	39 fb                	cmp    %edi,%ebx
-     5ac:	77 2b                	ja     5d9 <gettoken+0xe9>
-     5ae:	66 90                	xchg   %ax,%ax
-     5b0:	eb 3b                	jmp    5ed <gettoken+0xfd>
-     5b2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-     5b8:	0f be 07             	movsbl (%edi),%eax
-     5bb:	c7 04 24 18 19 00 00 	movl   $0x1918,(%esp)
-     5c2:	89 44 24 04          	mov    %eax,0x4(%esp)
-     5c6:	e8 c5 06 00 00       	call   c90 <strchr>
-     5cb:	85 c0                	test   %eax,%eax
-     5cd:	75 1e                	jne    5ed <gettoken+0xfd>
+     5bb:	83 c7 01             	add    $0x1,%edi
+     5be:	eb ae                	jmp    56e <gettoken+0x5e>
+  switch (*s)
+     5c0:	7f 56                	jg     618 <gettoken+0x108>
+     5c2:	83 e9 3b             	sub    $0x3b,%ecx
+     5c5:	80 f9 01             	cmp    $0x1,%cl
+     5c8:	76 f1                	jbe    5bb <gettoken+0xab>
+    while (s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
+     5ca:	39 fb                	cmp    %edi,%ebx
+     5cc:	77 2b                	ja     5f9 <gettoken+0xe9>
+     5ce:	66 90                	xchg   %ax,%ax
+     5d0:	eb 3b                	jmp    60d <gettoken+0xfd>
+     5d2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+     5d8:	0f be 07             	movsbl (%edi),%eax
+     5db:	c7 04 24 38 19 00 00 	movl   $0x1938,(%esp)
+     5e2:	89 44 24 04          	mov    %eax,0x4(%esp)
+     5e6:	e8 c5 06 00 00       	call   cb0 <strchr>
+     5eb:	85 c0                	test   %eax,%eax
+     5ed:	75 1e                	jne    60d <gettoken+0xfd>
       s++;
-     5cf:	83 c7 01             	add    $0x1,%edi
-    while(s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
-     5d2:	39 df                	cmp    %ebx,%edi
-     5d4:	74 17                	je     5ed <gettoken+0xfd>
-     5d6:	0f be 07             	movsbl (%edi),%eax
-     5d9:	89 44 24 04          	mov    %eax,0x4(%esp)
-     5dd:	c7 04 24 20 19 00 00 	movl   $0x1920,(%esp)
-     5e4:	e8 a7 06 00 00       	call   c90 <strchr>
-     5e9:	85 c0                	test   %eax,%eax
-     5eb:	74 cb                	je     5b8 <gettoken+0xc8>
+     5ef:	83 c7 01             	add    $0x1,%edi
+    while (s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
+     5f2:	39 df                	cmp    %ebx,%edi
+     5f4:	74 17                	je     60d <gettoken+0xfd>
+     5f6:	0f be 07             	movsbl (%edi),%eax
+     5f9:	89 44 24 04          	mov    %eax,0x4(%esp)
+     5fd:	c7 04 24 40 19 00 00 	movl   $0x1940,(%esp)
+     604:	e8 a7 06 00 00       	call   cb0 <strchr>
+     609:	85 c0                	test   %eax,%eax
+     60b:	74 cb                	je     5d8 <gettoken+0xc8>
     ret = 'a';
-     5ed:	be 61 00 00 00       	mov    $0x61,%esi
-     5f2:	e9 57 ff ff ff       	jmp    54e <gettoken+0x5e>
-     5f7:	90                   	nop
-  switch(*s){
-     5f8:	80 f9 7c             	cmp    $0x7c,%cl
-     5fb:	74 9e                	je     59b <gettoken+0xab>
-     5fd:	8d 76 00             	lea    0x0(%esi),%esi
-     600:	eb a8                	jmp    5aa <gettoken+0xba>
-     602:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+     60d:	be 61 00 00 00       	mov    $0x61,%esi
+     612:	e9 57 ff ff ff       	jmp    56e <gettoken+0x5e>
+     617:	90                   	nop
+  switch (*s)
+     618:	80 f9 7c             	cmp    $0x7c,%cl
+     61b:	74 9e                	je     5bb <gettoken+0xab>
+     61d:	8d 76 00             	lea    0x0(%esi),%esi
+     620:	eb a8                	jmp    5ca <gettoken+0xba>
+     622:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
       s++;
-     608:	83 c7 02             	add    $0x2,%edi
+     628:	83 c7 02             	add    $0x2,%edi
       ret = '+';
-     60b:	be 2b 00 00 00       	mov    $0x2b,%esi
-     610:	e9 39 ff ff ff       	jmp    54e <gettoken+0x5e>
-     615:	8d 76 00             	lea    0x0(%esi),%esi
-  switch(*s){
-     618:	80 f9 26             	cmp    $0x26,%cl
-     61b:	75 8d                	jne    5aa <gettoken+0xba>
-     61d:	e9 79 ff ff ff       	jmp    59b <gettoken+0xab>
-     622:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-     629:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
-
-00000630 <peek>:
-
-int
-peek(char **ps, char *es, char *toks)
+     62b:	be 2b 00 00 00       	mov    $0x2b,%esi
+     630:	e9 39 ff ff ff       	jmp    56e <gettoken+0x5e>
+     635:	8d 76 00             	lea    0x0(%esi),%esi
+  switch (*s)
+     638:	80 f9 26             	cmp    $0x26,%cl
+     63b:	75 8d                	jne    5ca <gettoken+0xba>
+     63d:	e9 79 ff ff ff       	jmp    5bb <gettoken+0xab>
+     642:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     649:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000650 <peek>:
+
+int peek(char **ps, char *es, char *toks)
 {
-     630:	55                   	push   %ebp
-     631:	89 e5                	mov    %esp,%ebp
-     633:	57                   	push   %edi
-     634:	56                   	push   %esi
-     635:	53                   	push   %ebx
-     636:	83 ec 1c             	sub    $0x1c,%esp
-     639:	8b 7d 08             	mov    0x8(%ebp),%edi
-     63c:	8b 75 0c             	mov    0xc(%ebp),%esi
+     650:	55                   	push   %ebp
+     651:	89 e5                	mov    %esp,%ebp
+     653:	57                   	push   %edi
+     654:	56                   	push   %esi
+     655:	53                   	push   %ebx
+     656:	83 ec 1c             	sub    $0x1c,%esp
+     659:	8b 7d 08             	mov    0x8(%ebp),%edi
+     65c:	8b 75 0c             	mov    0xc(%ebp),%esi
   char *s;
 
   s = *ps;
-     63f:	8b 1f                	mov    (%edi),%ebx
-  while(s < es && strchr(whitespace, *s))
-     641:	39 f3                	cmp    %esi,%ebx
-     643:	72 0a                	jb     64f <peek+0x1f>
-     645:	eb 1f                	jmp    666 <peek+0x36>
-     647:	90                   	nop
+     65f:	8b 1f                	mov    (%edi),%ebx
+  while (s < es && strchr(whitespace, *s))
+     661:	39 f3                	cmp    %esi,%ebx
+     663:	72 0a                	jb     66f <peek+0x1f>
+     665:	eb 1f                	jmp    686 <peek+0x36>
+     667:	90                   	nop
     s++;
-     648:	83 c3 01             	add    $0x1,%ebx
-  while(s < es && strchr(whitespace, *s))
-     64b:	39 f3                	cmp    %esi,%ebx
-     64d:	74 17                	je     666 <peek+0x36>
-     64f:	0f be 03             	movsbl (%ebx),%eax
-     652:	c7 04 24 20 19 00 00 	movl   $0x1920,(%esp)
-     659:	89 44 24 04          	mov    %eax,0x4(%esp)
-     65d:	e8 2e 06 00 00       	call   c90 <strchr>
-     662:	85 c0                	test   %eax,%eax
-     664:	75 e2                	jne    648 <peek+0x18>
+     668:	83 c3 01             	add    $0x1,%ebx
+  while (s < es && strchr(whitespace, *s))
+     66b:	39 f3                	cmp    %esi,%ebx
+     66d:	74 17                	je     686 <peek+0x36>
+     66f:	0f be 03             	movsbl (%ebx),%eax
+     672:	c7 04 24 40 19 00 00 	movl   $0x1940,(%esp)
+     679:	89 44 24 04          	mov    %eax,0x4(%esp)
+     67d:	e8 2e 06 00 00       	call   cb0 <strchr>
+     682:	85 c0                	test   %eax,%eax
+     684:	75 e2                	jne    668 <peek+0x18>
   *ps = s;
-     666:	89 1f                	mov    %ebx,(%edi)
+     686:	89 1f                	mov    %ebx,(%edi)
   return *s && strchr(toks, *s);
-     668:	0f be 13             	movsbl (%ebx),%edx
-     66b:	31 c0                	xor    %eax,%eax
-     66d:	84 d2                	test   %dl,%dl
-     66f:	74 17                	je     688 <peek+0x58>
-     671:	8b 45 10             	mov    0x10(%ebp),%eax
-     674:	89 54 24 04          	mov    %edx,0x4(%esp)
-     678:	89 04 24             	mov    %eax,(%esp)
-     67b:	e8 10 06 00 00       	call   c90 <strchr>
-     680:	85 c0                	test   %eax,%eax
-     682:	0f 95 c0             	setne  %al
-     685:	0f b6 c0             	movzbl %al,%eax
+     688:	0f be 13             	movsbl (%ebx),%edx
+     68b:	31 c0                	xor    %eax,%eax
+     68d:	84 d2                	test   %dl,%dl
+     68f:	74 17                	je     6a8 <peek+0x58>
+     691:	8b 45 10             	mov    0x10(%ebp),%eax
+     694:	89 54 24 04          	mov    %edx,0x4(%esp)
+     698:	89 04 24             	mov    %eax,(%esp)
+     69b:	e8 10 06 00 00       	call   cb0 <strchr>
+     6a0:	85 c0                	test   %eax,%eax
+     6a2:	0f 95 c0             	setne  %al
+     6a5:	0f b6 c0             	movzbl %al,%eax
 }
-     688:	83 c4 1c             	add    $0x1c,%esp
-     68b:	5b                   	pop    %ebx
-     68c:	5e                   	pop    %esi
-     68d:	5f                   	pop    %edi
-     68e:	5d                   	pop    %ebp
-     68f:	c3                   	ret    
-
-00000690 <parseredirs>:
+     6a8:	83 c4 1c             	add    $0x1c,%esp
+     6ab:	5b                   	pop    %ebx
+     6ac:	5e                   	pop    %esi
+     6ad:	5f                   	pop    %edi
+     6ae:	5d                   	pop    %ebp
+     6af:	c3                   	ret    
+
+000006b0 <parseredirs>:
   return cmd;
 }
 
-struct cmd*
+struct cmd *
 parseredirs(struct cmd *cmd, char **ps, char *es)
 {
-     690:	55                   	push   %ebp
-     691:	89 e5                	mov    %esp,%ebp
-     693:	57                   	push   %edi
-     694:	56                   	push   %esi
-     695:	53                   	push   %ebx
-     696:	83 ec 3c             	sub    $0x3c,%esp
-     699:	8b 75 0c             	mov    0xc(%ebp),%esi
-     69c:	8b 5d 10             	mov    0x10(%ebp),%ebx
-     69f:	90                   	nop
+     6b0:	55                   	push   %ebp
+     6b1:	89 e5                	mov    %esp,%ebp
+     6b3:	57                   	push   %edi
+     6b4:	56                   	push   %esi
+     6b5:	53                   	push   %ebx
+     6b6:	83 ec 3c             	sub    $0x3c,%esp
+     6b9:	8b 75 0c             	mov    0xc(%ebp),%esi
+     6bc:	8b 5d 10             	mov    0x10(%ebp),%ebx
+     6bf:	90                   	nop
   int tok;
   char *q, *eq;
 
-  while(peek(ps, es, "<>")){
-     6a0:	c7 44 24 08 e9 12 00 	movl   $0x12e9,0x8(%esp)
-     6a7:	00 
-     6a8:	89 5c 24 04          	mov    %ebx,0x4(%esp)
-     6ac:	89 34 24             	mov    %esi,(%esp)
-     6af:	e8 7c ff ff ff       	call   630 <peek>
-     6b4:	85 c0                	test   %eax,%eax
-     6b6:	0f 84 9c 00 00 00    	je     758 <parseredirs+0xc8>
+  while (peek(ps, es, "<>"))
+     6c0:	c7 44 24 08 09 13 00 	movl   $0x1309,0x8(%esp)
+     6c7:	00 
+     6c8:	89 5c 24 04          	mov    %ebx,0x4(%esp)
+     6cc:	89 34 24             	mov    %esi,(%esp)
+     6cf:	e8 7c ff ff ff       	call   650 <peek>
+     6d4:	85 c0                	test   %eax,%eax
+     6d6:	0f 84 9c 00 00 00    	je     778 <parseredirs+0xc8>
+  {
     tok = gettoken(ps, es, 0, 0);
-     6bc:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
-     6c3:	00 
-     6c4:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
-     6cb:	00 
-     6cc:	89 5c 24 04          	mov    %ebx,0x4(%esp)
-     6d0:	89 34 24             	mov    %esi,(%esp)
-     6d3:	e8 18 fe ff ff       	call   4f0 <gettoken>
-    if(gettoken(ps, es, &q, &eq) != 'a')
-     6d8:	89 5c 24 04          	mov    %ebx,0x4(%esp)
-     6dc:	89 34 24             	mov    %esi,(%esp)
+     6dc:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
+     6e3:	00 
+     6e4:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+     6eb:	00 
+     6ec:	89 5c 24 04          	mov    %ebx,0x4(%esp)
+     6f0:	89 34 24             	mov    %esi,(%esp)
+     6f3:	e8 18 fe ff ff       	call   510 <gettoken>
+    if (gettoken(ps, es, &q, &eq) != 'a')
+     6f8:	89 5c 24 04          	mov    %ebx,0x4(%esp)
+     6fc:	89 34 24             	mov    %esi,(%esp)
     tok = gettoken(ps, es, 0, 0);
-     6df:	89 c7                	mov    %eax,%edi
-    if(gettoken(ps, es, &q, &eq) != 'a')
-     6e1:	8d 45 e4             	lea    -0x1c(%ebp),%eax
-     6e4:	89 44 24 0c          	mov    %eax,0xc(%esp)
-     6e8:	8d 45 e0             	lea    -0x20(%ebp),%eax
-     6eb:	89 44 24 08          	mov    %eax,0x8(%esp)
-     6ef:	e8 fc fd ff ff       	call   4f0 <gettoken>
-     6f4:	83 f8 61             	cmp    $0x61,%eax
-     6f7:	75 6a                	jne    763 <parseredirs+0xd3>
+     6ff:	89 c7                	mov    %eax,%edi
+    if (gettoken(ps, es, &q, &eq) != 'a')
+     701:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+     704:	89 44 24 0c          	mov    %eax,0xc(%esp)
+     708:	8d 45 e0             	lea    -0x20(%ebp),%eax
+     70b:	89 44 24 08          	mov    %eax,0x8(%esp)
+     70f:	e8 fc fd ff ff       	call   510 <gettoken>
+     714:	83 f8 61             	cmp    $0x61,%eax
+     717:	75 6a                	jne    783 <parseredirs+0xd3>
       panic("missing file for redirection");
-    switch(tok){
-     6f9:	83 ff 3c             	cmp    $0x3c,%edi
-     6fc:	74 42                	je     740 <parseredirs+0xb0>
-     6fe:	83 ff 3e             	cmp    $0x3e,%edi
-     701:	74 05                	je     708 <parseredirs+0x78>
-     703:	83 ff 2b             	cmp    $0x2b,%edi
-     706:	75 98                	jne    6a0 <parseredirs+0x10>
+    switch (tok)
+     719:	83 ff 3c             	cmp    $0x3c,%edi
+     71c:	74 42                	je     760 <parseredirs+0xb0>
+     71e:	83 ff 3e             	cmp    $0x3e,%edi
+     721:	74 05                	je     728 <parseredirs+0x78>
+     723:	83 ff 2b             	cmp    $0x2b,%edi
+     726:	75 98                	jne    6c0 <parseredirs+0x10>
       break;
     case '>':
-      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);
+      cmd = redircmd(cmd, q, eq, O_WRONLY | O_CREATE, 1);
       break;
-    case '+':  // >>
-      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);
-     708:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
-     70f:	00 
-     710:	c7 44 24 0c 01 02 00 	movl   $0x201,0xc(%esp)
-     717:	00 
-     718:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-     71b:	89 44 24 08          	mov    %eax,0x8(%esp)
-     71f:	8b 45 e0             	mov    -0x20(%ebp),%eax
-     722:	89 44 24 04          	mov    %eax,0x4(%esp)
-     726:	8b 45 08             	mov    0x8(%ebp),%eax
-     729:	89 04 24             	mov    %eax,(%esp)
-     72c:	e8 6f fc ff ff       	call   3a0 <redircmd>
-     731:	89 45 08             	mov    %eax,0x8(%ebp)
+    case '+': // >>
+      cmd = redircmd(cmd, q, eq, O_WRONLY | O_CREATE, 1);
+     728:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
+     72f:	00 
+     730:	c7 44 24 0c 01 02 00 	movl   $0x201,0xc(%esp)
+     737:	00 
+     738:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+     73b:	89 44 24 08          	mov    %eax,0x8(%esp)
+     73f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+     742:	89 44 24 04          	mov    %eax,0x4(%esp)
+     746:	8b 45 08             	mov    0x8(%ebp),%eax
+     749:	89 04 24             	mov    %eax,(%esp)
+     74c:	e8 6f fc ff ff       	call   3c0 <redircmd>
+     751:	89 45 08             	mov    %eax,0x8(%ebp)
       break;
-     734:	e9 67 ff ff ff       	jmp    6a0 <parseredirs+0x10>
-     739:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     754:	e9 67 ff ff ff       	jmp    6c0 <parseredirs+0x10>
+     759:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
       cmd = redircmd(cmd, q, eq, O_RDONLY, 0);
-     740:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
-     747:	00 
-     748:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
-     74f:	00 
-     750:	eb c6                	jmp    718 <parseredirs+0x88>
-     752:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+     760:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
+     767:	00 
+     768:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
+     76f:	00 
+     770:	eb c6                	jmp    738 <parseredirs+0x88>
+     772:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     }
   }
   return cmd;
 }
-     758:	8b 45 08             	mov    0x8(%ebp),%eax
-     75b:	83 c4 3c             	add    $0x3c,%esp
-     75e:	5b                   	pop    %ebx
-     75f:	5e                   	pop    %esi
-     760:	5f                   	pop    %edi
-     761:	5d                   	pop    %ebp
-     762:	c3                   	ret    
+     778:	8b 45 08             	mov    0x8(%ebp),%eax
+     77b:	83 c4 3c             	add    $0x3c,%esp
+     77e:	5b                   	pop    %ebx
+     77f:	5e                   	pop    %esi
+     780:	5f                   	pop    %edi
+     781:	5d                   	pop    %ebp
+     782:	c3                   	ret    
       panic("missing file for redirection");
-     763:	c7 04 24 cc 12 00 00 	movl   $0x12cc,(%esp)
-     76a:	e8 f1 f9 ff ff       	call   160 <panic>
-     76f:	90                   	nop
+     783:	c7 04 24 ec 12 00 00 	movl   $0x12ec,(%esp)
+     78a:	e8 e1 f9 ff ff       	call   170 <panic>
+     78f:	90                   	nop
 
-00000770 <parseexec>:
+00000790 <parseexec>:
   return cmd;
 }
 
-struct cmd*
+struct cmd *
 parseexec(char **ps, char *es)
 {
-     770:	55                   	push   %ebp
-     771:	89 e5                	mov    %esp,%ebp
-     773:	57                   	push   %edi
-     774:	56                   	push   %esi
-     775:	53                   	push   %ebx
-     776:	83 ec 3c             	sub    $0x3c,%esp
-     779:	8b 75 08             	mov    0x8(%ebp),%esi
-     77c:	8b 7d 0c             	mov    0xc(%ebp),%edi
+     790:	55                   	push   %ebp
+     791:	89 e5                	mov    %esp,%ebp
+     793:	57                   	push   %edi
+     794:	56                   	push   %esi
+     795:	53                   	push   %ebx
+     796:	83 ec 3c             	sub    $0x3c,%esp
+     799:	8b 75 08             	mov    0x8(%ebp),%esi
+     79c:	8b 7d 0c             	mov    0xc(%ebp),%edi
   char *q, *eq;
   int tok, argc;
   struct execcmd *cmd;
   struct cmd *ret;
 
-  if(peek(ps, es, "("))
-     77f:	c7 44 24 08 ec 12 00 	movl   $0x12ec,0x8(%esp)
-     786:	00 
-     787:	89 34 24             	mov    %esi,(%esp)
-     78a:	89 7c 24 04          	mov    %edi,0x4(%esp)
-     78e:	e8 9d fe ff ff       	call   630 <peek>
-     793:	85 c0                	test   %eax,%eax
-     795:	0f 85 a5 00 00 00    	jne    840 <parseexec+0xd0>
+  if (peek(ps, es, "("))
+     79f:	c7 44 24 08 0c 13 00 	movl   $0x130c,0x8(%esp)
+     7a6:	00 
+     7a7:	89 34 24             	mov    %esi,(%esp)
+     7aa:	89 7c 24 04          	mov    %edi,0x4(%esp)
+     7ae:	e8 9d fe ff ff       	call   650 <peek>
+     7b3:	85 c0                	test   %eax,%eax
+     7b5:	0f 85 a5 00 00 00    	jne    860 <parseexec+0xd0>
     return parseblock(ps, es);
 
   ret = execcmd();
-     79b:	e8 c0 fb ff ff       	call   360 <execcmd>
-  cmd = (struct execcmd*)ret;
+     7bb:	e8 c0 fb ff ff       	call   380 <execcmd>
+  cmd = (struct execcmd *)ret;
 
   argc = 0;
   ret = parseredirs(ret, ps, es);
-     7a0:	89 7c 24 08          	mov    %edi,0x8(%esp)
-     7a4:	89 74 24 04          	mov    %esi,0x4(%esp)
-     7a8:	89 04 24             	mov    %eax,(%esp)
+     7c0:	89 7c 24 08          	mov    %edi,0x8(%esp)
+     7c4:	89 74 24 04          	mov    %esi,0x4(%esp)
+     7c8:	89 04 24             	mov    %eax,(%esp)
   ret = execcmd();
-     7ab:	89 c3                	mov    %eax,%ebx
-     7ad:	89 45 cc             	mov    %eax,-0x34(%ebp)
+     7cb:	89 c3                	mov    %eax,%ebx
+     7cd:	89 45 cc             	mov    %eax,-0x34(%ebp)
   ret = parseredirs(ret, ps, es);
-     7b0:	e8 db fe ff ff       	call   690 <parseredirs>
+     7d0:	e8 db fe ff ff       	call   6b0 <parseredirs>
   argc = 0;
-     7b5:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
+     7d5:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
   ret = parseredirs(ret, ps, es);
-     7bc:	89 45 d0             	mov    %eax,-0x30(%ebp)
-  while(!peek(ps, es, "|)&;")){
-     7bf:	eb 1d                	jmp    7de <parseexec+0x6e>
-     7c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     7dc:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  while (!peek(ps, es, "|)&;"))
+     7df:	eb 1d                	jmp    7fe <parseexec+0x6e>
+     7e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     cmd->argv[argc] = q;
     cmd->eargv[argc] = eq;
     argc++;
-    if(argc >= MAXARGS)
+    if (argc >= MAXARGS)
       panic("too many args");
     ret = parseredirs(ret, ps, es);
-     7c8:	8b 45 d0             	mov    -0x30(%ebp),%eax
-     7cb:	89 7c 24 08          	mov    %edi,0x8(%esp)
-     7cf:	89 74 24 04          	mov    %esi,0x4(%esp)
-     7d3:	89 04 24             	mov    %eax,(%esp)
-     7d6:	e8 b5 fe ff ff       	call   690 <parseredirs>
-     7db:	89 45 d0             	mov    %eax,-0x30(%ebp)
-  while(!peek(ps, es, "|)&;")){
-     7de:	c7 44 24 08 03 13 00 	movl   $0x1303,0x8(%esp)
-     7e5:	00 
-     7e6:	89 7c 24 04          	mov    %edi,0x4(%esp)
-     7ea:	89 34 24             	mov    %esi,(%esp)
-     7ed:	e8 3e fe ff ff       	call   630 <peek>
-     7f2:	85 c0                	test   %eax,%eax
-     7f4:	75 62                	jne    858 <parseexec+0xe8>
-    if((tok=gettoken(ps, es, &q, &eq)) == 0)
-     7f6:	8d 45 e4             	lea    -0x1c(%ebp),%eax
-     7f9:	89 44 24 0c          	mov    %eax,0xc(%esp)
-     7fd:	8d 45 e0             	lea    -0x20(%ebp),%eax
-     800:	89 44 24 08          	mov    %eax,0x8(%esp)
-     804:	89 7c 24 04          	mov    %edi,0x4(%esp)
-     808:	89 34 24             	mov    %esi,(%esp)
-     80b:	e8 e0 fc ff ff       	call   4f0 <gettoken>
-     810:	85 c0                	test   %eax,%eax
-     812:	74 44                	je     858 <parseexec+0xe8>
-    if(tok != 'a')
-     814:	83 f8 61             	cmp    $0x61,%eax
-     817:	75 61                	jne    87a <parseexec+0x10a>
+     7e8:	8b 45 d0             	mov    -0x30(%ebp),%eax
+     7eb:	89 7c 24 08          	mov    %edi,0x8(%esp)
+     7ef:	89 74 24 04          	mov    %esi,0x4(%esp)
+     7f3:	89 04 24             	mov    %eax,(%esp)
+     7f6:	e8 b5 fe ff ff       	call   6b0 <parseredirs>
+     7fb:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  while (!peek(ps, es, "|)&;"))
+     7fe:	c7 44 24 08 23 13 00 	movl   $0x1323,0x8(%esp)
+     805:	00 
+     806:	89 7c 24 04          	mov    %edi,0x4(%esp)
+     80a:	89 34 24             	mov    %esi,(%esp)
+     80d:	e8 3e fe ff ff       	call   650 <peek>
+     812:	85 c0                	test   %eax,%eax
+     814:	75 62                	jne    878 <parseexec+0xe8>
+    if ((tok = gettoken(ps, es, &q, &eq)) == 0)
+     816:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+     819:	89 44 24 0c          	mov    %eax,0xc(%esp)
+     81d:	8d 45 e0             	lea    -0x20(%ebp),%eax
+     820:	89 44 24 08          	mov    %eax,0x8(%esp)
+     824:	89 7c 24 04          	mov    %edi,0x4(%esp)
+     828:	89 34 24             	mov    %esi,(%esp)
+     82b:	e8 e0 fc ff ff       	call   510 <gettoken>
+     830:	85 c0                	test   %eax,%eax
+     832:	74 44                	je     878 <parseexec+0xe8>
+    if (tok != 'a')
+     834:	83 f8 61             	cmp    $0x61,%eax
+     837:	75 61                	jne    89a <parseexec+0x10a>
     cmd->argv[argc] = q;
-     819:	8b 45 e0             	mov    -0x20(%ebp),%eax
-     81c:	83 c3 04             	add    $0x4,%ebx
+     839:	8b 45 e0             	mov    -0x20(%ebp),%eax
+     83c:	83 c3 04             	add    $0x4,%ebx
     argc++;
-     81f:	83 45 d4 01          	addl   $0x1,-0x2c(%ebp)
+     83f:	83 45 d4 01          	addl   $0x1,-0x2c(%ebp)
     cmd->argv[argc] = q;
-     823:	89 03                	mov    %eax,(%ebx)
+     843:	89 03                	mov    %eax,(%ebx)
     cmd->eargv[argc] = eq;
-     825:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-     828:	89 43 28             	mov    %eax,0x28(%ebx)
-    if(argc >= MAXARGS)
-     82b:	83 7d d4 0a          	cmpl   $0xa,-0x2c(%ebp)
-     82f:	75 97                	jne    7c8 <parseexec+0x58>
+     845:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+     848:	89 43 28             	mov    %eax,0x28(%ebx)
+    if (argc >= MAXARGS)
+     84b:	83 7d d4 0a          	cmpl   $0xa,-0x2c(%ebp)
+     84f:	75 97                	jne    7e8 <parseexec+0x58>
       panic("too many args");
-     831:	c7 04 24 f5 12 00 00 	movl   $0x12f5,(%esp)
-     838:	e8 23 f9 ff ff       	call   160 <panic>
-     83d:	8d 76 00             	lea    0x0(%esi),%esi
+     851:	c7 04 24 15 13 00 00 	movl   $0x1315,(%esp)
+     858:	e8 13 f9 ff ff       	call   170 <panic>
+     85d:	8d 76 00             	lea    0x0(%esi),%esi
     return parseblock(ps, es);
-     840:	89 7c 24 04          	mov    %edi,0x4(%esp)
-     844:	89 34 24             	mov    %esi,(%esp)
-     847:	e8 84 01 00 00       	call   9d0 <parseblock>
+     860:	89 7c 24 04          	mov    %edi,0x4(%esp)
+     864:	89 34 24             	mov    %esi,(%esp)
+     867:	e8 84 01 00 00       	call   9f0 <parseblock>
   }
   cmd->argv[argc] = 0;
   cmd->eargv[argc] = 0;
   return ret;
 }
-     84c:	83 c4 3c             	add    $0x3c,%esp
-     84f:	5b                   	pop    %ebx
-     850:	5e                   	pop    %esi
-     851:	5f                   	pop    %edi
-     852:	5d                   	pop    %ebp
-     853:	c3                   	ret    
-     854:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-     858:	8b 45 cc             	mov    -0x34(%ebp),%eax
-     85b:	8b 55 d4             	mov    -0x2c(%ebp),%edx
-     85e:	8d 04 90             	lea    (%eax,%edx,4),%eax
+     86c:	83 c4 3c             	add    $0x3c,%esp
+     86f:	5b                   	pop    %ebx
+     870:	5e                   	pop    %esi
+     871:	5f                   	pop    %edi
+     872:	5d                   	pop    %ebp
+     873:	c3                   	ret    
+     874:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     878:	8b 45 cc             	mov    -0x34(%ebp),%eax
+     87b:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+     87e:	8d 04 90             	lea    (%eax,%edx,4),%eax
   cmd->argv[argc] = 0;
-     861:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
+     881:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   cmd->eargv[argc] = 0;
-     868:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%eax)
+     888:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%eax)
   return ret;
-     86f:	8b 45 d0             	mov    -0x30(%ebp),%eax
+     88f:	8b 45 d0             	mov    -0x30(%ebp),%eax
 }
-     872:	83 c4 3c             	add    $0x3c,%esp
-     875:	5b                   	pop    %ebx
-     876:	5e                   	pop    %esi
-     877:	5f                   	pop    %edi
-     878:	5d                   	pop    %ebp
-     879:	c3                   	ret    
+     892:	83 c4 3c             	add    $0x3c,%esp
+     895:	5b                   	pop    %ebx
+     896:	5e                   	pop    %esi
+     897:	5f                   	pop    %edi
+     898:	5d                   	pop    %ebp
+     899:	c3                   	ret    
       panic("syntax");
-     87a:	c7 04 24 ee 12 00 00 	movl   $0x12ee,(%esp)
-     881:	e8 da f8 ff ff       	call   160 <panic>
-     886:	8d 76 00             	lea    0x0(%esi),%esi
-     889:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+     89a:	c7 04 24 0e 13 00 00 	movl   $0x130e,(%esp)
+     8a1:	e8 ca f8 ff ff       	call   170 <panic>
+     8a6:	8d 76 00             	lea    0x0(%esi),%esi
+     8a9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-00000890 <parsepipe>:
+000008b0 <parsepipe>:
 {
-     890:	55                   	push   %ebp
-     891:	89 e5                	mov    %esp,%ebp
-     893:	57                   	push   %edi
-     894:	56                   	push   %esi
-     895:	53                   	push   %ebx
-     896:	83 ec 1c             	sub    $0x1c,%esp
-     899:	8b 5d 08             	mov    0x8(%ebp),%ebx
-     89c:	8b 75 0c             	mov    0xc(%ebp),%esi
+     8b0:	55                   	push   %ebp
+     8b1:	89 e5                	mov    %esp,%ebp
+     8b3:	57                   	push   %edi
+     8b4:	56                   	push   %esi
+     8b5:	53                   	push   %ebx
+     8b6:	83 ec 1c             	sub    $0x1c,%esp
+     8b9:	8b 5d 08             	mov    0x8(%ebp),%ebx
+     8bc:	8b 75 0c             	mov    0xc(%ebp),%esi
   cmd = parseexec(ps, es);
-     89f:	89 1c 24             	mov    %ebx,(%esp)
-     8a2:	89 74 24 04          	mov    %esi,0x4(%esp)
-     8a6:	e8 c5 fe ff ff       	call   770 <parseexec>
-  if(peek(ps, es, "|")){
-     8ab:	c7 44 24 08 08 13 00 	movl   $0x1308,0x8(%esp)
-     8b2:	00 
-     8b3:	89 74 24 04          	mov    %esi,0x4(%esp)
-     8b7:	89 1c 24             	mov    %ebx,(%esp)
+     8bf:	89 1c 24             	mov    %ebx,(%esp)
+     8c2:	89 74 24 04          	mov    %esi,0x4(%esp)
+     8c6:	e8 c5 fe ff ff       	call   790 <parseexec>
+  if (peek(ps, es, "|"))
+     8cb:	c7 44 24 08 28 13 00 	movl   $0x1328,0x8(%esp)
+     8d2:	00 
+     8d3:	89 74 24 04          	mov    %esi,0x4(%esp)
+     8d7:	89 1c 24             	mov    %ebx,(%esp)
   cmd = parseexec(ps, es);
-     8ba:	89 c7                	mov    %eax,%edi
-  if(peek(ps, es, "|")){
-     8bc:	e8 6f fd ff ff       	call   630 <peek>
-     8c1:	85 c0                	test   %eax,%eax
-     8c3:	75 0b                	jne    8d0 <parsepipe+0x40>
+     8da:	89 c7                	mov    %eax,%edi
+  if (peek(ps, es, "|"))
+     8dc:	e8 6f fd ff ff       	call   650 <peek>
+     8e1:	85 c0                	test   %eax,%eax
+     8e3:	75 0b                	jne    8f0 <parsepipe+0x40>
 }
-     8c5:	83 c4 1c             	add    $0x1c,%esp
-     8c8:	89 f8                	mov    %edi,%eax
-     8ca:	5b                   	pop    %ebx
-     8cb:	5e                   	pop    %esi
-     8cc:	5f                   	pop    %edi
-     8cd:	5d                   	pop    %ebp
-     8ce:	c3                   	ret    
-     8cf:	90                   	nop
+     8e5:	83 c4 1c             	add    $0x1c,%esp
+     8e8:	89 f8                	mov    %edi,%eax
+     8ea:	5b                   	pop    %ebx
+     8eb:	5e                   	pop    %esi
+     8ec:	5f                   	pop    %edi
+     8ed:	5d                   	pop    %ebp
+     8ee:	c3                   	ret    
+     8ef:	90                   	nop
     gettoken(ps, es, 0, 0);
-     8d0:	89 74 24 04          	mov    %esi,0x4(%esp)
-     8d4:	89 1c 24             	mov    %ebx,(%esp)
-     8d7:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
-     8de:	00 
-     8df:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
-     8e6:	00 
-     8e7:	e8 04 fc ff ff       	call   4f0 <gettoken>
+     8f0:	89 74 24 04          	mov    %esi,0x4(%esp)
+     8f4:	89 1c 24             	mov    %ebx,(%esp)
+     8f7:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
+     8fe:	00 
+     8ff:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+     906:	00 
+     907:	e8 04 fc ff ff       	call   510 <gettoken>
     cmd = pipecmd(cmd, parsepipe(ps, es));
-     8ec:	89 74 24 04          	mov    %esi,0x4(%esp)
-     8f0:	89 1c 24             	mov    %ebx,(%esp)
-     8f3:	e8 98 ff ff ff       	call   890 <parsepipe>
-     8f8:	89 7d 08             	mov    %edi,0x8(%ebp)
-     8fb:	89 45 0c             	mov    %eax,0xc(%ebp)
+     90c:	89 74 24 04          	mov    %esi,0x4(%esp)
+     910:	89 1c 24             	mov    %ebx,(%esp)
+     913:	e8 98 ff ff ff       	call   8b0 <parsepipe>
+     918:	89 7d 08             	mov    %edi,0x8(%ebp)
+     91b:	89 45 0c             	mov    %eax,0xc(%ebp)
 }
-     8fe:	83 c4 1c             	add    $0x1c,%esp
-     901:	5b                   	pop    %ebx
-     902:	5e                   	pop    %esi
-     903:	5f                   	pop    %edi
-     904:	5d                   	pop    %ebp
+     91e:	83 c4 1c             	add    $0x1c,%esp
+     921:	5b                   	pop    %ebx
+     922:	5e                   	pop    %esi
+     923:	5f                   	pop    %edi
+     924:	5d                   	pop    %ebp
     cmd = pipecmd(cmd, parsepipe(ps, es));
-     905:	e9 f6 fa ff ff       	jmp    400 <pipecmd>
-     90a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+     925:	e9 f6 fa ff ff       	jmp    420 <pipecmd>
+     92a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-00000910 <parseline>:
+00000930 <parseline>:
 {
-     910:	55                   	push   %ebp
-     911:	89 e5                	mov    %esp,%ebp
-     913:	57                   	push   %edi
-     914:	56                   	push   %esi
-     915:	53                   	push   %ebx
-     916:	83 ec 1c             	sub    $0x1c,%esp
-     919:	8b 5d 08             	mov    0x8(%ebp),%ebx
-     91c:	8b 75 0c             	mov    0xc(%ebp),%esi
+     930:	55                   	push   %ebp
+     931:	89 e5                	mov    %esp,%ebp
+     933:	57                   	push   %edi
+     934:	56                   	push   %esi
+     935:	53                   	push   %ebx
+     936:	83 ec 1c             	sub    $0x1c,%esp
+     939:	8b 5d 08             	mov    0x8(%ebp),%ebx
+     93c:	8b 75 0c             	mov    0xc(%ebp),%esi
   cmd = parsepipe(ps, es);
-     91f:	89 1c 24             	mov    %ebx,(%esp)
-     922:	89 74 24 04          	mov    %esi,0x4(%esp)
-     926:	e8 65 ff ff ff       	call   890 <parsepipe>
-     92b:	89 c7                	mov    %eax,%edi
-  while(peek(ps, es, "&")){
-     92d:	eb 27                	jmp    956 <parseline+0x46>
-     92f:	90                   	nop
+     93f:	89 1c 24             	mov    %ebx,(%esp)
+     942:	89 74 24 04          	mov    %esi,0x4(%esp)
+     946:	e8 65 ff ff ff       	call   8b0 <parsepipe>
+     94b:	89 c7                	mov    %eax,%edi
+  while (peek(ps, es, "&"))
+     94d:	eb 27                	jmp    976 <parseline+0x46>
+     94f:	90                   	nop
     gettoken(ps, es, 0, 0);
-     930:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
-     937:	00 
-     938:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
-     93f:	00 
-     940:	89 74 24 04          	mov    %esi,0x4(%esp)
-     944:	89 1c 24             	mov    %ebx,(%esp)
-     947:	e8 a4 fb ff ff       	call   4f0 <gettoken>
+     950:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
+     957:	00 
+     958:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+     95f:	00 
+     960:	89 74 24 04          	mov    %esi,0x4(%esp)
+     964:	89 1c 24             	mov    %ebx,(%esp)
+     967:	e8 a4 fb ff ff       	call   510 <gettoken>
     cmd = backcmd(cmd);
-     94c:	89 3c 24             	mov    %edi,(%esp)
-     94f:	e8 4c fb ff ff       	call   4a0 <backcmd>
-     954:	89 c7                	mov    %eax,%edi
-  while(peek(ps, es, "&")){
-     956:	c7 44 24 08 0a 13 00 	movl   $0x130a,0x8(%esp)
-     95d:	00 
-     95e:	89 74 24 04          	mov    %esi,0x4(%esp)
-     962:	89 1c 24             	mov    %ebx,(%esp)
-     965:	e8 c6 fc ff ff       	call   630 <peek>
-     96a:	85 c0                	test   %eax,%eax
-     96c:	75 c2                	jne    930 <parseline+0x20>
-  if(peek(ps, es, ";")){
-     96e:	c7 44 24 08 06 13 00 	movl   $0x1306,0x8(%esp)
-     975:	00 
-     976:	89 74 24 04          	mov    %esi,0x4(%esp)
-     97a:	89 1c 24             	mov    %ebx,(%esp)
-     97d:	e8 ae fc ff ff       	call   630 <peek>
-     982:	85 c0                	test   %eax,%eax
-     984:	75 0a                	jne    990 <parseline+0x80>
+     96c:	89 3c 24             	mov    %edi,(%esp)
+     96f:	e8 4c fb ff ff       	call   4c0 <backcmd>
+     974:	89 c7                	mov    %eax,%edi
+  while (peek(ps, es, "&"))
+     976:	c7 44 24 08 2a 13 00 	movl   $0x132a,0x8(%esp)
+     97d:	00 
+     97e:	89 74 24 04          	mov    %esi,0x4(%esp)
+     982:	89 1c 24             	mov    %ebx,(%esp)
+     985:	e8 c6 fc ff ff       	call   650 <peek>
+     98a:	85 c0                	test   %eax,%eax
+     98c:	75 c2                	jne    950 <parseline+0x20>
+  if (peek(ps, es, ";"))
+     98e:	c7 44 24 08 26 13 00 	movl   $0x1326,0x8(%esp)
+     995:	00 
+     996:	89 74 24 04          	mov    %esi,0x4(%esp)
+     99a:	89 1c 24             	mov    %ebx,(%esp)
+     99d:	e8 ae fc ff ff       	call   650 <peek>
+     9a2:	85 c0                	test   %eax,%eax
+     9a4:	75 0a                	jne    9b0 <parseline+0x80>
 }
-     986:	83 c4 1c             	add    $0x1c,%esp
-     989:	89 f8                	mov    %edi,%eax
-     98b:	5b                   	pop    %ebx
-     98c:	5e                   	pop    %esi
-     98d:	5f                   	pop    %edi
-     98e:	5d                   	pop    %ebp
-     98f:	c3                   	ret    
+     9a6:	83 c4 1c             	add    $0x1c,%esp
+     9a9:	89 f8                	mov    %edi,%eax
+     9ab:	5b                   	pop    %ebx
+     9ac:	5e                   	pop    %esi
+     9ad:	5f                   	pop    %edi
+     9ae:	5d                   	pop    %ebp
+     9af:	c3                   	ret    
     gettoken(ps, es, 0, 0);
-     990:	89 74 24 04          	mov    %esi,0x4(%esp)
-     994:	89 1c 24             	mov    %ebx,(%esp)
-     997:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
-     99e:	00 
-     99f:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
-     9a6:	00 
-     9a7:	e8 44 fb ff ff       	call   4f0 <gettoken>
+     9b0:	89 74 24 04          	mov    %esi,0x4(%esp)
+     9b4:	89 1c 24             	mov    %ebx,(%esp)
+     9b7:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
+     9be:	00 
+     9bf:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+     9c6:	00 
+     9c7:	e8 44 fb ff ff       	call   510 <gettoken>
     cmd = listcmd(cmd, parseline(ps, es));
-     9ac:	89 74 24 04          	mov    %esi,0x4(%esp)
-     9b0:	89 1c 24             	mov    %ebx,(%esp)
-     9b3:	e8 58 ff ff ff       	call   910 <parseline>
-     9b8:	89 7d 08             	mov    %edi,0x8(%ebp)
-     9bb:	89 45 0c             	mov    %eax,0xc(%ebp)
+     9cc:	89 74 24 04          	mov    %esi,0x4(%esp)
+     9d0:	89 1c 24             	mov    %ebx,(%esp)
+     9d3:	e8 58 ff ff ff       	call   930 <parseline>
+     9d8:	89 7d 08             	mov    %edi,0x8(%ebp)
+     9db:	89 45 0c             	mov    %eax,0xc(%ebp)
 }
-     9be:	83 c4 1c             	add    $0x1c,%esp
-     9c1:	5b                   	pop    %ebx
-     9c2:	5e                   	pop    %esi
-     9c3:	5f                   	pop    %edi
-     9c4:	5d                   	pop    %ebp
+     9de:	83 c4 1c             	add    $0x1c,%esp
+     9e1:	5b                   	pop    %ebx
+     9e2:	5e                   	pop    %esi
+     9e3:	5f                   	pop    %edi
+     9e4:	5d                   	pop    %ebp
     cmd = listcmd(cmd, parseline(ps, es));
-     9c5:	e9 86 fa ff ff       	jmp    450 <listcmd>
-     9ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+     9e5:	e9 86 fa ff ff       	jmp    470 <listcmd>
+     9ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-000009d0 <parseblock>:
+000009f0 <parseblock>:
 {
-     9d0:	55                   	push   %ebp
-     9d1:	89 e5                	mov    %esp,%ebp
-     9d3:	57                   	push   %edi
-     9d4:	56                   	push   %esi
-     9d5:	53                   	push   %ebx
-     9d6:	83 ec 1c             	sub    $0x1c,%esp
-     9d9:	8b 5d 08             	mov    0x8(%ebp),%ebx
-     9dc:	8b 75 0c             	mov    0xc(%ebp),%esi
-  if(!peek(ps, es, "("))
-     9df:	c7 44 24 08 ec 12 00 	movl   $0x12ec,0x8(%esp)
-     9e6:	00 
-     9e7:	89 1c 24             	mov    %ebx,(%esp)
-     9ea:	89 74 24 04          	mov    %esi,0x4(%esp)
-     9ee:	e8 3d fc ff ff       	call   630 <peek>
-     9f3:	85 c0                	test   %eax,%eax
-     9f5:	74 76                	je     a6d <parseblock+0x9d>
-  gettoken(ps, es, 0, 0);
-     9f7:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
-     9fe:	00 
-     9ff:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+     9f0:	55                   	push   %ebp
+     9f1:	89 e5                	mov    %esp,%ebp
+     9f3:	57                   	push   %edi
+     9f4:	56                   	push   %esi
+     9f5:	53                   	push   %ebx
+     9f6:	83 ec 1c             	sub    $0x1c,%esp
+     9f9:	8b 5d 08             	mov    0x8(%ebp),%ebx
+     9fc:	8b 75 0c             	mov    0xc(%ebp),%esi
+  if (!peek(ps, es, "("))
+     9ff:	c7 44 24 08 0c 13 00 	movl   $0x130c,0x8(%esp)
      a06:	00 
-     a07:	89 74 24 04          	mov    %esi,0x4(%esp)
-     a0b:	89 1c 24             	mov    %ebx,(%esp)
-     a0e:	e8 dd fa ff ff       	call   4f0 <gettoken>
-  cmd = parseline(ps, es);
-     a13:	89 74 24 04          	mov    %esi,0x4(%esp)
-     a17:	89 1c 24             	mov    %ebx,(%esp)
-     a1a:	e8 f1 fe ff ff       	call   910 <parseline>
-  if(!peek(ps, es, ")"))
-     a1f:	c7 44 24 08 28 13 00 	movl   $0x1328,0x8(%esp)
+     a07:	89 1c 24             	mov    %ebx,(%esp)
+     a0a:	89 74 24 04          	mov    %esi,0x4(%esp)
+     a0e:	e8 3d fc ff ff       	call   650 <peek>
+     a13:	85 c0                	test   %eax,%eax
+     a15:	74 76                	je     a8d <parseblock+0x9d>
+  gettoken(ps, es, 0, 0);
+     a17:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
+     a1e:	00 
+     a1f:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
      a26:	00 
      a27:	89 74 24 04          	mov    %esi,0x4(%esp)
      a2b:	89 1c 24             	mov    %ebx,(%esp)
+     a2e:	e8 dd fa ff ff       	call   510 <gettoken>
   cmd = parseline(ps, es);
-     a2e:	89 c7                	mov    %eax,%edi
-  if(!peek(ps, es, ")"))
-     a30:	e8 fb fb ff ff       	call   630 <peek>
-     a35:	85 c0                	test   %eax,%eax
-     a37:	74 40                	je     a79 <parseblock+0xa9>
+     a33:	89 74 24 04          	mov    %esi,0x4(%esp)
+     a37:	89 1c 24             	mov    %ebx,(%esp)
+     a3a:	e8 f1 fe ff ff       	call   930 <parseline>
+  if (!peek(ps, es, ")"))
+     a3f:	c7 44 24 08 48 13 00 	movl   $0x1348,0x8(%esp)
+     a46:	00 
+     a47:	89 74 24 04          	mov    %esi,0x4(%esp)
+     a4b:	89 1c 24             	mov    %ebx,(%esp)
+  cmd = parseline(ps, es);
+     a4e:	89 c7                	mov    %eax,%edi
+  if (!peek(ps, es, ")"))
+     a50:	e8 fb fb ff ff       	call   650 <peek>
+     a55:	85 c0                	test   %eax,%eax
+     a57:	74 40                	je     a99 <parseblock+0xa9>
   gettoken(ps, es, 0, 0);
-     a39:	89 74 24 04          	mov    %esi,0x4(%esp)
-     a3d:	89 1c 24             	mov    %ebx,(%esp)
-     a40:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
-     a47:	00 
-     a48:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
-     a4f:	00 
-     a50:	e8 9b fa ff ff       	call   4f0 <gettoken>
+     a59:	89 74 24 04          	mov    %esi,0x4(%esp)
+     a5d:	89 1c 24             	mov    %ebx,(%esp)
+     a60:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
+     a67:	00 
+     a68:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+     a6f:	00 
+     a70:	e8 9b fa ff ff       	call   510 <gettoken>
   cmd = parseredirs(cmd, ps, es);
-     a55:	89 74 24 08          	mov    %esi,0x8(%esp)
-     a59:	89 5c 24 04          	mov    %ebx,0x4(%esp)
-     a5d:	89 3c 24             	mov    %edi,(%esp)
-     a60:	e8 2b fc ff ff       	call   690 <parseredirs>
+     a75:	89 74 24 08          	mov    %esi,0x8(%esp)
+     a79:	89 5c 24 04          	mov    %ebx,0x4(%esp)
+     a7d:	89 3c 24             	mov    %edi,(%esp)
+     a80:	e8 2b fc ff ff       	call   6b0 <parseredirs>
 }
-     a65:	83 c4 1c             	add    $0x1c,%esp
-     a68:	5b                   	pop    %ebx
-     a69:	5e                   	pop    %esi
-     a6a:	5f                   	pop    %edi
-     a6b:	5d                   	pop    %ebp
-     a6c:	c3                   	ret    
+     a85:	83 c4 1c             	add    $0x1c,%esp
+     a88:	5b                   	pop    %ebx
+     a89:	5e                   	pop    %esi
+     a8a:	5f                   	pop    %edi
+     a8b:	5d                   	pop    %ebp
+     a8c:	c3                   	ret    
     panic("parseblock");
-     a6d:	c7 04 24 0c 13 00 00 	movl   $0x130c,(%esp)
-     a74:	e8 e7 f6 ff ff       	call   160 <panic>
+     a8d:	c7 04 24 2c 13 00 00 	movl   $0x132c,(%esp)
+     a94:	e8 d7 f6 ff ff       	call   170 <panic>
     panic("syntax - missing )");
-     a79:	c7 04 24 17 13 00 00 	movl   $0x1317,(%esp)
-     a80:	e8 db f6 ff ff       	call   160 <panic>
-     a85:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-     a89:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+     a99:	c7 04 24 37 13 00 00 	movl   $0x1337,(%esp)
+     aa0:	e8 cb f6 ff ff       	call   170 <panic>
+     aa5:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     aa9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-00000a90 <nulterminate>:
+00000ab0 <nulterminate>:
 
 // NUL-terminate all the counted strings.
-struct cmd*
+struct cmd *
 nulterminate(struct cmd *cmd)
 {
-     a90:	55                   	push   %ebp
-     a91:	89 e5                	mov    %esp,%ebp
-     a93:	53                   	push   %ebx
-     a94:	83 ec 14             	sub    $0x14,%esp
-     a97:	8b 5d 08             	mov    0x8(%ebp),%ebx
+     ab0:	55                   	push   %ebp
+     ab1:	89 e5                	mov    %esp,%ebp
+     ab3:	53                   	push   %ebx
+     ab4:	83 ec 14             	sub    $0x14,%esp
+     ab7:	8b 5d 08             	mov    0x8(%ebp),%ebx
   struct execcmd *ecmd;
   struct listcmd *lcmd;
   struct pipecmd *pcmd;
   struct redircmd *rcmd;
 
-  if(cmd == 0)
-     a9a:	85 db                	test   %ebx,%ebx
-     a9c:	0f 84 8e 00 00 00    	je     b30 <nulterminate+0xa0>
+  if (cmd == 0)
+     aba:	85 db                	test   %ebx,%ebx
+     abc:	0f 84 8e 00 00 00    	je     b50 <nulterminate+0xa0>
     return 0;
 
-  switch(cmd->type){
-     aa2:	83 3b 05             	cmpl   $0x5,(%ebx)
-     aa5:	77 49                	ja     af0 <nulterminate+0x60>
-     aa7:	8b 03                	mov    (%ebx),%eax
-     aa9:	ff 24 85 68 13 00 00 	jmp    *0x1368(,%eax,4)
+  switch (cmd->type)
+     ac2:	83 3b 05             	cmpl   $0x5,(%ebx)
+     ac5:	77 49                	ja     b10 <nulterminate+0x60>
+     ac7:	8b 03                	mov    (%ebx),%eax
+     ac9:	ff 24 85 88 13 00 00 	jmp    *0x1388(,%eax,4)
     nulterminate(pcmd->right);
     break;
 
   case LIST:
-    lcmd = (struct listcmd*)cmd;
+    lcmd = (struct listcmd *)cmd;
     nulterminate(lcmd->left);
-     ab0:	8b 43 04             	mov    0x4(%ebx),%eax
-     ab3:	89 04 24             	mov    %eax,(%esp)
-     ab6:	e8 d5 ff ff ff       	call   a90 <nulterminate>
+     ad0:	8b 43 04             	mov    0x4(%ebx),%eax
+     ad3:	89 04 24             	mov    %eax,(%esp)
+     ad6:	e8 d5 ff ff ff       	call   ab0 <nulterminate>
     nulterminate(lcmd->right);
-     abb:	8b 43 08             	mov    0x8(%ebx),%eax
-     abe:	89 04 24             	mov    %eax,(%esp)
-     ac1:	e8 ca ff ff ff       	call   a90 <nulterminate>
+     adb:	8b 43 08             	mov    0x8(%ebx),%eax
+     ade:	89 04 24             	mov    %eax,(%esp)
+     ae1:	e8 ca ff ff ff       	call   ab0 <nulterminate>
     break;
-     ac6:	89 d8                	mov    %ebx,%eax
-    bcmd = (struct backcmd*)cmd;
+     ae6:	89 d8                	mov    %ebx,%eax
+    bcmd = (struct backcmd *)cmd;
     nulterminate(bcmd->cmd);
     break;
   }
   return cmd;
 }
-     ac8:	83 c4 14             	add    $0x14,%esp
-     acb:	5b                   	pop    %ebx
-     acc:	5d                   	pop    %ebp
-     acd:	c3                   	ret    
-     ace:	66 90                	xchg   %ax,%ax
-    for(i=0; ecmd->argv[i]; i++)
-     ad0:	8b 4b 04             	mov    0x4(%ebx),%ecx
-     ad3:	89 d8                	mov    %ebx,%eax
-     ad5:	85 c9                	test   %ecx,%ecx
-     ad7:	74 17                	je     af0 <nulterminate+0x60>
-     ad9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     ae8:	83 c4 14             	add    $0x14,%esp
+     aeb:	5b                   	pop    %ebx
+     aec:	5d                   	pop    %ebp
+     aed:	c3                   	ret    
+     aee:	66 90                	xchg   %ax,%ax
+    for (i = 0; ecmd->argv[i]; i++)
+     af0:	8b 4b 04             	mov    0x4(%ebx),%ecx
+     af3:	89 d8                	mov    %ebx,%eax
+     af5:	85 c9                	test   %ecx,%ecx
+     af7:	74 17                	je     b10 <nulterminate+0x60>
+     af9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
       *ecmd->eargv[i] = 0;
-     ae0:	8b 50 2c             	mov    0x2c(%eax),%edx
-     ae3:	83 c0 04             	add    $0x4,%eax
-     ae6:	c6 02 00             	movb   $0x0,(%edx)
-    for(i=0; ecmd->argv[i]; i++)
-     ae9:	8b 50 04             	mov    0x4(%eax),%edx
-     aec:	85 d2                	test   %edx,%edx
-     aee:	75 f0                	jne    ae0 <nulterminate+0x50>
+     b00:	8b 50 2c             	mov    0x2c(%eax),%edx
+     b03:	83 c0 04             	add    $0x4,%eax
+     b06:	c6 02 00             	movb   $0x0,(%edx)
+    for (i = 0; ecmd->argv[i]; i++)
+     b09:	8b 50 04             	mov    0x4(%eax),%edx
+     b0c:	85 d2                	test   %edx,%edx
+     b0e:	75 f0                	jne    b00 <nulterminate+0x50>
 }
-     af0:	83 c4 14             	add    $0x14,%esp
-  switch(cmd->type){
-     af3:	89 d8                	mov    %ebx,%eax
+     b10:	83 c4 14             	add    $0x14,%esp
+  switch (cmd->type)
+     b13:	89 d8                	mov    %ebx,%eax
 }
-     af5:	5b                   	pop    %ebx
-     af6:	5d                   	pop    %ebp
-     af7:	c3                   	ret    
+     b15:	5b                   	pop    %ebx
+     b16:	5d                   	pop    %ebp
+     b17:	c3                   	ret    
     nulterminate(bcmd->cmd);
-     af8:	8b 43 04             	mov    0x4(%ebx),%eax
-     afb:	89 04 24             	mov    %eax,(%esp)
-     afe:	e8 8d ff ff ff       	call   a90 <nulterminate>
+     b18:	8b 43 04             	mov    0x4(%ebx),%eax
+     b1b:	89 04 24             	mov    %eax,(%esp)
+     b1e:	e8 8d ff ff ff       	call   ab0 <nulterminate>
 }
-     b03:	83 c4 14             	add    $0x14,%esp
+     b23:	83 c4 14             	add    $0x14,%esp
     break;
-     b06:	89 d8                	mov    %ebx,%eax
+     b26:	89 d8                	mov    %ebx,%eax
 }
-     b08:	5b                   	pop    %ebx
-     b09:	5d                   	pop    %ebp
-     b0a:	c3                   	ret    
-     b0b:	90                   	nop
-     b0c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     b28:	5b                   	pop    %ebx
+     b29:	5d                   	pop    %ebp
+     b2a:	c3                   	ret    
+     b2b:	90                   	nop
+     b2c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     nulterminate(rcmd->cmd);
-     b10:	8b 43 04             	mov    0x4(%ebx),%eax
-     b13:	89 04 24             	mov    %eax,(%esp)
-     b16:	e8 75 ff ff ff       	call   a90 <nulterminate>
+     b30:	8b 43 04             	mov    0x4(%ebx),%eax
+     b33:	89 04 24             	mov    %eax,(%esp)
+     b36:	e8 75 ff ff ff       	call   ab0 <nulterminate>
     *rcmd->efile = 0;
-     b1b:	8b 43 0c             	mov    0xc(%ebx),%eax
-     b1e:	c6 00 00             	movb   $0x0,(%eax)
+     b3b:	8b 43 0c             	mov    0xc(%ebx),%eax
+     b3e:	c6 00 00             	movb   $0x0,(%eax)
 }
-     b21:	83 c4 14             	add    $0x14,%esp
+     b41:	83 c4 14             	add    $0x14,%esp
     break;
-     b24:	89 d8                	mov    %ebx,%eax
+     b44:	89 d8                	mov    %ebx,%eax
 }
-     b26:	5b                   	pop    %ebx
-     b27:	5d                   	pop    %ebp
-     b28:	c3                   	ret    
-     b29:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     b46:	5b                   	pop    %ebx
+     b47:	5d                   	pop    %ebp
+     b48:	c3                   	ret    
+     b49:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     return 0;
-     b30:	31 c0                	xor    %eax,%eax
-     b32:	eb 94                	jmp    ac8 <nulterminate+0x38>
-     b34:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-     b3a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+     b50:	31 c0                	xor    %eax,%eax
+     b52:	eb 94                	jmp    ae8 <nulterminate+0x38>
+     b54:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+     b5a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
 
-00000b40 <parsecmd>:
+00000b60 <parsecmd>:
 {
-     b40:	55                   	push   %ebp
-     b41:	89 e5                	mov    %esp,%ebp
-     b43:	56                   	push   %esi
-     b44:	53                   	push   %ebx
-     b45:	83 ec 10             	sub    $0x10,%esp
+     b60:	55                   	push   %ebp
+     b61:	89 e5                	mov    %esp,%ebp
+     b63:	56                   	push   %esi
+     b64:	53                   	push   %ebx
+     b65:	83 ec 10             	sub    $0x10,%esp
   es = s + strlen(s);
-     b48:	8b 5d 08             	mov    0x8(%ebp),%ebx
-     b4b:	89 1c 24             	mov    %ebx,(%esp)
-     b4e:	e8 ed 00 00 00       	call   c40 <strlen>
-     b53:	01 c3                	add    %eax,%ebx
+     b68:	8b 5d 08             	mov    0x8(%ebp),%ebx
+     b6b:	89 1c 24             	mov    %ebx,(%esp)
+     b6e:	e8 ed 00 00 00       	call   c60 <strlen>
+     b73:	01 c3                	add    %eax,%ebx
   cmd = parseline(&s, es);
-     b55:	8d 45 08             	lea    0x8(%ebp),%eax
-     b58:	89 5c 24 04          	mov    %ebx,0x4(%esp)
-     b5c:	89 04 24             	mov    %eax,(%esp)
-     b5f:	e8 ac fd ff ff       	call   910 <parseline>
+     b75:	8d 45 08             	lea    0x8(%ebp),%eax
+     b78:	89 5c 24 04          	mov    %ebx,0x4(%esp)
+     b7c:	89 04 24             	mov    %eax,(%esp)
+     b7f:	e8 ac fd ff ff       	call   930 <parseline>
   peek(&s, es, "");
-     b64:	c7 44 24 08 b6 12 00 	movl   $0x12b6,0x8(%esp)
-     b6b:	00 
-     b6c:	89 5c 24 04          	mov    %ebx,0x4(%esp)
+     b84:	c7 44 24 08 d6 12 00 	movl   $0x12d6,0x8(%esp)
+     b8b:	00 
+     b8c:	89 5c 24 04          	mov    %ebx,0x4(%esp)
   cmd = parseline(&s, es);
-     b70:	89 c6                	mov    %eax,%esi
+     b90:	89 c6                	mov    %eax,%esi
   peek(&s, es, "");
-     b72:	8d 45 08             	lea    0x8(%ebp),%eax
-     b75:	89 04 24             	mov    %eax,(%esp)
-     b78:	e8 b3 fa ff ff       	call   630 <peek>
-  if(s != es){
-     b7d:	8b 45 08             	mov    0x8(%ebp),%eax
-     b80:	39 d8                	cmp    %ebx,%eax
-     b82:	75 11                	jne    b95 <parsecmd+0x55>
+     b92:	8d 45 08             	lea    0x8(%ebp),%eax
+     b95:	89 04 24             	mov    %eax,(%esp)
+     b98:	e8 b3 fa ff ff       	call   650 <peek>
+  if (s != es)
+     b9d:	8b 45 08             	mov    0x8(%ebp),%eax
+     ba0:	39 d8                	cmp    %ebx,%eax
+     ba2:	75 11                	jne    bb5 <parsecmd+0x55>
   nulterminate(cmd);
-     b84:	89 34 24             	mov    %esi,(%esp)
-     b87:	e8 04 ff ff ff       	call   a90 <nulterminate>
+     ba4:	89 34 24             	mov    %esi,(%esp)
+     ba7:	e8 04 ff ff ff       	call   ab0 <nulterminate>
 }
-     b8c:	83 c4 10             	add    $0x10,%esp
-     b8f:	89 f0                	mov    %esi,%eax
-     b91:	5b                   	pop    %ebx
-     b92:	5e                   	pop    %esi
-     b93:	5d                   	pop    %ebp
-     b94:	c3                   	ret    
+     bac:	83 c4 10             	add    $0x10,%esp
+     baf:	89 f0                	mov    %esi,%eax
+     bb1:	5b                   	pop    %ebx
+     bb2:	5e                   	pop    %esi
+     bb3:	5d                   	pop    %ebp
+     bb4:	c3                   	ret    
     printf(2, "leftovers: %s\n", s);
-     b95:	89 44 24 08          	mov    %eax,0x8(%esp)
-     b99:	c7 44 24 04 2a 13 00 	movl   $0x132a,0x4(%esp)
-     ba0:	00 
-     ba1:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-     ba8:	e8 83 03 00 00       	call   f30 <printf>
+     bb5:	89 44 24 08          	mov    %eax,0x8(%esp)
+     bb9:	c7 44 24 04 4a 13 00 	movl   $0x134a,0x4(%esp)
+     bc0:	00 
+     bc1:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+     bc8:	e8 83 03 00 00       	call   f50 <printf>
     panic("syntax");
-     bad:	c7 04 24 ee 12 00 00 	movl   $0x12ee,(%esp)
-     bb4:	e8 a7 f5 ff ff       	call   160 <panic>
-     bb9:	66 90                	xchg   %ax,%ax
-     bbb:	66 90                	xchg   %ax,%ax
-     bbd:	66 90                	xchg   %ax,%ax
-     bbf:	90                   	nop
-
-00000bc0 <strcpy>:
+     bcd:	c7 04 24 0e 13 00 00 	movl   $0x130e,(%esp)
+     bd4:	e8 97 f5 ff ff       	call   170 <panic>
+     bd9:	66 90                	xchg   %ax,%ax
+     bdb:	66 90                	xchg   %ax,%ax
+     bdd:	66 90                	xchg   %ax,%ax
+     bdf:	90                   	nop
+
+00000be0 <strcpy>:
 #include "user.h"
 #include "x86.h"
 
 char*
 strcpy(char *s, const char *t)
 {
-     bc0:	55                   	push   %ebp
-     bc1:	89 e5                	mov    %esp,%ebp
-     bc3:	8b 45 08             	mov    0x8(%ebp),%eax
-     bc6:	8b 4d 0c             	mov    0xc(%ebp),%ecx
-     bc9:	53                   	push   %ebx
+     be0:	55                   	push   %ebp
+     be1:	89 e5                	mov    %esp,%ebp
+     be3:	8b 45 08             	mov    0x8(%ebp),%eax
+     be6:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+     be9:	53                   	push   %ebx
   char *os;
 
   os = s;
   while((*s++ = *t++) != 0)
-     bca:	89 c2                	mov    %eax,%edx
-     bcc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-     bd0:	83 c1 01             	add    $0x1,%ecx
-     bd3:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
-     bd7:	83 c2 01             	add    $0x1,%edx
-     bda:	84 db                	test   %bl,%bl
-     bdc:	88 5a ff             	mov    %bl,-0x1(%edx)
-     bdf:	75 ef                	jne    bd0 <strcpy+0x10>
+     bea:	89 c2                	mov    %eax,%edx
+     bec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     bf0:	83 c1 01             	add    $0x1,%ecx
+     bf3:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
+     bf7:	83 c2 01             	add    $0x1,%edx
+     bfa:	84 db                	test   %bl,%bl
+     bfc:	88 5a ff             	mov    %bl,-0x1(%edx)
+     bff:	75 ef                	jne    bf0 <strcpy+0x10>
     ;
   return os;
 }
-     be1:	5b                   	pop    %ebx
-     be2:	5d                   	pop    %ebp
-     be3:	c3                   	ret    
-     be4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-     bea:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+     c01:	5b                   	pop    %ebx
+     c02:	5d                   	pop    %ebp
+     c03:	c3                   	ret    
+     c04:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+     c0a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
 
-00000bf0 <strcmp>:
+00000c10 <strcmp>:
 
 int
 strcmp(const char *p, const char *q)
 {
-     bf0:	55                   	push   %ebp
-     bf1:	89 e5                	mov    %esp,%ebp
-     bf3:	8b 55 08             	mov    0x8(%ebp),%edx
-     bf6:	53                   	push   %ebx
-     bf7:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+     c10:	55                   	push   %ebp
+     c11:	89 e5                	mov    %esp,%ebp
+     c13:	8b 55 08             	mov    0x8(%ebp),%edx
+     c16:	53                   	push   %ebx
+     c17:	8b 4d 0c             	mov    0xc(%ebp),%ecx
   while(*p && *p == *q)
-     bfa:	0f b6 02             	movzbl (%edx),%eax
-     bfd:	84 c0                	test   %al,%al
-     bff:	74 2d                	je     c2e <strcmp+0x3e>
-     c01:	0f b6 19             	movzbl (%ecx),%ebx
-     c04:	38 d8                	cmp    %bl,%al
-     c06:	74 0e                	je     c16 <strcmp+0x26>
-     c08:	eb 2b                	jmp    c35 <strcmp+0x45>
-     c0a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-     c10:	38 c8                	cmp    %cl,%al
-     c12:	75 15                	jne    c29 <strcmp+0x39>
+     c1a:	0f b6 02             	movzbl (%edx),%eax
+     c1d:	84 c0                	test   %al,%al
+     c1f:	74 2d                	je     c4e <strcmp+0x3e>
+     c21:	0f b6 19             	movzbl (%ecx),%ebx
+     c24:	38 d8                	cmp    %bl,%al
+     c26:	74 0e                	je     c36 <strcmp+0x26>
+     c28:	eb 2b                	jmp    c55 <strcmp+0x45>
+     c2a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+     c30:	38 c8                	cmp    %cl,%al
+     c32:	75 15                	jne    c49 <strcmp+0x39>
     p++, q++;
-     c14:	89 d9                	mov    %ebx,%ecx
-     c16:	83 c2 01             	add    $0x1,%edx
+     c34:	89 d9                	mov    %ebx,%ecx
+     c36:	83 c2 01             	add    $0x1,%edx
   while(*p && *p == *q)
-     c19:	0f b6 02             	movzbl (%edx),%eax
+     c39:	0f b6 02             	movzbl (%edx),%eax
     p++, q++;
-     c1c:	8d 59 01             	lea    0x1(%ecx),%ebx
+     c3c:	8d 59 01             	lea    0x1(%ecx),%ebx
   while(*p && *p == *q)
-     c1f:	0f b6 49 01          	movzbl 0x1(%ecx),%ecx
-     c23:	84 c0                	test   %al,%al
-     c25:	75 e9                	jne    c10 <strcmp+0x20>
-     c27:	31 c0                	xor    %eax,%eax
+     c3f:	0f b6 49 01          	movzbl 0x1(%ecx),%ecx
+     c43:	84 c0                	test   %al,%al
+     c45:	75 e9                	jne    c30 <strcmp+0x20>
+     c47:	31 c0                	xor    %eax,%eax
   return (uchar)*p - (uchar)*q;
-     c29:	29 c8                	sub    %ecx,%eax
+     c49:	29 c8                	sub    %ecx,%eax
 }
-     c2b:	5b                   	pop    %ebx
-     c2c:	5d                   	pop    %ebp
-     c2d:	c3                   	ret    
-     c2e:	0f b6 09             	movzbl (%ecx),%ecx
+     c4b:	5b                   	pop    %ebx
+     c4c:	5d                   	pop    %ebp
+     c4d:	c3                   	ret    
+     c4e:	0f b6 09             	movzbl (%ecx),%ecx
   while(*p && *p == *q)
-     c31:	31 c0                	xor    %eax,%eax
-     c33:	eb f4                	jmp    c29 <strcmp+0x39>
-     c35:	0f b6 cb             	movzbl %bl,%ecx
-     c38:	eb ef                	jmp    c29 <strcmp+0x39>
-     c3a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+     c51:	31 c0                	xor    %eax,%eax
+     c53:	eb f4                	jmp    c49 <strcmp+0x39>
+     c55:	0f b6 cb             	movzbl %bl,%ecx
+     c58:	eb ef                	jmp    c49 <strcmp+0x39>
+     c5a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-00000c40 <strlen>:
+00000c60 <strlen>:
 
 uint
 strlen(const char *s)
 {
-     c40:	55                   	push   %ebp
-     c41:	89 e5                	mov    %esp,%ebp
-     c43:	8b 4d 08             	mov    0x8(%ebp),%ecx
+     c60:	55                   	push   %ebp
+     c61:	89 e5                	mov    %esp,%ebp
+     c63:	8b 4d 08             	mov    0x8(%ebp),%ecx
   int n;
 
   for(n = 0; s[n]; n++)
-     c46:	80 39 00             	cmpb   $0x0,(%ecx)
-     c49:	74 12                	je     c5d <strlen+0x1d>
-     c4b:	31 d2                	xor    %edx,%edx
-     c4d:	8d 76 00             	lea    0x0(%esi),%esi
-     c50:	83 c2 01             	add    $0x1,%edx
-     c53:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
-     c57:	89 d0                	mov    %edx,%eax
-     c59:	75 f5                	jne    c50 <strlen+0x10>
+     c66:	80 39 00             	cmpb   $0x0,(%ecx)
+     c69:	74 12                	je     c7d <strlen+0x1d>
+     c6b:	31 d2                	xor    %edx,%edx
+     c6d:	8d 76 00             	lea    0x0(%esi),%esi
+     c70:	83 c2 01             	add    $0x1,%edx
+     c73:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+     c77:	89 d0                	mov    %edx,%eax
+     c79:	75 f5                	jne    c70 <strlen+0x10>
     ;
   return n;
 }
-     c5b:	5d                   	pop    %ebp
-     c5c:	c3                   	ret    
+     c7b:	5d                   	pop    %ebp
+     c7c:	c3                   	ret    
   for(n = 0; s[n]; n++)
-     c5d:	31 c0                	xor    %eax,%eax
+     c7d:	31 c0                	xor    %eax,%eax
 }
-     c5f:	5d                   	pop    %ebp
-     c60:	c3                   	ret    
-     c61:	eb 0d                	jmp    c70 <memset>
-     c63:	90                   	nop
-     c64:	90                   	nop
-     c65:	90                   	nop
-     c66:	90                   	nop
-     c67:	90                   	nop
-     c68:	90                   	nop
-     c69:	90                   	nop
-     c6a:	90                   	nop
-     c6b:	90                   	nop
-     c6c:	90                   	nop
-     c6d:	90                   	nop
-     c6e:	90                   	nop
-     c6f:	90                   	nop
-
-00000c70 <memset>:
+     c7f:	5d                   	pop    %ebp
+     c80:	c3                   	ret    
+     c81:	eb 0d                	jmp    c90 <memset>
+     c83:	90                   	nop
+     c84:	90                   	nop
+     c85:	90                   	nop
+     c86:	90                   	nop
+     c87:	90                   	nop
+     c88:	90                   	nop
+     c89:	90                   	nop
+     c8a:	90                   	nop
+     c8b:	90                   	nop
+     c8c:	90                   	nop
+     c8d:	90                   	nop
+     c8e:	90                   	nop
+     c8f:	90                   	nop
+
+00000c90 <memset>:
 
 void*
 memset(void *dst, int c, uint n)
 {
-     c70:	55                   	push   %ebp
-     c71:	89 e5                	mov    %esp,%ebp
-     c73:	8b 55 08             	mov    0x8(%ebp),%edx
-     c76:	57                   	push   %edi
+     c90:	55                   	push   %ebp
+     c91:	89 e5                	mov    %esp,%ebp
+     c93:	8b 55 08             	mov    0x8(%ebp),%edx
+     c96:	57                   	push   %edi
 }
 
 static inline void
 stosb(void *addr, int data, int cnt)
 {
   asm volatile("cld; rep stosb" :
-     c77:	8b 4d 10             	mov    0x10(%ebp),%ecx
-     c7a:	8b 45 0c             	mov    0xc(%ebp),%eax
-     c7d:	89 d7                	mov    %edx,%edi
-     c7f:	fc                   	cld    
-     c80:	f3 aa                	rep stos %al,%es:(%edi)
+     c97:	8b 4d 10             	mov    0x10(%ebp),%ecx
+     c9a:	8b 45 0c             	mov    0xc(%ebp),%eax
+     c9d:	89 d7                	mov    %edx,%edi
+     c9f:	fc                   	cld    
+     ca0:	f3 aa                	rep stos %al,%es:(%edi)
   stosb(dst, c, n);
   return dst;
 }
-     c82:	89 d0                	mov    %edx,%eax
-     c84:	5f                   	pop    %edi
-     c85:	5d                   	pop    %ebp
-     c86:	c3                   	ret    
-     c87:	89 f6                	mov    %esi,%esi
-     c89:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+     ca2:	89 d0                	mov    %edx,%eax
+     ca4:	5f                   	pop    %edi
+     ca5:	5d                   	pop    %ebp
+     ca6:	c3                   	ret    
+     ca7:	89 f6                	mov    %esi,%esi
+     ca9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-00000c90 <strchr>:
+00000cb0 <strchr>:
 
 char*
 strchr(const char *s, char c)
 {
-     c90:	55                   	push   %ebp
-     c91:	89 e5                	mov    %esp,%ebp
-     c93:	8b 45 08             	mov    0x8(%ebp),%eax
-     c96:	53                   	push   %ebx
-     c97:	8b 55 0c             	mov    0xc(%ebp),%edx
+     cb0:	55                   	push   %ebp
+     cb1:	89 e5                	mov    %esp,%ebp
+     cb3:	8b 45 08             	mov    0x8(%ebp),%eax
+     cb6:	53                   	push   %ebx
+     cb7:	8b 55 0c             	mov    0xc(%ebp),%edx
   for(; *s; s++)
-     c9a:	0f b6 18             	movzbl (%eax),%ebx
-     c9d:	84 db                	test   %bl,%bl
-     c9f:	74 1d                	je     cbe <strchr+0x2e>
+     cba:	0f b6 18             	movzbl (%eax),%ebx
+     cbd:	84 db                	test   %bl,%bl
+     cbf:	74 1d                	je     cde <strchr+0x2e>
     if(*s == c)
-     ca1:	38 d3                	cmp    %dl,%bl
-     ca3:	89 d1                	mov    %edx,%ecx
-     ca5:	75 0d                	jne    cb4 <strchr+0x24>
-     ca7:	eb 17                	jmp    cc0 <strchr+0x30>
-     ca9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-     cb0:	38 ca                	cmp    %cl,%dl
-     cb2:	74 0c                	je     cc0 <strchr+0x30>
+     cc1:	38 d3                	cmp    %dl,%bl
+     cc3:	89 d1                	mov    %edx,%ecx
+     cc5:	75 0d                	jne    cd4 <strchr+0x24>
+     cc7:	eb 17                	jmp    ce0 <strchr+0x30>
+     cc9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     cd0:	38 ca                	cmp    %cl,%dl
+     cd2:	74 0c                	je     ce0 <strchr+0x30>
   for(; *s; s++)
-     cb4:	83 c0 01             	add    $0x1,%eax
-     cb7:	0f b6 10             	movzbl (%eax),%edx
-     cba:	84 d2                	test   %dl,%dl
-     cbc:	75 f2                	jne    cb0 <strchr+0x20>
+     cd4:	83 c0 01             	add    $0x1,%eax
+     cd7:	0f b6 10             	movzbl (%eax),%edx
+     cda:	84 d2                	test   %dl,%dl
+     cdc:	75 f2                	jne    cd0 <strchr+0x20>
       return (char*)s;
   return 0;
-     cbe:	31 c0                	xor    %eax,%eax
+     cde:	31 c0                	xor    %eax,%eax
 }
-     cc0:	5b                   	pop    %ebx
-     cc1:	5d                   	pop    %ebp
-     cc2:	c3                   	ret    
-     cc3:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-     cc9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+     ce0:	5b                   	pop    %ebx
+     ce1:	5d                   	pop    %ebp
+     ce2:	c3                   	ret    
+     ce3:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+     ce9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-00000cd0 <gets>:
+00000cf0 <gets>:
 
 char*
 gets(char *buf, int max)
 {
-     cd0:	55                   	push   %ebp
-     cd1:	89 e5                	mov    %esp,%ebp
-     cd3:	57                   	push   %edi
-     cd4:	56                   	push   %esi
+     cf0:	55                   	push   %ebp
+     cf1:	89 e5                	mov    %esp,%ebp
+     cf3:	57                   	push   %edi
+     cf4:	56                   	push   %esi
   int i, cc;
   char c;
 
   for(i=0; i+1 < max; ){
-     cd5:	31 f6                	xor    %esi,%esi
+     cf5:	31 f6                	xor    %esi,%esi
 {
-     cd7:	53                   	push   %ebx
-     cd8:	83 ec 2c             	sub    $0x2c,%esp
+     cf7:	53                   	push   %ebx
+     cf8:	83 ec 2c             	sub    $0x2c,%esp
     cc = read(0, &c, 1);
-     cdb:	8d 7d e7             	lea    -0x19(%ebp),%edi
+     cfb:	8d 7d e7             	lea    -0x19(%ebp),%edi
   for(i=0; i+1 < max; ){
-     cde:	eb 31                	jmp    d11 <gets+0x41>
+     cfe:	eb 31                	jmp    d31 <gets+0x41>
     cc = read(0, &c, 1);
-     ce0:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
-     ce7:	00 
-     ce8:	89 7c 24 04          	mov    %edi,0x4(%esp)
-     cec:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-     cf3:	e8 02 01 00 00       	call   dfa <read>
+     d00:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+     d07:	00 
+     d08:	89 7c 24 04          	mov    %edi,0x4(%esp)
+     d0c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+     d13:	e8 02 01 00 00       	call   e1a <read>
     if(cc < 1)
-     cf8:	85 c0                	test   %eax,%eax
-     cfa:	7e 1d                	jle    d19 <gets+0x49>
+     d18:	85 c0                	test   %eax,%eax
+     d1a:	7e 1d                	jle    d39 <gets+0x49>
       break;
     buf[i++] = c;
-     cfc:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+     d1c:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
   for(i=0; i+1 < max; ){
-     d00:	89 de                	mov    %ebx,%esi
+     d20:	89 de                	mov    %ebx,%esi
     buf[i++] = c;
-     d02:	8b 55 08             	mov    0x8(%ebp),%edx
+     d22:	8b 55 08             	mov    0x8(%ebp),%edx
     if(c == '\n' || c == '\r')
-     d05:	3c 0d                	cmp    $0xd,%al
+     d25:	3c 0d                	cmp    $0xd,%al
     buf[i++] = c;
-     d07:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
+     d27:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
     if(c == '\n' || c == '\r')
-     d0b:	74 0c                	je     d19 <gets+0x49>
-     d0d:	3c 0a                	cmp    $0xa,%al
-     d0f:	74 08                	je     d19 <gets+0x49>
+     d2b:	74 0c                	je     d39 <gets+0x49>
+     d2d:	3c 0a                	cmp    $0xa,%al
+     d2f:	74 08                	je     d39 <gets+0x49>
   for(i=0; i+1 < max; ){
-     d11:	8d 5e 01             	lea    0x1(%esi),%ebx
-     d14:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
-     d17:	7c c7                	jl     ce0 <gets+0x10>
+     d31:	8d 5e 01             	lea    0x1(%esi),%ebx
+     d34:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+     d37:	7c c7                	jl     d00 <gets+0x10>
       break;
   }
   buf[i] = '\0';
-     d19:	8b 45 08             	mov    0x8(%ebp),%eax
-     d1c:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+     d39:	8b 45 08             	mov    0x8(%ebp),%eax
+     d3c:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
   return buf;
 }
-     d20:	83 c4 2c             	add    $0x2c,%esp
-     d23:	5b                   	pop    %ebx
-     d24:	5e                   	pop    %esi
-     d25:	5f                   	pop    %edi
-     d26:	5d                   	pop    %ebp
-     d27:	c3                   	ret    
-     d28:	90                   	nop
-     d29:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     d40:	83 c4 2c             	add    $0x2c,%esp
+     d43:	5b                   	pop    %ebx
+     d44:	5e                   	pop    %esi
+     d45:	5f                   	pop    %edi
+     d46:	5d                   	pop    %ebp
+     d47:	c3                   	ret    
+     d48:	90                   	nop
+     d49:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-00000d30 <stat>:
+00000d50 <stat>:
 
 int
 stat(const char *n, struct stat *st)
 {
-     d30:	55                   	push   %ebp
-     d31:	89 e5                	mov    %esp,%ebp
-     d33:	56                   	push   %esi
-     d34:	53                   	push   %ebx
-     d35:	83 ec 10             	sub    $0x10,%esp
+     d50:	55                   	push   %ebp
+     d51:	89 e5                	mov    %esp,%ebp
+     d53:	56                   	push   %esi
+     d54:	53                   	push   %ebx
+     d55:	83 ec 10             	sub    $0x10,%esp
   int fd;
   int r;
 
   fd = open(n, O_RDONLY);
-     d38:	8b 45 08             	mov    0x8(%ebp),%eax
-     d3b:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-     d42:	00 
-     d43:	89 04 24             	mov    %eax,(%esp)
-     d46:	e8 d7 00 00 00       	call   e22 <open>
+     d58:	8b 45 08             	mov    0x8(%ebp),%eax
+     d5b:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+     d62:	00 
+     d63:	89 04 24             	mov    %eax,(%esp)
+     d66:	e8 d7 00 00 00       	call   e42 <open>
   if(fd < 0)
-     d4b:	85 c0                	test   %eax,%eax
+     d6b:	85 c0                	test   %eax,%eax
   fd = open(n, O_RDONLY);
-     d4d:	89 c3                	mov    %eax,%ebx
+     d6d:	89 c3                	mov    %eax,%ebx
   if(fd < 0)
-     d4f:	78 27                	js     d78 <stat+0x48>
+     d6f:	78 27                	js     d98 <stat+0x48>
     return -1;
   r = fstat(fd, st);
-     d51:	8b 45 0c             	mov    0xc(%ebp),%eax
-     d54:	89 1c 24             	mov    %ebx,(%esp)
-     d57:	89 44 24 04          	mov    %eax,0x4(%esp)
-     d5b:	e8 da 00 00 00       	call   e3a <fstat>
+     d71:	8b 45 0c             	mov    0xc(%ebp),%eax
+     d74:	89 1c 24             	mov    %ebx,(%esp)
+     d77:	89 44 24 04          	mov    %eax,0x4(%esp)
+     d7b:	e8 da 00 00 00       	call   e5a <fstat>
   close(fd);
-     d60:	89 1c 24             	mov    %ebx,(%esp)
+     d80:	89 1c 24             	mov    %ebx,(%esp)
   r = fstat(fd, st);
-     d63:	89 c6                	mov    %eax,%esi
+     d83:	89 c6                	mov    %eax,%esi
   close(fd);
-     d65:	e8 a0 00 00 00       	call   e0a <close>
+     d85:	e8 a0 00 00 00       	call   e2a <close>
   return r;
-     d6a:	89 f0                	mov    %esi,%eax
+     d8a:	89 f0                	mov    %esi,%eax
 }
-     d6c:	83 c4 10             	add    $0x10,%esp
-     d6f:	5b                   	pop    %ebx
-     d70:	5e                   	pop    %esi
-     d71:	5d                   	pop    %ebp
-     d72:	c3                   	ret    
-     d73:	90                   	nop
-     d74:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     d8c:	83 c4 10             	add    $0x10,%esp
+     d8f:	5b                   	pop    %ebx
+     d90:	5e                   	pop    %esi
+     d91:	5d                   	pop    %ebp
+     d92:	c3                   	ret    
+     d93:	90                   	nop
+     d94:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     return -1;
-     d78:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-     d7d:	eb ed                	jmp    d6c <stat+0x3c>
-     d7f:	90                   	nop
+     d98:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+     d9d:	eb ed                	jmp    d8c <stat+0x3c>
+     d9f:	90                   	nop
 
-00000d80 <atoi>:
+00000da0 <atoi>:
 
 int
 atoi(const char *s)
 {
-     d80:	55                   	push   %ebp
-     d81:	89 e5                	mov    %esp,%ebp
-     d83:	8b 4d 08             	mov    0x8(%ebp),%ecx
-     d86:	53                   	push   %ebx
+     da0:	55                   	push   %ebp
+     da1:	89 e5                	mov    %esp,%ebp
+     da3:	8b 4d 08             	mov    0x8(%ebp),%ecx
+     da6:	53                   	push   %ebx
   int n;
 
   n = 0;
   while('0' <= *s && *s <= '9')
-     d87:	0f be 11             	movsbl (%ecx),%edx
-     d8a:	8d 42 d0             	lea    -0x30(%edx),%eax
-     d8d:	3c 09                	cmp    $0x9,%al
+     da7:	0f be 11             	movsbl (%ecx),%edx
+     daa:	8d 42 d0             	lea    -0x30(%edx),%eax
+     dad:	3c 09                	cmp    $0x9,%al
   n = 0;
-     d8f:	b8 00 00 00 00       	mov    $0x0,%eax
+     daf:	b8 00 00 00 00       	mov    $0x0,%eax
   while('0' <= *s && *s <= '9')
-     d94:	77 17                	ja     dad <atoi+0x2d>
-     d96:	66 90                	xchg   %ax,%ax
+     db4:	77 17                	ja     dcd <atoi+0x2d>
+     db6:	66 90                	xchg   %ax,%ax
     n = n*10 + *s++ - '0';
-     d98:	83 c1 01             	add    $0x1,%ecx
-     d9b:	8d 04 80             	lea    (%eax,%eax,4),%eax
-     d9e:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+     db8:	83 c1 01             	add    $0x1,%ecx
+     dbb:	8d 04 80             	lea    (%eax,%eax,4),%eax
+     dbe:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
   while('0' <= *s && *s <= '9')
-     da2:	0f be 11             	movsbl (%ecx),%edx
-     da5:	8d 5a d0             	lea    -0x30(%edx),%ebx
-     da8:	80 fb 09             	cmp    $0x9,%bl
-     dab:	76 eb                	jbe    d98 <atoi+0x18>
+     dc2:	0f be 11             	movsbl (%ecx),%edx
+     dc5:	8d 5a d0             	lea    -0x30(%edx),%ebx
+     dc8:	80 fb 09             	cmp    $0x9,%bl
+     dcb:	76 eb                	jbe    db8 <atoi+0x18>
   return n;
 }
-     dad:	5b                   	pop    %ebx
-     dae:	5d                   	pop    %ebp
-     daf:	c3                   	ret    
+     dcd:	5b                   	pop    %ebx
+     dce:	5d                   	pop    %ebp
+     dcf:	c3                   	ret    
 
-00000db0 <memmove>:
+00000dd0 <memmove>:
 
 void*
 memmove(void *vdst, const void *vsrc, int n)
 {
-     db0:	55                   	push   %ebp
+     dd0:	55                   	push   %ebp
   char *dst;
   const char *src;
 
   dst = vdst;
   src = vsrc;
   while(n-- > 0)
-     db1:	31 d2                	xor    %edx,%edx
+     dd1:	31 d2                	xor    %edx,%edx
 {
-     db3:	89 e5                	mov    %esp,%ebp
-     db5:	56                   	push   %esi
-     db6:	8b 45 08             	mov    0x8(%ebp),%eax
-     db9:	53                   	push   %ebx
-     dba:	8b 5d 10             	mov    0x10(%ebp),%ebx
-     dbd:	8b 75 0c             	mov    0xc(%ebp),%esi
+     dd3:	89 e5                	mov    %esp,%ebp
+     dd5:	56                   	push   %esi
+     dd6:	8b 45 08             	mov    0x8(%ebp),%eax
+     dd9:	53                   	push   %ebx
+     dda:	8b 5d 10             	mov    0x10(%ebp),%ebx
+     ddd:	8b 75 0c             	mov    0xc(%ebp),%esi
   while(n-- > 0)
-     dc0:	85 db                	test   %ebx,%ebx
-     dc2:	7e 12                	jle    dd6 <memmove+0x26>
-     dc4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     de0:	85 db                	test   %ebx,%ebx
+     de2:	7e 12                	jle    df6 <memmove+0x26>
+     de4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     *dst++ = *src++;
-     dc8:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
-     dcc:	88 0c 10             	mov    %cl,(%eax,%edx,1)
-     dcf:	83 c2 01             	add    $0x1,%edx
+     de8:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
+     dec:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+     def:	83 c2 01             	add    $0x1,%edx
   while(n-- > 0)
-     dd2:	39 da                	cmp    %ebx,%edx
-     dd4:	75 f2                	jne    dc8 <memmove+0x18>
+     df2:	39 da                	cmp    %ebx,%edx
+     df4:	75 f2                	jne    de8 <memmove+0x18>
   return vdst;
 }
-     dd6:	5b                   	pop    %ebx
-     dd7:	5e                   	pop    %esi
-     dd8:	5d                   	pop    %ebp
-     dd9:	c3                   	ret    
-
-00000dda <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
-     dda:	b8 01 00 00 00       	mov    $0x1,%eax
-     ddf:	cd 40                	int    $0x40
-     de1:	c3                   	ret    
-
-00000de2 <exit>:
-SYSCALL(exit)
-     de2:	b8 02 00 00 00       	mov    $0x2,%eax
-     de7:	cd 40                	int    $0x40
-     de9:	c3                   	ret    
-
-00000dea <wait>:
-SYSCALL(wait)
-     dea:	b8 03 00 00 00       	mov    $0x3,%eax
-     def:	cd 40                	int    $0x40
-     df1:	c3                   	ret    
-
-00000df2 <pipe>:
-SYSCALL(pipe)
-     df2:	b8 04 00 00 00       	mov    $0x4,%eax
-     df7:	cd 40                	int    $0x40
+     df6:	5b                   	pop    %ebx
+     df7:	5e                   	pop    %esi
+     df8:	5d                   	pop    %ebp
      df9:	c3                   	ret    
 
-00000dfa <read>:
-SYSCALL(read)
-     dfa:	b8 05 00 00 00       	mov    $0x5,%eax
+00000dfa <fork>:
+     dfa:	b8 01 00 00 00       	mov    $0x1,%eax
      dff:	cd 40                	int    $0x40
      e01:	c3                   	ret    
 
-00000e02 <write>:
-SYSCALL(write)
-     e02:	b8 10 00 00 00       	mov    $0x10,%eax
+00000e02 <exit>:
+     e02:	b8 02 00 00 00       	mov    $0x2,%eax
      e07:	cd 40                	int    $0x40
      e09:	c3                   	ret    
 
-00000e0a <close>:
-SYSCALL(close)
-     e0a:	b8 15 00 00 00       	mov    $0x15,%eax
+00000e0a <wait>:
+     e0a:	b8 03 00 00 00       	mov    $0x3,%eax
      e0f:	cd 40                	int    $0x40
      e11:	c3                   	ret    
 
-00000e12 <kill>:
-SYSCALL(kill)
-     e12:	b8 06 00 00 00       	mov    $0x6,%eax
+00000e12 <pipe>:
+     e12:	b8 04 00 00 00       	mov    $0x4,%eax
      e17:	cd 40                	int    $0x40
      e19:	c3                   	ret    
 
-00000e1a <exec>:
-SYSCALL(exec)
-     e1a:	b8 07 00 00 00       	mov    $0x7,%eax
+00000e1a <read>:
+     e1a:	b8 05 00 00 00       	mov    $0x5,%eax
      e1f:	cd 40                	int    $0x40
      e21:	c3                   	ret    
 
-00000e22 <open>:
-SYSCALL(open)
-     e22:	b8 0f 00 00 00       	mov    $0xf,%eax
+00000e22 <write>:
+     e22:	b8 10 00 00 00       	mov    $0x10,%eax
      e27:	cd 40                	int    $0x40
      e29:	c3                   	ret    
 
-00000e2a <mknod>:
-SYSCALL(mknod)
-     e2a:	b8 11 00 00 00       	mov    $0x11,%eax
+00000e2a <close>:
+     e2a:	b8 15 00 00 00       	mov    $0x15,%eax
      e2f:	cd 40                	int    $0x40
      e31:	c3                   	ret    
 
-00000e32 <unlink>:
-SYSCALL(unlink)
-     e32:	b8 12 00 00 00       	mov    $0x12,%eax
+00000e32 <kill>:
+     e32:	b8 06 00 00 00       	mov    $0x6,%eax
      e37:	cd 40                	int    $0x40
      e39:	c3                   	ret    
 
-00000e3a <fstat>:
-SYSCALL(fstat)
-     e3a:	b8 08 00 00 00       	mov    $0x8,%eax
+00000e3a <exec>:
+     e3a:	b8 07 00 00 00       	mov    $0x7,%eax
      e3f:	cd 40                	int    $0x40
      e41:	c3                   	ret    
 
-00000e42 <link>:
-SYSCALL(link)
-     e42:	b8 13 00 00 00       	mov    $0x13,%eax
+00000e42 <open>:
+     e42:	b8 0f 00 00 00       	mov    $0xf,%eax
      e47:	cd 40                	int    $0x40
      e49:	c3                   	ret    
 
-00000e4a <mkdir>:
-SYSCALL(mkdir)
-     e4a:	b8 14 00 00 00       	mov    $0x14,%eax
+00000e4a <mknod>:
+     e4a:	b8 11 00 00 00       	mov    $0x11,%eax
      e4f:	cd 40                	int    $0x40
      e51:	c3                   	ret    
 
-00000e52 <chdir>:
-SYSCALL(chdir)
-     e52:	b8 09 00 00 00       	mov    $0x9,%eax
+00000e52 <unlink>:
+     e52:	b8 12 00 00 00       	mov    $0x12,%eax
      e57:	cd 40                	int    $0x40
      e59:	c3                   	ret    
 
-00000e5a <dup>:
-SYSCALL(dup)
-     e5a:	b8 0a 00 00 00       	mov    $0xa,%eax
+00000e5a <fstat>:
+     e5a:	b8 08 00 00 00       	mov    $0x8,%eax
      e5f:	cd 40                	int    $0x40
      e61:	c3                   	ret    
 
-00000e62 <getpid>:
-SYSCALL(getpid)
-     e62:	b8 0b 00 00 00       	mov    $0xb,%eax
+00000e62 <link>:
+     e62:	b8 13 00 00 00       	mov    $0x13,%eax
      e67:	cd 40                	int    $0x40
      e69:	c3                   	ret    
 
-00000e6a <sbrk>:
-SYSCALL(sbrk)
-     e6a:	b8 0c 00 00 00       	mov    $0xc,%eax
+00000e6a <mkdir>:
+     e6a:	b8 14 00 00 00       	mov    $0x14,%eax
      e6f:	cd 40                	int    $0x40
      e71:	c3                   	ret    
 
-00000e72 <sleep>:
-SYSCALL(sleep)
-     e72:	b8 0d 00 00 00       	mov    $0xd,%eax
+00000e72 <chdir>:
+     e72:	b8 09 00 00 00       	mov    $0x9,%eax
      e77:	cd 40                	int    $0x40
      e79:	c3                   	ret    
 
-00000e7a <uptime>:
-SYSCALL(uptime)
-     e7a:	b8 0e 00 00 00       	mov    $0xe,%eax
+00000e7a <dup>:
+     e7a:	b8 0a 00 00 00       	mov    $0xa,%eax
      e7f:	cd 40                	int    $0x40
      e81:	c3                   	ret    
-     e82:	66 90                	xchg   %ax,%ax
-     e84:	66 90                	xchg   %ax,%ax
-     e86:	66 90                	xchg   %ax,%ax
-     e88:	66 90                	xchg   %ax,%ax
-     e8a:	66 90                	xchg   %ax,%ax
-     e8c:	66 90                	xchg   %ax,%ax
-     e8e:	66 90                	xchg   %ax,%ax
-
-00000e90 <printint>:
+
+00000e82 <getpid>:
+     e82:	b8 0b 00 00 00       	mov    $0xb,%eax
+     e87:	cd 40                	int    $0x40
+     e89:	c3                   	ret    
+
+00000e8a <sbrk>:
+     e8a:	b8 0c 00 00 00       	mov    $0xc,%eax
+     e8f:	cd 40                	int    $0x40
+     e91:	c3                   	ret    
+
+00000e92 <sleep>:
+     e92:	b8 0d 00 00 00       	mov    $0xd,%eax
+     e97:	cd 40                	int    $0x40
+     e99:	c3                   	ret    
+
+00000e9a <uptime>:
+     e9a:	b8 0e 00 00 00       	mov    $0xe,%eax
+     e9f:	cd 40                	int    $0x40
+     ea1:	c3                   	ret    
+     ea2:	66 90                	xchg   %ax,%ax
+     ea4:	66 90                	xchg   %ax,%ax
+     ea6:	66 90                	xchg   %ax,%ax
+     ea8:	66 90                	xchg   %ax,%ax
+     eaa:	66 90                	xchg   %ax,%ax
+     eac:	66 90                	xchg   %ax,%ax
+     eae:	66 90                	xchg   %ax,%ax
+
+00000eb0 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
-     e90:	55                   	push   %ebp
-     e91:	89 e5                	mov    %esp,%ebp
-     e93:	57                   	push   %edi
-     e94:	56                   	push   %esi
-     e95:	89 c6                	mov    %eax,%esi
-     e97:	53                   	push   %ebx
-     e98:	83 ec 4c             	sub    $0x4c,%esp
+     eb0:	55                   	push   %ebp
+     eb1:	89 e5                	mov    %esp,%ebp
+     eb3:	57                   	push   %edi
+     eb4:	56                   	push   %esi
+     eb5:	89 c6                	mov    %eax,%esi
+     eb7:	53                   	push   %ebx
+     eb8:	83 ec 4c             	sub    $0x4c,%esp
   char buf[16];
   int i, neg;
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
-     e9b:	8b 5d 08             	mov    0x8(%ebp),%ebx
-     e9e:	85 db                	test   %ebx,%ebx
-     ea0:	74 09                	je     eab <printint+0x1b>
-     ea2:	89 d0                	mov    %edx,%eax
-     ea4:	c1 e8 1f             	shr    $0x1f,%eax
-     ea7:	84 c0                	test   %al,%al
-     ea9:	75 75                	jne    f20 <printint+0x90>
+     ebb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+     ebe:	85 db                	test   %ebx,%ebx
+     ec0:	74 09                	je     ecb <printint+0x1b>
+     ec2:	89 d0                	mov    %edx,%eax
+     ec4:	c1 e8 1f             	shr    $0x1f,%eax
+     ec7:	84 c0                	test   %al,%al
+     ec9:	75 75                	jne    f40 <printint+0x90>
     neg = 1;
     x = -xx;
   } else {
     x = xx;
-     eab:	89 d0                	mov    %edx,%eax
+     ecb:	89 d0                	mov    %edx,%eax
   neg = 0;
-     ead:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
-     eb4:	89 75 c0             	mov    %esi,-0x40(%ebp)
+     ecd:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+     ed4:	89 75 c0             	mov    %esi,-0x40(%ebp)
   }
 
   i = 0;
-     eb7:	31 ff                	xor    %edi,%edi
-     eb9:	89 ce                	mov    %ecx,%esi
-     ebb:	8d 5d d7             	lea    -0x29(%ebp),%ebx
-     ebe:	eb 02                	jmp    ec2 <printint+0x32>
+     ed7:	31 ff                	xor    %edi,%edi
+     ed9:	89 ce                	mov    %ecx,%esi
+     edb:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+     ede:	eb 02                	jmp    ee2 <printint+0x32>
   do{
     buf[i++] = digits[x % base];
-     ec0:	89 cf                	mov    %ecx,%edi
-     ec2:	31 d2                	xor    %edx,%edx
-     ec4:	f7 f6                	div    %esi
-     ec6:	8d 4f 01             	lea    0x1(%edi),%ecx
-     ec9:	0f b6 92 87 13 00 00 	movzbl 0x1387(%edx),%edx
+     ee0:	89 cf                	mov    %ecx,%edi
+     ee2:	31 d2                	xor    %edx,%edx
+     ee4:	f7 f6                	div    %esi
+     ee6:	8d 4f 01             	lea    0x1(%edi),%ecx
+     ee9:	0f b6 92 a7 13 00 00 	movzbl 0x13a7(%edx),%edx
   }while((x /= base) != 0);
-     ed0:	85 c0                	test   %eax,%eax
+     ef0:	85 c0                	test   %eax,%eax
     buf[i++] = digits[x % base];
-     ed2:	88 14 0b             	mov    %dl,(%ebx,%ecx,1)
+     ef2:	88 14 0b             	mov    %dl,(%ebx,%ecx,1)
   }while((x /= base) != 0);
-     ed5:	75 e9                	jne    ec0 <printint+0x30>
+     ef5:	75 e9                	jne    ee0 <printint+0x30>
   if(neg)
-     ed7:	8b 55 c4             	mov    -0x3c(%ebp),%edx
+     ef7:	8b 55 c4             	mov    -0x3c(%ebp),%edx
     buf[i++] = digits[x % base];
-     eda:	89 c8                	mov    %ecx,%eax
-     edc:	8b 75 c0             	mov    -0x40(%ebp),%esi
+     efa:	89 c8                	mov    %ecx,%eax
+     efc:	8b 75 c0             	mov    -0x40(%ebp),%esi
   if(neg)
-     edf:	85 d2                	test   %edx,%edx
-     ee1:	74 08                	je     eeb <printint+0x5b>
+     eff:	85 d2                	test   %edx,%edx
+     f01:	74 08                	je     f0b <printint+0x5b>
     buf[i++] = '-';
-     ee3:	8d 4f 02             	lea    0x2(%edi),%ecx
-     ee6:	c6 44 05 d8 2d       	movb   $0x2d,-0x28(%ebp,%eax,1)
+     f03:	8d 4f 02             	lea    0x2(%edi),%ecx
+     f06:	c6 44 05 d8 2d       	movb   $0x2d,-0x28(%ebp,%eax,1)
 
   while(--i >= 0)
-     eeb:	8d 79 ff             	lea    -0x1(%ecx),%edi
-     eee:	66 90                	xchg   %ax,%ax
-     ef0:	0f b6 44 3d d8       	movzbl -0x28(%ebp,%edi,1),%eax
-     ef5:	83 ef 01             	sub    $0x1,%edi
+     f0b:	8d 79 ff             	lea    -0x1(%ecx),%edi
+     f0e:	66 90                	xchg   %ax,%ax
+     f10:	0f b6 44 3d d8       	movzbl -0x28(%ebp,%edi,1),%eax
+     f15:	83 ef 01             	sub    $0x1,%edi
   write(fd, &c, 1);
-     ef8:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
-     eff:	00 
-     f00:	89 5c 24 04          	mov    %ebx,0x4(%esp)
-     f04:	89 34 24             	mov    %esi,(%esp)
-     f07:	88 45 d7             	mov    %al,-0x29(%ebp)
-     f0a:	e8 f3 fe ff ff       	call   e02 <write>
+     f18:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+     f1f:	00 
+     f20:	89 5c 24 04          	mov    %ebx,0x4(%esp)
+     f24:	89 34 24             	mov    %esi,(%esp)
+     f27:	88 45 d7             	mov    %al,-0x29(%ebp)
+     f2a:	e8 f3 fe ff ff       	call   e22 <write>
   while(--i >= 0)
-     f0f:	83 ff ff             	cmp    $0xffffffff,%edi
-     f12:	75 dc                	jne    ef0 <printint+0x60>
+     f2f:	83 ff ff             	cmp    $0xffffffff,%edi
+     f32:	75 dc                	jne    f10 <printint+0x60>
     putc(fd, buf[i]);
 }
-     f14:	83 c4 4c             	add    $0x4c,%esp
-     f17:	5b                   	pop    %ebx
-     f18:	5e                   	pop    %esi
-     f19:	5f                   	pop    %edi
-     f1a:	5d                   	pop    %ebp
-     f1b:	c3                   	ret    
-     f1c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     f34:	83 c4 4c             	add    $0x4c,%esp
+     f37:	5b                   	pop    %ebx
+     f38:	5e                   	pop    %esi
+     f39:	5f                   	pop    %edi
+     f3a:	5d                   	pop    %ebp
+     f3b:	c3                   	ret    
+     f3c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     x = -xx;
-     f20:	89 d0                	mov    %edx,%eax
-     f22:	f7 d8                	neg    %eax
+     f40:	89 d0                	mov    %edx,%eax
+     f42:	f7 d8                	neg    %eax
     neg = 1;
-     f24:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
-     f2b:	eb 87                	jmp    eb4 <printint+0x24>
-     f2d:	8d 76 00             	lea    0x0(%esi),%esi
+     f44:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+     f4b:	eb 87                	jmp    ed4 <printint+0x24>
+     f4d:	8d 76 00             	lea    0x0(%esi),%esi
 
-00000f30 <printf>:
+00000f50 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
-     f30:	55                   	push   %ebp
-     f31:	89 e5                	mov    %esp,%ebp
-     f33:	57                   	push   %edi
+     f50:	55                   	push   %ebp
+     f51:	89 e5                	mov    %esp,%ebp
+     f53:	57                   	push   %edi
   char *s;
   int c, i, state;
   uint *ap;
 
   state = 0;
-     f34:	31 ff                	xor    %edi,%edi
+     f54:	31 ff                	xor    %edi,%edi
 {
-     f36:	56                   	push   %esi
-     f37:	53                   	push   %ebx
-     f38:	83 ec 3c             	sub    $0x3c,%esp
+     f56:	56                   	push   %esi
+     f57:	53                   	push   %ebx
+     f58:	83 ec 3c             	sub    $0x3c,%esp
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
-     f3b:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+     f5b:	8b 5d 0c             	mov    0xc(%ebp),%ebx
   ap = (uint*)(void*)&fmt + 1;
-     f3e:	8d 45 10             	lea    0x10(%ebp),%eax
+     f5e:	8d 45 10             	lea    0x10(%ebp),%eax
 {
-     f41:	8b 75 08             	mov    0x8(%ebp),%esi
+     f61:	8b 75 08             	mov    0x8(%ebp),%esi
   ap = (uint*)(void*)&fmt + 1;
-     f44:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+     f64:	89 45 d4             	mov    %eax,-0x2c(%ebp)
   for(i = 0; fmt[i]; i++){
-     f47:	0f b6 13             	movzbl (%ebx),%edx
-     f4a:	83 c3 01             	add    $0x1,%ebx
-     f4d:	84 d2                	test   %dl,%dl
-     f4f:	75 39                	jne    f8a <printf+0x5a>
-     f51:	e9 c2 00 00 00       	jmp    1018 <printf+0xe8>
-     f56:	66 90                	xchg   %ax,%ax
+     f67:	0f b6 13             	movzbl (%ebx),%edx
+     f6a:	83 c3 01             	add    $0x1,%ebx
+     f6d:	84 d2                	test   %dl,%dl
+     f6f:	75 39                	jne    faa <printf+0x5a>
+     f71:	e9 c2 00 00 00       	jmp    1038 <printf+0xe8>
+     f76:	66 90                	xchg   %ax,%ax
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
-     f58:	83 fa 25             	cmp    $0x25,%edx
-     f5b:	0f 84 bf 00 00 00    	je     1020 <printf+0xf0>
+     f78:	83 fa 25             	cmp    $0x25,%edx
+     f7b:	0f 84 bf 00 00 00    	je     1040 <printf+0xf0>
   write(fd, &c, 1);
-     f61:	8d 45 e2             	lea    -0x1e(%ebp),%eax
-     f64:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
-     f6b:	00 
-     f6c:	89 44 24 04          	mov    %eax,0x4(%esp)
-     f70:	89 34 24             	mov    %esi,(%esp)
+     f81:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+     f84:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+     f8b:	00 
+     f8c:	89 44 24 04          	mov    %eax,0x4(%esp)
+     f90:	89 34 24             	mov    %esi,(%esp)
         state = '%';
       } else {
         putc(fd, c);
-     f73:	88 55 e2             	mov    %dl,-0x1e(%ebp)
+     f93:	88 55 e2             	mov    %dl,-0x1e(%ebp)
   write(fd, &c, 1);
-     f76:	e8 87 fe ff ff       	call   e02 <write>
-     f7b:	83 c3 01             	add    $0x1,%ebx
+     f96:	e8 87 fe ff ff       	call   e22 <write>
+     f9b:	83 c3 01             	add    $0x1,%ebx
   for(i = 0; fmt[i]; i++){
-     f7e:	0f b6 53 ff          	movzbl -0x1(%ebx),%edx
-     f82:	84 d2                	test   %dl,%dl
-     f84:	0f 84 8e 00 00 00    	je     1018 <printf+0xe8>
+     f9e:	0f b6 53 ff          	movzbl -0x1(%ebx),%edx
+     fa2:	84 d2                	test   %dl,%dl
+     fa4:	0f 84 8e 00 00 00    	je     1038 <printf+0xe8>
     if(state == 0){
-     f8a:	85 ff                	test   %edi,%edi
+     faa:	85 ff                	test   %edi,%edi
     c = fmt[i] & 0xff;
-     f8c:	0f be c2             	movsbl %dl,%eax
+     fac:	0f be c2             	movsbl %dl,%eax
     if(state == 0){
-     f8f:	74 c7                	je     f58 <printf+0x28>
+     faf:	74 c7                	je     f78 <printf+0x28>
       }
     } else if(state == '%'){
-     f91:	83 ff 25             	cmp    $0x25,%edi
-     f94:	75 e5                	jne    f7b <printf+0x4b>
+     fb1:	83 ff 25             	cmp    $0x25,%edi
+     fb4:	75 e5                	jne    f9b <printf+0x4b>
       if(c == 'd'){
-     f96:	83 fa 64             	cmp    $0x64,%edx
-     f99:	0f 84 31 01 00 00    	je     10d0 <printf+0x1a0>
+     fb6:	83 fa 64             	cmp    $0x64,%edx
+     fb9:	0f 84 31 01 00 00    	je     10f0 <printf+0x1a0>
         printint(fd, *ap, 10, 1);
         ap++;
       } else if(c == 'x' || c == 'p'){
-     f9f:	25 f7 00 00 00       	and    $0xf7,%eax
-     fa4:	83 f8 70             	cmp    $0x70,%eax
-     fa7:	0f 84 83 00 00 00    	je     1030 <printf+0x100>
+     fbf:	25 f7 00 00 00       	and    $0xf7,%eax
+     fc4:	83 f8 70             	cmp    $0x70,%eax
+     fc7:	0f 84 83 00 00 00    	je     1050 <printf+0x100>
         printint(fd, *ap, 16, 0);
         ap++;
       } else if(c == 's'){
-     fad:	83 fa 73             	cmp    $0x73,%edx
-     fb0:	0f 84 a2 00 00 00    	je     1058 <printf+0x128>
+     fcd:	83 fa 73             	cmp    $0x73,%edx
+     fd0:	0f 84 a2 00 00 00    	je     1078 <printf+0x128>
           s = "(null)";
         while(*s != 0){
           putc(fd, *s);
           s++;
         }
       } else if(c == 'c'){
-     fb6:	83 fa 63             	cmp    $0x63,%edx
-     fb9:	0f 84 35 01 00 00    	je     10f4 <printf+0x1c4>
+     fd6:	83 fa 63             	cmp    $0x63,%edx
+     fd9:	0f 84 35 01 00 00    	je     1114 <printf+0x1c4>
         putc(fd, *ap);
         ap++;
       } else if(c == '%'){
-     fbf:	83 fa 25             	cmp    $0x25,%edx
-     fc2:	0f 84 e0 00 00 00    	je     10a8 <printf+0x178>
+     fdf:	83 fa 25             	cmp    $0x25,%edx
+     fe2:	0f 84 e0 00 00 00    	je     10c8 <printf+0x178>
   write(fd, &c, 1);
-     fc8:	8d 45 e6             	lea    -0x1a(%ebp),%eax
-     fcb:	83 c3 01             	add    $0x1,%ebx
-     fce:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
-     fd5:	00 
+     fe8:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+     feb:	83 c3 01             	add    $0x1,%ebx
+     fee:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+     ff5:	00 
       } else {
         // Unknown % sequence.  Print it to draw attention.
         putc(fd, '%');
         putc(fd, c);
       }
       state = 0;
-     fd6:	31 ff                	xor    %edi,%edi
+     ff6:	31 ff                	xor    %edi,%edi
   write(fd, &c, 1);
-     fd8:	89 44 24 04          	mov    %eax,0x4(%esp)
-     fdc:	89 34 24             	mov    %esi,(%esp)
-     fdf:	89 55 d0             	mov    %edx,-0x30(%ebp)
-     fe2:	c6 45 e6 25          	movb   $0x25,-0x1a(%ebp)
-     fe6:	e8 17 fe ff ff       	call   e02 <write>
+     ff8:	89 44 24 04          	mov    %eax,0x4(%esp)
+     ffc:	89 34 24             	mov    %esi,(%esp)
+     fff:	89 55 d0             	mov    %edx,-0x30(%ebp)
+    1002:	c6 45 e6 25          	movb   $0x25,-0x1a(%ebp)
+    1006:	e8 17 fe ff ff       	call   e22 <write>
         putc(fd, c);
-     feb:	8b 55 d0             	mov    -0x30(%ebp),%edx
+    100b:	8b 55 d0             	mov    -0x30(%ebp),%edx
   write(fd, &c, 1);
-     fee:	8d 45 e7             	lea    -0x19(%ebp),%eax
-     ff1:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
-     ff8:	00 
-     ff9:	89 44 24 04          	mov    %eax,0x4(%esp)
-     ffd:	89 34 24             	mov    %esi,(%esp)
+    100e:	8d 45 e7             	lea    -0x19(%ebp),%eax
+    1011:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+    1018:	00 
+    1019:	89 44 24 04          	mov    %eax,0x4(%esp)
+    101d:	89 34 24             	mov    %esi,(%esp)
         putc(fd, c);
-    1000:	88 55 e7             	mov    %dl,-0x19(%ebp)
+    1020:	88 55 e7             	mov    %dl,-0x19(%ebp)
   write(fd, &c, 1);
-    1003:	e8 fa fd ff ff       	call   e02 <write>
+    1023:	e8 fa fd ff ff       	call   e22 <write>
   for(i = 0; fmt[i]; i++){
-    1008:	0f b6 53 ff          	movzbl -0x1(%ebx),%edx
-    100c:	84 d2                	test   %dl,%dl
-    100e:	0f 85 76 ff ff ff    	jne    f8a <printf+0x5a>
-    1014:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    1028:	0f b6 53 ff          	movzbl -0x1(%ebx),%edx
+    102c:	84 d2                	test   %dl,%dl
+    102e:	0f 85 76 ff ff ff    	jne    faa <printf+0x5a>
+    1034:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     }
   }
 }
-    1018:	83 c4 3c             	add    $0x3c,%esp
-    101b:	5b                   	pop    %ebx
-    101c:	5e                   	pop    %esi
-    101d:	5f                   	pop    %edi
-    101e:	5d                   	pop    %ebp
-    101f:	c3                   	ret    
+    1038:	83 c4 3c             	add    $0x3c,%esp
+    103b:	5b                   	pop    %ebx
+    103c:	5e                   	pop    %esi
+    103d:	5f                   	pop    %edi
+    103e:	5d                   	pop    %ebp
+    103f:	c3                   	ret    
         state = '%';
-    1020:	bf 25 00 00 00       	mov    $0x25,%edi
-    1025:	e9 51 ff ff ff       	jmp    f7b <printf+0x4b>
-    102a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    1040:	bf 25 00 00 00       	mov    $0x25,%edi
+    1045:	e9 51 ff ff ff       	jmp    f9b <printf+0x4b>
+    104a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         printint(fd, *ap, 16, 0);
-    1030:	8b 45 d4             	mov    -0x2c(%ebp),%eax
-    1033:	b9 10 00 00 00       	mov    $0x10,%ecx
+    1050:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+    1053:	b9 10 00 00 00       	mov    $0x10,%ecx
       state = 0;
-    1038:	31 ff                	xor    %edi,%edi
+    1058:	31 ff                	xor    %edi,%edi
         printint(fd, *ap, 16, 0);
-    103a:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    1041:	8b 10                	mov    (%eax),%edx
-    1043:	89 f0                	mov    %esi,%eax
-    1045:	e8 46 fe ff ff       	call   e90 <printint>
+    105a:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    1061:	8b 10                	mov    (%eax),%edx
+    1063:	89 f0                	mov    %esi,%eax
+    1065:	e8 46 fe ff ff       	call   eb0 <printint>
         ap++;
-    104a:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
-    104e:	e9 28 ff ff ff       	jmp    f7b <printf+0x4b>
-    1053:	90                   	nop
-    1054:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    106a:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
+    106e:	e9 28 ff ff ff       	jmp    f9b <printf+0x4b>
+    1073:	90                   	nop
+    1074:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         s = (char*)*ap;
-    1058:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+    1078:	8b 45 d4             	mov    -0x2c(%ebp),%eax
         ap++;
-    105b:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
+    107b:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
         s = (char*)*ap;
-    105f:	8b 38                	mov    (%eax),%edi
+    107f:	8b 38                	mov    (%eax),%edi
           s = "(null)";
-    1061:	b8 80 13 00 00       	mov    $0x1380,%eax
-    1066:	85 ff                	test   %edi,%edi
-    1068:	0f 44 f8             	cmove  %eax,%edi
+    1081:	b8 a0 13 00 00       	mov    $0x13a0,%eax
+    1086:	85 ff                	test   %edi,%edi
+    1088:	0f 44 f8             	cmove  %eax,%edi
         while(*s != 0){
-    106b:	0f b6 07             	movzbl (%edi),%eax
-    106e:	84 c0                	test   %al,%al
-    1070:	74 2a                	je     109c <printf+0x16c>
-    1072:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    1078:	88 45 e3             	mov    %al,-0x1d(%ebp)
+    108b:	0f b6 07             	movzbl (%edi),%eax
+    108e:	84 c0                	test   %al,%al
+    1090:	74 2a                	je     10bc <printf+0x16c>
+    1092:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    1098:	88 45 e3             	mov    %al,-0x1d(%ebp)
   write(fd, &c, 1);
-    107b:	8d 45 e3             	lea    -0x1d(%ebp),%eax
+    109b:	8d 45 e3             	lea    -0x1d(%ebp),%eax
           s++;
-    107e:	83 c7 01             	add    $0x1,%edi
+    109e:	83 c7 01             	add    $0x1,%edi
   write(fd, &c, 1);
-    1081:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
-    1088:	00 
-    1089:	89 44 24 04          	mov    %eax,0x4(%esp)
-    108d:	89 34 24             	mov    %esi,(%esp)
-    1090:	e8 6d fd ff ff       	call   e02 <write>
+    10a1:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+    10a8:	00 
+    10a9:	89 44 24 04          	mov    %eax,0x4(%esp)
+    10ad:	89 34 24             	mov    %esi,(%esp)
+    10b0:	e8 6d fd ff ff       	call   e22 <write>
         while(*s != 0){
-    1095:	0f b6 07             	movzbl (%edi),%eax
-    1098:	84 c0                	test   %al,%al
-    109a:	75 dc                	jne    1078 <printf+0x148>
+    10b5:	0f b6 07             	movzbl (%edi),%eax
+    10b8:	84 c0                	test   %al,%al
+    10ba:	75 dc                	jne    1098 <printf+0x148>
       state = 0;
-    109c:	31 ff                	xor    %edi,%edi
-    109e:	e9 d8 fe ff ff       	jmp    f7b <printf+0x4b>
-    10a3:	90                   	nop
-    10a4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    10bc:	31 ff                	xor    %edi,%edi
+    10be:	e9 d8 fe ff ff       	jmp    f9b <printf+0x4b>
+    10c3:	90                   	nop
+    10c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   write(fd, &c, 1);
-    10a8:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+    10c8:	8d 45 e5             	lea    -0x1b(%ebp),%eax
       state = 0;
-    10ab:	31 ff                	xor    %edi,%edi
+    10cb:	31 ff                	xor    %edi,%edi
   write(fd, &c, 1);
-    10ad:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
-    10b4:	00 
-    10b5:	89 44 24 04          	mov    %eax,0x4(%esp)
-    10b9:	89 34 24             	mov    %esi,(%esp)
-    10bc:	c6 45 e5 25          	movb   $0x25,-0x1b(%ebp)
-    10c0:	e8 3d fd ff ff       	call   e02 <write>
-    10c5:	e9 b1 fe ff ff       	jmp    f7b <printf+0x4b>
-    10ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    10cd:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+    10d4:	00 
+    10d5:	89 44 24 04          	mov    %eax,0x4(%esp)
+    10d9:	89 34 24             	mov    %esi,(%esp)
+    10dc:	c6 45 e5 25          	movb   $0x25,-0x1b(%ebp)
+    10e0:	e8 3d fd ff ff       	call   e22 <write>
+    10e5:	e9 b1 fe ff ff       	jmp    f9b <printf+0x4b>
+    10ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         printint(fd, *ap, 10, 1);
-    10d0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
-    10d3:	b9 0a 00 00 00       	mov    $0xa,%ecx
+    10f0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+    10f3:	b9 0a 00 00 00       	mov    $0xa,%ecx
       state = 0;
-    10d8:	66 31 ff             	xor    %di,%di
+    10f8:	66 31 ff             	xor    %di,%di
         printint(fd, *ap, 10, 1);
-    10db:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    10e2:	8b 10                	mov    (%eax),%edx
-    10e4:	89 f0                	mov    %esi,%eax
-    10e6:	e8 a5 fd ff ff       	call   e90 <printint>
+    10fb:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    1102:	8b 10                	mov    (%eax),%edx
+    1104:	89 f0                	mov    %esi,%eax
+    1106:	e8 a5 fd ff ff       	call   eb0 <printint>
         ap++;
-    10eb:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
-    10ef:	e9 87 fe ff ff       	jmp    f7b <printf+0x4b>
+    110b:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
+    110f:	e9 87 fe ff ff       	jmp    f9b <printf+0x4b>
         putc(fd, *ap);
-    10f4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+    1114:	8b 45 d4             	mov    -0x2c(%ebp),%eax
       state = 0;
-    10f7:	31 ff                	xor    %edi,%edi
+    1117:	31 ff                	xor    %edi,%edi
         putc(fd, *ap);
-    10f9:	8b 00                	mov    (%eax),%eax
+    1119:	8b 00                	mov    (%eax),%eax
   write(fd, &c, 1);
-    10fb:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
-    1102:	00 
-    1103:	89 34 24             	mov    %esi,(%esp)
+    111b:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+    1122:	00 
+    1123:	89 34 24             	mov    %esi,(%esp)
         putc(fd, *ap);
-    1106:	88 45 e4             	mov    %al,-0x1c(%ebp)
+    1126:	88 45 e4             	mov    %al,-0x1c(%ebp)
   write(fd, &c, 1);
-    1109:	8d 45 e4             	lea    -0x1c(%ebp),%eax
-    110c:	89 44 24 04          	mov    %eax,0x4(%esp)
-    1110:	e8 ed fc ff ff       	call   e02 <write>
+    1129:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+    112c:	89 44 24 04          	mov    %eax,0x4(%esp)
+    1130:	e8 ed fc ff ff       	call   e22 <write>
         ap++;
-    1115:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
-    1119:	e9 5d fe ff ff       	jmp    f7b <printf+0x4b>
-    111e:	66 90                	xchg   %ax,%ax
+    1135:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
+    1139:	e9 5d fe ff ff       	jmp    f9b <printf+0x4b>
+    113e:	66 90                	xchg   %ax,%ax
 
-00001120 <free>:
+00001140 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
-    1120:	55                   	push   %ebp
+    1140:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
-    1121:	a1 a4 19 00 00       	mov    0x19a4,%eax
+    1141:	a1 c4 19 00 00       	mov    0x19c4,%eax
 {
-    1126:	89 e5                	mov    %esp,%ebp
-    1128:	57                   	push   %edi
-    1129:	56                   	push   %esi
-    112a:	53                   	push   %ebx
-    112b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+    1146:	89 e5                	mov    %esp,%ebp
+    1148:	57                   	push   %edi
+    1149:	56                   	push   %esi
+    114a:	53                   	push   %ebx
+    114b:	8b 5d 08             	mov    0x8(%ebp),%ebx
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
-    112e:	8b 08                	mov    (%eax),%ecx
+    114e:	8b 08                	mov    (%eax),%ecx
   bp = (Header*)ap - 1;
-    1130:	8d 53 f8             	lea    -0x8(%ebx),%edx
+    1150:	8d 53 f8             	lea    -0x8(%ebx),%edx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
-    1133:	39 d0                	cmp    %edx,%eax
-    1135:	72 11                	jb     1148 <free+0x28>
-    1137:	90                   	nop
+    1153:	39 d0                	cmp    %edx,%eax
+    1155:	72 11                	jb     1168 <free+0x28>
+    1157:	90                   	nop
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
-    1138:	39 c8                	cmp    %ecx,%eax
-    113a:	72 04                	jb     1140 <free+0x20>
-    113c:	39 ca                	cmp    %ecx,%edx
-    113e:	72 10                	jb     1150 <free+0x30>
-    1140:	89 c8                	mov    %ecx,%eax
+    1158:	39 c8                	cmp    %ecx,%eax
+    115a:	72 04                	jb     1160 <free+0x20>
+    115c:	39 ca                	cmp    %ecx,%edx
+    115e:	72 10                	jb     1170 <free+0x30>
+    1160:	89 c8                	mov    %ecx,%eax
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
-    1142:	39 d0                	cmp    %edx,%eax
+    1162:	39 d0                	cmp    %edx,%eax
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
-    1144:	8b 08                	mov    (%eax),%ecx
+    1164:	8b 08                	mov    (%eax),%ecx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
-    1146:	73 f0                	jae    1138 <free+0x18>
-    1148:	39 ca                	cmp    %ecx,%edx
-    114a:	72 04                	jb     1150 <free+0x30>
+    1166:	73 f0                	jae    1158 <free+0x18>
+    1168:	39 ca                	cmp    %ecx,%edx
+    116a:	72 04                	jb     1170 <free+0x30>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
-    114c:	39 c8                	cmp    %ecx,%eax
-    114e:	72 f0                	jb     1140 <free+0x20>
+    116c:	39 c8                	cmp    %ecx,%eax
+    116e:	72 f0                	jb     1160 <free+0x20>
       break;
   if(bp + bp->s.size == p->s.ptr){
-    1150:	8b 73 fc             	mov    -0x4(%ebx),%esi
-    1153:	8d 3c f2             	lea    (%edx,%esi,8),%edi
-    1156:	39 cf                	cmp    %ecx,%edi
-    1158:	74 1e                	je     1178 <free+0x58>
+    1170:	8b 73 fc             	mov    -0x4(%ebx),%esi
+    1173:	8d 3c f2             	lea    (%edx,%esi,8),%edi
+    1176:	39 cf                	cmp    %ecx,%edi
+    1178:	74 1e                	je     1198 <free+0x58>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
   } else
     bp->s.ptr = p->s.ptr;
-    115a:	89 4b f8             	mov    %ecx,-0x8(%ebx)
+    117a:	89 4b f8             	mov    %ecx,-0x8(%ebx)
   if(p + p->s.size == bp){
-    115d:	8b 48 04             	mov    0x4(%eax),%ecx
-    1160:	8d 34 c8             	lea    (%eax,%ecx,8),%esi
-    1163:	39 f2                	cmp    %esi,%edx
-    1165:	74 28                	je     118f <free+0x6f>
+    117d:	8b 48 04             	mov    0x4(%eax),%ecx
+    1180:	8d 34 c8             	lea    (%eax,%ecx,8),%esi
+    1183:	39 f2                	cmp    %esi,%edx
+    1185:	74 28                	je     11af <free+0x6f>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
   } else
     p->s.ptr = bp;
-    1167:	89 10                	mov    %edx,(%eax)
+    1187:	89 10                	mov    %edx,(%eax)
   freep = p;
-    1169:	a3 a4 19 00 00       	mov    %eax,0x19a4
+    1189:	a3 c4 19 00 00       	mov    %eax,0x19c4
 }
-    116e:	5b                   	pop    %ebx
-    116f:	5e                   	pop    %esi
-    1170:	5f                   	pop    %edi
-    1171:	5d                   	pop    %ebp
-    1172:	c3                   	ret    
-    1173:	90                   	nop
-    1174:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    118e:	5b                   	pop    %ebx
+    118f:	5e                   	pop    %esi
+    1190:	5f                   	pop    %edi
+    1191:	5d                   	pop    %ebp
+    1192:	c3                   	ret    
+    1193:	90                   	nop
+    1194:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     bp->s.size += p->s.ptr->s.size;
-    1178:	03 71 04             	add    0x4(%ecx),%esi
-    117b:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    1198:	03 71 04             	add    0x4(%ecx),%esi
+    119b:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
-    117e:	8b 08                	mov    (%eax),%ecx
-    1180:	8b 09                	mov    (%ecx),%ecx
-    1182:	89 4b f8             	mov    %ecx,-0x8(%ebx)
+    119e:	8b 08                	mov    (%eax),%ecx
+    11a0:	8b 09                	mov    (%ecx),%ecx
+    11a2:	89 4b f8             	mov    %ecx,-0x8(%ebx)
   if(p + p->s.size == bp){
-    1185:	8b 48 04             	mov    0x4(%eax),%ecx
-    1188:	8d 34 c8             	lea    (%eax,%ecx,8),%esi
-    118b:	39 f2                	cmp    %esi,%edx
-    118d:	75 d8                	jne    1167 <free+0x47>
+    11a5:	8b 48 04             	mov    0x4(%eax),%ecx
+    11a8:	8d 34 c8             	lea    (%eax,%ecx,8),%esi
+    11ab:	39 f2                	cmp    %esi,%edx
+    11ad:	75 d8                	jne    1187 <free+0x47>
     p->s.size += bp->s.size;
-    118f:	03 4b fc             	add    -0x4(%ebx),%ecx
+    11af:	03 4b fc             	add    -0x4(%ebx),%ecx
   freep = p;
-    1192:	a3 a4 19 00 00       	mov    %eax,0x19a4
+    11b2:	a3 c4 19 00 00       	mov    %eax,0x19c4
     p->s.size += bp->s.size;
-    1197:	89 48 04             	mov    %ecx,0x4(%eax)
+    11b7:	89 48 04             	mov    %ecx,0x4(%eax)
     p->s.ptr = bp->s.ptr;
-    119a:	8b 53 f8             	mov    -0x8(%ebx),%edx
-    119d:	89 10                	mov    %edx,(%eax)
+    11ba:	8b 53 f8             	mov    -0x8(%ebx),%edx
+    11bd:	89 10                	mov    %edx,(%eax)
 }
-    119f:	5b                   	pop    %ebx
-    11a0:	5e                   	pop    %esi
-    11a1:	5f                   	pop    %edi
-    11a2:	5d                   	pop    %ebp
-    11a3:	c3                   	ret    
-    11a4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    11aa:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
-
-000011b0 <malloc>:
+    11bf:	5b                   	pop    %ebx
+    11c0:	5e                   	pop    %esi
+    11c1:	5f                   	pop    %edi
+    11c2:	5d                   	pop    %ebp
+    11c3:	c3                   	ret    
+    11c4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    11ca:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+000011d0 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
-    11b0:	55                   	push   %ebp
-    11b1:	89 e5                	mov    %esp,%ebp
-    11b3:	57                   	push   %edi
-    11b4:	56                   	push   %esi
-    11b5:	53                   	push   %ebx
-    11b6:	83 ec 1c             	sub    $0x1c,%esp
+    11d0:	55                   	push   %ebp
+    11d1:	89 e5                	mov    %esp,%ebp
+    11d3:	57                   	push   %edi
+    11d4:	56                   	push   %esi
+    11d5:	53                   	push   %ebx
+    11d6:	83 ec 1c             	sub    $0x1c,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
-    11b9:	8b 45 08             	mov    0x8(%ebp),%eax
+    11d9:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
-    11bc:	8b 1d a4 19 00 00    	mov    0x19a4,%ebx
+    11dc:	8b 1d c4 19 00 00    	mov    0x19c4,%ebx
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
-    11c2:	8d 48 07             	lea    0x7(%eax),%ecx
-    11c5:	c1 e9 03             	shr    $0x3,%ecx
+    11e2:	8d 48 07             	lea    0x7(%eax),%ecx
+    11e5:	c1 e9 03             	shr    $0x3,%ecx
   if((prevp = freep) == 0){
-    11c8:	85 db                	test   %ebx,%ebx
+    11e8:	85 db                	test   %ebx,%ebx
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
-    11ca:	8d 71 01             	lea    0x1(%ecx),%esi
+    11ea:	8d 71 01             	lea    0x1(%ecx),%esi
   if((prevp = freep) == 0){
-    11cd:	0f 84 9b 00 00 00    	je     126e <malloc+0xbe>
-    11d3:	8b 13                	mov    (%ebx),%edx
-    11d5:	8b 7a 04             	mov    0x4(%edx),%edi
+    11ed:	0f 84 9b 00 00 00    	je     128e <malloc+0xbe>
+    11f3:	8b 13                	mov    (%ebx),%edx
+    11f5:	8b 7a 04             	mov    0x4(%edx),%edi
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
     if(p->s.size >= nunits){
-    11d8:	39 fe                	cmp    %edi,%esi
-    11da:	76 64                	jbe    1240 <malloc+0x90>
-    11dc:	8d 04 f5 00 00 00 00 	lea    0x0(,%esi,8),%eax
+    11f8:	39 fe                	cmp    %edi,%esi
+    11fa:	76 64                	jbe    1260 <malloc+0x90>
+    11fc:	8d 04 f5 00 00 00 00 	lea    0x0(,%esi,8),%eax
   if(nu < 4096)
-    11e3:	bb 00 80 00 00       	mov    $0x8000,%ebx
-    11e8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-    11eb:	eb 0e                	jmp    11fb <malloc+0x4b>
-    11ed:	8d 76 00             	lea    0x0(%esi),%esi
+    1203:	bb 00 80 00 00       	mov    $0x8000,%ebx
+    1208:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    120b:	eb 0e                	jmp    121b <malloc+0x4b>
+    120d:	8d 76 00             	lea    0x0(%esi),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
-    11f0:	8b 02                	mov    (%edx),%eax
+    1210:	8b 02                	mov    (%edx),%eax
     if(p->s.size >= nunits){
-    11f2:	8b 78 04             	mov    0x4(%eax),%edi
-    11f5:	39 fe                	cmp    %edi,%esi
-    11f7:	76 4f                	jbe    1248 <malloc+0x98>
-    11f9:	89 c2                	mov    %eax,%edx
+    1212:	8b 78 04             	mov    0x4(%eax),%edi
+    1215:	39 fe                	cmp    %edi,%esi
+    1217:	76 4f                	jbe    1268 <malloc+0x98>
+    1219:	89 c2                	mov    %eax,%edx
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
-    11fb:	3b 15 a4 19 00 00    	cmp    0x19a4,%edx
-    1201:	75 ed                	jne    11f0 <malloc+0x40>
+    121b:	3b 15 c4 19 00 00    	cmp    0x19c4,%edx
+    1221:	75 ed                	jne    1210 <malloc+0x40>
   if(nu < 4096)
-    1203:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-    1206:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
-    120c:	bf 00 10 00 00       	mov    $0x1000,%edi
-    1211:	0f 43 fe             	cmovae %esi,%edi
-    1214:	0f 42 c3             	cmovb  %ebx,%eax
+    1223:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+    1226:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+    122c:	bf 00 10 00 00       	mov    $0x1000,%edi
+    1231:	0f 43 fe             	cmovae %esi,%edi
+    1234:	0f 42 c3             	cmovb  %ebx,%eax
   p = sbrk(nu * sizeof(Header));
-    1217:	89 04 24             	mov    %eax,(%esp)
-    121a:	e8 4b fc ff ff       	call   e6a <sbrk>
+    1237:	89 04 24             	mov    %eax,(%esp)
+    123a:	e8 4b fc ff ff       	call   e8a <sbrk>
   if(p == (char*)-1)
-    121f:	83 f8 ff             	cmp    $0xffffffff,%eax
-    1222:	74 18                	je     123c <malloc+0x8c>
+    123f:	83 f8 ff             	cmp    $0xffffffff,%eax
+    1242:	74 18                	je     125c <malloc+0x8c>
   hp->s.size = nu;
-    1224:	89 78 04             	mov    %edi,0x4(%eax)
+    1244:	89 78 04             	mov    %edi,0x4(%eax)
   free((void*)(hp + 1));
-    1227:	83 c0 08             	add    $0x8,%eax
-    122a:	89 04 24             	mov    %eax,(%esp)
-    122d:	e8 ee fe ff ff       	call   1120 <free>
+    1247:	83 c0 08             	add    $0x8,%eax
+    124a:	89 04 24             	mov    %eax,(%esp)
+    124d:	e8 ee fe ff ff       	call   1140 <free>
   return freep;
-    1232:	8b 15 a4 19 00 00    	mov    0x19a4,%edx
+    1252:	8b 15 c4 19 00 00    	mov    0x19c4,%edx
       if((p = morecore(nunits)) == 0)
-    1238:	85 d2                	test   %edx,%edx
-    123a:	75 b4                	jne    11f0 <malloc+0x40>
+    1258:	85 d2                	test   %edx,%edx
+    125a:	75 b4                	jne    1210 <malloc+0x40>
         return 0;
-    123c:	31 c0                	xor    %eax,%eax
-    123e:	eb 20                	jmp    1260 <malloc+0xb0>
+    125c:	31 c0                	xor    %eax,%eax
+    125e:	eb 20                	jmp    1280 <malloc+0xb0>
     if(p->s.size >= nunits){
-    1240:	89 d0                	mov    %edx,%eax
-    1242:	89 da                	mov    %ebx,%edx
-    1244:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    1260:	89 d0                	mov    %edx,%eax
+    1262:	89 da                	mov    %ebx,%edx
+    1264:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
       if(p->s.size == nunits)
-    1248:	39 fe                	cmp    %edi,%esi
-    124a:	74 1c                	je     1268 <malloc+0xb8>
+    1268:	39 fe                	cmp    %edi,%esi
+    126a:	74 1c                	je     1288 <malloc+0xb8>
         p->s.size -= nunits;
-    124c:	29 f7                	sub    %esi,%edi
-    124e:	89 78 04             	mov    %edi,0x4(%eax)
+    126c:	29 f7                	sub    %esi,%edi
+    126e:	89 78 04             	mov    %edi,0x4(%eax)
         p += p->s.size;
-    1251:	8d 04 f8             	lea    (%eax,%edi,8),%eax
+    1271:	8d 04 f8             	lea    (%eax,%edi,8),%eax
         p->s.size = nunits;
-    1254:	89 70 04             	mov    %esi,0x4(%eax)
+    1274:	89 70 04             	mov    %esi,0x4(%eax)
       freep = prevp;
-    1257:	89 15 a4 19 00 00    	mov    %edx,0x19a4
+    1277:	89 15 c4 19 00 00    	mov    %edx,0x19c4
       return (void*)(p + 1);
-    125d:	83 c0 08             	add    $0x8,%eax
+    127d:	83 c0 08             	add    $0x8,%eax
   }
 }
-    1260:	83 c4 1c             	add    $0x1c,%esp
-    1263:	5b                   	pop    %ebx
-    1264:	5e                   	pop    %esi
-    1265:	5f                   	pop    %edi
-    1266:	5d                   	pop    %ebp
-    1267:	c3                   	ret    
+    1280:	83 c4 1c             	add    $0x1c,%esp
+    1283:	5b                   	pop    %ebx
+    1284:	5e                   	pop    %esi
+    1285:	5f                   	pop    %edi
+    1286:	5d                   	pop    %ebp
+    1287:	c3                   	ret    
         prevp->s.ptr = p->s.ptr;
-    1268:	8b 08                	mov    (%eax),%ecx
-    126a:	89 0a                	mov    %ecx,(%edx)
-    126c:	eb e9                	jmp    1257 <malloc+0xa7>
+    1288:	8b 08                	mov    (%eax),%ecx
+    128a:	89 0a                	mov    %ecx,(%edx)
+    128c:	eb e9                	jmp    1277 <malloc+0xa7>
     base.s.ptr = freep = prevp = &base;
-    126e:	c7 05 a4 19 00 00 a8 	movl   $0x19a8,0x19a4
-    1275:	19 00 00 
+    128e:	c7 05 c4 19 00 00 c8 	movl   $0x19c8,0x19c4
+    1295:	19 00 00 
     base.s.size = 0;
-    1278:	ba a8 19 00 00       	mov    $0x19a8,%edx
+    1298:	ba c8 19 00 00       	mov    $0x19c8,%edx
     base.s.ptr = freep = prevp = &base;
-    127d:	c7 05 a8 19 00 00 a8 	movl   $0x19a8,0x19a8
-    1284:	19 00 00 
+    129d:	c7 05 c8 19 00 00 c8 	movl   $0x19c8,0x19c8
+    12a4:	19 00 00 
     base.s.size = 0;
-    1287:	c7 05 ac 19 00 00 00 	movl   $0x0,0x19ac
-    128e:	00 00 00 
-    1291:	e9 46 ff ff ff       	jmp    11dc <malloc+0x2c>
+    12a7:	c7 05 cc 19 00 00 00 	movl   $0x0,0x19cc
+    12ae:	00 00 00 
+    12b1:	e9 46 ff ff ff       	jmp    11fc <malloc+0x2c>
diff --git a/sh.c b/sh.c
index 238ff10..6adf66a 100644
--- a/sh.c
+++ b/sh.c
@@ -5,25 +5,28 @@
 #include "fcntl.h"
 
 // Parsed command representation
-#define EXEC  1
+#define EXEC 1
 #define REDIR 2
-#define PIPE  3
-#define LIST  4
-#define BACK  5
+#define PIPE 3
+#define LIST 4
+#define BACK 5
 
 #define MAXARGS 10
 
-struct cmd {
+struct cmd
+{
   int type;
 };
 
-struct execcmd {
+struct execcmd
+{
   int type;
   char *argv[MAXARGS];
   char *eargv[MAXARGS];
 };
 
-struct redircmd {
+struct redircmd
+{
   int type;
   struct cmd *cmd;
   char *file;
@@ -32,30 +35,32 @@ struct redircmd {
   int fd;
 };
 
-struct pipecmd {
+struct pipecmd
+{
   int type;
   struct cmd *left;
   struct cmd *right;
 };
 
-struct listcmd {
+struct listcmd
+{
   int type;
   struct cmd *left;
   struct cmd *right;
 };
 
-struct backcmd {
+struct backcmd
+{
   int type;
   struct cmd *cmd;
 };
 
-int fork1(void);  // Fork but panics on failure.
-void panic(char*);
-struct cmd *parsecmd(char*);
+int fork1(void); // Fork but panics on failure.
+void panic(char *);
+struct cmd *parsecmd(char *);
 
 // Execute cmd.  Never returns.
-void
-runcmd(struct cmd *cmd)
+void runcmd(struct cmd *cmd)
 {
   int p[2];
   struct backcmd *bcmd;
@@ -64,25 +69,27 @@ runcmd(struct cmd *cmd)
   struct pipecmd *pcmd;
   struct redircmd *rcmd;
 
-  if(cmd == 0)
+  if (cmd == 0)
     exit(0);
 
-  switch(cmd->type){
+  switch (cmd->type)
+  {
   default:
     panic("runcmd");
 
   case EXEC:
-    ecmd = (struct execcmd*)cmd;
-    if(ecmd->argv[0] == 0)
+    ecmd = (struct execcmd *)cmd;
+    if (ecmd->argv[0] == 0)
       exit(0);
     exec(ecmd->argv[0], ecmd->argv);
     printf(2, "exec %s failed\n", ecmd->argv[0]);
     break;
 
   case REDIR:
-    rcmd = (struct redircmd*)cmd;
+    rcmd = (struct redircmd *)cmd;
     close(rcmd->fd);
-    if(open(rcmd->file, rcmd->mode) < 0){
+    if (open(rcmd->file, rcmd->mode) < 0)
+    {
       printf(2, "open %s failed\n", rcmd->file);
       exit(0);
     }
@@ -90,25 +97,28 @@ runcmd(struct cmd *cmd)
     break;
 
   case LIST:
-    lcmd = (struct listcmd*)cmd;
-    if(fork1() == 0)
+    lcmd = (struct listcmd *)cmd;
+    if (fork1() == 0)
       runcmd(lcmd->left);
-    wait();
+    wait(0);
+    ;
     runcmd(lcmd->right);
     break;
 
   case PIPE:
-    pcmd = (struct pipecmd*)cmd;
-    if(pipe(p) < 0)
+    pcmd = (struct pipecmd *)cmd;
+    if (pipe(p) < 0)
       panic("pipe");
-    if(fork1() == 0){
+    if (fork1() == 0)
+    {
       close(1);
       dup(p[1]);
       close(p[0]);
       close(p[1]);
       runcmd(pcmd->left);
     }
-    if(fork1() == 0){
+    if (fork1() == 0)
+    {
       close(0);
       dup(p[0]);
       close(p[0]);
@@ -117,82 +127,85 @@ runcmd(struct cmd *cmd)
     }
     close(p[0]);
     close(p[1]);
-    wait();
-    wait();
+    wait(0);
+    ;
+    wait(0);
+    ;
     break;
 
   case BACK:
-    bcmd = (struct backcmd*)cmd;
-    if(fork1() == 0)
+    bcmd = (struct backcmd *)cmd;
+    if (fork1() == 0)
       runcmd(bcmd->cmd);
     break;
   }
   exit(0);
 }
 
-int
-getcmd(char *buf, int nbuf)
+int getcmd(char *buf, int nbuf)
 {
   printf(2, "$ ");
   memset(buf, 0, nbuf);
   gets(buf, nbuf);
-  if(buf[0] == 0) // EOF
+  if (buf[0] == 0) // EOF
     return -1;
   return 0;
 }
 
-int
-main(void)
+int main(void)
 {
   static char buf[100];
   int fd;
 
   // Ensure that three file descriptors are open.
-  while((fd = open("console", O_RDWR)) >= 0){
-    if(fd >= 3){
+  while ((fd = open("console", O_RDWR)) >= 0)
+  {
+    if (fd >= 3)
+    {
       close(fd);
       break;
     }
   }
 
   // Read and run input commands.
-  while(getcmd(buf, sizeof(buf)) >= 0){
-    if(buf[0] == 'c' && buf[1] == 'd' && buf[2] == ' '){
+  while (getcmd(buf, sizeof(buf)) >= 0)
+  {
+    if (buf[0] == 'c' && buf[1] == 'd' && buf[2] == ' ')
+    {
       // Chdir must be called by the parent, not the child.
-      buf[strlen(buf)-1] = 0;  // chop \n
-      if(chdir(buf+3) < 0)
-        printf(2, "cannot cd %s\n", buf+3);
+      buf[strlen(buf) - 1] = 0; // chop \n
+      if (chdir(buf + 3) < 0)
+        printf(2, "cannot cd %s\n", buf + 3);
       continue;
     }
-    if(fork1() == 0)
+    if (fork1() == 0)
       runcmd(parsecmd(buf));
-    wait();
+    wait(0);
+    ;
   }
   exit(0);
 }
 
-void
-panic(char *s)
+void panic(char *s)
 {
   printf(2, "%s\n", s);
   exit(0);
 }
 
-int
-fork1(void)
+int fork1(void)
 {
   int pid;
 
   pid = fork();
-  if(pid == -1)
+  if (pid == -1)
     panic("fork");
   return pid;
 }
 
-//PAGEBREAK!
-// Constructors
+// PAGEBREAK!
+//  Constructors
 
-struct cmd*
+struct cmd *
 execcmd(void)
 {
   struct execcmd *cmd;
@@ -200,10 +213,10 @@ execcmd(void)
   cmd = malloc(sizeof(*cmd));
   memset(cmd, 0, sizeof(*cmd));
   cmd->type = EXEC;
-  return (struct cmd*)cmd;
+  return (struct cmd *)cmd;
 }
 
-struct cmd*
+struct cmd *
 redircmd(struct cmd *subcmd, char *file, char *efile, int mode, int fd)
 {
   struct redircmd *cmd;
@@ -216,10 +229,10 @@ redircmd(struct cmd *subcmd, char *file, char *efile, int mode, int fd)
   cmd->efile = efile;
   cmd->mode = mode;
   cmd->fd = fd;
-  return (struct cmd*)cmd;
+  return (struct cmd *)cmd;
 }
 
-struct cmd*
+struct cmd *
 pipecmd(struct cmd *left, struct cmd *right)
 {
   struct pipecmd *cmd;
@@ -229,10 +242,10 @@ pipecmd(struct cmd *left, struct cmd *right)
   cmd->type = PIPE;
   cmd->left = left;
   cmd->right = right;
-  return (struct cmd*)cmd;
+  return (struct cmd *)cmd;
 }
 
-struct cmd*
+struct cmd *
 listcmd(struct cmd *left, struct cmd *right)
 {
   struct listcmd *cmd;
@@ -242,10 +255,10 @@ listcmd(struct cmd *left, struct cmd *right)
   cmd->type = LIST;
   cmd->left = left;
   cmd->right = right;
-  return (struct cmd*)cmd;
+  return (struct cmd *)cmd;
 }
 
-struct cmd*
+struct cmd *
 backcmd(struct cmd *subcmd)
 {
   struct backcmd *cmd;
@@ -254,27 +267,27 @@ backcmd(struct cmd *subcmd)
   memset(cmd, 0, sizeof(*cmd));
   cmd->type = BACK;
   cmd->cmd = subcmd;
-  return (struct cmd*)cmd;
+  return (struct cmd *)cmd;
 }
-//PAGEBREAK!
-// Parsing
+// PAGEBREAK!
+//  Parsing
 
 char whitespace[] = " \t\r\n\v";
 char symbols[] = "<|>&;()";
 
-int
-gettoken(char **ps, char *es, char **q, char **eq)
+int gettoken(char **ps, char *es, char **q, char **eq)
 {
   char *s;
   int ret;
 
   s = *ps;
-  while(s < es && strchr(whitespace, *s))
+  while (s < es && strchr(whitespace, *s))
     s++;
-  if(q)
+  if (q)
     *q = s;
   ret = *s;
-  switch(*s){
+  switch (*s)
+  {
   case 0:
     break;
   case '|':
@@ -287,44 +300,44 @@ gettoken(char **ps, char *es, char **q, char **eq)
     break;
   case '>':
     s++;
-    if(*s == '>'){
+    if (*s == '>')
+    {
       ret = '+';
       s++;
     }
     break;
   default:
     ret = 'a';
-    while(s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
+    while (s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
       s++;
     break;
   }
-  if(eq)
+  if (eq)
     *eq = s;
 
-  while(s < es && strchr(whitespace, *s))
+  while (s < es && strchr(whitespace, *s))
     s++;
   *ps = s;
   return ret;
 }
 
-int
-peek(char **ps, char *es, char *toks)
+int peek(char **ps, char *es, char *toks)
 {
   char *s;
 
   s = *ps;
-  while(s < es && strchr(whitespace, *s))
+  while (s < es && strchr(whitespace, *s))
     s++;
   *ps = s;
   return *s && strchr(toks, *s);
 }
 
-struct cmd *parseline(char**, char*);
-struct cmd *parsepipe(char**, char*);
-struct cmd *parseexec(char**, char*);
-struct cmd *nulterminate(struct cmd*);
+struct cmd *parseline(char **, char *);
+struct cmd *parsepipe(char **, char *);
+struct cmd *parseexec(char **, char *);
+struct cmd *nulterminate(struct cmd *);
 
-struct cmd*
+struct cmd *
 parsecmd(char *s)
 {
   char *es;
@@ -333,7 +346,8 @@ parsecmd(char *s)
   es = s + strlen(s);
   cmd = parseline(&s, es);
   peek(&s, es, "");
-  if(s != es){
+  if (s != es)
+  {
     printf(2, "leftovers: %s\n", s);
     panic("syntax");
   }
@@ -341,78 +355,83 @@ parsecmd(char *s)
   return cmd;
 }
 
-struct cmd*
+struct cmd *
 parseline(char **ps, char *es)
 {
   struct cmd *cmd;
 
   cmd = parsepipe(ps, es);
-  while(peek(ps, es, "&")){
+  while (peek(ps, es, "&"))
+  {
     gettoken(ps, es, 0, 0);
     cmd = backcmd(cmd);
   }
-  if(peek(ps, es, ";")){
+  if (peek(ps, es, ";"))
+  {
     gettoken(ps, es, 0, 0);
     cmd = listcmd(cmd, parseline(ps, es));
   }
   return cmd;
 }
 
-struct cmd*
+struct cmd *
 parsepipe(char **ps, char *es)
 {
   struct cmd *cmd;
 
   cmd = parseexec(ps, es);
-  if(peek(ps, es, "|")){
+  if (peek(ps, es, "|"))
+  {
     gettoken(ps, es, 0, 0);
     cmd = pipecmd(cmd, parsepipe(ps, es));
   }
   return cmd;
 }
 
-struct cmd*
+struct cmd *
 parseredirs(struct cmd *cmd, char **ps, char *es)
 {
   int tok;
   char *q, *eq;
 
-  while(peek(ps, es, "<>")){
+  while (peek(ps, es, "<>"))
+  {
     tok = gettoken(ps, es, 0, 0);
-    if(gettoken(ps, es, &q, &eq) != 'a')
+    if (gettoken(ps, es, &q, &eq) != 'a')
       panic("missing file for redirection");
-    switch(tok){
+    switch (tok)
+    {
     case '<':
       cmd = redircmd(cmd, q, eq, O_RDONLY, 0);
       break;
     case '>':
-      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);
+      cmd = redircmd(cmd, q, eq, O_WRONLY | O_CREATE, 1);
       break;
-    case '+':  // >>
-      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);
+    case '+': // >>
+      cmd = redircmd(cmd, q, eq, O_WRONLY | O_CREATE, 1);
       break;
     }
   }
   return cmd;
 }
 
-struct cmd*
+struct cmd *
 parseblock(char **ps, char *es)
 {
   struct cmd *cmd;
 
-  if(!peek(ps, es, "("))
+  if (!peek(ps, es, "("))
     panic("parseblock");
   gettoken(ps, es, 0, 0);
   cmd = parseline(ps, es);
-  if(!peek(ps, es, ")"))
+  if (!peek(ps, es, ")"))
     panic("syntax - missing )");
   gettoken(ps, es, 0, 0);
   cmd = parseredirs(cmd, ps, es);
   return cmd;
 }
 
-struct cmd*
+struct cmd *
 parseexec(char **ps, char *es)
 {
   char *q, *eq;
@@ -420,23 +439,24 @@ parseexec(char **ps, char *es)
   struct execcmd *cmd;
   struct cmd *ret;
 
-  if(peek(ps, es, "("))
+  if (peek(ps, es, "("))
     return parseblock(ps, es);
 
   ret = execcmd();
-  cmd = (struct execcmd*)ret;
+  cmd = (struct execcmd *)ret;
 
   argc = 0;
   ret = parseredirs(ret, ps, es);
-  while(!peek(ps, es, "|)&;")){
-    if((tok=gettoken(ps, es, &q, &eq)) == 0)
+  while (!peek(ps, es, "|)&;"))
+  {
+    if ((tok = gettoken(ps, es, &q, &eq)) == 0)
       break;
-    if(tok != 'a')
+    if (tok != 'a')
       panic("syntax");
     cmd->argv[argc] = q;
     cmd->eargv[argc] = eq;
     argc++;
-    if(argc >= MAXARGS)
+    if (argc >= MAXARGS)
       panic("too many args");
     ret = parseredirs(ret, ps, es);
   }
@@ -446,7 +466,7 @@ parseexec(char **ps, char *es)
 }
 
 // NUL-terminate all the counted strings.
-struct cmd*
+struct cmd *
 nulterminate(struct cmd *cmd)
 {
   int i;
@@ -456,36 +476,37 @@ nulterminate(struct cmd *cmd)
   struct pipecmd *pcmd;
   struct redircmd *rcmd;
 
-  if(cmd == 0)
+  if (cmd == 0)
     return 0;
 
-  switch(cmd->type){
+  switch (cmd->type)
+  {
   case EXEC:
-    ecmd = (struct execcmd*)cmd;
-    for(i=0; ecmd->argv[i]; i++)
+    ecmd = (struct execcmd *)cmd;
+    for (i = 0; ecmd->argv[i]; i++)
       *ecmd->eargv[i] = 0;
     break;
 
   case REDIR:
-    rcmd = (struct redircmd*)cmd;
+    rcmd = (struct redircmd *)cmd;
     nulterminate(rcmd->cmd);
     *rcmd->efile = 0;
     break;
 
   case PIPE:
-    pcmd = (struct pipecmd*)cmd;
+    pcmd = (struct pipecmd *)cmd;
     nulterminate(pcmd->left);
     nulterminate(pcmd->right);
     break;
 
   case LIST:
-    lcmd = (struct listcmd*)cmd;
+    lcmd = (struct listcmd *)cmd;
     nulterminate(lcmd->left);
     nulterminate(lcmd->right);
     break;
 
   case BACK:
-    bcmd = (struct backcmd*)cmd;
+    bcmd = (struct backcmd *)cmd;
     nulterminate(bcmd->cmd);
     break;
   }
diff --git a/sh.o b/sh.o
index 872f8c2..c5ff1f0 100644
Binary files a/sh.o and b/sh.o differ
diff --git a/sh.sym b/sh.sym
index abf39b1..ed3bbb3 100644
--- a/sh.sym
+++ b/sh.sym
@@ -1,8 +1,8 @@
 00000000 .text
-00001298 .rodata
-00001398 .eh_frame
-00001918 .data
-00001940 .bss
+000012b8 .rodata
+000013b8 .eh_frame
+00001938 .data
+00001960 .bss
 00000000 .comment
 00000000 .debug_aranges
 00000000 .debug_info
@@ -12,68 +12,68 @@
 00000000 .debug_loc
 00000000 .debug_ranges
 00000000 sh.c
-00001940 buf.1392
+00001960 buf.1392
 00000000 ulib.c
 00000000 printf.c
-00000e90 printint
-00001387 digits.1354
+00000eb0 printint
+000013a7 digits.1354
 00000000 umalloc.c
-000019a4 freep
-000019a8 base
-00000bc0 strcpy
-00000f30 printf
-00000db0 memmove
-00000e2a mknod
-00000360 execcmd
-00000cd0 gets
-00000e62 getpid
-00000890 parsepipe
-00000b40 parsecmd
-000004a0 backcmd
-00000630 peek
-00000690 parseredirs
-000004f0 gettoken
-000011b0 malloc
-00000e72 sleep
-00001920 whitespace
-00000190 fork1
-00000a90 nulterminate
-00000df2 pipe
-00000100 getcmd
-00000e02 write
-00000e3a fstat
-00000e12 kill
-00000e52 chdir
-00000910 parseline
-000001b0 runcmd
-000009d0 parseblock
-00000e1a exec
-00000dea wait
-00001918 symbols
-00000dfa read
-00000770 parseexec
-00000e32 unlink
-00000160 panic
-00000dda fork
-00000e6a sbrk
-00000e7a uptime
-00001926 __bss_start
-00000c70 memset
+000019c4 freep
+000019c8 base
+00000be0 strcpy
+00000f50 printf
+00000dd0 memmove
+00000e4a mknod
+00000380 execcmd
+00000cf0 gets
+00000e82 getpid
+000008b0 parsepipe
+00000b60 parsecmd
+000004c0 backcmd
+00000650 peek
+000006b0 parseredirs
+00000510 gettoken
+000011d0 malloc
+00000e92 sleep
+00001940 whitespace
+000001a0 fork1
+00000ab0 nulterminate
+00000e12 pipe
+00000110 getcmd
+00000e22 write
+00000e5a fstat
+00000e32 kill
+00000e72 chdir
+00000930 parseline
+000001c0 runcmd
+000009f0 parseblock
+00000e3a exec
+00000e0a wait
+00001938 symbols
+00000e1a read
+00000790 parseexec
+00000e52 unlink
+00000170 panic
+00000dfa fork
+00000e8a sbrk
+00000e9a uptime
+00001946 __bss_start
+00000c90 memset
 00000000 main
-00000bf0 strcmp
-00000e5a dup
-00000400 pipecmd
-000003a0 redircmd
-00000d30 stat
-00001926 _edata
-000019b0 _end
-00000e42 link
-00000de2 exit
-00000d80 atoi
-00000c40 strlen
-00000e22 open
-00000c90 strchr
-00000e4a mkdir
-00000e0a close
-00000450 listcmd
-00001120 free
+00000c10 strcmp
+00000e7a dup
+00000420 pipecmd
+000003c0 redircmd
+00000d50 stat
+00001946 _edata
+000019d0 _end
+00000e62 link
+00000e02 exit
+00000da0 atoi
+00000c60 strlen
+00000e42 open
+00000cb0 strchr
+00000e6a mkdir
+00000e2a close
+00000470 listcmd
+00001140 free
diff --git a/sleeplock.o b/sleeplock.o
index 7b291e5..6c3c28c 100644
Binary files a/sleeplock.o and b/sleeplock.o differ
diff --git a/spinlock.o b/spinlock.o
index 91ba524..2a504a0 100644
Binary files a/spinlock.o and b/spinlock.o differ
diff --git a/stressfs.asm b/stressfs.asm
index ba906ab..fe50684 100644
--- a/stressfs.asm
+++ b/stressfs.asm
@@ -5,11 +5,11 @@ _stressfs:     file format elf32-i386
 Disassembly of section .text:
 
 00000000 <main>:
+#include "user.h"
 #include "fs.h"
 #include "fcntl.h"
 
-int
-main(int argc, char *argv[])
+int main(int argc, char *argv[])
 {
    0:	55                   	push   %ebp
   int fd, i;
@@ -25,7 +25,7 @@ main(int argc, char *argv[])
   printf(1, "stressfs starting\n");
   memset(data, 'a', sizeof(data));
 
-  for(i = 0; i < 4; i++)
+  for (i = 0; i < 4; i++)
    b:	31 db                	xor    %ebx,%ebx
 {
    d:	83 e4 f0             	and    $0xfffffff0,%esp
@@ -52,11 +52,11 @@ main(int argc, char *argv[])
   52:	00 
   53:	89 34 24             	mov    %esi,(%esp)
   56:	e8 95 01 00 00       	call   1f0 <memset>
-    if(fork() > 0)
+    if (fork() > 0)
   5b:	e8 fa 02 00 00       	call   35a <fork>
   60:	85 c0                	test   %eax,%eax
-  62:	0f 8f ca 00 00 00    	jg     132 <main+0x132>
-  for(i = 0; i < 4; i++)
+  62:	0f 8f d1 00 00 00    	jg     139 <main+0x139>
+  for (i = 0; i < 4; i++)
   68:	83 c3 01             	add    $0x1,%ebx
   6b:	83 fb 04             	cmp    $0x4,%ebx
   6e:	75 eb                	jne    5b <main+0x5b>
@@ -85,15 +85,15 @@ main(int argc, char *argv[])
   a7:	e8 f6 02 00 00       	call   3a2 <open>
   ac:	89 c7                	mov    %eax,%edi
   ae:	66 90                	xchg   %ax,%ax
-  for(i = 0; i < 20; i++)
-//    printf(fd, "%d\n", i);
+  for (i = 0; i < 20; i++)
+    //    printf(fd, "%d\n", i);
     write(fd, data, sizeof(data));
   b0:	c7 44 24 08 00 02 00 	movl   $0x200,0x8(%esp)
   b7:	00 
   b8:	89 74 24 04          	mov    %esi,0x4(%esp)
   bc:	89 3c 24             	mov    %edi,(%esp)
   bf:	e8 be 02 00 00       	call   382 <write>
-  for(i = 0; i < 20; i++)
+  for (i = 0; i < 20; i++)
   c4:	83 eb 01             	sub    $0x1,%ebx
   c7:	75 e7                	jne    b0 <main+0xb0>
   close(fd);
@@ -131,18 +131,16 @@ main(int argc, char *argv[])
  119:	89 3c 24             	mov    %edi,(%esp)
  11c:	e8 69 02 00 00       	call   38a <close>
 
-  wait();
- 121:	e8 44 02 00 00       	call   36a <wait>
+  wait(0);
+ 121:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+ 128:	e8 3d 02 00 00       	call   36a <wait>
+  ;
 
   exit(0);
- 126:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
- 12d:	e8 30 02 00 00       	call   362 <exit>
- 132:	89 df                	mov    %ebx,%edi
- 134:	e9 3c ff ff ff       	jmp    75 <main+0x75>
- 139:	66 90                	xchg   %ax,%ax
- 13b:	66 90                	xchg   %ax,%ax
- 13d:	66 90                	xchg   %ax,%ax
- 13f:	90                   	nop
+ 12d:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+ 134:	e8 29 02 00 00       	call   362 <exit>
+ 139:	89 df                	mov    %ebx,%edi
+ 13b:	e9 35 ff ff ff       	jmp    75 <main+0x75>
 
 00000140 <strcpy>:
 #include "user.h"
@@ -527,132 +525,106 @@ memmove(void *vdst, const void *vsrc, int n)
  359:	c3                   	ret    
 
 0000035a <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
  35a:	b8 01 00 00 00       	mov    $0x1,%eax
  35f:	cd 40                	int    $0x40
  361:	c3                   	ret    
 
 00000362 <exit>:
-SYSCALL(exit)
  362:	b8 02 00 00 00       	mov    $0x2,%eax
  367:	cd 40                	int    $0x40
  369:	c3                   	ret    
 
 0000036a <wait>:
-SYSCALL(wait)
  36a:	b8 03 00 00 00       	mov    $0x3,%eax
  36f:	cd 40                	int    $0x40
  371:	c3                   	ret    
 
 00000372 <pipe>:
-SYSCALL(pipe)
  372:	b8 04 00 00 00       	mov    $0x4,%eax
  377:	cd 40                	int    $0x40
  379:	c3                   	ret    
 
 0000037a <read>:
-SYSCALL(read)
  37a:	b8 05 00 00 00       	mov    $0x5,%eax
  37f:	cd 40                	int    $0x40
  381:	c3                   	ret    
 
 00000382 <write>:
-SYSCALL(write)
  382:	b8 10 00 00 00       	mov    $0x10,%eax
  387:	cd 40                	int    $0x40
  389:	c3                   	ret    
 
 0000038a <close>:
-SYSCALL(close)
  38a:	b8 15 00 00 00       	mov    $0x15,%eax
  38f:	cd 40                	int    $0x40
  391:	c3                   	ret    
 
 00000392 <kill>:
-SYSCALL(kill)
  392:	b8 06 00 00 00       	mov    $0x6,%eax
  397:	cd 40                	int    $0x40
  399:	c3                   	ret    
 
 0000039a <exec>:
-SYSCALL(exec)
  39a:	b8 07 00 00 00       	mov    $0x7,%eax
  39f:	cd 40                	int    $0x40
  3a1:	c3                   	ret    
 
 000003a2 <open>:
-SYSCALL(open)
  3a2:	b8 0f 00 00 00       	mov    $0xf,%eax
  3a7:	cd 40                	int    $0x40
  3a9:	c3                   	ret    
 
 000003aa <mknod>:
-SYSCALL(mknod)
  3aa:	b8 11 00 00 00       	mov    $0x11,%eax
  3af:	cd 40                	int    $0x40
  3b1:	c3                   	ret    
 
 000003b2 <unlink>:
-SYSCALL(unlink)
  3b2:	b8 12 00 00 00       	mov    $0x12,%eax
  3b7:	cd 40                	int    $0x40
  3b9:	c3                   	ret    
 
 000003ba <fstat>:
-SYSCALL(fstat)
  3ba:	b8 08 00 00 00       	mov    $0x8,%eax
  3bf:	cd 40                	int    $0x40
  3c1:	c3                   	ret    
 
 000003c2 <link>:
-SYSCALL(link)
  3c2:	b8 13 00 00 00       	mov    $0x13,%eax
  3c7:	cd 40                	int    $0x40
  3c9:	c3                   	ret    
 
 000003ca <mkdir>:
-SYSCALL(mkdir)
  3ca:	b8 14 00 00 00       	mov    $0x14,%eax
  3cf:	cd 40                	int    $0x40
  3d1:	c3                   	ret    
 
 000003d2 <chdir>:
-SYSCALL(chdir)
  3d2:	b8 09 00 00 00       	mov    $0x9,%eax
  3d7:	cd 40                	int    $0x40
  3d9:	c3                   	ret    
 
 000003da <dup>:
-SYSCALL(dup)
  3da:	b8 0a 00 00 00       	mov    $0xa,%eax
  3df:	cd 40                	int    $0x40
  3e1:	c3                   	ret    
 
 000003e2 <getpid>:
-SYSCALL(getpid)
  3e2:	b8 0b 00 00 00       	mov    $0xb,%eax
  3e7:	cd 40                	int    $0x40
  3e9:	c3                   	ret    
 
 000003ea <sbrk>:
-SYSCALL(sbrk)
  3ea:	b8 0c 00 00 00       	mov    $0xc,%eax
  3ef:	cd 40                	int    $0x40
  3f1:	c3                   	ret    
 
 000003f2 <sleep>:
-SYSCALL(sleep)
  3f2:	b8 0d 00 00 00       	mov    $0xd,%eax
  3f7:	cd 40                	int    $0x40
  3f9:	c3                   	ret    
 
 000003fa <uptime>:
-SYSCALL(uptime)
  3fa:	b8 0e 00 00 00       	mov    $0xe,%eax
  3ff:	cd 40                	int    $0x40
  401:	c3                   	ret    
diff --git a/stressfs.c b/stressfs.c
index 8829be2..1e78e18 100644
--- a/stressfs.c
+++ b/stressfs.c
@@ -13,8 +13,7 @@
 #include "fs.h"
 #include "fcntl.h"
 
-int
-main(int argc, char *argv[])
+int main(int argc, char *argv[])
 {
   int fd, i;
   char path[] = "stressfs0";
@@ -23,16 +22,16 @@ main(int argc, char *argv[])
   printf(1, "stressfs starting\n");
   memset(data, 'a', sizeof(data));
 
-  for(i = 0; i < 4; i++)
-    if(fork() > 0)
+  for (i = 0; i < 4; i++)
+    if (fork() > 0)
       break;
 
   printf(1, "write %d\n", i);
 
   path[8] += i;
   fd = open(path, O_CREATE | O_RDWR);
-  for(i = 0; i < 20; i++)
-//    printf(fd, "%d\n", i);
+  for (i = 0; i < 20; i++)
+    //    printf(fd, "%d\n", i);
     write(fd, data, sizeof(data));
   close(fd);
 
@@ -43,7 +42,8 @@ main(int argc, char *argv[])
     read(fd, data, sizeof(data));
   close(fd);
 
-  wait();
+  wait(0);
+  ;
 
   exit(0);
 }
diff --git a/stressfs.o b/stressfs.o
index 9a76e26..900a131 100644
Binary files a/stressfs.o and b/stressfs.o differ
diff --git a/syscall.o b/syscall.o
index e20c2c5..d159933 100644
Binary files a/syscall.o and b/syscall.o differ
diff --git a/sysfile.o b/sysfile.o
index 10d3278..426943d 100644
Binary files a/sysfile.o and b/sysfile.o differ
diff --git a/sysproc.c b/sysproc.c
index 1ccc484..4d73f05 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -7,69 +7,70 @@
 #include "mmu.h"
 #include "proc.h"
 
-int
-sys_fork(void)
+int sys_fork(void)
 {
   return fork();
 }
 
-int
-sys_exit(void)
+int sys_exit(void)
 {
   int status;
   argint(0, &status);
   exit(status);
-  return 0;  // not reached
+  return 0; // not reached
 }
 
-int
-sys_wait(void)
+int sys_wait(void)
 {
-  return wait();
+  int *status;
+  if (argptr(0, (void *)&status, sizeof(status)) < 0)
+  {
+    return -1;
+  }
+
+  return wait(status);
 }
 
-int
-sys_kill(void)
+int sys_kill(void)
 {
   int pid;
 
-  if(argint(0, &pid) < 0)
+  if (argint(0, &pid) < 0)
     return -1;
   return kill(pid);
 }
 
-int
-sys_getpid(void)
+int sys_getpid(void)
 {
   return myproc()->pid;
 }
 
-int
-sys_sbrk(void)
+int sys_sbrk(void)
 {
   int addr;
   int n;
 
-  if(argint(0, &n) < 0)
+  if (argint(0, &n) < 0)
     return -1;
   addr = myproc()->sz;
-  if(growproc(n) < 0)
+  if (growproc(n) < 0)
     return -1;
   return addr;
 }
 
-int
-sys_sleep(void)
+int sys_sleep(void)
 {
   int n;
   uint ticks0;
 
-  if(argint(0, &n) < 0)
+  if (argint(0, &n) < 0)
     return -1;
   acquire(&tickslock);
   ticks0 = ticks;
-  while(ticks - ticks0 < n){
-    if(myproc()->killed){
+  while (ticks - ticks0 < n)
+  {
+    if (myproc()->killed)
+    {
       release(&tickslock);
       return -1;
     }
@@ -81,8 +82,7 @@ sys_sleep(void)
 
 // return how many clock tick interrupts have occurred
 // since start.
-int
-sys_uptime(void)
+int sys_uptime(void)
 {
   uint xticks;
 
diff --git a/sysproc.o b/sysproc.o
index b9dceff..0509812 100644
Binary files a/sysproc.o and b/sysproc.o differ
diff --git a/trap.o b/trap.o
index 6f09b70..86a1276 100644
Binary files a/trap.o and b/trap.o differ
diff --git a/uart.c b/uart.c
index b8946da..7de2015 100644
--- a/uart.c
+++ b/uart.c
@@ -12,66 +12,63 @@
 #include "proc.h"
 #include "x86.h"
 
-#define COM1    0x3f8
+#define COM1 0x3f8
 
-static int uart;    // is there a uart?
+static int uart; // is there a uart?
 
-void
-uartinit(void)
+void uartinit(void)
 {
   char *p;
 
   // Turn off the FIFO
-  outb(COM1+2, 0);
+  outb(COM1 + 2, 0);
 
   // 9600 baud, 8 data bits, 1 stop bit, parity off.
-  outb(COM1+3, 0x80);    // Unlock divisor
-  outb(COM1+0, 115200/9600);
-  outb(COM1+1, 0);
-  outb(COM1+3, 0x03);    // Lock divisor, 8 data bits.
-  outb(COM1+4, 0);
-  outb(COM1+1, 0x01);    // Enable receive interrupts.
+  outb(COM1 + 3, 0x80); // Unlock divisor
+  outb(COM1 + 0, 115200 / 9600);
+  outb(COM1 + 1, 0);
+  outb(COM1 + 3, 0x03); // Lock divisor, 8 data bits.
+  outb(COM1 + 4, 0);
+  outb(COM1 + 1, 0x01); // Enable receive interrupts.
 
   // If status is 0xFF, no serial port.
-  if(inb(COM1+5) == 0xFF)
+  if (inb(COM1 + 5) == 0xFF)
     return;
   uart = 1;
 
   // Acknowledge pre-existing interrupt conditions;
   // enable interrupts.
-  inb(COM1+2);
-  inb(COM1+0);
+  inb(COM1 + 2);
+  inb(COM1 + 0);
   ioapicenable(IRQ_COM1, 0);
 
   // Announce that we're here.
-  for(p="xv6...\n"; *p; p++)
+  for (p = "xv6...\n"; *p; p++)
     uartputc(*p);
 }
 
-void
-uartputc(int c)
+void uartputc(int c)
 {
   int i;
 
-  if(!uart)
+  if (!uart)
     return;
-  for(i = 0; i < 128 && !(inb(COM1+5) & 0x20); i++)
+  for (i = 0; i < 128 && !(inb(COM1 + 5) & 0x20); i++)
     microdelay(10);
-  outb(COM1+0, c);
+  outb(COM1 + 0, c);
 }
 
 static int
 uartgetc(void)
 {
-  if(!uart)
+  if (!uart)
     return -1;
-  if(!(inb(COM1+5) & 0x01))
+  if (!(inb(COM1 + 5) & 0x01))
     return -1;
-  return inb(COM1+0);
+  return inb(COM1 + 0);
 }
 
-void
-uartintr(void)
+void uartintr(void)
 {
   consoleintr(uartgetc);
 }
diff --git a/uart.o b/uart.o
index bbdc927..098d4fc 100644
Binary files a/uart.o and b/uart.o differ
diff --git a/ulib.o b/ulib.o
index 60c0110..f1995da 100644
Binary files a/ulib.o and b/ulib.o differ
diff --git a/umalloc.o b/umalloc.o
index f9e608f..56165e8 100644
Binary files a/umalloc.o and b/umalloc.o differ
diff --git a/user.h b/user.h
index 3498e6d..d4d3040 100644
--- a/user.h
+++ b/user.h
@@ -4,36 +4,36 @@ struct rtcdate;
 // system calls
 int fork(void);
 int exit(int) __attribute__((noreturn));
-int wait(void);
-int pipe(int*);
-int write(int, const void*, int);
-int read(int, void*, int);
+int wait(int *);
+int pipe(int *);
+int write(int, const void *, int);
+int read(int, void *, int);
 int close(int);
 int kill(int);
-int exec(char*, char**);
-int open(const char*, int);
-int mknod(const char*, short, short);
-int unlink(const char*);
-int fstat(int fd, struct stat*);
-int link(const char*, const char*);
-int mkdir(const char*);
-int chdir(const char*);
+int exec(char *, char **);
+int open(const char *, int);
+int mknod(const char *, short, short);
+int unlink(const char *);
+int fstat(int fd, struct stat *);
+int link(const char *, const char *);
+int mkdir(const char *);
+int chdir(const char *);
 int dup(int);
 int getpid(void);
-char* sbrk(int);
+char *sbrk(int);
 int sleep(int);
 int uptime(void);
 
 // ulib.c
-int stat(const char*, struct stat*);
-char* strcpy(char*, const char*);
-void *memmove(void*, const void*, int);
-char* strchr(const char*, char c);
-int strcmp(const char*, const char*);
-void printf(int, const char*, ...);
-char* gets(char*, int max);
-uint strlen(const char*);
-void* memset(void*, int, uint);
-void* malloc(uint);
-void free(void*);
-int atoi(const char*);
+int stat(const char *, struct stat *);
+char *strcpy(char *, const char *);
+void *memmove(void *, const void *, int);
+char *strchr(const char *, char c);
+int strcmp(const char *, const char *);
+void printf(int, const char *, ...);
+char *gets(char *, int max);
+uint strlen(const char *);
+void *memset(void *, int, uint);
+void *malloc(uint);
+void free(void *);
+int atoi(const char *);
diff --git a/usertests.asm b/usertests.asm
index 55f26e4..f29872b 100644
--- a/usertests.asm
+++ b/usertests.asm
@@ -5,89 +5,90 @@ _usertests:     file format elf32-i386
 Disassembly of section .text:
 
 00000000 <main>:
+  randstate = randstate * 1664525 + 1013904223;
   return randstate;
 }
 
-int
-main(int argc, char *argv[])
+int main(int argc, char *argv[])
 {
        0:	55                   	push   %ebp
        1:	89 e5                	mov    %esp,%ebp
        3:	83 e4 f0             	and    $0xfffffff0,%esp
        6:	83 ec 10             	sub    $0x10,%esp
   printf(1, "usertests starting\n");
-       9:	c7 44 24 04 36 53 00 	movl   $0x5336,0x4(%esp)
+       9:	c7 44 24 04 06 54 00 	movl   $0x5406,0x4(%esp)
       10:	00 
       11:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-      18:	e8 c3 3f 00 00       	call   3fe0 <printf>
+      18:	e8 93 40 00 00       	call   40b0 <printf>
 
-  if(open("usertests.ran", 0) >= 0){
+  if (open("usertests.ran", 0) >= 0)
       1d:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
       24:	00 
-      25:	c7 04 24 4a 53 00 00 	movl   $0x534a,(%esp)
-      2c:	e8 a1 3e 00 00       	call   3ed2 <open>
+      25:	c7 04 24 1a 54 00 00 	movl   $0x541a,(%esp)
+      2c:	e8 71 3f 00 00       	call   3fa2 <open>
       31:	85 c0                	test   %eax,%eax
       33:	78 20                	js     55 <main+0x55>
+  {
     printf(1, "already ran user tests -- rebuild fs.img\n");
-      35:	c7 44 24 04 b4 5a 00 	movl   $0x5ab4,0x4(%esp)
+      35:	c7 44 24 04 84 5b 00 	movl   $0x5b84,0x4(%esp)
       3c:	00 
       3d:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-      44:	e8 97 3f 00 00       	call   3fe0 <printf>
+      44:	e8 67 40 00 00       	call   40b0 <printf>
     exit(0);
       49:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-      50:	e8 3d 3e 00 00       	call   3e92 <exit>
+      50:	e8 0d 3f 00 00       	call   3f62 <exit>
   }
   close(open("usertests.ran", O_CREATE));
       55:	c7 44 24 04 00 02 00 	movl   $0x200,0x4(%esp)
       5c:	00 
-      5d:	c7 04 24 4a 53 00 00 	movl   $0x534a,(%esp)
-      64:	e8 69 3e 00 00       	call   3ed2 <open>
+      5d:	c7 04 24 1a 54 00 00 	movl   $0x541a,(%esp)
+      64:	e8 39 3f 00 00       	call   3fa2 <open>
       69:	89 04 24             	mov    %eax,(%esp)
-      6c:	e8 49 3e 00 00       	call   3eba <close>
+      6c:	e8 19 3f 00 00       	call   3f8a <close>
 
   argptest();
-      71:	e8 4a 3b 00 00       	call   3bc0 <argptest>
+      71:	e8 1a 3c 00 00       	call   3c90 <argptest>
   createdelete();
-      76:	e8 05 12 00 00       	call   1280 <createdelete>
+      76:	e8 55 12 00 00       	call   12d0 <createdelete>
       7b:	90                   	nop
       7c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   linkunlink();
-      80:	e8 3b 1c 00 00       	call   1cc0 <linkunlink>
+      80:	e8 ab 1c 00 00       	call   1d30 <linkunlink>
   concreate();
-      85:	e8 f6 18 00 00       	call   1980 <concreate>
+      85:	e8 56 19 00 00       	call   19e0 <concreate>
   fourfiles();
-      8a:	e8 b1 0f 00 00       	call   1040 <fourfiles>
+      8a:	e8 e1 0f 00 00       	call   1070 <fourfiles>
       8f:	90                   	nop
   sharedfd();
-      90:	e8 bb 0d 00 00       	call   e50 <sharedfd>
+      90:	e8 eb 0d 00 00       	call   e80 <sharedfd>
 
   bigargtest();
-      95:	e8 86 37 00 00       	call   3820 <bigargtest>
+      95:	e8 36 38 00 00       	call   38d0 <bigargtest>
   bigwrite();
-      9a:	e8 21 27 00 00       	call   27c0 <bigwrite>
+      9a:	e8 91 27 00 00       	call   2830 <bigwrite>
       9f:	90                   	nop
   bigargtest();
-      a0:	e8 7b 37 00 00       	call   3820 <bigargtest>
+      a0:	e8 2b 38 00 00       	call   38d0 <bigargtest>
   bsstest();
-      a5:	e8 f6 36 00 00       	call   37a0 <bsstest>
+      a5:	e8 a6 37 00 00       	call   3850 <bsstest>
   sbrktest();
-      aa:	e8 31 32 00 00       	call   32e0 <sbrktest>
+      aa:	e8 b1 32 00 00       	call   3360 <sbrktest>
       af:	90                   	nop
   validatetest();
-      b0:	e8 3b 36 00 00       	call   36f0 <validatetest>
+      b0:	e8 db 36 00 00       	call   3790 <validatetest>
 
   opentest();
-      b5:	e8 e6 02 00 00       	call   3a0 <opentest>
+      b5:	e8 06 03 00 00       	call   3c0 <opentest>
   writetest();
-      ba:	e8 81 03 00 00       	call   440 <writetest>
+      ba:	e8 a1 03 00 00       	call   460 <writetest>
       bf:	90                   	nop
   writetest1();
-      c0:	e8 4b 05 00 00       	call   610 <writetest1>
+      c0:	e8 6b 05 00 00       	call   630 <writetest1>
   createtest();
-      c5:	e8 06 07 00 00       	call   7d0 <createtest>
+      c5:	e8 26 07 00 00       	call   7f0 <createtest>
 
   openiputtest();
-      ca:	e8 01 02 00 00       	call   2d0 <openiputtest>
+      ca:	e8 11 02 00 00       	call   2e0 <openiputtest>
       cf:	90                   	nop
   exitiputtest();
       d0:	e8 2b 01 00 00       	call   200 <exitiputtest>
@@ -95,49 +96,50 @@ main(int argc, char *argv[])
       d5:	e8 66 00 00 00       	call   140 <iputtest>
 
   mem();
-      da:	e8 91 0c 00 00       	call   d70 <mem>
+      da:	e8 c1 0c 00 00       	call   da0 <mem>
       df:	90                   	nop
   pipe1();
-      e0:	e8 bb 08 00 00       	call   9a0 <pipe1>
+      e0:	e8 db 08 00 00       	call   9c0 <pipe1>
   preempt();
-      e5:	e8 96 0a 00 00       	call   b80 <preempt>
+      e5:	e8 b6 0a 00 00       	call   ba0 <preempt>
   exitwait();
-      ea:	e8 f1 0b 00 00       	call   ce0 <exitwait>
+      ea:	e8 21 0c 00 00       	call   d10 <exitwait>
       ef:	90                   	nop
+  ;
 
   rmdot();
-      f0:	e8 8b 2b 00 00       	call   2c80 <rmdot>
+      f0:	e8 fb 2b 00 00       	call   2cf0 <rmdot>
   fourteen();
-      f5:	e8 06 2a 00 00       	call   2b00 <fourteen>
+      f5:	e8 76 2a 00 00       	call   2b70 <fourteen>
   bigfile();
-      fa:	e8 d1 27 00 00       	call   28d0 <bigfile>
+      fa:	e8 41 28 00 00       	call   2940 <bigfile>
       ff:	90                   	nop
   subdir();
-     100:	e8 3b 1e 00 00       	call   1f40 <subdir>
+     100:	e8 ab 1e 00 00       	call   1fb0 <subdir>
   linktest();
-     105:	e8 d6 15 00 00       	call   16e0 <linktest>
+     105:	e8 36 16 00 00       	call   1740 <linktest>
   unlinkread();
-     10a:	e8 d1 13 00 00       	call   14e0 <unlinkread>
+     10a:	e8 31 14 00 00       	call   1540 <unlinkread>
      10f:	90                   	nop
   dirfile();
-     110:	e8 3b 2d 00 00       	call   2e50 <dirfile>
+     110:	e8 ab 2d 00 00       	call   2ec0 <dirfile>
   iref();
-     115:	e8 b6 2f 00 00       	call   30d0 <iref>
+     115:	e8 26 30 00 00       	call   3140 <iref>
   forktest();
-     11a:	e8 e1 30 00 00       	call   3200 <forktest>
+     11a:	e8 51 31 00 00       	call   3270 <forktest>
      11f:	90                   	nop
   bigdir(); // slow
-     120:	e8 bb 1c 00 00       	call   1de0 <bigdir>
+     120:	e8 2b 1d 00 00       	call   1e50 <bigdir>
 
   uio();
-     125:	e8 06 3a 00 00       	call   3b30 <uio>
+     125:	e8 c6 3a 00 00       	call   3bf0 <uio>
 
   exectest();
-     12a:	e8 11 08 00 00       	call   940 <exectest>
+     12a:	e8 31 08 00 00       	call   960 <exectest>
 
   exit(0);
      12f:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-     136:	e8 57 3d 00 00       	call   3e92 <exit>
+     136:	e8 27 3e 00 00       	call   3f62 <exit>
      13b:	66 90                	xchg   %ax,%ax
      13d:	66 90                	xchg   %ax,%ax
      13f:	90                   	nop
@@ -148,60 +150,60 @@ main(int argc, char *argv[])
      141:	89 e5                	mov    %esp,%ebp
      143:	83 ec 18             	sub    $0x18,%esp
   printf(stdout, "iput test\n");
-     146:	a1 c4 63 00 00       	mov    0x63c4,%eax
-     14b:	c7 44 24 04 dc 43 00 	movl   $0x43dc,0x4(%esp)
+     146:	a1 94 64 00 00       	mov    0x6494,%eax
+     14b:	c7 44 24 04 ac 44 00 	movl   $0x44ac,0x4(%esp)
      152:	00 
      153:	89 04 24             	mov    %eax,(%esp)
-     156:	e8 85 3e 00 00       	call   3fe0 <printf>
-  if(mkdir("iputdir") < 0){
-     15b:	c7 04 24 6f 43 00 00 	movl   $0x436f,(%esp)
-     162:	e8 93 3d 00 00       	call   3efa <mkdir>
+     156:	e8 55 3f 00 00       	call   40b0 <printf>
+  if (mkdir("iputdir") < 0)
+     15b:	c7 04 24 3f 44 00 00 	movl   $0x443f,(%esp)
+     162:	e8 63 3e 00 00       	call   3fca <mkdir>
      167:	85 c0                	test   %eax,%eax
      169:	78 47                	js     1b2 <iputtest+0x72>
-  if(chdir("iputdir") < 0){
-     16b:	c7 04 24 6f 43 00 00 	movl   $0x436f,(%esp)
-     172:	e8 8b 3d 00 00       	call   3f02 <chdir>
+  if (chdir("iputdir") < 0)
+     16b:	c7 04 24 3f 44 00 00 	movl   $0x443f,(%esp)
+     172:	e8 5b 3e 00 00       	call   3fd2 <chdir>
      177:	85 c0                	test   %eax,%eax
      179:	78 6c                	js     1e7 <iputtest+0xa7>
-  if(unlink("../iputdir") < 0){
-     17b:	c7 04 24 6c 43 00 00 	movl   $0x436c,(%esp)
-     182:	e8 5b 3d 00 00       	call   3ee2 <unlink>
+  if (unlink("../iputdir") < 0)
+     17b:	c7 04 24 3c 44 00 00 	movl   $0x443c,(%esp)
+     182:	e8 2b 3e 00 00       	call   3fb2 <unlink>
      187:	85 c0                	test   %eax,%eax
      189:	78 52                	js     1dd <iputtest+0x9d>
-  if(chdir("/") < 0){
-     18b:	c7 04 24 91 43 00 00 	movl   $0x4391,(%esp)
-     192:	e8 6b 3d 00 00       	call   3f02 <chdir>
+  if (chdir("/") < 0)
+     18b:	c7 04 24 61 44 00 00 	movl   $0x4461,(%esp)
+     192:	e8 3b 3e 00 00       	call   3fd2 <chdir>
      197:	85 c0                	test   %eax,%eax
      199:	78 38                	js     1d3 <iputtest+0x93>
   printf(stdout, "iput test ok\n");
-     19b:	a1 c4 63 00 00       	mov    0x63c4,%eax
-     1a0:	c7 44 24 04 14 44 00 	movl   $0x4414,0x4(%esp)
+     19b:	a1 94 64 00 00       	mov    0x6494,%eax
+     1a0:	c7 44 24 04 e4 44 00 	movl   $0x44e4,0x4(%esp)
      1a7:	00 
      1a8:	89 04 24             	mov    %eax,(%esp)
-     1ab:	e8 30 3e 00 00       	call   3fe0 <printf>
+     1ab:	e8 00 3f 00 00       	call   40b0 <printf>
 }
      1b0:	c9                   	leave  
      1b1:	c3                   	ret    
     printf(stdout, "mkdir failed\n");
-     1b2:	c7 44 24 04 48 43 00 	movl   $0x4348,0x4(%esp)
+     1b2:	c7 44 24 04 18 44 00 	movl   $0x4418,0x4(%esp)
      1b9:	00 
     printf(stdout, "chdir iputdir failed\n");
-     1ba:	a1 c4 63 00 00       	mov    0x63c4,%eax
+     1ba:	a1 94 64 00 00       	mov    0x6494,%eax
      1bf:	89 04 24             	mov    %eax,(%esp)
-     1c2:	e8 19 3e 00 00       	call   3fe0 <printf>
+     1c2:	e8 e9 3e 00 00       	call   40b0 <printf>
     exit(0);
      1c7:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-     1ce:	e8 bf 3c 00 00       	call   3e92 <exit>
+     1ce:	e8 8f 3d 00 00       	call   3f62 <exit>
     printf(stdout, "chdir / failed\n");
-     1d3:	c7 44 24 04 93 43 00 	movl   $0x4393,0x4(%esp)
+     1d3:	c7 44 24 04 63 44 00 	movl   $0x4463,0x4(%esp)
      1da:	00 
      1db:	eb dd                	jmp    1ba <iputtest+0x7a>
     printf(stdout, "unlink ../iputdir failed\n");
-     1dd:	c7 44 24 04 77 43 00 	movl   $0x4377,0x4(%esp)
+     1dd:	c7 44 24 04 47 44 00 	movl   $0x4447,0x4(%esp)
      1e4:	00 
      1e5:	eb d3                	jmp    1ba <iputtest+0x7a>
     printf(stdout, "chdir iputdir failed\n");
-     1e7:	c7 44 24 04 56 43 00 	movl   $0x4356,0x4(%esp)
+     1e7:	c7 44 24 04 26 44 00 	movl   $0x4426,0x4(%esp)
      1ee:	00 
      1ef:	eb c9                	jmp    1ba <iputtest+0x7a>
      1f1:	eb 0d                	jmp    200 <exitiputtest>
@@ -225,1315 +227,1287 @@ main(int argc, char *argv[])
      201:	89 e5                	mov    %esp,%ebp
      203:	83 ec 18             	sub    $0x18,%esp
   printf(stdout, "exitiput test\n");
-     206:	a1 c4 63 00 00       	mov    0x63c4,%eax
-     20b:	c7 44 24 04 a3 43 00 	movl   $0x43a3,0x4(%esp)
+     206:	a1 94 64 00 00       	mov    0x6494,%eax
+     20b:	c7 44 24 04 73 44 00 	movl   $0x4473,0x4(%esp)
      212:	00 
      213:	89 04 24             	mov    %eax,(%esp)
-     216:	e8 c5 3d 00 00       	call   3fe0 <printf>
+     216:	e8 95 3e 00 00       	call   40b0 <printf>
   pid = fork();
-     21b:	e8 6a 3c 00 00       	call   3e8a <fork>
-  if(pid < 0){
+     21b:	e8 3a 3d 00 00       	call   3f5a <fork>
+  if (pid < 0)
      220:	85 c0                	test   %eax,%eax
-     222:	0f 88 89 00 00 00    	js     2b1 <exitiputtest+0xb1>
-  if(pid == 0){
+     222:	0f 88 91 00 00 00    	js     2b9 <exitiputtest+0xb9>
+  if (pid == 0)
      228:	75 46                	jne    270 <exitiputtest+0x70>
-    if(mkdir("iputdir") < 0){
-     22a:	c7 04 24 6f 43 00 00 	movl   $0x436f,(%esp)
-     231:	e8 c4 3c 00 00       	call   3efa <mkdir>
+    if (mkdir("iputdir") < 0)
+     22a:	c7 04 24 3f 44 00 00 	movl   $0x443f,(%esp)
+     231:	e8 94 3d 00 00       	call   3fca <mkdir>
      236:	85 c0                	test   %eax,%eax
-     238:	0f 88 87 00 00 00    	js     2c5 <exitiputtest+0xc5>
-    if(chdir("iputdir") < 0){
-     23e:	c7 04 24 6f 43 00 00 	movl   $0x436f,(%esp)
-     245:	e8 b8 3c 00 00       	call   3f02 <chdir>
+     238:	0f 88 8f 00 00 00    	js     2cd <exitiputtest+0xcd>
+    if (chdir("iputdir") < 0)
+     23e:	c7 04 24 3f 44 00 00 	movl   $0x443f,(%esp)
+     245:	e8 88 3d 00 00       	call   3fd2 <chdir>
      24a:	85 c0                	test   %eax,%eax
-     24c:	78 6d                	js     2bb <exitiputtest+0xbb>
-    if(unlink("../iputdir") < 0){
-     24e:	c7 04 24 6c 43 00 00 	movl   $0x436c,(%esp)
-     255:	e8 88 3c 00 00       	call   3ee2 <unlink>
+     24c:	78 75                	js     2c3 <exitiputtest+0xc3>
+    if (unlink("../iputdir") < 0)
+     24e:	c7 04 24 3c 44 00 00 	movl   $0x443c,(%esp)
+     255:	e8 58 3d 00 00       	call   3fb2 <unlink>
      25a:	85 c0                	test   %eax,%eax
-     25c:	78 32                	js     290 <exitiputtest+0x90>
+     25c:	78 3a                	js     298 <exitiputtest+0x98>
       exit(0);
      25e:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-     265:	e8 28 3c 00 00       	call   3e92 <exit>
+     265:	e8 f8 3c 00 00       	call   3f62 <exit>
      26a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-  wait();
-     270:	e8 25 3c 00 00       	call   3e9a <wait>
+  wait(0);
+     270:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+     277:	e8 ee 3c 00 00       	call   3f6a <wait>
   printf(stdout, "exitiput test ok\n");
-     275:	a1 c4 63 00 00       	mov    0x63c4,%eax
-     27a:	c7 44 24 04 c6 43 00 	movl   $0x43c6,0x4(%esp)
-     281:	00 
-     282:	89 04 24             	mov    %eax,(%esp)
-     285:	e8 56 3d 00 00       	call   3fe0 <printf>
+     27c:	a1 94 64 00 00       	mov    0x6494,%eax
+     281:	c7 44 24 04 96 44 00 	movl   $0x4496,0x4(%esp)
+     288:	00 
+     289:	89 04 24             	mov    %eax,(%esp)
+     28c:	e8 1f 3e 00 00       	call   40b0 <printf>
 }
-     28a:	c9                   	leave  
-     28b:	c3                   	ret    
-     28c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     291:	c9                   	leave  
+     292:	c3                   	ret    
+     293:	90                   	nop
+     294:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
       printf(stdout, "unlink ../iputdir failed\n");
-     290:	c7 44 24 04 77 43 00 	movl   $0x4377,0x4(%esp)
-     297:	00 
+     298:	c7 44 24 04 47 44 00 	movl   $0x4447,0x4(%esp)
+     29f:	00 
       printf(stdout, "mkdir failed\n");
-     298:	a1 c4 63 00 00       	mov    0x63c4,%eax
-     29d:	89 04 24             	mov    %eax,(%esp)
-     2a0:	e8 3b 3d 00 00       	call   3fe0 <printf>
+     2a0:	a1 94 64 00 00       	mov    0x6494,%eax
+     2a5:	89 04 24             	mov    %eax,(%esp)
+     2a8:	e8 03 3e 00 00       	call   40b0 <printf>
       exit(0);
-     2a5:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-     2ac:	e8 e1 3b 00 00       	call   3e92 <exit>
+     2ad:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+     2b4:	e8 a9 3c 00 00       	call   3f62 <exit>
     printf(stdout, "fork failed\n");
-     2b1:	c7 44 24 04 89 52 00 	movl   $0x5289,0x4(%esp)
-     2b8:	00 
-     2b9:	eb dd                	jmp    298 <exitiputtest+0x98>
+     2b9:	c7 44 24 04 59 53 00 	movl   $0x5359,0x4(%esp)
+     2c0:	00 
+     2c1:	eb dd                	jmp    2a0 <exitiputtest+0xa0>
       printf(stdout, "child chdir failed\n");
-     2bb:	c7 44 24 04 b2 43 00 	movl   $0x43b2,0x4(%esp)
-     2c2:	00 
-     2c3:	eb d3                	jmp    298 <exitiputtest+0x98>
+     2c3:	c7 44 24 04 82 44 00 	movl   $0x4482,0x4(%esp)
+     2ca:	00 
+     2cb:	eb d3                	jmp    2a0 <exitiputtest+0xa0>
       printf(stdout, "mkdir failed\n");
-     2c5:	c7 44 24 04 48 43 00 	movl   $0x4348,0x4(%esp)
-     2cc:	00 
-     2cd:	eb c9                	jmp    298 <exitiputtest+0x98>
-     2cf:	90                   	nop
+     2cd:	c7 44 24 04 18 44 00 	movl   $0x4418,0x4(%esp)
+     2d4:	00 
+     2d5:	eb c9                	jmp    2a0 <exitiputtest+0xa0>
+     2d7:	89 f6                	mov    %esi,%esi
+     2d9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-000002d0 <openiputtest>:
+000002e0 <openiputtest>:
 {
-     2d0:	55                   	push   %ebp
-     2d1:	89 e5                	mov    %esp,%ebp
-     2d3:	83 ec 18             	sub    $0x18,%esp
+     2e0:	55                   	push   %ebp
+     2e1:	89 e5                	mov    %esp,%ebp
+     2e3:	83 ec 18             	sub    $0x18,%esp
   printf(stdout, "openiput test\n");
-     2d6:	a1 c4 63 00 00       	mov    0x63c4,%eax
-     2db:	c7 44 24 04 d8 43 00 	movl   $0x43d8,0x4(%esp)
-     2e2:	00 
-     2e3:	89 04 24             	mov    %eax,(%esp)
-     2e6:	e8 f5 3c 00 00       	call   3fe0 <printf>
-  if(mkdir("oidir") < 0){
-     2eb:	c7 04 24 e7 43 00 00 	movl   $0x43e7,(%esp)
-     2f2:	e8 03 3c 00 00       	call   3efa <mkdir>
-     2f7:	85 c0                	test   %eax,%eax
-     2f9:	0f 88 8b 00 00 00    	js     38a <openiputtest+0xba>
+     2e6:	a1 94 64 00 00       	mov    0x6494,%eax
+     2eb:	c7 44 24 04 a8 44 00 	movl   $0x44a8,0x4(%esp)
+     2f2:	00 
+     2f3:	89 04 24             	mov    %eax,(%esp)
+     2f6:	e8 b5 3d 00 00       	call   40b0 <printf>
+  if (mkdir("oidir") < 0)
+     2fb:	c7 04 24 b7 44 00 00 	movl   $0x44b7,(%esp)
+     302:	e8 c3 3c 00 00       	call   3fca <mkdir>
+     307:	85 c0                	test   %eax,%eax
+     309:	0f 88 92 00 00 00    	js     3a1 <openiputtest+0xc1>
   pid = fork();
-     2ff:	e8 86 3b 00 00       	call   3e8a <fork>
-  if(pid < 0){
-     304:	85 c0                	test   %eax,%eax
-     306:	78 78                	js     380 <openiputtest+0xb0>
-  if(pid == 0){
-     308:	75 3e                	jne    348 <openiputtest+0x78>
+     30f:	e8 46 3c 00 00       	call   3f5a <fork>
+  if (pid < 0)
+     314:	85 c0                	test   %eax,%eax
+     316:	78 7f                	js     397 <openiputtest+0xb7>
+  if (pid == 0)
+     318:	75 3e                	jne    358 <openiputtest+0x78>
     int fd = open("oidir", O_RDWR);
-     30a:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
-     311:	00 
-     312:	c7 04 24 e7 43 00 00 	movl   $0x43e7,(%esp)
-     319:	e8 b4 3b 00 00       	call   3ed2 <open>
-    if(fd >= 0){
-     31e:	85 c0                	test   %eax,%eax
-     320:	78 15                	js     337 <openiputtest+0x67>
+     31a:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
+     321:	00 
+     322:	c7 04 24 b7 44 00 00 	movl   $0x44b7,(%esp)
+     329:	e8 74 3c 00 00       	call   3fa2 <open>
+    if (fd >= 0)
+     32e:	85 c0                	test   %eax,%eax
+     330:	78 15                	js     347 <openiputtest+0x67>
       printf(stdout, "open directory for write succeeded\n");
-     322:	c7 44 24 04 6c 53 00 	movl   $0x536c,0x4(%esp)
-     329:	00 
+     332:	c7 44 24 04 3c 54 00 	movl   $0x543c,0x4(%esp)
+     339:	00 
     printf(stdout, "fork failed\n");
-     32a:	a1 c4 63 00 00       	mov    0x63c4,%eax
-     32f:	89 04 24             	mov    %eax,(%esp)
-     332:	e8 a9 3c 00 00       	call   3fe0 <printf>
+     33a:	a1 94 64 00 00       	mov    0x6494,%eax
+     33f:	89 04 24             	mov    %eax,(%esp)
+     342:	e8 69 3d 00 00       	call   40b0 <printf>
     exit(0);
-     337:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-     33e:	e8 4f 3b 00 00       	call   3e92 <exit>
-     343:	90                   	nop
-     344:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     347:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+     34e:	e8 0f 3c 00 00       	call   3f62 <exit>
+     353:	90                   	nop
+     354:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   sleep(1);
-     348:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-     34f:	e8 ce 3b 00 00       	call   3f22 <sleep>
-  if(unlink("oidir") != 0){
-     354:	c7 04 24 e7 43 00 00 	movl   $0x43e7,(%esp)
-     35b:	e8 82 3b 00 00       	call   3ee2 <unlink>
-     360:	85 c0                	test   %eax,%eax
-     362:	75 30                	jne    394 <openiputtest+0xc4>
-  wait();
-     364:	e8 31 3b 00 00       	call   3e9a <wait>
+     358:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+     35f:	e8 8e 3c 00 00       	call   3ff2 <sleep>
+  if (unlink("oidir") != 0)
+     364:	c7 04 24 b7 44 00 00 	movl   $0x44b7,(%esp)
+     36b:	e8 42 3c 00 00       	call   3fb2 <unlink>
+     370:	85 c0                	test   %eax,%eax
+     372:	75 37                	jne    3ab <openiputtest+0xcb>
+  wait(0);
+     374:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+     37b:	e8 ea 3b 00 00       	call   3f6a <wait>
   printf(stdout, "openiput test ok\n");
-     369:	a1 c4 63 00 00       	mov    0x63c4,%eax
-     36e:	c7 44 24 04 10 44 00 	movl   $0x4410,0x4(%esp)
-     375:	00 
-     376:	89 04 24             	mov    %eax,(%esp)
-     379:	e8 62 3c 00 00       	call   3fe0 <printf>
+     380:	a1 94 64 00 00       	mov    0x6494,%eax
+     385:	c7 44 24 04 e0 44 00 	movl   $0x44e0,0x4(%esp)
+     38c:	00 
+     38d:	89 04 24             	mov    %eax,(%esp)
+     390:	e8 1b 3d 00 00       	call   40b0 <printf>
 }
-     37e:	c9                   	leave  
-     37f:	c3                   	ret    
+     395:	c9                   	leave  
+     396:	c3                   	ret    
     printf(stdout, "fork failed\n");
-     380:	c7 44 24 04 89 52 00 	movl   $0x5289,0x4(%esp)
-     387:	00 
-     388:	eb a0                	jmp    32a <openiputtest+0x5a>
+     397:	c7 44 24 04 59 53 00 	movl   $0x5359,0x4(%esp)
+     39e:	00 
+     39f:	eb 99                	jmp    33a <openiputtest+0x5a>
     printf(stdout, "mkdir oidir failed\n");
-     38a:	c7 44 24 04 ed 43 00 	movl   $0x43ed,0x4(%esp)
-     391:	00 
-     392:	eb 96                	jmp    32a <openiputtest+0x5a>
+     3a1:	c7 44 24 04 bd 44 00 	movl   $0x44bd,0x4(%esp)
+     3a8:	00 
+     3a9:	eb 8f                	jmp    33a <openiputtest+0x5a>
     printf(stdout, "unlink failed\n");
-     394:	c7 44 24 04 01 44 00 	movl   $0x4401,0x4(%esp)
-     39b:	00 
-     39c:	eb 8c                	jmp    32a <openiputtest+0x5a>
-     39e:	66 90                	xchg   %ax,%ax
+     3ab:	c7 44 24 04 d1 44 00 	movl   $0x44d1,0x4(%esp)
+     3b2:	00 
+     3b3:	eb 85                	jmp    33a <openiputtest+0x5a>
+     3b5:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     3b9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-000003a0 <opentest>:
+000003c0 <opentest>:
 {
-     3a0:	55                   	push   %ebp
-     3a1:	89 e5                	mov    %esp,%ebp
-     3a3:	83 ec 18             	sub    $0x18,%esp
+     3c0:	55                   	push   %ebp
+     3c1:	89 e5                	mov    %esp,%ebp
+     3c3:	83 ec 18             	sub    $0x18,%esp
   printf(stdout, "open test\n");
-     3a6:	a1 c4 63 00 00       	mov    0x63c4,%eax
-     3ab:	c7 44 24 04 22 44 00 	movl   $0x4422,0x4(%esp)
-     3b2:	00 
-     3b3:	89 04 24             	mov    %eax,(%esp)
-     3b6:	e8 25 3c 00 00       	call   3fe0 <printf>
-  fd = open("echo", 0);
-     3bb:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-     3c2:	00 
-     3c3:	c7 04 24 2d 44 00 00 	movl   $0x442d,(%esp)
-     3ca:	e8 03 3b 00 00       	call   3ed2 <open>
-  if(fd < 0){
-     3cf:	85 c0                	test   %eax,%eax
-     3d1:	78 37                	js     40a <opentest+0x6a>
-  close(fd);
+     3c6:	a1 94 64 00 00       	mov    0x6494,%eax
+     3cb:	c7 44 24 04 f2 44 00 	movl   $0x44f2,0x4(%esp)
+     3d2:	00 
      3d3:	89 04 24             	mov    %eax,(%esp)
-     3d6:	e8 df 3a 00 00       	call   3eba <close>
-  fd = open("doesnotexist", 0);
+     3d6:	e8 d5 3c 00 00       	call   40b0 <printf>
+  fd = open("echo", 0);
      3db:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
      3e2:	00 
-     3e3:	c7 04 24 45 44 00 00 	movl   $0x4445,(%esp)
-     3ea:	e8 e3 3a 00 00       	call   3ed2 <open>
-  if(fd >= 0){
+     3e3:	c7 04 24 fd 44 00 00 	movl   $0x44fd,(%esp)
+     3ea:	e8 b3 3b 00 00       	call   3fa2 <open>
+  if (fd < 0)
      3ef:	85 c0                	test   %eax,%eax
-     3f1:	79 38                	jns    42b <opentest+0x8b>
+     3f1:	78 37                	js     42a <opentest+0x6a>
+  close(fd);
+     3f3:	89 04 24             	mov    %eax,(%esp)
+     3f6:	e8 8f 3b 00 00       	call   3f8a <close>
+  fd = open("doesnotexist", 0);
+     3fb:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+     402:	00 
+     403:	c7 04 24 15 45 00 00 	movl   $0x4515,(%esp)
+     40a:	e8 93 3b 00 00       	call   3fa2 <open>
+  if (fd >= 0)
+     40f:	85 c0                	test   %eax,%eax
+     411:	79 38                	jns    44b <opentest+0x8b>
   printf(stdout, "open test ok\n");
-     3f3:	a1 c4 63 00 00       	mov    0x63c4,%eax
-     3f8:	c7 44 24 04 70 44 00 	movl   $0x4470,0x4(%esp)
-     3ff:	00 
-     400:	89 04 24             	mov    %eax,(%esp)
-     403:	e8 d8 3b 00 00       	call   3fe0 <printf>
+     413:	a1 94 64 00 00       	mov    0x6494,%eax
+     418:	c7 44 24 04 40 45 00 	movl   $0x4540,0x4(%esp)
+     41f:	00 
+     420:	89 04 24             	mov    %eax,(%esp)
+     423:	e8 88 3c 00 00       	call   40b0 <printf>
 }
-     408:	c9                   	leave  
-     409:	c3                   	ret    
+     428:	c9                   	leave  
+     429:	c3                   	ret    
     printf(stdout, "open echo failed!\n");
-     40a:	c7 44 24 04 32 44 00 	movl   $0x4432,0x4(%esp)
-     411:	00 
+     42a:	c7 44 24 04 02 45 00 	movl   $0x4502,0x4(%esp)
+     431:	00 
     printf(stdout, "open doesnotexist succeeded!\n");
-     412:	a1 c4 63 00 00       	mov    0x63c4,%eax
-     417:	89 04 24             	mov    %eax,(%esp)
-     41a:	e8 c1 3b 00 00       	call   3fe0 <printf>
+     432:	a1 94 64 00 00       	mov    0x6494,%eax
+     437:	89 04 24             	mov    %eax,(%esp)
+     43a:	e8 71 3c 00 00       	call   40b0 <printf>
     exit(0);
-     41f:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-     426:	e8 67 3a 00 00       	call   3e92 <exit>
+     43f:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+     446:	e8 17 3b 00 00       	call   3f62 <exit>
     printf(stdout, "open doesnotexist succeeded!\n");
-     42b:	c7 44 24 04 52 44 00 	movl   $0x4452,0x4(%esp)
-     432:	00 
-     433:	eb dd                	jmp    412 <opentest+0x72>
-     435:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-     439:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+     44b:	c7 44 24 04 22 45 00 	movl   $0x4522,0x4(%esp)
+     452:	00 
+     453:	eb dd                	jmp    432 <opentest+0x72>
+     455:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     459:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-00000440 <writetest>:
+00000460 <writetest>:
 {
-     440:	55                   	push   %ebp
-     441:	89 e5                	mov    %esp,%ebp
-     443:	56                   	push   %esi
-     444:	53                   	push   %ebx
-     445:	83 ec 10             	sub    $0x10,%esp
+     460:	55                   	push   %ebp
+     461:	89 e5                	mov    %esp,%ebp
+     463:	56                   	push   %esi
+     464:	53                   	push   %ebx
+     465:	83 ec 10             	sub    $0x10,%esp
   printf(stdout, "small file test\n");
-     448:	a1 c4 63 00 00       	mov    0x63c4,%eax
-     44d:	c7 44 24 04 7e 44 00 	movl   $0x447e,0x4(%esp)
-     454:	00 
-     455:	89 04 24             	mov    %eax,(%esp)
-     458:	e8 83 3b 00 00       	call   3fe0 <printf>
-  fd = open("small", O_CREATE|O_RDWR);
-     45d:	c7 44 24 04 02 02 00 	movl   $0x202,0x4(%esp)
-     464:	00 
-     465:	c7 04 24 8f 44 00 00 	movl   $0x448f,(%esp)
-     46c:	e8 61 3a 00 00       	call   3ed2 <open>
-  if(fd >= 0){
-     471:	85 c0                	test   %eax,%eax
-  fd = open("small", O_CREATE|O_RDWR);
-     473:	89 c6                	mov    %eax,%esi
-  if(fd >= 0){
-     475:	0f 88 8b 01 00 00    	js     606 <writetest+0x1c6>
+     468:	a1 94 64 00 00       	mov    0x6494,%eax
+     46d:	c7 44 24 04 4e 45 00 	movl   $0x454e,0x4(%esp)
+     474:	00 
+     475:	89 04 24             	mov    %eax,(%esp)
+     478:	e8 33 3c 00 00       	call   40b0 <printf>
+  fd = open("small", O_CREATE | O_RDWR);
+     47d:	c7 44 24 04 02 02 00 	movl   $0x202,0x4(%esp)
+     484:	00 
+     485:	c7 04 24 5f 45 00 00 	movl   $0x455f,(%esp)
+     48c:	e8 11 3b 00 00       	call   3fa2 <open>
+  if (fd >= 0)
+     491:	85 c0                	test   %eax,%eax
+  fd = open("small", O_CREATE | O_RDWR);
+     493:	89 c6                	mov    %eax,%esi
+  if (fd >= 0)
+     495:	0f 88 8b 01 00 00    	js     626 <writetest+0x1c6>
     printf(stdout, "creat small succeeded; ok\n");
-     47b:	a1 c4 63 00 00       	mov    0x63c4,%eax
-  for(i = 0; i < 100; i++){
-     480:	31 db                	xor    %ebx,%ebx
+     49b:	a1 94 64 00 00       	mov    0x6494,%eax
+  for (i = 0; i < 100; i++)
+     4a0:	31 db                	xor    %ebx,%ebx
     printf(stdout, "creat small succeeded; ok\n");
-     482:	c7 44 24 04 95 44 00 	movl   $0x4495,0x4(%esp)
-     489:	00 
-     48a:	89 04 24             	mov    %eax,(%esp)
-     48d:	e8 4e 3b 00 00       	call   3fe0 <printf>
-     492:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    if(write(fd, "aaaaaaaaaa", 10) != 10){
-     498:	c7 44 24 08 0a 00 00 	movl   $0xa,0x8(%esp)
-     49f:	00 
-     4a0:	c7 44 24 04 cc 44 00 	movl   $0x44cc,0x4(%esp)
-     4a7:	00 
-     4a8:	89 34 24             	mov    %esi,(%esp)
-     4ab:	e8 02 3a 00 00       	call   3eb2 <write>
-     4b0:	83 f8 0a             	cmp    $0xa,%eax
-     4b3:	0f 85 e5 00 00 00    	jne    59e <writetest+0x15e>
-    if(write(fd, "bbbbbbbbbb", 10) != 10){
-     4b9:	c7 44 24 08 0a 00 00 	movl   $0xa,0x8(%esp)
-     4c0:	00 
-     4c1:	c7 44 24 04 d7 44 00 	movl   $0x44d7,0x4(%esp)
-     4c8:	00 
-     4c9:	89 34 24             	mov    %esi,(%esp)
-     4cc:	e8 e1 39 00 00       	call   3eb2 <write>
-     4d1:	83 f8 0a             	cmp    $0xa,%eax
-     4d4:	0f 85 e9 00 00 00    	jne    5c3 <writetest+0x183>
-  for(i = 0; i < 100; i++){
-     4da:	83 c3 01             	add    $0x1,%ebx
-     4dd:	83 fb 64             	cmp    $0x64,%ebx
-     4e0:	75 b6                	jne    498 <writetest+0x58>
+     4a2:	c7 44 24 04 65 45 00 	movl   $0x4565,0x4(%esp)
+     4a9:	00 
+     4aa:	89 04 24             	mov    %eax,(%esp)
+     4ad:	e8 fe 3b 00 00       	call   40b0 <printf>
+     4b2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    if (write(fd, "aaaaaaaaaa", 10) != 10)
+     4b8:	c7 44 24 08 0a 00 00 	movl   $0xa,0x8(%esp)
+     4bf:	00 
+     4c0:	c7 44 24 04 9c 45 00 	movl   $0x459c,0x4(%esp)
+     4c7:	00 
+     4c8:	89 34 24             	mov    %esi,(%esp)
+     4cb:	e8 b2 3a 00 00       	call   3f82 <write>
+     4d0:	83 f8 0a             	cmp    $0xa,%eax
+     4d3:	0f 85 e5 00 00 00    	jne    5be <writetest+0x15e>
+    if (write(fd, "bbbbbbbbbb", 10) != 10)
+     4d9:	c7 44 24 08 0a 00 00 	movl   $0xa,0x8(%esp)
+     4e0:	00 
+     4e1:	c7 44 24 04 a7 45 00 	movl   $0x45a7,0x4(%esp)
+     4e8:	00 
+     4e9:	89 34 24             	mov    %esi,(%esp)
+     4ec:	e8 91 3a 00 00       	call   3f82 <write>
+     4f1:	83 f8 0a             	cmp    $0xa,%eax
+     4f4:	0f 85 e9 00 00 00    	jne    5e3 <writetest+0x183>
+  for (i = 0; i < 100; i++)
+     4fa:	83 c3 01             	add    $0x1,%ebx
+     4fd:	83 fb 64             	cmp    $0x64,%ebx
+     500:	75 b6                	jne    4b8 <writetest+0x58>
   printf(stdout, "writes ok\n");
-     4e2:	a1 c4 63 00 00       	mov    0x63c4,%eax
-     4e7:	c7 44 24 04 e2 44 00 	movl   $0x44e2,0x4(%esp)
-     4ee:	00 
-     4ef:	89 04 24             	mov    %eax,(%esp)
-     4f2:	e8 e9 3a 00 00       	call   3fe0 <printf>
+     502:	a1 94 64 00 00       	mov    0x6494,%eax
+     507:	c7 44 24 04 b2 45 00 	movl   $0x45b2,0x4(%esp)
+     50e:	00 
+     50f:	89 04 24             	mov    %eax,(%esp)
+     512:	e8 99 3b 00 00       	call   40b0 <printf>
   close(fd);
-     4f7:	89 34 24             	mov    %esi,(%esp)
-     4fa:	e8 bb 39 00 00       	call   3eba <close>
+     517:	89 34 24             	mov    %esi,(%esp)
+     51a:	e8 6b 3a 00 00       	call   3f8a <close>
   fd = open("small", O_RDONLY);
-     4ff:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-     506:	00 
-     507:	c7 04 24 8f 44 00 00 	movl   $0x448f,(%esp)
-     50e:	e8 bf 39 00 00       	call   3ed2 <open>
-  if(fd >= 0){
-     513:	85 c0                	test   %eax,%eax
+     51f:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+     526:	00 
+     527:	c7 04 24 5f 45 00 00 	movl   $0x455f,(%esp)
+     52e:	e8 6f 3a 00 00       	call   3fa2 <open>
+  if (fd >= 0)
+     533:	85 c0                	test   %eax,%eax
   fd = open("small", O_RDONLY);
-     515:	89 c3                	mov    %eax,%ebx
-  if(fd >= 0){
-     517:	0f 88 b4 00 00 00    	js     5d1 <writetest+0x191>
+     535:	89 c3                	mov    %eax,%ebx
+  if (fd >= 0)
+     537:	0f 88 b4 00 00 00    	js     5f1 <writetest+0x191>
     printf(stdout, "open small succeeded ok\n");
-     51d:	a1 c4 63 00 00       	mov    0x63c4,%eax
-     522:	c7 44 24 04 ed 44 00 	movl   $0x44ed,0x4(%esp)
-     529:	00 
-     52a:	89 04 24             	mov    %eax,(%esp)
-     52d:	e8 ae 3a 00 00       	call   3fe0 <printf>
+     53d:	a1 94 64 00 00       	mov    0x6494,%eax
+     542:	c7 44 24 04 bd 45 00 	movl   $0x45bd,0x4(%esp)
+     549:	00 
+     54a:	89 04 24             	mov    %eax,(%esp)
+     54d:	e8 5e 3b 00 00       	call   40b0 <printf>
   i = read(fd, buf, 2000);
-     532:	c7 44 24 08 d0 07 00 	movl   $0x7d0,0x8(%esp)
-     539:	00 
-     53a:	c7 44 24 04 a0 8b 00 	movl   $0x8ba0,0x4(%esp)
-     541:	00 
-     542:	89 1c 24             	mov    %ebx,(%esp)
-     545:	e8 60 39 00 00       	call   3eaa <read>
-  if(i == 2000){
-     54a:	3d d0 07 00 00       	cmp    $0x7d0,%eax
-     54f:	0f 85 9d 00 00 00    	jne    5f2 <writetest+0x1b2>
-    printf(stdout, "read succeeded ok\n");
-     555:	a1 c4 63 00 00       	mov    0x63c4,%eax
-     55a:	c7 44 24 04 21 45 00 	movl   $0x4521,0x4(%esp)
+     552:	c7 44 24 08 d0 07 00 	movl   $0x7d0,0x8(%esp)
+     559:	00 
+     55a:	c7 44 24 04 80 8c 00 	movl   $0x8c80,0x4(%esp)
      561:	00 
-     562:	89 04 24             	mov    %eax,(%esp)
-     565:	e8 76 3a 00 00       	call   3fe0 <printf>
+     562:	89 1c 24             	mov    %ebx,(%esp)
+     565:	e8 10 3a 00 00       	call   3f7a <read>
+  if (i == 2000)
+     56a:	3d d0 07 00 00       	cmp    $0x7d0,%eax
+     56f:	0f 85 9d 00 00 00    	jne    612 <writetest+0x1b2>
+    printf(stdout, "read succeeded ok\n");
+     575:	a1 94 64 00 00       	mov    0x6494,%eax
+     57a:	c7 44 24 04 f1 45 00 	movl   $0x45f1,0x4(%esp)
+     581:	00 
+     582:	89 04 24             	mov    %eax,(%esp)
+     585:	e8 26 3b 00 00       	call   40b0 <printf>
   close(fd);
-     56a:	89 1c 24             	mov    %ebx,(%esp)
-     56d:	e8 48 39 00 00       	call   3eba <close>
-  if(unlink("small") < 0){
-     572:	c7 04 24 8f 44 00 00 	movl   $0x448f,(%esp)
-     579:	e8 64 39 00 00       	call   3ee2 <unlink>
-     57e:	85 c0                	test   %eax,%eax
-     580:	78 7a                	js     5fc <writetest+0x1bc>
+     58a:	89 1c 24             	mov    %ebx,(%esp)
+     58d:	e8 f8 39 00 00       	call   3f8a <close>
+  if (unlink("small") < 0)
+     592:	c7 04 24 5f 45 00 00 	movl   $0x455f,(%esp)
+     599:	e8 14 3a 00 00       	call   3fb2 <unlink>
+     59e:	85 c0                	test   %eax,%eax
+     5a0:	78 7a                	js     61c <writetest+0x1bc>
   printf(stdout, "small file test ok\n");
-     582:	a1 c4 63 00 00       	mov    0x63c4,%eax
-     587:	c7 44 24 04 49 45 00 	movl   $0x4549,0x4(%esp)
-     58e:	00 
-     58f:	89 04 24             	mov    %eax,(%esp)
-     592:	e8 49 3a 00 00       	call   3fe0 <printf>
+     5a2:	a1 94 64 00 00       	mov    0x6494,%eax
+     5a7:	c7 44 24 04 19 46 00 	movl   $0x4619,0x4(%esp)
+     5ae:	00 
+     5af:	89 04 24             	mov    %eax,(%esp)
+     5b2:	e8 f9 3a 00 00       	call   40b0 <printf>
 }
-     597:	83 c4 10             	add    $0x10,%esp
-     59a:	5b                   	pop    %ebx
-     59b:	5e                   	pop    %esi
-     59c:	5d                   	pop    %ebp
-     59d:	c3                   	ret    
+     5b7:	83 c4 10             	add    $0x10,%esp
+     5ba:	5b                   	pop    %ebx
+     5bb:	5e                   	pop    %esi
+     5bc:	5d                   	pop    %ebp
+     5bd:	c3                   	ret    
       printf(stdout, "error: write aa %d new file failed\n", i);
-     59e:	89 5c 24 08          	mov    %ebx,0x8(%esp)
-     5a2:	c7 44 24 04 90 53 00 	movl   $0x5390,0x4(%esp)
-     5a9:	00 
+     5be:	89 5c 24 08          	mov    %ebx,0x8(%esp)
+     5c2:	c7 44 24 04 60 54 00 	movl   $0x5460,0x4(%esp)
+     5c9:	00 
       printf(stdout, "error: write bb %d new file failed\n", i);
-     5aa:	a1 c4 63 00 00       	mov    0x63c4,%eax
-     5af:	89 04 24             	mov    %eax,(%esp)
-     5b2:	e8 29 3a 00 00       	call   3fe0 <printf>
+     5ca:	a1 94 64 00 00       	mov    0x6494,%eax
+     5cf:	89 04 24             	mov    %eax,(%esp)
+     5d2:	e8 d9 3a 00 00       	call   40b0 <printf>
       exit(0);
-     5b7:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-     5be:	e8 cf 38 00 00       	call   3e92 <exit>
+     5d7:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+     5de:	e8 7f 39 00 00       	call   3f62 <exit>
       printf(stdout, "error: write bb %d new file failed\n", i);
-     5c3:	89 5c 24 08          	mov    %ebx,0x8(%esp)
-     5c7:	c7 44 24 04 b4 53 00 	movl   $0x53b4,0x4(%esp)
-     5ce:	00 
-     5cf:	eb d9                	jmp    5aa <writetest+0x16a>
+     5e3:	89 5c 24 08          	mov    %ebx,0x8(%esp)
+     5e7:	c7 44 24 04 84 54 00 	movl   $0x5484,0x4(%esp)
+     5ee:	00 
+     5ef:	eb d9                	jmp    5ca <writetest+0x16a>
     printf(stdout, "error: open small failed!\n");
-     5d1:	c7 44 24 04 06 45 00 	movl   $0x4506,0x4(%esp)
-     5d8:	00 
-     5d9:	a1 c4 63 00 00       	mov    0x63c4,%eax
-     5de:	89 04 24             	mov    %eax,(%esp)
-     5e1:	e8 fa 39 00 00       	call   3fe0 <printf>
+     5f1:	c7 44 24 04 d6 45 00 	movl   $0x45d6,0x4(%esp)
+     5f8:	00 
+     5f9:	a1 94 64 00 00       	mov    0x6494,%eax
+     5fe:	89 04 24             	mov    %eax,(%esp)
+     601:	e8 aa 3a 00 00       	call   40b0 <printf>
     exit(0);
-     5e6:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-     5ed:	e8 a0 38 00 00       	call   3e92 <exit>
+     606:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+     60d:	e8 50 39 00 00       	call   3f62 <exit>
     printf(stdout, "read failed\n");
-     5f2:	c7 44 24 04 4d 48 00 	movl   $0x484d,0x4(%esp)
-     5f9:	00 
-     5fa:	eb dd                	jmp    5d9 <writetest+0x199>
+     612:	c7 44 24 04 1d 49 00 	movl   $0x491d,0x4(%esp)
+     619:	00 
+     61a:	eb dd                	jmp    5f9 <writetest+0x199>
     printf(stdout, "unlink small failed\n");
-     5fc:	c7 44 24 04 34 45 00 	movl   $0x4534,0x4(%esp)
-     603:	00 
-     604:	eb d3                	jmp    5d9 <writetest+0x199>
+     61c:	c7 44 24 04 04 46 00 	movl   $0x4604,0x4(%esp)
+     623:	00 
+     624:	eb d3                	jmp    5f9 <writetest+0x199>
     printf(stdout, "error: creat small failed!\n");
-     606:	c7 44 24 04 b0 44 00 	movl   $0x44b0,0x4(%esp)
-     60d:	00 
-     60e:	eb c9                	jmp    5d9 <writetest+0x199>
+     626:	c7 44 24 04 80 45 00 	movl   $0x4580,0x4(%esp)
+     62d:	00 
+     62e:	eb c9                	jmp    5f9 <writetest+0x199>
 
-00000610 <writetest1>:
+00000630 <writetest1>:
 {
-     610:	55                   	push   %ebp
-     611:	89 e5                	mov    %esp,%ebp
-     613:	56                   	push   %esi
-     614:	53                   	push   %ebx
-     615:	83 ec 10             	sub    $0x10,%esp
+     630:	55                   	push   %ebp
+     631:	89 e5                	mov    %esp,%ebp
+     633:	56                   	push   %esi
+     634:	53                   	push   %ebx
+     635:	83 ec 10             	sub    $0x10,%esp
   printf(stdout, "big files test\n");
-     618:	a1 c4 63 00 00       	mov    0x63c4,%eax
-     61d:	c7 44 24 04 5d 45 00 	movl   $0x455d,0x4(%esp)
-     624:	00 
-     625:	89 04 24             	mov    %eax,(%esp)
-     628:	e8 b3 39 00 00       	call   3fe0 <printf>
-  fd = open("big", O_CREATE|O_RDWR);
-     62d:	c7 44 24 04 02 02 00 	movl   $0x202,0x4(%esp)
-     634:	00 
-     635:	c7 04 24 d7 45 00 00 	movl   $0x45d7,(%esp)
-     63c:	e8 91 38 00 00       	call   3ed2 <open>
-  if(fd < 0){
-     641:	85 c0                	test   %eax,%eax
-  fd = open("big", O_CREATE|O_RDWR);
-     643:	89 c6                	mov    %eax,%esi
-  if(fd < 0){
-     645:	0f 88 6f 01 00 00    	js     7ba <writetest1+0x1aa>
-     64b:	31 db                	xor    %ebx,%ebx
-     64d:	8d 76 00             	lea    0x0(%esi),%esi
-    if(write(fd, buf, 512) != 512){
-     650:	c7 44 24 08 00 02 00 	movl   $0x200,0x8(%esp)
-     657:	00 
-     658:	c7 44 24 04 a0 8b 00 	movl   $0x8ba0,0x4(%esp)
-     65f:	00 
-     660:	89 34 24             	mov    %esi,(%esp)
-    ((int*)buf)[0] = i;
-     663:	89 1d a0 8b 00 00    	mov    %ebx,0x8ba0
-    if(write(fd, buf, 512) != 512){
-     669:	e8 44 38 00 00       	call   3eb2 <write>
-     66e:	3d 00 02 00 00       	cmp    $0x200,%eax
-     673:	0f 85 b2 00 00 00    	jne    72b <writetest1+0x11b>
-  for(i = 0; i < MAXFILE; i++){
-     679:	83 c3 01             	add    $0x1,%ebx
-     67c:	81 fb 8c 00 00 00    	cmp    $0x8c,%ebx
-     682:	75 cc                	jne    650 <writetest1+0x40>
+     638:	a1 94 64 00 00       	mov    0x6494,%eax
+     63d:	c7 44 24 04 2d 46 00 	movl   $0x462d,0x4(%esp)
+     644:	00 
+     645:	89 04 24             	mov    %eax,(%esp)
+     648:	e8 63 3a 00 00       	call   40b0 <printf>
+  fd = open("big", O_CREATE | O_RDWR);
+     64d:	c7 44 24 04 02 02 00 	movl   $0x202,0x4(%esp)
+     654:	00 
+     655:	c7 04 24 a7 46 00 00 	movl   $0x46a7,(%esp)
+     65c:	e8 41 39 00 00       	call   3fa2 <open>
+  if (fd < 0)
+     661:	85 c0                	test   %eax,%eax
+  fd = open("big", O_CREATE | O_RDWR);
+     663:	89 c6                	mov    %eax,%esi
+  if (fd < 0)
+     665:	0f 88 6f 01 00 00    	js     7da <writetest1+0x1aa>
+     66b:	31 db                	xor    %ebx,%ebx
+     66d:	8d 76 00             	lea    0x0(%esi),%esi
+    if (write(fd, buf, 512) != 512)
+     670:	c7 44 24 08 00 02 00 	movl   $0x200,0x8(%esp)
+     677:	00 
+     678:	c7 44 24 04 80 8c 00 	movl   $0x8c80,0x4(%esp)
+     67f:	00 
+     680:	89 34 24             	mov    %esi,(%esp)
+    ((int *)buf)[0] = i;
+     683:	89 1d 80 8c 00 00    	mov    %ebx,0x8c80
+    if (write(fd, buf, 512) != 512)
+     689:	e8 f4 38 00 00       	call   3f82 <write>
+     68e:	3d 00 02 00 00       	cmp    $0x200,%eax
+     693:	0f 85 b2 00 00 00    	jne    74b <writetest1+0x11b>
+  for (i = 0; i < MAXFILE; i++)
+     699:	83 c3 01             	add    $0x1,%ebx
+     69c:	81 fb 8c 00 00 00    	cmp    $0x8c,%ebx
+     6a2:	75 cc                	jne    670 <writetest1+0x40>
   close(fd);
-     684:	89 34 24             	mov    %esi,(%esp)
-     687:	e8 2e 38 00 00       	call   3eba <close>
+     6a4:	89 34 24             	mov    %esi,(%esp)
+     6a7:	e8 de 38 00 00       	call   3f8a <close>
   fd = open("big", O_RDONLY);
-     68c:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-     693:	00 
-     694:	c7 04 24 d7 45 00 00 	movl   $0x45d7,(%esp)
-     69b:	e8 32 38 00 00       	call   3ed2 <open>
-  if(fd < 0){
-     6a0:	85 c0                	test   %eax,%eax
+     6ac:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+     6b3:	00 
+     6b4:	c7 04 24 a7 46 00 00 	movl   $0x46a7,(%esp)
+     6bb:	e8 e2 38 00 00       	call   3fa2 <open>
+  if (fd < 0)
+     6c0:	85 c0                	test   %eax,%eax
   fd = open("big", O_RDONLY);
-     6a2:	89 c6                	mov    %eax,%esi
-  if(fd < 0){
-     6a4:	0f 88 ef 00 00 00    	js     799 <writetest1+0x189>
-     6aa:	31 db                	xor    %ebx,%ebx
-     6ac:	eb 1d                	jmp    6cb <writetest1+0xbb>
-     6ae:	66 90                	xchg   %ax,%ax
-    } else if(i != 512){
-     6b0:	3d 00 02 00 00       	cmp    $0x200,%eax
-     6b5:	0f 85 be 00 00 00    	jne    779 <writetest1+0x169>
-    if(((int*)buf)[0] != n){
-     6bb:	a1 a0 8b 00 00       	mov    0x8ba0,%eax
-     6c0:	39 d8                	cmp    %ebx,%eax
-     6c2:	0f 85 88 00 00 00    	jne    750 <writetest1+0x140>
+     6c2:	89 c6                	mov    %eax,%esi
+  if (fd < 0)
+     6c4:	0f 88 ef 00 00 00    	js     7b9 <writetest1+0x189>
+     6ca:	31 db                	xor    %ebx,%ebx
+     6cc:	eb 1d                	jmp    6eb <writetest1+0xbb>
+     6ce:	66 90                	xchg   %ax,%ax
+    else if (i != 512)
+     6d0:	3d 00 02 00 00       	cmp    $0x200,%eax
+     6d5:	0f 85 be 00 00 00    	jne    799 <writetest1+0x169>
+    if (((int *)buf)[0] != n)
+     6db:	a1 80 8c 00 00       	mov    0x8c80,%eax
+     6e0:	39 d8                	cmp    %ebx,%eax
+     6e2:	0f 85 88 00 00 00    	jne    770 <writetest1+0x140>
     n++;
-     6c8:	83 c3 01             	add    $0x1,%ebx
+     6e8:	83 c3 01             	add    $0x1,%ebx
     i = read(fd, buf, 512);
-     6cb:	c7 44 24 08 00 02 00 	movl   $0x200,0x8(%esp)
-     6d2:	00 
-     6d3:	c7 44 24 04 a0 8b 00 	movl   $0x8ba0,0x4(%esp)
-     6da:	00 
-     6db:	89 34 24             	mov    %esi,(%esp)
-     6de:	e8 c7 37 00 00       	call   3eaa <read>
-    if(i == 0){
-     6e3:	85 c0                	test   %eax,%eax
-     6e5:	75 c9                	jne    6b0 <writetest1+0xa0>
-      if(n == MAXFILE - 1){
-     6e7:	81 fb 8b 00 00 00    	cmp    $0x8b,%ebx
-     6ed:	0f 84 94 00 00 00    	je     787 <writetest1+0x177>
+     6eb:	c7 44 24 08 00 02 00 	movl   $0x200,0x8(%esp)
+     6f2:	00 
+     6f3:	c7 44 24 04 80 8c 00 	movl   $0x8c80,0x4(%esp)
+     6fa:	00 
+     6fb:	89 34 24             	mov    %esi,(%esp)
+     6fe:	e8 77 38 00 00       	call   3f7a <read>
+    if (i == 0)
+     703:	85 c0                	test   %eax,%eax
+     705:	75 c9                	jne    6d0 <writetest1+0xa0>
+      if (n == MAXFILE - 1)
+     707:	81 fb 8b 00 00 00    	cmp    $0x8b,%ebx
+     70d:	0f 84 94 00 00 00    	je     7a7 <writetest1+0x177>
   close(fd);
-     6f3:	89 34 24             	mov    %esi,(%esp)
-     6f6:	e8 bf 37 00 00       	call   3eba <close>
-  if(unlink("big") < 0){
-     6fb:	c7 04 24 d7 45 00 00 	movl   $0x45d7,(%esp)
-     702:	e8 db 37 00 00       	call   3ee2 <unlink>
-     707:	85 c0                	test   %eax,%eax
-     709:	0f 88 b5 00 00 00    	js     7c4 <writetest1+0x1b4>
+     713:	89 34 24             	mov    %esi,(%esp)
+     716:	e8 6f 38 00 00       	call   3f8a <close>
+  if (unlink("big") < 0)
+     71b:	c7 04 24 a7 46 00 00 	movl   $0x46a7,(%esp)
+     722:	e8 8b 38 00 00       	call   3fb2 <unlink>
+     727:	85 c0                	test   %eax,%eax
+     729:	0f 88 b5 00 00 00    	js     7e4 <writetest1+0x1b4>
   printf(stdout, "big files ok\n");
-     70f:	a1 c4 63 00 00       	mov    0x63c4,%eax
-     714:	c7 44 24 04 fe 45 00 	movl   $0x45fe,0x4(%esp)
-     71b:	00 
-     71c:	89 04 24             	mov    %eax,(%esp)
-     71f:	e8 bc 38 00 00       	call   3fe0 <printf>
+     72f:	a1 94 64 00 00       	mov    0x6494,%eax
+     734:	c7 44 24 04 ce 46 00 	movl   $0x46ce,0x4(%esp)
+     73b:	00 
+     73c:	89 04 24             	mov    %eax,(%esp)
+     73f:	e8 6c 39 00 00       	call   40b0 <printf>
 }
-     724:	83 c4 10             	add    $0x10,%esp
-     727:	5b                   	pop    %ebx
-     728:	5e                   	pop    %esi
-     729:	5d                   	pop    %ebp
-     72a:	c3                   	ret    
+     744:	83 c4 10             	add    $0x10,%esp
+     747:	5b                   	pop    %ebx
+     748:	5e                   	pop    %esi
+     749:	5d                   	pop    %ebp
+     74a:	c3                   	ret    
       printf(stdout, "error: write big file failed\n", i);
-     72b:	89 5c 24 08          	mov    %ebx,0x8(%esp)
-     72f:	c7 44 24 04 87 45 00 	movl   $0x4587,0x4(%esp)
-     736:	00 
+     74b:	89 5c 24 08          	mov    %ebx,0x8(%esp)
+     74f:	c7 44 24 04 57 46 00 	movl   $0x4657,0x4(%esp)
+     756:	00 
         printf(stdout, "read only %d blocks from big", n);
-     737:	a1 c4 63 00 00       	mov    0x63c4,%eax
-     73c:	89 04 24             	mov    %eax,(%esp)
-     73f:	e8 9c 38 00 00       	call   3fe0 <printf>
+     757:	a1 94 64 00 00       	mov    0x6494,%eax
+     75c:	89 04 24             	mov    %eax,(%esp)
+     75f:	e8 4c 39 00 00       	call   40b0 <printf>
         exit(0);
-     744:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-     74b:	e8 42 37 00 00       	call   3e92 <exit>
+     764:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+     76b:	e8 f2 37 00 00       	call   3f62 <exit>
       printf(stdout, "read content of block %d is %d\n",
-     750:	89 44 24 0c          	mov    %eax,0xc(%esp)
-     754:	a1 c4 63 00 00       	mov    0x63c4,%eax
-     759:	89 5c 24 08          	mov    %ebx,0x8(%esp)
-     75d:	c7 44 24 04 d8 53 00 	movl   $0x53d8,0x4(%esp)
-     764:	00 
-     765:	89 04 24             	mov    %eax,(%esp)
-     768:	e8 73 38 00 00       	call   3fe0 <printf>
+     770:	89 44 24 0c          	mov    %eax,0xc(%esp)
+     774:	a1 94 64 00 00       	mov    0x6494,%eax
+     779:	89 5c 24 08          	mov    %ebx,0x8(%esp)
+     77d:	c7 44 24 04 a8 54 00 	movl   $0x54a8,0x4(%esp)
+     784:	00 
+     785:	89 04 24             	mov    %eax,(%esp)
+     788:	e8 23 39 00 00       	call   40b0 <printf>
       exit(0);
-     76d:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-     774:	e8 19 37 00 00       	call   3e92 <exit>
+     78d:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+     794:	e8 c9 37 00 00       	call   3f62 <exit>
       printf(stdout, "read failed %d\n", i);
-     779:	89 44 24 08          	mov    %eax,0x8(%esp)
-     77d:	c7 44 24 04 db 45 00 	movl   $0x45db,0x4(%esp)
-     784:	00 
-     785:	eb b0                	jmp    737 <writetest1+0x127>
+     799:	89 44 24 08          	mov    %eax,0x8(%esp)
+     79d:	c7 44 24 04 ab 46 00 	movl   $0x46ab,0x4(%esp)
+     7a4:	00 
+     7a5:	eb b0                	jmp    757 <writetest1+0x127>
         printf(stdout, "read only %d blocks from big", n);
-     787:	c7 44 24 08 8b 00 00 	movl   $0x8b,0x8(%esp)
-     78e:	00 
-     78f:	c7 44 24 04 be 45 00 	movl   $0x45be,0x4(%esp)
-     796:	00 
-     797:	eb 9e                	jmp    737 <writetest1+0x127>
+     7a7:	c7 44 24 08 8b 00 00 	movl   $0x8b,0x8(%esp)
+     7ae:	00 
+     7af:	c7 44 24 04 8e 46 00 	movl   $0x468e,0x4(%esp)
+     7b6:	00 
+     7b7:	eb 9e                	jmp    757 <writetest1+0x127>
     printf(stdout, "error: open big failed!\n");
-     799:	c7 44 24 04 a5 45 00 	movl   $0x45a5,0x4(%esp)
-     7a0:	00 
-     7a1:	a1 c4 63 00 00       	mov    0x63c4,%eax
-     7a6:	89 04 24             	mov    %eax,(%esp)
-     7a9:	e8 32 38 00 00       	call   3fe0 <printf>
+     7b9:	c7 44 24 04 75 46 00 	movl   $0x4675,0x4(%esp)
+     7c0:	00 
+     7c1:	a1 94 64 00 00       	mov    0x6494,%eax
+     7c6:	89 04 24             	mov    %eax,(%esp)
+     7c9:	e8 e2 38 00 00       	call   40b0 <printf>
     exit(0);
-     7ae:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-     7b5:	e8 d8 36 00 00       	call   3e92 <exit>
+     7ce:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+     7d5:	e8 88 37 00 00       	call   3f62 <exit>
     printf(stdout, "error: creat big failed!\n");
-     7ba:	c7 44 24 04 6d 45 00 	movl   $0x456d,0x4(%esp)
-     7c1:	00 
-     7c2:	eb dd                	jmp    7a1 <writetest1+0x191>
+     7da:	c7 44 24 04 3d 46 00 	movl   $0x463d,0x4(%esp)
+     7e1:	00 
+     7e2:	eb dd                	jmp    7c1 <writetest1+0x191>
     printf(stdout, "unlink big failed\n");
-     7c4:	c7 44 24 04 eb 45 00 	movl   $0x45eb,0x4(%esp)
-     7cb:	00 
-     7cc:	eb d3                	jmp    7a1 <writetest1+0x191>
-     7ce:	66 90                	xchg   %ax,%ax
+     7e4:	c7 44 24 04 bb 46 00 	movl   $0x46bb,0x4(%esp)
+     7eb:	00 
+     7ec:	eb d3                	jmp    7c1 <writetest1+0x191>
+     7ee:	66 90                	xchg   %ax,%ax
 
-000007d0 <createtest>:
+000007f0 <createtest>:
 {
-     7d0:	55                   	push   %ebp
-     7d1:	89 e5                	mov    %esp,%ebp
-     7d3:	53                   	push   %ebx
+     7f0:	55                   	push   %ebp
+     7f1:	89 e5                	mov    %esp,%ebp
+     7f3:	53                   	push   %ebx
   name[2] = '\0';
-     7d4:	bb 30 00 00 00       	mov    $0x30,%ebx
+     7f4:	bb 30 00 00 00       	mov    $0x30,%ebx
 {
-     7d9:	83 ec 14             	sub    $0x14,%esp
+     7f9:	83 ec 14             	sub    $0x14,%esp
   printf(stdout, "many creates, followed by unlink test\n");
-     7dc:	a1 c4 63 00 00       	mov    0x63c4,%eax
-     7e1:	c7 44 24 04 f8 53 00 	movl   $0x53f8,0x4(%esp)
-     7e8:	00 
-     7e9:	89 04 24             	mov    %eax,(%esp)
-     7ec:	e8 ef 37 00 00       	call   3fe0 <printf>
+     7fc:	a1 94 64 00 00       	mov    0x6494,%eax
+     801:	c7 44 24 04 c8 54 00 	movl   $0x54c8,0x4(%esp)
+     808:	00 
+     809:	89 04 24             	mov    %eax,(%esp)
+     80c:	e8 9f 38 00 00       	call   40b0 <printf>
   name[0] = 'a';
-     7f1:	c6 05 a0 ab 00 00 61 	movb   $0x61,0xaba0
+     811:	c6 05 80 ac 00 00 61 	movb   $0x61,0xac80
   name[2] = '\0';
-     7f8:	c6 05 a2 ab 00 00 00 	movb   $0x0,0xaba2
-     7ff:	90                   	nop
-    fd = open(name, O_CREATE|O_RDWR);
-     800:	c7 44 24 04 02 02 00 	movl   $0x202,0x4(%esp)
-     807:	00 
-     808:	c7 04 24 a0 ab 00 00 	movl   $0xaba0,(%esp)
+     818:	c6 05 82 ac 00 00 00 	movb   $0x0,0xac82
+     81f:	90                   	nop
+    fd = open(name, O_CREATE | O_RDWR);
+     820:	c7 44 24 04 02 02 00 	movl   $0x202,0x4(%esp)
+     827:	00 
+     828:	c7 04 24 80 ac 00 00 	movl   $0xac80,(%esp)
     name[1] = '0' + i;
-     80f:	88 1d a1 ab 00 00    	mov    %bl,0xaba1
-     815:	83 c3 01             	add    $0x1,%ebx
-    fd = open(name, O_CREATE|O_RDWR);
-     818:	e8 b5 36 00 00       	call   3ed2 <open>
+     82f:	88 1d 81 ac 00 00    	mov    %bl,0xac81
+     835:	83 c3 01             	add    $0x1,%ebx
+    fd = open(name, O_CREATE | O_RDWR);
+     838:	e8 65 37 00 00       	call   3fa2 <open>
     close(fd);
-     81d:	89 04 24             	mov    %eax,(%esp)
-     820:	e8 95 36 00 00       	call   3eba <close>
-  for(i = 0; i < 52; i++){
-     825:	80 fb 64             	cmp    $0x64,%bl
-     828:	75 d6                	jne    800 <createtest+0x30>
+     83d:	89 04 24             	mov    %eax,(%esp)
+     840:	e8 45 37 00 00       	call   3f8a <close>
+  for (i = 0; i < 52; i++)
+     845:	80 fb 64             	cmp    $0x64,%bl
+     848:	75 d6                	jne    820 <createtest+0x30>
   name[0] = 'a';
-     82a:	c6 05 a0 ab 00 00 61 	movb   $0x61,0xaba0
+     84a:	c6 05 80 ac 00 00 61 	movb   $0x61,0xac80
   name[2] = '\0';
-     831:	bb 30 00 00 00       	mov    $0x30,%ebx
-     836:	c6 05 a2 ab 00 00 00 	movb   $0x0,0xaba2
-     83d:	8d 76 00             	lea    0x0(%esi),%esi
+     851:	bb 30 00 00 00       	mov    $0x30,%ebx
+     856:	c6 05 82 ac 00 00 00 	movb   $0x0,0xac82
+     85d:	8d 76 00             	lea    0x0(%esi),%esi
     name[1] = '0' + i;
-     840:	88 1d a1 ab 00 00    	mov    %bl,0xaba1
-     846:	83 c3 01             	add    $0x1,%ebx
+     860:	88 1d 81 ac 00 00    	mov    %bl,0xac81
+     866:	83 c3 01             	add    $0x1,%ebx
     unlink(name);
-     849:	c7 04 24 a0 ab 00 00 	movl   $0xaba0,(%esp)
-     850:	e8 8d 36 00 00       	call   3ee2 <unlink>
-  for(i = 0; i < 52; i++){
-     855:	80 fb 64             	cmp    $0x64,%bl
-     858:	75 e6                	jne    840 <createtest+0x70>
+     869:	c7 04 24 80 ac 00 00 	movl   $0xac80,(%esp)
+     870:	e8 3d 37 00 00       	call   3fb2 <unlink>
+  for (i = 0; i < 52; i++)
+     875:	80 fb 64             	cmp    $0x64,%bl
+     878:	75 e6                	jne    860 <createtest+0x70>
   printf(stdout, "many creates, followed by unlink; ok\n");
-     85a:	a1 c4 63 00 00       	mov    0x63c4,%eax
-     85f:	c7 44 24 04 20 54 00 	movl   $0x5420,0x4(%esp)
-     866:	00 
-     867:	89 04 24             	mov    %eax,(%esp)
-     86a:	e8 71 37 00 00       	call   3fe0 <printf>
+     87a:	a1 94 64 00 00       	mov    0x6494,%eax
+     87f:	c7 44 24 04 f0 54 00 	movl   $0x54f0,0x4(%esp)
+     886:	00 
+     887:	89 04 24             	mov    %eax,(%esp)
+     88a:	e8 21 38 00 00       	call   40b0 <printf>
 }
-     86f:	83 c4 14             	add    $0x14,%esp
-     872:	5b                   	pop    %ebx
-     873:	5d                   	pop    %ebp
-     874:	c3                   	ret    
-     875:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-     879:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+     88f:	83 c4 14             	add    $0x14,%esp
+     892:	5b                   	pop    %ebx
+     893:	5d                   	pop    %ebp
+     894:	c3                   	ret    
+     895:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     899:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-00000880 <dirtest>:
+000008a0 <dirtest>:
 {
-     880:	55                   	push   %ebp
-     881:	89 e5                	mov    %esp,%ebp
-     883:	83 ec 18             	sub    $0x18,%esp
+     8a0:	55                   	push   %ebp
+     8a1:	89 e5                	mov    %esp,%ebp
+     8a3:	83 ec 18             	sub    $0x18,%esp
   printf(stdout, "mkdir test\n");
-     886:	a1 c4 63 00 00       	mov    0x63c4,%eax
-     88b:	c7 44 24 04 0c 46 00 	movl   $0x460c,0x4(%esp)
-     892:	00 
-     893:	89 04 24             	mov    %eax,(%esp)
-     896:	e8 45 37 00 00       	call   3fe0 <printf>
-  if(mkdir("dir0") < 0){
-     89b:	c7 04 24 18 46 00 00 	movl   $0x4618,(%esp)
-     8a2:	e8 53 36 00 00       	call   3efa <mkdir>
-     8a7:	85 c0                	test   %eax,%eax
-     8a9:	78 47                	js     8f2 <dirtest+0x72>
-  if(chdir("dir0") < 0){
-     8ab:	c7 04 24 18 46 00 00 	movl   $0x4618,(%esp)
-     8b2:	e8 4b 36 00 00       	call   3f02 <chdir>
-     8b7:	85 c0                	test   %eax,%eax
-     8b9:	78 6c                	js     927 <dirtest+0xa7>
-  if(chdir("..") < 0){
-     8bb:	c7 04 24 bd 4b 00 00 	movl   $0x4bbd,(%esp)
-     8c2:	e8 3b 36 00 00       	call   3f02 <chdir>
+     8a6:	a1 94 64 00 00       	mov    0x6494,%eax
+     8ab:	c7 44 24 04 dc 46 00 	movl   $0x46dc,0x4(%esp)
+     8b2:	00 
+     8b3:	89 04 24             	mov    %eax,(%esp)
+     8b6:	e8 f5 37 00 00       	call   40b0 <printf>
+  if (mkdir("dir0") < 0)
+     8bb:	c7 04 24 e8 46 00 00 	movl   $0x46e8,(%esp)
+     8c2:	e8 03 37 00 00       	call   3fca <mkdir>
      8c7:	85 c0                	test   %eax,%eax
-     8c9:	78 52                	js     91d <dirtest+0x9d>
-  if(unlink("dir0") < 0){
-     8cb:	c7 04 24 18 46 00 00 	movl   $0x4618,(%esp)
-     8d2:	e8 0b 36 00 00       	call   3ee2 <unlink>
+     8c9:	78 47                	js     912 <dirtest+0x72>
+  if (chdir("dir0") < 0)
+     8cb:	c7 04 24 e8 46 00 00 	movl   $0x46e8,(%esp)
+     8d2:	e8 fb 36 00 00       	call   3fd2 <chdir>
      8d7:	85 c0                	test   %eax,%eax
-     8d9:	78 38                	js     913 <dirtest+0x93>
+     8d9:	78 6c                	js     947 <dirtest+0xa7>
+  if (chdir("..") < 0)
+     8db:	c7 04 24 8d 4c 00 00 	movl   $0x4c8d,(%esp)
+     8e2:	e8 eb 36 00 00       	call   3fd2 <chdir>
+     8e7:	85 c0                	test   %eax,%eax
+     8e9:	78 52                	js     93d <dirtest+0x9d>
+  if (unlink("dir0") < 0)
+     8eb:	c7 04 24 e8 46 00 00 	movl   $0x46e8,(%esp)
+     8f2:	e8 bb 36 00 00       	call   3fb2 <unlink>
+     8f7:	85 c0                	test   %eax,%eax
+     8f9:	78 38                	js     933 <dirtest+0x93>
   printf(stdout, "mkdir test ok\n");
-     8db:	a1 c4 63 00 00       	mov    0x63c4,%eax
-     8e0:	c7 44 24 04 55 46 00 	movl   $0x4655,0x4(%esp)
-     8e7:	00 
-     8e8:	89 04 24             	mov    %eax,(%esp)
-     8eb:	e8 f0 36 00 00       	call   3fe0 <printf>
+     8fb:	a1 94 64 00 00       	mov    0x6494,%eax
+     900:	c7 44 24 04 25 47 00 	movl   $0x4725,0x4(%esp)
+     907:	00 
+     908:	89 04 24             	mov    %eax,(%esp)
+     90b:	e8 a0 37 00 00       	call   40b0 <printf>
 }
-     8f0:	c9                   	leave  
-     8f1:	c3                   	ret    
+     910:	c9                   	leave  
+     911:	c3                   	ret    
     printf(stdout, "mkdir failed\n");
-     8f2:	c7 44 24 04 48 43 00 	movl   $0x4348,0x4(%esp)
-     8f9:	00 
+     912:	c7 44 24 04 18 44 00 	movl   $0x4418,0x4(%esp)
+     919:	00 
     printf(stdout, "chdir dir0 failed\n");
-     8fa:	a1 c4 63 00 00       	mov    0x63c4,%eax
-     8ff:	89 04 24             	mov    %eax,(%esp)
-     902:	e8 d9 36 00 00       	call   3fe0 <printf>
+     91a:	a1 94 64 00 00       	mov    0x6494,%eax
+     91f:	89 04 24             	mov    %eax,(%esp)
+     922:	e8 89 37 00 00       	call   40b0 <printf>
     exit(0);
-     907:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-     90e:	e8 7f 35 00 00       	call   3e92 <exit>
+     927:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+     92e:	e8 2f 36 00 00       	call   3f62 <exit>
     printf(stdout, "unlink dir0 failed\n");
-     913:	c7 44 24 04 41 46 00 	movl   $0x4641,0x4(%esp)
-     91a:	00 
-     91b:	eb dd                	jmp    8fa <dirtest+0x7a>
+     933:	c7 44 24 04 11 47 00 	movl   $0x4711,0x4(%esp)
+     93a:	00 
+     93b:	eb dd                	jmp    91a <dirtest+0x7a>
     printf(stdout, "chdir .. failed\n");
-     91d:	c7 44 24 04 30 46 00 	movl   $0x4630,0x4(%esp)
-     924:	00 
-     925:	eb d3                	jmp    8fa <dirtest+0x7a>
+     93d:	c7 44 24 04 00 47 00 	movl   $0x4700,0x4(%esp)
+     944:	00 
+     945:	eb d3                	jmp    91a <dirtest+0x7a>
     printf(stdout, "chdir dir0 failed\n");
-     927:	c7 44 24 04 1d 46 00 	movl   $0x461d,0x4(%esp)
-     92e:	00 
-     92f:	eb c9                	jmp    8fa <dirtest+0x7a>
-     931:	eb 0d                	jmp    940 <exectest>
-     933:	90                   	nop
-     934:	90                   	nop
-     935:	90                   	nop
-     936:	90                   	nop
-     937:	90                   	nop
-     938:	90                   	nop
-     939:	90                   	nop
-     93a:	90                   	nop
-     93b:	90                   	nop
-     93c:	90                   	nop
-     93d:	90                   	nop
-     93e:	90                   	nop
-     93f:	90                   	nop
+     947:	c7 44 24 04 ed 46 00 	movl   $0x46ed,0x4(%esp)
+     94e:	00 
+     94f:	eb c9                	jmp    91a <dirtest+0x7a>
+     951:	eb 0d                	jmp    960 <exectest>
+     953:	90                   	nop
+     954:	90                   	nop
+     955:	90                   	nop
+     956:	90                   	nop
+     957:	90                   	nop
+     958:	90                   	nop
+     959:	90                   	nop
+     95a:	90                   	nop
+     95b:	90                   	nop
+     95c:	90                   	nop
+     95d:	90                   	nop
+     95e:	90                   	nop
+     95f:	90                   	nop
 
-00000940 <exectest>:
+00000960 <exectest>:
 {
-     940:	55                   	push   %ebp
-     941:	89 e5                	mov    %esp,%ebp
-     943:	83 ec 18             	sub    $0x18,%esp
+     960:	55                   	push   %ebp
+     961:	89 e5                	mov    %esp,%ebp
+     963:	83 ec 18             	sub    $0x18,%esp
   printf(stdout, "exec test\n");
-     946:	a1 c4 63 00 00       	mov    0x63c4,%eax
-     94b:	c7 44 24 04 64 46 00 	movl   $0x4664,0x4(%esp)
-     952:	00 
-     953:	89 04 24             	mov    %eax,(%esp)
-     956:	e8 85 36 00 00       	call   3fe0 <printf>
-  if(exec("echo", echoargv) < 0){
-     95b:	c7 44 24 04 c8 63 00 	movl   $0x63c8,0x4(%esp)
-     962:	00 
-     963:	c7 04 24 2d 44 00 00 	movl   $0x442d,(%esp)
-     96a:	e8 5b 35 00 00       	call   3eca <exec>
-     96f:	85 c0                	test   %eax,%eax
-     971:	78 02                	js     975 <exectest+0x35>
+     966:	a1 94 64 00 00       	mov    0x6494,%eax
+     96b:	c7 44 24 04 34 47 00 	movl   $0x4734,0x4(%esp)
+     972:	00 
+     973:	89 04 24             	mov    %eax,(%esp)
+     976:	e8 35 37 00 00       	call   40b0 <printf>
+  if (exec("echo", echoargv) < 0)
+     97b:	c7 44 24 04 98 64 00 	movl   $0x6498,0x4(%esp)
+     982:	00 
+     983:	c7 04 24 fd 44 00 00 	movl   $0x44fd,(%esp)
+     98a:	e8 0b 36 00 00       	call   3f9a <exec>
+     98f:	85 c0                	test   %eax,%eax
+     991:	78 02                	js     995 <exectest+0x35>
 }
-     973:	c9                   	leave  
-     974:	c3                   	ret    
+     993:	c9                   	leave  
+     994:	c3                   	ret    
     printf(stdout, "exec echo failed\n");
-     975:	a1 c4 63 00 00       	mov    0x63c4,%eax
-     97a:	c7 44 24 04 6f 46 00 	movl   $0x466f,0x4(%esp)
-     981:	00 
-     982:	89 04 24             	mov    %eax,(%esp)
-     985:	e8 56 36 00 00       	call   3fe0 <printf>
+     995:	a1 94 64 00 00       	mov    0x6494,%eax
+     99a:	c7 44 24 04 3f 47 00 	movl   $0x473f,0x4(%esp)
+     9a1:	00 
+     9a2:	89 04 24             	mov    %eax,(%esp)
+     9a5:	e8 06 37 00 00       	call   40b0 <printf>
     exit(0);
-     98a:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-     991:	e8 fc 34 00 00       	call   3e92 <exit>
-     996:	8d 76 00             	lea    0x0(%esi),%esi
-     999:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+     9aa:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+     9b1:	e8 ac 35 00 00       	call   3f62 <exit>
+     9b6:	8d 76 00             	lea    0x0(%esi),%esi
+     9b9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-000009a0 <pipe1>:
+000009c0 <pipe1>:
 {
-     9a0:	55                   	push   %ebp
-     9a1:	89 e5                	mov    %esp,%ebp
-     9a3:	57                   	push   %edi
-     9a4:	56                   	push   %esi
-     9a5:	53                   	push   %ebx
-     9a6:	83 ec 2c             	sub    $0x2c,%esp
-  if(pipe(fds) != 0){
-     9a9:	8d 45 e0             	lea    -0x20(%ebp),%eax
-     9ac:	89 04 24             	mov    %eax,(%esp)
-     9af:	e8 ee 34 00 00       	call   3ea2 <pipe>
-     9b4:	85 c0                	test   %eax,%eax
-     9b6:	0f 85 55 01 00 00    	jne    b11 <pipe1+0x171>
+     9c0:	55                   	push   %ebp
+     9c1:	89 e5                	mov    %esp,%ebp
+     9c3:	57                   	push   %edi
+     9c4:	56                   	push   %esi
+     9c5:	53                   	push   %ebx
+     9c6:	83 ec 2c             	sub    $0x2c,%esp
+  if (pipe(fds) != 0)
+     9c9:	8d 45 e0             	lea    -0x20(%ebp),%eax
+     9cc:	89 04 24             	mov    %eax,(%esp)
+     9cf:	e8 9e 35 00 00       	call   3f72 <pipe>
+     9d4:	85 c0                	test   %eax,%eax
+     9d6:	0f 85 5c 01 00 00    	jne    b38 <pipe1+0x178>
   pid = fork();
-     9bc:	e8 c9 34 00 00       	call   3e8a <fork>
-  if(pid == 0){
-     9c1:	83 f8 00             	cmp    $0x0,%eax
-     9c4:	0f 84 93 00 00 00    	je     a5d <pipe1+0xbd>
-  } else if(pid > 0){
-     9ca:	0f 8e 61 01 00 00    	jle    b31 <pipe1+0x191>
+     9dc:	e8 79 35 00 00       	call   3f5a <fork>
+  if (pid == 0)
+     9e1:	83 f8 00             	cmp    $0x0,%eax
+     9e4:	0f 84 93 00 00 00    	je     a7d <pipe1+0xbd>
+  else if (pid > 0)
+     9ea:	0f 8e 68 01 00 00    	jle    b58 <pipe1+0x198>
     close(fds[1]);
-     9d0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+     9f0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
     cc = 1;
-     9d3:	bf 01 00 00 00       	mov    $0x1,%edi
+     9f3:	bf 01 00 00 00       	mov    $0x1,%edi
   seq = 0;
-     9d8:	31 db                	xor    %ebx,%ebx
+     9f8:	31 db                	xor    %ebx,%ebx
     close(fds[1]);
-     9da:	89 04 24             	mov    %eax,(%esp)
-     9dd:	e8 d8 34 00 00       	call   3eba <close>
+     9fa:	89 04 24             	mov    %eax,(%esp)
+     9fd:	e8 88 35 00 00       	call   3f8a <close>
     total = 0;
-     9e2:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
-    while((n = read(fds[0], buf, cc)) > 0){
-     9e9:	8b 45 e0             	mov    -0x20(%ebp),%eax
-     9ec:	89 7c 24 08          	mov    %edi,0x8(%esp)
-     9f0:	c7 44 24 04 a0 8b 00 	movl   $0x8ba0,0x4(%esp)
-     9f7:	00 
-     9f8:	89 04 24             	mov    %eax,(%esp)
-     9fb:	e8 aa 34 00 00       	call   3eaa <read>
-     a00:	85 c0                	test   %eax,%eax
-     a02:	0f 8e ba 00 00 00    	jle    ac2 <pipe1+0x122>
-     a08:	89 d9                	mov    %ebx,%ecx
-     a0a:	8d 34 03             	lea    (%ebx,%eax,1),%esi
-     a0d:	f7 d9                	neg    %ecx
-     a0f:	eb 09                	jmp    a1a <pipe1+0x7a>
-     a11:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-        if((buf[i] & 0xff) != (seq++ & 0xff)){
-     a18:	89 d3                	mov    %edx,%ebx
-     a1a:	38 9c 0b a0 8b 00 00 	cmp    %bl,0x8ba0(%ebx,%ecx,1)
-     a21:	8d 53 01             	lea    0x1(%ebx),%edx
-     a24:	75 1b                	jne    a41 <pipe1+0xa1>
-      for(i = 0; i < n; i++){
-     a26:	39 f2                	cmp    %esi,%edx
-     a28:	75 ee                	jne    a18 <pipe1+0x78>
+     a02:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
+    while ((n = read(fds[0], buf, cc)) > 0)
+     a09:	8b 45 e0             	mov    -0x20(%ebp),%eax
+     a0c:	89 7c 24 08          	mov    %edi,0x8(%esp)
+     a10:	c7 44 24 04 80 8c 00 	movl   $0x8c80,0x4(%esp)
+     a17:	00 
+     a18:	89 04 24             	mov    %eax,(%esp)
+     a1b:	e8 5a 35 00 00       	call   3f7a <read>
+     a20:	85 c0                	test   %eax,%eax
+     a22:	0f 8e ba 00 00 00    	jle    ae2 <pipe1+0x122>
+     a28:	89 d9                	mov    %ebx,%ecx
+     a2a:	8d 34 03             	lea    (%ebx,%eax,1),%esi
+     a2d:	f7 d9                	neg    %ecx
+     a2f:	eb 09                	jmp    a3a <pipe1+0x7a>
+     a31:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        if ((buf[i] & 0xff) != (seq++ & 0xff))
+     a38:	89 d3                	mov    %edx,%ebx
+     a3a:	38 9c 0b 80 8c 00 00 	cmp    %bl,0x8c80(%ebx,%ecx,1)
+     a41:	8d 53 01             	lea    0x1(%ebx),%edx
+     a44:	75 1b                	jne    a61 <pipe1+0xa1>
+      for (i = 0; i < n; i++)
+     a46:	39 f2                	cmp    %esi,%edx
+     a48:	75 ee                	jne    a38 <pipe1+0x78>
       cc = cc * 2;
-     a2a:	01 ff                	add    %edi,%edi
-        if((buf[i] & 0xff) != (seq++ & 0xff)){
-     a2c:	89 f3                	mov    %esi,%ebx
+     a4a:	01 ff                	add    %edi,%edi
+        if ((buf[i] & 0xff) != (seq++ & 0xff))
+     a4c:	89 f3                	mov    %esi,%ebx
       total += n;
-     a2e:	01 45 d4             	add    %eax,-0x2c(%ebp)
+     a4e:	01 45 d4             	add    %eax,-0x2c(%ebp)
         cc = sizeof(buf);
-     a31:	81 ff 01 20 00 00    	cmp    $0x2001,%edi
-     a37:	b8 00 20 00 00       	mov    $0x2000,%eax
-     a3c:	0f 43 f8             	cmovae %eax,%edi
-     a3f:	eb a8                	jmp    9e9 <pipe1+0x49>
+     a51:	81 ff 01 20 00 00    	cmp    $0x2001,%edi
+     a57:	b8 00 20 00 00       	mov    $0x2000,%eax
+     a5c:	0f 43 f8             	cmovae %eax,%edi
+     a5f:	eb a8                	jmp    a09 <pipe1+0x49>
           printf(1, "pipe1 oops 2\n");
-     a41:	c7 44 24 04 9e 46 00 	movl   $0x469e,0x4(%esp)
-     a48:	00 
-     a49:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-     a50:	e8 8b 35 00 00       	call   3fe0 <printf>
+     a61:	c7 44 24 04 6e 47 00 	movl   $0x476e,0x4(%esp)
+     a68:	00 
+     a69:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+     a70:	e8 3b 36 00 00       	call   40b0 <printf>
 }
-     a55:	83 c4 2c             	add    $0x2c,%esp
-     a58:	5b                   	pop    %ebx
-     a59:	5e                   	pop    %esi
-     a5a:	5f                   	pop    %edi
-     a5b:	5d                   	pop    %ebp
-     a5c:	c3                   	ret    
+     a75:	83 c4 2c             	add    $0x2c,%esp
+     a78:	5b                   	pop    %ebx
+     a79:	5e                   	pop    %esi
+     a7a:	5f                   	pop    %edi
+     a7b:	5d                   	pop    %ebp
+     a7c:	c3                   	ret    
     close(fds[0]);
-     a5d:	8b 45 e0             	mov    -0x20(%ebp),%eax
+     a7d:	8b 45 e0             	mov    -0x20(%ebp),%eax
   seq = 0;
-     a60:	31 f6                	xor    %esi,%esi
+     a80:	31 f6                	xor    %esi,%esi
     close(fds[0]);
-     a62:	89 04 24             	mov    %eax,(%esp)
-     a65:	e8 50 34 00 00       	call   3eba <close>
-     a6a:	89 f0                	mov    %esi,%eax
+     a82:	89 04 24             	mov    %eax,(%esp)
+     a85:	e8 00 35 00 00       	call   3f8a <close>
+     a8a:	89 f0                	mov    %esi,%eax
 {
-     a6c:	89 f3                	mov    %esi,%ebx
-     a6e:	8d 96 09 04 00 00    	lea    0x409(%esi),%edx
-     a74:	f7 d8                	neg    %eax
-     a76:	66 90                	xchg   %ax,%ax
+     a8c:	89 f3                	mov    %esi,%ebx
+     a8e:	8d 96 09 04 00 00    	lea    0x409(%esi),%edx
+     a94:	f7 d8                	neg    %eax
+     a96:	66 90                	xchg   %ax,%ax
         buf[i] = seq++;
-     a78:	88 9c 18 a0 8b 00 00 	mov    %bl,0x8ba0(%eax,%ebx,1)
-     a7f:	83 c3 01             	add    $0x1,%ebx
-      for(i = 0; i < 1033; i++)
-     a82:	39 d3                	cmp    %edx,%ebx
-     a84:	75 f2                	jne    a78 <pipe1+0xd8>
-      if(write(fds[1], buf, 1033) != 1033){
-     a86:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-     a89:	89 de                	mov    %ebx,%esi
-     a8b:	c7 44 24 08 09 04 00 	movl   $0x409,0x8(%esp)
-     a92:	00 
-     a93:	c7 44 24 04 a0 8b 00 	movl   $0x8ba0,0x4(%esp)
-     a9a:	00 
-     a9b:	89 04 24             	mov    %eax,(%esp)
-     a9e:	e8 0f 34 00 00       	call   3eb2 <write>
-     aa3:	3d 09 04 00 00       	cmp    $0x409,%eax
-     aa8:	0f 85 a3 00 00 00    	jne    b51 <pipe1+0x1b1>
-    for(n = 0; n < 5; n++){
-     aae:	81 fb 2d 14 00 00    	cmp    $0x142d,%ebx
-     ab4:	75 b4                	jne    a6a <pipe1+0xca>
+     a98:	88 9c 18 80 8c 00 00 	mov    %bl,0x8c80(%eax,%ebx,1)
+     a9f:	83 c3 01             	add    $0x1,%ebx
+      for (i = 0; i < 1033; i++)
+     aa2:	39 d3                	cmp    %edx,%ebx
+     aa4:	75 f2                	jne    a98 <pipe1+0xd8>
+      if (write(fds[1], buf, 1033) != 1033)
+     aa6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+     aa9:	89 de                	mov    %ebx,%esi
+     aab:	c7 44 24 08 09 04 00 	movl   $0x409,0x8(%esp)
+     ab2:	00 
+     ab3:	c7 44 24 04 80 8c 00 	movl   $0x8c80,0x4(%esp)
+     aba:	00 
+     abb:	89 04 24             	mov    %eax,(%esp)
+     abe:	e8 bf 34 00 00       	call   3f82 <write>
+     ac3:	3d 09 04 00 00       	cmp    $0x409,%eax
+     ac8:	0f 85 aa 00 00 00    	jne    b78 <pipe1+0x1b8>
+    for (n = 0; n < 5; n++)
+     ace:	81 fb 2d 14 00 00    	cmp    $0x142d,%ebx
+     ad4:	75 b4                	jne    a8a <pipe1+0xca>
       exit(0);
-     ab6:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-     abd:	e8 d0 33 00 00       	call   3e92 <exit>
-    if(total != 5 * 1033){
-     ac2:	81 7d d4 2d 14 00 00 	cmpl   $0x142d,-0x2c(%ebp)
-     ac9:	75 29                	jne    af4 <pipe1+0x154>
+     ad6:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+     add:	e8 80 34 00 00       	call   3f62 <exit>
+    if (total != 5 * 1033)
+     ae2:	81 7d d4 2d 14 00 00 	cmpl   $0x142d,-0x2c(%ebp)
+     ae9:	75 30                	jne    b1b <pipe1+0x15b>
     close(fds[0]);
-     acb:	8b 45 e0             	mov    -0x20(%ebp),%eax
-     ace:	89 04 24             	mov    %eax,(%esp)
-     ad1:	e8 e4 33 00 00       	call   3eba <close>
-    wait();
-     ad6:	e8 bf 33 00 00       	call   3e9a <wait>
+     aeb:	8b 45 e0             	mov    -0x20(%ebp),%eax
+     aee:	89 04 24             	mov    %eax,(%esp)
+     af1:	e8 94 34 00 00       	call   3f8a <close>
+    wait(0);
+     af6:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+     afd:	e8 68 34 00 00       	call   3f6a <wait>
   printf(1, "pipe1 ok\n");
-     adb:	c7 44 24 04 c3 46 00 	movl   $0x46c3,0x4(%esp)
-     ae2:	00 
-     ae3:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-     aea:	e8 f1 34 00 00       	call   3fe0 <printf>
-     aef:	e9 61 ff ff ff       	jmp    a55 <pipe1+0xb5>
+     b02:	c7 44 24 04 93 47 00 	movl   $0x4793,0x4(%esp)
+     b09:	00 
+     b0a:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+     b11:	e8 9a 35 00 00       	call   40b0 <printf>
+     b16:	e9 5a ff ff ff       	jmp    a75 <pipe1+0xb5>
       printf(1, "pipe1 oops 3 total %d\n", total);
-     af4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
-     af7:	c7 44 24 04 ac 46 00 	movl   $0x46ac,0x4(%esp)
-     afe:	00 
-     aff:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-     b06:	89 44 24 08          	mov    %eax,0x8(%esp)
-     b0a:	e8 d1 34 00 00       	call   3fe0 <printf>
-     b0f:	eb a5                	jmp    ab6 <pipe1+0x116>
+     b1b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+     b1e:	c7 44 24 04 7c 47 00 	movl   $0x477c,0x4(%esp)
+     b25:	00 
+     b26:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+     b2d:	89 44 24 08          	mov    %eax,0x8(%esp)
+     b31:	e8 7a 35 00 00       	call   40b0 <printf>
+     b36:	eb 9e                	jmp    ad6 <pipe1+0x116>
     printf(1, "pipe() failed\n");
-     b11:	c7 44 24 04 81 46 00 	movl   $0x4681,0x4(%esp)
-     b18:	00 
-     b19:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-     b20:	e8 bb 34 00 00       	call   3fe0 <printf>
+     b38:	c7 44 24 04 51 47 00 	movl   $0x4751,0x4(%esp)
+     b3f:	00 
+     b40:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+     b47:	e8 64 35 00 00       	call   40b0 <printf>
     exit(0);
-     b25:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-     b2c:	e8 61 33 00 00       	call   3e92 <exit>
+     b4c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+     b53:	e8 0a 34 00 00       	call   3f62 <exit>
     printf(1, "fork() failed\n");
-     b31:	c7 44 24 04 cd 46 00 	movl   $0x46cd,0x4(%esp)
-     b38:	00 
-     b39:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-     b40:	e8 9b 34 00 00       	call   3fe0 <printf>
+     b58:	c7 44 24 04 9d 47 00 	movl   $0x479d,0x4(%esp)
+     b5f:	00 
+     b60:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+     b67:	e8 44 35 00 00       	call   40b0 <printf>
     exit(0);
-     b45:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-     b4c:	e8 41 33 00 00       	call   3e92 <exit>
+     b6c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+     b73:	e8 ea 33 00 00       	call   3f62 <exit>
         printf(1, "pipe1 oops 1\n");
-     b51:	c7 44 24 04 90 46 00 	movl   $0x4690,0x4(%esp)
-     b58:	00 
-     b59:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-     b60:	e8 7b 34 00 00       	call   3fe0 <printf>
+     b78:	c7 44 24 04 60 47 00 	movl   $0x4760,0x4(%esp)
+     b7f:	00 
+     b80:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+     b87:	e8 24 35 00 00       	call   40b0 <printf>
         exit(0);
-     b65:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-     b6c:	e8 21 33 00 00       	call   3e92 <exit>
-     b71:	eb 0d                	jmp    b80 <preempt>
-     b73:	90                   	nop
-     b74:	90                   	nop
-     b75:	90                   	nop
-     b76:	90                   	nop
-     b77:	90                   	nop
-     b78:	90                   	nop
-     b79:	90                   	nop
-     b7a:	90                   	nop
-     b7b:	90                   	nop
-     b7c:	90                   	nop
-     b7d:	90                   	nop
-     b7e:	90                   	nop
-     b7f:	90                   	nop
+     b8c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+     b93:	e8 ca 33 00 00       	call   3f62 <exit>
+     b98:	90                   	nop
+     b99:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-00000b80 <preempt>:
+00000ba0 <preempt>:
 {
-     b80:	55                   	push   %ebp
-     b81:	89 e5                	mov    %esp,%ebp
-     b83:	57                   	push   %edi
-     b84:	56                   	push   %esi
-     b85:	53                   	push   %ebx
-     b86:	83 ec 2c             	sub    $0x2c,%esp
+     ba0:	55                   	push   %ebp
+     ba1:	89 e5                	mov    %esp,%ebp
+     ba3:	57                   	push   %edi
+     ba4:	56                   	push   %esi
+     ba5:	53                   	push   %ebx
+     ba6:	83 ec 2c             	sub    $0x2c,%esp
   printf(1, "preempt: ");
-     b89:	c7 44 24 04 dc 46 00 	movl   $0x46dc,0x4(%esp)
-     b90:	00 
-     b91:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-     b98:	e8 43 34 00 00       	call   3fe0 <printf>
+     ba9:	c7 44 24 04 ac 47 00 	movl   $0x47ac,0x4(%esp)
+     bb0:	00 
+     bb1:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+     bb8:	e8 f3 34 00 00       	call   40b0 <printf>
   pid1 = fork();
-     b9d:	e8 e8 32 00 00       	call   3e8a <fork>
-  if(pid1 == 0)
-     ba2:	85 c0                	test   %eax,%eax
+     bbd:	e8 98 33 00 00       	call   3f5a <fork>
+  if (pid1 == 0)
+     bc2:	85 c0                	test   %eax,%eax
   pid1 = fork();
-     ba4:	89 c7                	mov    %eax,%edi
-  if(pid1 == 0)
-     ba6:	75 02                	jne    baa <preempt+0x2a>
-     ba8:	eb fe                	jmp    ba8 <preempt+0x28>
-     baa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+     bc4:	89 c7                	mov    %eax,%edi
+  if (pid1 == 0)
+     bc6:	75 02                	jne    bca <preempt+0x2a>
+     bc8:	eb fe                	jmp    bc8 <preempt+0x28>
+     bca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   pid2 = fork();
-     bb0:	e8 d5 32 00 00       	call   3e8a <fork>
-  if(pid2 == 0)
-     bb5:	85 c0                	test   %eax,%eax
+     bd0:	e8 85 33 00 00       	call   3f5a <fork>
+  if (pid2 == 0)
+     bd5:	85 c0                	test   %eax,%eax
   pid2 = fork();
-     bb7:	89 c6                	mov    %eax,%esi
-  if(pid2 == 0)
-     bb9:	75 02                	jne    bbd <preempt+0x3d>
-     bbb:	eb fe                	jmp    bbb <preempt+0x3b>
+     bd7:	89 c6                	mov    %eax,%esi
+  if (pid2 == 0)
+     bd9:	75 02                	jne    bdd <preempt+0x3d>
+     bdb:	eb fe                	jmp    bdb <preempt+0x3b>
   pipe(pfds);
-     bbd:	8d 45 e0             	lea    -0x20(%ebp),%eax
-     bc0:	89 04 24             	mov    %eax,(%esp)
-     bc3:	e8 da 32 00 00       	call   3ea2 <pipe>
+     bdd:	8d 45 e0             	lea    -0x20(%ebp),%eax
+     be0:	89 04 24             	mov    %eax,(%esp)
+     be3:	e8 8a 33 00 00       	call   3f72 <pipe>
   pid3 = fork();
-     bc8:	e8 bd 32 00 00       	call   3e8a <fork>
-  if(pid3 == 0){
-     bcd:	85 c0                	test   %eax,%eax
+     be8:	e8 6d 33 00 00       	call   3f5a <fork>
+  if (pid3 == 0)
+     bed:	85 c0                	test   %eax,%eax
   pid3 = fork();
-     bcf:	89 c3                	mov    %eax,%ebx
-  if(pid3 == 0){
-     bd1:	75 4c                	jne    c1f <preempt+0x9f>
+     bef:	89 c3                	mov    %eax,%ebx
+  if (pid3 == 0)
+     bf1:	75 4c                	jne    c3f <preempt+0x9f>
     close(pfds[0]);
-     bd3:	8b 45 e0             	mov    -0x20(%ebp),%eax
-     bd6:	89 04 24             	mov    %eax,(%esp)
-     bd9:	e8 dc 32 00 00       	call   3eba <close>
-    if(write(pfds[1], "x", 1) != 1)
-     bde:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-     be1:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
-     be8:	00 
-     be9:	c7 44 24 04 a1 4c 00 	movl   $0x4ca1,0x4(%esp)
-     bf0:	00 
-     bf1:	89 04 24             	mov    %eax,(%esp)
-     bf4:	e8 b9 32 00 00       	call   3eb2 <write>
-     bf9:	83 f8 01             	cmp    $0x1,%eax
-     bfc:	74 14                	je     c12 <preempt+0x92>
+     bf3:	8b 45 e0             	mov    -0x20(%ebp),%eax
+     bf6:	89 04 24             	mov    %eax,(%esp)
+     bf9:	e8 8c 33 00 00       	call   3f8a <close>
+    if (write(pfds[1], "x", 1) != 1)
+     bfe:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+     c01:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+     c08:	00 
+     c09:	c7 44 24 04 71 4d 00 	movl   $0x4d71,0x4(%esp)
+     c10:	00 
+     c11:	89 04 24             	mov    %eax,(%esp)
+     c14:	e8 69 33 00 00       	call   3f82 <write>
+     c19:	83 f8 01             	cmp    $0x1,%eax
+     c1c:	74 14                	je     c32 <preempt+0x92>
       printf(1, "preempt write error");
-     bfe:	c7 44 24 04 e6 46 00 	movl   $0x46e6,0x4(%esp)
-     c05:	00 
-     c06:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-     c0d:	e8 ce 33 00 00       	call   3fe0 <printf>
+     c1e:	c7 44 24 04 b6 47 00 	movl   $0x47b6,0x4(%esp)
+     c25:	00 
+     c26:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+     c2d:	e8 7e 34 00 00       	call   40b0 <printf>
     close(pfds[1]);
-     c12:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-     c15:	89 04 24             	mov    %eax,(%esp)
-     c18:	e8 9d 32 00 00       	call   3eba <close>
-     c1d:	eb fe                	jmp    c1d <preempt+0x9d>
+     c32:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+     c35:	89 04 24             	mov    %eax,(%esp)
+     c38:	e8 4d 33 00 00       	call   3f8a <close>
+     c3d:	eb fe                	jmp    c3d <preempt+0x9d>
   close(pfds[1]);
-     c1f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-     c22:	89 04 24             	mov    %eax,(%esp)
-     c25:	e8 90 32 00 00       	call   3eba <close>
-  if(read(pfds[0], buf, sizeof(buf)) != 1){
-     c2a:	8b 45 e0             	mov    -0x20(%ebp),%eax
-     c2d:	c7 44 24 08 00 20 00 	movl   $0x2000,0x8(%esp)
-     c34:	00 
-     c35:	c7 44 24 04 a0 8b 00 	movl   $0x8ba0,0x4(%esp)
-     c3c:	00 
-     c3d:	89 04 24             	mov    %eax,(%esp)
-     c40:	e8 65 32 00 00       	call   3eaa <read>
-     c45:	83 f8 01             	cmp    $0x1,%eax
-     c48:	74 1c                	je     c66 <preempt+0xe6>
+     c3f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+     c42:	89 04 24             	mov    %eax,(%esp)
+     c45:	e8 40 33 00 00       	call   3f8a <close>
+  if (read(pfds[0], buf, sizeof(buf)) != 1)
+     c4a:	8b 45 e0             	mov    -0x20(%ebp),%eax
+     c4d:	c7 44 24 08 00 20 00 	movl   $0x2000,0x8(%esp)
+     c54:	00 
+     c55:	c7 44 24 04 80 8c 00 	movl   $0x8c80,0x4(%esp)
+     c5c:	00 
+     c5d:	89 04 24             	mov    %eax,(%esp)
+     c60:	e8 15 33 00 00       	call   3f7a <read>
+     c65:	83 f8 01             	cmp    $0x1,%eax
+     c68:	74 1c                	je     c86 <preempt+0xe6>
     printf(1, "preempt read error");
-     c4a:	c7 44 24 04 fa 46 00 	movl   $0x46fa,0x4(%esp)
-     c51:	00 
-     c52:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-     c59:	e8 82 33 00 00       	call   3fe0 <printf>
+     c6a:	c7 44 24 04 ca 47 00 	movl   $0x47ca,0x4(%esp)
+     c71:	00 
+     c72:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+     c79:	e8 32 34 00 00       	call   40b0 <printf>
 }
-     c5e:	83 c4 2c             	add    $0x2c,%esp
-     c61:	5b                   	pop    %ebx
-     c62:	5e                   	pop    %esi
-     c63:	5f                   	pop    %edi
-     c64:	5d                   	pop    %ebp
-     c65:	c3                   	ret    
+     c7e:	83 c4 2c             	add    $0x2c,%esp
+     c81:	5b                   	pop    %ebx
+     c82:	5e                   	pop    %esi
+     c83:	5f                   	pop    %edi
+     c84:	5d                   	pop    %ebp
+     c85:	c3                   	ret    
   close(pfds[0]);
-     c66:	8b 45 e0             	mov    -0x20(%ebp),%eax
-     c69:	89 04 24             	mov    %eax,(%esp)
-     c6c:	e8 49 32 00 00       	call   3eba <close>
+     c86:	8b 45 e0             	mov    -0x20(%ebp),%eax
+     c89:	89 04 24             	mov    %eax,(%esp)
+     c8c:	e8 f9 32 00 00       	call   3f8a <close>
   printf(1, "kill... ");
-     c71:	c7 44 24 04 0d 47 00 	movl   $0x470d,0x4(%esp)
-     c78:	00 
-     c79:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-     c80:	e8 5b 33 00 00       	call   3fe0 <printf>
+     c91:	c7 44 24 04 dd 47 00 	movl   $0x47dd,0x4(%esp)
+     c98:	00 
+     c99:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+     ca0:	e8 0b 34 00 00       	call   40b0 <printf>
   kill(pid1);
-     c85:	89 3c 24             	mov    %edi,(%esp)
-     c88:	e8 35 32 00 00       	call   3ec2 <kill>
+     ca5:	89 3c 24             	mov    %edi,(%esp)
+     ca8:	e8 e5 32 00 00       	call   3f92 <kill>
   kill(pid2);
-     c8d:	89 34 24             	mov    %esi,(%esp)
-     c90:	e8 2d 32 00 00       	call   3ec2 <kill>
+     cad:	89 34 24             	mov    %esi,(%esp)
+     cb0:	e8 dd 32 00 00       	call   3f92 <kill>
   kill(pid3);
-     c95:	89 1c 24             	mov    %ebx,(%esp)
-     c98:	e8 25 32 00 00       	call   3ec2 <kill>
+     cb5:	89 1c 24             	mov    %ebx,(%esp)
+     cb8:	e8 d5 32 00 00       	call   3f92 <kill>
   printf(1, "wait... ");
-     c9d:	c7 44 24 04 16 47 00 	movl   $0x4716,0x4(%esp)
-     ca4:	00 
-     ca5:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-     cac:	e8 2f 33 00 00       	call   3fe0 <printf>
-  wait();
-     cb1:	e8 e4 31 00 00       	call   3e9a <wait>
-  wait();
-     cb6:	e8 df 31 00 00       	call   3e9a <wait>
-     cbb:	90                   	nop
-     cbc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-  wait();
-     cc0:	e8 d5 31 00 00       	call   3e9a <wait>
+     cbd:	c7 44 24 04 e6 47 00 	movl   $0x47e6,0x4(%esp)
+     cc4:	00 
+     cc5:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+     ccc:	e8 df 33 00 00       	call   40b0 <printf>
+  wait(0);
+     cd1:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+     cd8:	e8 8d 32 00 00       	call   3f6a <wait>
+  wait(0);
+     cdd:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+     ce4:	e8 81 32 00 00       	call   3f6a <wait>
+  wait(0);
+     ce9:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+     cf0:	e8 75 32 00 00       	call   3f6a <wait>
   printf(1, "preempt ok\n");
-     cc5:	c7 44 24 04 1f 47 00 	movl   $0x471f,0x4(%esp)
-     ccc:	00 
-     ccd:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-     cd4:	e8 07 33 00 00       	call   3fe0 <printf>
-     cd9:	eb 83                	jmp    c5e <preempt+0xde>
-     cdb:	90                   	nop
-     cdc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     cf5:	c7 44 24 04 ef 47 00 	movl   $0x47ef,0x4(%esp)
+     cfc:	00 
+     cfd:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+     d04:	e8 a7 33 00 00       	call   40b0 <printf>
+     d09:	e9 70 ff ff ff       	jmp    c7e <preempt+0xde>
+     d0e:	66 90                	xchg   %ax,%ax
 
-00000ce0 <exitwait>:
+00000d10 <exitwait>:
 {
-     ce0:	55                   	push   %ebp
-     ce1:	89 e5                	mov    %esp,%ebp
-     ce3:	56                   	push   %esi
-     ce4:	be 64 00 00 00       	mov    $0x64,%esi
-     ce9:	53                   	push   %ebx
-     cea:	83 ec 10             	sub    $0x10,%esp
-     ced:	eb 13                	jmp    d02 <exitwait+0x22>
-     cef:	90                   	nop
-    if(pid){
-     cf0:	74 71                	je     d63 <exitwait+0x83>
-      if(wait() != pid){
-     cf2:	e8 a3 31 00 00       	call   3e9a <wait>
-     cf7:	39 d8                	cmp    %ebx,%eax
-     cf9:	75 2d                	jne    d28 <exitwait+0x48>
-  for(i = 0; i < 100; i++){
-     cfb:	83 ee 01             	sub    $0x1,%esi
-     cfe:	66 90                	xchg   %ax,%ax
-     d00:	74 46                	je     d48 <exitwait+0x68>
+     d10:	55                   	push   %ebp
+     d11:	89 e5                	mov    %esp,%ebp
+     d13:	56                   	push   %esi
+     d14:	be 64 00 00 00       	mov    $0x64,%esi
+     d19:	53                   	push   %ebx
+     d1a:	83 ec 10             	sub    $0x10,%esp
+     d1d:	eb 18                	jmp    d37 <exitwait+0x27>
+     d1f:	90                   	nop
+      if (wait(0) != pid)
+     d20:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    if (pid)
+     d27:	74 72                	je     d9b <exitwait+0x8b>
+      if (wait(0) != pid)
+     d29:	e8 3c 32 00 00       	call   3f6a <wait>
+     d2e:	39 d8                	cmp    %ebx,%eax
+     d30:	75 2e                	jne    d60 <exitwait+0x50>
+  for (i = 0; i < 100; i++)
+     d32:	83 ee 01             	sub    $0x1,%esi
+     d35:	74 49                	je     d80 <exitwait+0x70>
     pid = fork();
-     d02:	e8 83 31 00 00       	call   3e8a <fork>
-    if(pid < 0){
-     d07:	85 c0                	test   %eax,%eax
+     d37:	e8 1e 32 00 00       	call   3f5a <fork>
+    if (pid < 0)
+     d3c:	85 c0                	test   %eax,%eax
     pid = fork();
-     d09:	89 c3                	mov    %eax,%ebx
-    if(pid < 0){
-     d0b:	79 e3                	jns    cf0 <exitwait+0x10>
+     d3e:	89 c3                	mov    %eax,%ebx
+    if (pid < 0)
+     d40:	79 de                	jns    d20 <exitwait+0x10>
       printf(1, "fork failed\n");
-     d0d:	c7 44 24 04 89 52 00 	movl   $0x5289,0x4(%esp)
-     d14:	00 
-     d15:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-     d1c:	e8 bf 32 00 00       	call   3fe0 <printf>
+     d42:	c7 44 24 04 59 53 00 	movl   $0x5359,0x4(%esp)
+     d49:	00 
+     d4a:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+     d51:	e8 5a 33 00 00       	call   40b0 <printf>
 }
-     d21:	83 c4 10             	add    $0x10,%esp
-     d24:	5b                   	pop    %ebx
-     d25:	5e                   	pop    %esi
-     d26:	5d                   	pop    %ebp
-     d27:	c3                   	ret    
+     d56:	83 c4 10             	add    $0x10,%esp
+     d59:	5b                   	pop    %ebx
+     d5a:	5e                   	pop    %esi
+     d5b:	5d                   	pop    %ebp
+     d5c:	c3                   	ret    
+     d5d:	8d 76 00             	lea    0x0(%esi),%esi
         printf(1, "wait wrong pid\n");
-     d28:	c7 44 24 04 2b 47 00 	movl   $0x472b,0x4(%esp)
-     d2f:	00 
-     d30:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-     d37:	e8 a4 32 00 00       	call   3fe0 <printf>
+     d60:	c7 44 24 04 fb 47 00 	movl   $0x47fb,0x4(%esp)
+     d67:	00 
+     d68:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+     d6f:	e8 3c 33 00 00       	call   40b0 <printf>
 }
-     d3c:	83 c4 10             	add    $0x10,%esp
-     d3f:	5b                   	pop    %ebx
-     d40:	5e                   	pop    %esi
-     d41:	5d                   	pop    %ebp
-     d42:	c3                   	ret    
-     d43:	90                   	nop
-     d44:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     d74:	83 c4 10             	add    $0x10,%esp
+     d77:	5b                   	pop    %ebx
+     d78:	5e                   	pop    %esi
+     d79:	5d                   	pop    %ebp
+     d7a:	c3                   	ret    
+     d7b:	90                   	nop
+     d7c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   printf(1, "exitwait ok\n");
-     d48:	c7 44 24 04 3b 47 00 	movl   $0x473b,0x4(%esp)
-     d4f:	00 
-     d50:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-     d57:	e8 84 32 00 00       	call   3fe0 <printf>
+     d80:	c7 44 24 04 0b 48 00 	movl   $0x480b,0x4(%esp)
+     d87:	00 
+     d88:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+     d8f:	e8 1c 33 00 00       	call   40b0 <printf>
 }
-     d5c:	83 c4 10             	add    $0x10,%esp
-     d5f:	5b                   	pop    %ebx
-     d60:	5e                   	pop    %esi
-     d61:	5d                   	pop    %ebp
-     d62:	c3                   	ret    
+     d94:	83 c4 10             	add    $0x10,%esp
+     d97:	5b                   	pop    %ebx
+     d98:	5e                   	pop    %esi
+     d99:	5d                   	pop    %ebp
+     d9a:	c3                   	ret    
       exit(0);
-     d63:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-     d6a:	e8 23 31 00 00       	call   3e92 <exit>
-     d6f:	90                   	nop
+     d9b:	e8 c2 31 00 00       	call   3f62 <exit>
 
-00000d70 <mem>:
+00000da0 <mem>:
 {
-     d70:	55                   	push   %ebp
-     d71:	89 e5                	mov    %esp,%ebp
-     d73:	57                   	push   %edi
-     d74:	56                   	push   %esi
-     d75:	53                   	push   %ebx
-     d76:	83 ec 1c             	sub    $0x1c,%esp
+     da0:	55                   	push   %ebp
+     da1:	89 e5                	mov    %esp,%ebp
+     da3:	57                   	push   %edi
+     da4:	56                   	push   %esi
+     da5:	53                   	push   %ebx
+     da6:	83 ec 1c             	sub    $0x1c,%esp
   printf(1, "mem test\n");
-     d79:	c7 44 24 04 48 47 00 	movl   $0x4748,0x4(%esp)
-     d80:	00 
-     d81:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-     d88:	e8 53 32 00 00       	call   3fe0 <printf>
+     da9:	c7 44 24 04 18 48 00 	movl   $0x4818,0x4(%esp)
+     db0:	00 
+     db1:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+     db8:	e8 f3 32 00 00       	call   40b0 <printf>
   ppid = getpid();
-     d8d:	e8 80 31 00 00       	call   3f12 <getpid>
-     d92:	89 c6                	mov    %eax,%esi
-  if((pid = fork()) == 0){
-     d94:	e8 f1 30 00 00       	call   3e8a <fork>
-     d99:	85 c0                	test   %eax,%eax
-     d9b:	75 73                	jne    e10 <mem+0xa0>
-     d9d:	31 db                	xor    %ebx,%ebx
-     d9f:	90                   	nop
-     da0:	eb 0a                	jmp    dac <mem+0x3c>
-     da2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-      *(char**)m2 = m1;
-     da8:	89 18                	mov    %ebx,(%eax)
-     daa:	89 c3                	mov    %eax,%ebx
-    while((m2 = malloc(10001)) != 0){
-     dac:	c7 04 24 11 27 00 00 	movl   $0x2711,(%esp)
-     db3:	e8 a8 34 00 00       	call   4260 <malloc>
-     db8:	85 c0                	test   %eax,%eax
-     dba:	75 ec                	jne    da8 <mem+0x38>
-    while(m1){
-     dbc:	85 db                	test   %ebx,%ebx
-     dbe:	75 0a                	jne    dca <mem+0x5a>
-     dc0:	eb 16                	jmp    dd8 <mem+0x68>
-     dc2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+     dbd:	e8 20 32 00 00       	call   3fe2 <getpid>
+     dc2:	89 c6                	mov    %eax,%esi
+  if ((pid = fork()) == 0)
+     dc4:	e8 91 31 00 00       	call   3f5a <fork>
+     dc9:	85 c0                	test   %eax,%eax
+     dcb:	75 73                	jne    e40 <mem+0xa0>
+     dcd:	31 db                	xor    %ebx,%ebx
+     dcf:	90                   	nop
+     dd0:	eb 0a                	jmp    ddc <mem+0x3c>
+     dd2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      *(char **)m2 = m1;
+     dd8:	89 18                	mov    %ebx,(%eax)
+     dda:	89 c3                	mov    %eax,%ebx
+    while ((m2 = malloc(10001)) != 0)
+     ddc:	c7 04 24 11 27 00 00 	movl   $0x2711,(%esp)
+     de3:	e8 48 35 00 00       	call   4330 <malloc>
+     de8:	85 c0                	test   %eax,%eax
+     dea:	75 ec                	jne    dd8 <mem+0x38>
+    while (m1)
+     dec:	85 db                	test   %ebx,%ebx
+     dee:	75 0a                	jne    dfa <mem+0x5a>
+     df0:	eb 16                	jmp    e08 <mem+0x68>
+     df2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
       m1 = m2;
-     dc8:	89 fb                	mov    %edi,%ebx
-      m2 = *(char**)m1;
-     dca:	8b 3b                	mov    (%ebx),%edi
+     df8:	89 fb                	mov    %edi,%ebx
+      m2 = *(char **)m1;
+     dfa:	8b 3b                	mov    (%ebx),%edi
       free(m1);
-     dcc:	89 1c 24             	mov    %ebx,(%esp)
-     dcf:	e8 fc 33 00 00       	call   41d0 <free>
-    while(m1){
-     dd4:	85 ff                	test   %edi,%edi
-     dd6:	75 f0                	jne    dc8 <mem+0x58>
-    m1 = malloc(1024*20);
-     dd8:	c7 04 24 00 50 00 00 	movl   $0x5000,(%esp)
-     ddf:	e8 7c 34 00 00       	call   4260 <malloc>
-    if(m1 == 0){
-     de4:	85 c0                	test   %eax,%eax
-     de6:	74 38                	je     e20 <mem+0xb0>
+     dfc:	89 1c 24             	mov    %ebx,(%esp)
+     dff:	e8 9c 34 00 00       	call   42a0 <free>
+    while (m1)
+     e04:	85 ff                	test   %edi,%edi
+     e06:	75 f0                	jne    df8 <mem+0x58>
+    m1 = malloc(1024 * 20);
+     e08:	c7 04 24 00 50 00 00 	movl   $0x5000,(%esp)
+     e0f:	e8 1c 35 00 00       	call   4330 <malloc>
+    if (m1 == 0)
+     e14:	85 c0                	test   %eax,%eax
+     e16:	74 40                	je     e58 <mem+0xb8>
     free(m1);
-     de8:	89 04 24             	mov    %eax,(%esp)
-     deb:	e8 e0 33 00 00       	call   41d0 <free>
+     e18:	89 04 24             	mov    %eax,(%esp)
+     e1b:	e8 80 34 00 00       	call   42a0 <free>
     printf(1, "mem ok\n");
-     df0:	c7 44 24 04 6c 47 00 	movl   $0x476c,0x4(%esp)
-     df7:	00 
-     df8:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-     dff:	e8 dc 31 00 00       	call   3fe0 <printf>
+     e20:	c7 44 24 04 3c 48 00 	movl   $0x483c,0x4(%esp)
+     e27:	00 
+     e28:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+     e2f:	e8 7c 32 00 00       	call   40b0 <printf>
     exit(0);
-     e04:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-     e0b:	e8 82 30 00 00       	call   3e92 <exit>
+     e34:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+     e3b:	e8 22 31 00 00       	call   3f62 <exit>
+    wait(0);
+     e40:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+     e47:	e8 1e 31 00 00       	call   3f6a <wait>
 }
-     e10:	83 c4 1c             	add    $0x1c,%esp
-     e13:	5b                   	pop    %ebx
-     e14:	5e                   	pop    %esi
-     e15:	5f                   	pop    %edi
-     e16:	5d                   	pop    %ebp
-    wait();
-     e17:	e9 7e 30 00 00       	jmp    3e9a <wait>
-     e1c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     e4c:	83 c4 1c             	add    $0x1c,%esp
+     e4f:	5b                   	pop    %ebx
+     e50:	5e                   	pop    %esi
+     e51:	5f                   	pop    %edi
+     e52:	5d                   	pop    %ebp
+     e53:	c3                   	ret    
+     e54:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
       printf(1, "couldn't allocate mem?!!\n");
-     e20:	c7 44 24 04 52 47 00 	movl   $0x4752,0x4(%esp)
-     e27:	00 
-     e28:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-     e2f:	e8 ac 31 00 00       	call   3fe0 <printf>
+     e58:	c7 44 24 04 22 48 00 	movl   $0x4822,0x4(%esp)
+     e5f:	00 
+     e60:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+     e67:	e8 44 32 00 00       	call   40b0 <printf>
       kill(ppid);
-     e34:	89 34 24             	mov    %esi,(%esp)
-     e37:	e8 86 30 00 00       	call   3ec2 <kill>
+     e6c:	89 34 24             	mov    %esi,(%esp)
+     e6f:	e8 1e 31 00 00       	call   3f92 <kill>
       exit(0);
-     e3c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-     e43:	e8 4a 30 00 00       	call   3e92 <exit>
-     e48:	90                   	nop
-     e49:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     e74:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+     e7b:	e8 e2 30 00 00       	call   3f62 <exit>
 
-00000e50 <sharedfd>:
+00000e80 <sharedfd>:
 {
-     e50:	55                   	push   %ebp
-     e51:	89 e5                	mov    %esp,%ebp
-     e53:	57                   	push   %edi
-     e54:	56                   	push   %esi
-     e55:	53                   	push   %ebx
-     e56:	83 ec 3c             	sub    $0x3c,%esp
+     e80:	55                   	push   %ebp
+     e81:	89 e5                	mov    %esp,%ebp
+     e83:	57                   	push   %edi
+     e84:	56                   	push   %esi
+     e85:	53                   	push   %ebx
+     e86:	83 ec 3c             	sub    $0x3c,%esp
   printf(1, "sharedfd test\n");
-     e59:	c7 44 24 04 74 47 00 	movl   $0x4774,0x4(%esp)
-     e60:	00 
-     e61:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-     e68:	e8 73 31 00 00       	call   3fe0 <printf>
+     e89:	c7 44 24 04 44 48 00 	movl   $0x4844,0x4(%esp)
+     e90:	00 
+     e91:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+     e98:	e8 13 32 00 00       	call   40b0 <printf>
   unlink("sharedfd");
-     e6d:	c7 04 24 83 47 00 00 	movl   $0x4783,(%esp)
-     e74:	e8 69 30 00 00       	call   3ee2 <unlink>
-  fd = open("sharedfd", O_CREATE|O_RDWR);
-     e79:	c7 44 24 04 02 02 00 	movl   $0x202,0x4(%esp)
-     e80:	00 
-     e81:	c7 04 24 83 47 00 00 	movl   $0x4783,(%esp)
-     e88:	e8 45 30 00 00       	call   3ed2 <open>
-  if(fd < 0){
-     e8d:	85 c0                	test   %eax,%eax
-  fd = open("sharedfd", O_CREATE|O_RDWR);
-     e8f:	89 c7                	mov    %eax,%edi
-  if(fd < 0){
-     e91:	0f 88 40 01 00 00    	js     fd7 <sharedfd+0x187>
+     e9d:	c7 04 24 53 48 00 00 	movl   $0x4853,(%esp)
+     ea4:	e8 09 31 00 00       	call   3fb2 <unlink>
+  fd = open("sharedfd", O_CREATE | O_RDWR);
+     ea9:	c7 44 24 04 02 02 00 	movl   $0x202,0x4(%esp)
+     eb0:	00 
+     eb1:	c7 04 24 53 48 00 00 	movl   $0x4853,(%esp)
+     eb8:	e8 e5 30 00 00       	call   3fa2 <open>
+  if (fd < 0)
+     ebd:	85 c0                	test   %eax,%eax
+  fd = open("sharedfd", O_CREATE | O_RDWR);
+     ebf:	89 c7                	mov    %eax,%edi
+  if (fd < 0)
+     ec1:	0f 88 48 01 00 00    	js     100f <sharedfd+0x18f>
   pid = fork();
-     e97:	e8 ee 2f 00 00       	call   3e8a <fork>
-  memset(buf, pid==0?'c':'p', sizeof(buf));
-     e9c:	8d 75 de             	lea    -0x22(%ebp),%esi
-     e9f:	bb e8 03 00 00       	mov    $0x3e8,%ebx
-     ea4:	c7 44 24 08 0a 00 00 	movl   $0xa,0x8(%esp)
-     eab:	00 
-     eac:	89 34 24             	mov    %esi,(%esp)
-     eaf:	83 f8 01             	cmp    $0x1,%eax
+     ec7:	e8 8e 30 00 00       	call   3f5a <fork>
+  memset(buf, pid == 0 ? 'c' : 'p', sizeof(buf));
+     ecc:	8d 75 de             	lea    -0x22(%ebp),%esi
+     ecf:	bb e8 03 00 00       	mov    $0x3e8,%ebx
+     ed4:	c7 44 24 08 0a 00 00 	movl   $0xa,0x8(%esp)
+     edb:	00 
+     edc:	89 34 24             	mov    %esi,(%esp)
+     edf:	83 f8 01             	cmp    $0x1,%eax
   pid = fork();
-     eb2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
-  memset(buf, pid==0?'c':'p', sizeof(buf));
-     eb5:	19 c0                	sbb    %eax,%eax
-     eb7:	83 e0 f3             	and    $0xfffffff3,%eax
-     eba:	83 c0 70             	add    $0x70,%eax
-     ebd:	89 44 24 04          	mov    %eax,0x4(%esp)
-     ec1:	e8 5a 2e 00 00       	call   3d20 <memset>
-     ec6:	eb 05                	jmp    ecd <sharedfd+0x7d>
-  for(i = 0; i < 1000; i++){
-     ec8:	83 eb 01             	sub    $0x1,%ebx
-     ecb:	74 2d                	je     efa <sharedfd+0xaa>
-    if(write(fd, buf, sizeof(buf)) != sizeof(buf)){
-     ecd:	c7 44 24 08 0a 00 00 	movl   $0xa,0x8(%esp)
-     ed4:	00 
-     ed5:	89 74 24 04          	mov    %esi,0x4(%esp)
-     ed9:	89 3c 24             	mov    %edi,(%esp)
-     edc:	e8 d1 2f 00 00       	call   3eb2 <write>
-     ee1:	83 f8 0a             	cmp    $0xa,%eax
-     ee4:	74 e2                	je     ec8 <sharedfd+0x78>
+     ee2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+  memset(buf, pid == 0 ? 'c' : 'p', sizeof(buf));
+     ee5:	19 c0                	sbb    %eax,%eax
+     ee7:	83 e0 f3             	and    $0xfffffff3,%eax
+     eea:	83 c0 70             	add    $0x70,%eax
+     eed:	89 44 24 04          	mov    %eax,0x4(%esp)
+     ef1:	e8 fa 2e 00 00       	call   3df0 <memset>
+     ef6:	eb 05                	jmp    efd <sharedfd+0x7d>
+  for (i = 0; i < 1000; i++)
+     ef8:	83 eb 01             	sub    $0x1,%ebx
+     efb:	74 2d                	je     f2a <sharedfd+0xaa>
+    if (write(fd, buf, sizeof(buf)) != sizeof(buf))
+     efd:	c7 44 24 08 0a 00 00 	movl   $0xa,0x8(%esp)
+     f04:	00 
+     f05:	89 74 24 04          	mov    %esi,0x4(%esp)
+     f09:	89 3c 24             	mov    %edi,(%esp)
+     f0c:	e8 71 30 00 00       	call   3f82 <write>
+     f11:	83 f8 0a             	cmp    $0xa,%eax
+     f14:	74 e2                	je     ef8 <sharedfd+0x78>
       printf(1, "fstests: write sharedfd failed\n");
-     ee6:	c7 44 24 04 74 54 00 	movl   $0x5474,0x4(%esp)
-     eed:	00 
-     eee:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-     ef5:	e8 e6 30 00 00       	call   3fe0 <printf>
-  if(pid == 0)
-     efa:	8b 45 d4             	mov    -0x2c(%ebp),%eax
-     efd:	85 c0                	test   %eax,%eax
-     eff:	0f 84 26 01 00 00    	je     102b <sharedfd+0x1db>
-    wait();
-     f05:	e8 90 2f 00 00       	call   3e9a <wait>
+     f16:	c7 44 24 04 44 55 00 	movl   $0x5544,0x4(%esp)
+     f1d:	00 
+     f1e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+     f25:	e8 86 31 00 00       	call   40b0 <printf>
+  if (pid == 0)
+     f2a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+    exit(0);
+     f2d:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  if (pid == 0)
+     f34:	85 c0                	test   %eax,%eax
+     f36:	0f 84 2e 01 00 00    	je     106a <sharedfd+0x1ea>
+    wait(0);
+     f3c:	e8 29 30 00 00       	call   3f6a <wait>
   close(fd);
-     f0a:	89 3c 24             	mov    %edi,(%esp)
-     f0d:	e8 a8 2f 00 00       	call   3eba <close>
+     f41:	89 3c 24             	mov    %edi,(%esp)
+     f44:	e8 41 30 00 00       	call   3f8a <close>
   fd = open("sharedfd", 0);
-     f12:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-     f19:	00 
-     f1a:	c7 04 24 83 47 00 00 	movl   $0x4783,(%esp)
-     f21:	e8 ac 2f 00 00       	call   3ed2 <open>
-  if(fd < 0){
-     f26:	85 c0                	test   %eax,%eax
+     f49:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+     f50:	00 
+     f51:	c7 04 24 53 48 00 00 	movl   $0x4853,(%esp)
+     f58:	e8 45 30 00 00       	call   3fa2 <open>
+  if (fd < 0)
+     f5d:	85 c0                	test   %eax,%eax
   fd = open("sharedfd", 0);
-     f28:	89 45 d0             	mov    %eax,-0x30(%ebp)
-  if(fd < 0){
-     f2b:	0f 88 c2 00 00 00    	js     ff3 <sharedfd+0x1a3>
-     f31:	31 d2                	xor    %edx,%edx
-     f33:	31 db                	xor    %ebx,%ebx
-     f35:	8d 7d e8             	lea    -0x18(%ebp),%edi
-     f38:	89 55 d4             	mov    %edx,-0x2c(%ebp)
-     f3b:	90                   	nop
-     f3c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-  while((n = read(fd, buf, sizeof(buf))) > 0){
-     f40:	8b 45 d0             	mov    -0x30(%ebp),%eax
-     f43:	c7 44 24 08 0a 00 00 	movl   $0xa,0x8(%esp)
-     f4a:	00 
-     f4b:	89 74 24 04          	mov    %esi,0x4(%esp)
-     f4f:	89 04 24             	mov    %eax,(%esp)
-     f52:	e8 53 2f 00 00       	call   3eaa <read>
-     f57:	85 c0                	test   %eax,%eax
-     f59:	7e 36                	jle    f91 <sharedfd+0x141>
-     f5b:	89 f0                	mov    %esi,%eax
-     f5d:	8b 55 d4             	mov    -0x2c(%ebp),%edx
-     f60:	eb 18                	jmp    f7a <sharedfd+0x12a>
-     f62:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+     f5f:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  if (fd < 0)
+     f62:	0f 88 c3 00 00 00    	js     102b <sharedfd+0x1ab>
+     f68:	31 d2                	xor    %edx,%edx
+     f6a:	31 db                	xor    %ebx,%ebx
+     f6c:	8d 7d e8             	lea    -0x18(%ebp),%edi
+     f6f:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+     f72:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  while ((n = read(fd, buf, sizeof(buf))) > 0)
+     f78:	8b 45 d0             	mov    -0x30(%ebp),%eax
+     f7b:	c7 44 24 08 0a 00 00 	movl   $0xa,0x8(%esp)
+     f82:	00 
+     f83:	89 74 24 04          	mov    %esi,0x4(%esp)
+     f87:	89 04 24             	mov    %eax,(%esp)
+     f8a:	e8 eb 2f 00 00       	call   3f7a <read>
+     f8f:	85 c0                	test   %eax,%eax
+     f91:	7e 36                	jle    fc9 <sharedfd+0x149>
+     f93:	89 f0                	mov    %esi,%eax
+     f95:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+     f98:	eb 18                	jmp    fb2 <sharedfd+0x132>
+     f9a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         np++;
-     f68:	80 f9 70             	cmp    $0x70,%cl
-     f6b:	0f 94 c1             	sete   %cl
-     f6e:	83 c0 01             	add    $0x1,%eax
-     f71:	0f b6 c9             	movzbl %cl,%ecx
-     f74:	01 cb                	add    %ecx,%ebx
-    for(i = 0; i < sizeof(buf); i++){
-     f76:	39 f8                	cmp    %edi,%eax
-     f78:	74 12                	je     f8c <sharedfd+0x13c>
-      if(buf[i] == 'c')
-     f7a:	0f b6 08             	movzbl (%eax),%ecx
-     f7d:	80 f9 63             	cmp    $0x63,%cl
-     f80:	75 e6                	jne    f68 <sharedfd+0x118>
-     f82:	83 c0 01             	add    $0x1,%eax
+     fa0:	80 f9 70             	cmp    $0x70,%cl
+     fa3:	0f 94 c1             	sete   %cl
+     fa6:	83 c0 01             	add    $0x1,%eax
+     fa9:	0f b6 c9             	movzbl %cl,%ecx
+     fac:	01 cb                	add    %ecx,%ebx
+    for (i = 0; i < sizeof(buf); i++)
+     fae:	39 f8                	cmp    %edi,%eax
+     fb0:	74 12                	je     fc4 <sharedfd+0x144>
+      if (buf[i] == 'c')
+     fb2:	0f b6 08             	movzbl (%eax),%ecx
+     fb5:	80 f9 63             	cmp    $0x63,%cl
+     fb8:	75 e6                	jne    fa0 <sharedfd+0x120>
+     fba:	83 c0 01             	add    $0x1,%eax
         nc++;
-     f85:	83 c2 01             	add    $0x1,%edx
-    for(i = 0; i < sizeof(buf); i++){
-     f88:	39 f8                	cmp    %edi,%eax
-     f8a:	75 ee                	jne    f7a <sharedfd+0x12a>
-     f8c:	89 55 d4             	mov    %edx,-0x2c(%ebp)
-     f8f:	eb af                	jmp    f40 <sharedfd+0xf0>
+     fbd:	83 c2 01             	add    $0x1,%edx
+    for (i = 0; i < sizeof(buf); i++)
+     fc0:	39 f8                	cmp    %edi,%eax
+     fc2:	75 ee                	jne    fb2 <sharedfd+0x132>
+     fc4:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+     fc7:	eb af                	jmp    f78 <sharedfd+0xf8>
   close(fd);
-     f91:	8b 45 d0             	mov    -0x30(%ebp),%eax
-     f94:	89 04 24             	mov    %eax,(%esp)
-     f97:	e8 1e 2f 00 00       	call   3eba <close>
+     fc9:	8b 45 d0             	mov    -0x30(%ebp),%eax
+     fcc:	89 04 24             	mov    %eax,(%esp)
+     fcf:	e8 b6 2f 00 00       	call   3f8a <close>
   unlink("sharedfd");
-     f9c:	c7 04 24 83 47 00 00 	movl   $0x4783,(%esp)
-     fa3:	e8 3a 2f 00 00       	call   3ee2 <unlink>
-  if(nc == 10000 && np == 10000){
-     fa8:	81 fb 10 27 00 00    	cmp    $0x2710,%ebx
-     fae:	8b 55 d4             	mov    -0x2c(%ebp),%edx
-     fb1:	75 5c                	jne    100f <sharedfd+0x1bf>
-     fb3:	81 fa 10 27 00 00    	cmp    $0x2710,%edx
-     fb9:	75 54                	jne    100f <sharedfd+0x1bf>
+     fd4:	c7 04 24 53 48 00 00 	movl   $0x4853,(%esp)
+     fdb:	e8 d2 2f 00 00       	call   3fb2 <unlink>
+  if (nc == 10000 && np == 10000)
+     fe0:	81 fb 10 27 00 00    	cmp    $0x2710,%ebx
+     fe6:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+     fe9:	75 5c                	jne    1047 <sharedfd+0x1c7>
+     feb:	81 fa 10 27 00 00    	cmp    $0x2710,%edx
+     ff1:	75 54                	jne    1047 <sharedfd+0x1c7>
     printf(1, "sharedfd ok\n");
-     fbb:	c7 44 24 04 8c 47 00 	movl   $0x478c,0x4(%esp)
-     fc2:	00 
-     fc3:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-     fca:	e8 11 30 00 00       	call   3fe0 <printf>
-}
-     fcf:	83 c4 3c             	add    $0x3c,%esp
-     fd2:	5b                   	pop    %ebx
-     fd3:	5e                   	pop    %esi
-     fd4:	5f                   	pop    %edi
-     fd5:	5d                   	pop    %ebp
-     fd6:	c3                   	ret    
-    printf(1, "fstests: cannot open sharedfd for writing");
-     fd7:	c7 44 24 04 48 54 00 	movl   $0x5448,0x4(%esp)
-     fde:	00 
-     fdf:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-     fe6:	e8 f5 2f 00 00       	call   3fe0 <printf>
-}
-     feb:	83 c4 3c             	add    $0x3c,%esp
-     fee:	5b                   	pop    %ebx
-     fef:	5e                   	pop    %esi
-     ff0:	5f                   	pop    %edi
-     ff1:	5d                   	pop    %ebp
-     ff2:	c3                   	ret    
-    printf(1, "fstests: cannot open sharedfd for reading\n");
-     ff3:	c7 44 24 04 94 54 00 	movl   $0x5494,0x4(%esp)
+     ff3:	c7 44 24 04 5c 48 00 	movl   $0x485c,0x4(%esp)
      ffa:	00 
      ffb:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    1002:	e8 d9 2f 00 00       	call   3fe0 <printf>
+    1002:	e8 a9 30 00 00       	call   40b0 <printf>
 }
     1007:	83 c4 3c             	add    $0x3c,%esp
     100a:	5b                   	pop    %ebx
@@ -1541,4723 +1515,4743 @@ main(int argc, char *argv[])
     100c:	5f                   	pop    %edi
     100d:	5d                   	pop    %ebp
     100e:	c3                   	ret    
+    printf(1, "fstests: cannot open sharedfd for writing");
+    100f:	c7 44 24 04 18 55 00 	movl   $0x5518,0x4(%esp)
+    1016:	00 
+    1017:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    101e:	e8 8d 30 00 00       	call   40b0 <printf>
+}
+    1023:	83 c4 3c             	add    $0x3c,%esp
+    1026:	5b                   	pop    %ebx
+    1027:	5e                   	pop    %esi
+    1028:	5f                   	pop    %edi
+    1029:	5d                   	pop    %ebp
+    102a:	c3                   	ret    
+    printf(1, "fstests: cannot open sharedfd for reading\n");
+    102b:	c7 44 24 04 64 55 00 	movl   $0x5564,0x4(%esp)
+    1032:	00 
+    1033:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    103a:	e8 71 30 00 00       	call   40b0 <printf>
+}
+    103f:	83 c4 3c             	add    $0x3c,%esp
+    1042:	5b                   	pop    %ebx
+    1043:	5e                   	pop    %esi
+    1044:	5f                   	pop    %edi
+    1045:	5d                   	pop    %ebp
+    1046:	c3                   	ret    
     printf(1, "sharedfd oops %d %d\n", nc, np);
-    100f:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
-    1013:	89 54 24 08          	mov    %edx,0x8(%esp)
-    1017:	c7 44 24 04 99 47 00 	movl   $0x4799,0x4(%esp)
-    101e:	00 
-    101f:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    1026:	e8 b5 2f 00 00       	call   3fe0 <printf>
+    1047:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+    104b:	89 54 24 08          	mov    %edx,0x8(%esp)
+    104f:	c7 44 24 04 69 48 00 	movl   $0x4869,0x4(%esp)
+    1056:	00 
+    1057:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    105e:	e8 4d 30 00 00       	call   40b0 <printf>
     exit(0);
-    102b:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    1032:	e8 5b 2e 00 00       	call   3e92 <exit>
-    1037:	89 f6                	mov    %esi,%esi
-    1039:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    1063:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    106a:	e8 f3 2e 00 00       	call   3f62 <exit>
+    106f:	90                   	nop
 
-00001040 <fourfiles>:
+00001070 <fourfiles>:
 {
-    1040:	55                   	push   %ebp
-    1041:	89 e5                	mov    %esp,%ebp
-    1043:	57                   	push   %edi
-    1044:	56                   	push   %esi
+    1070:	55                   	push   %ebp
+    1071:	89 e5                	mov    %esp,%ebp
+    1073:	57                   	push   %edi
+    1074:	56                   	push   %esi
   printf(1, "fourfiles test\n");
-    1045:	be ae 47 00 00       	mov    $0x47ae,%esi
+    1075:	be 7e 48 00 00       	mov    $0x487e,%esi
 {
-    104a:	53                   	push   %ebx
-  for(pi = 0; pi < 4; pi++){
-    104b:	31 db                	xor    %ebx,%ebx
+    107a:	53                   	push   %ebx
+  for (pi = 0; pi < 4; pi++)
+    107b:	31 db                	xor    %ebx,%ebx
 {
-    104d:	83 ec 2c             	sub    $0x2c,%esp
+    107d:	83 ec 2c             	sub    $0x2c,%esp
   printf(1, "fourfiles test\n");
-    1050:	c7 44 24 04 b4 47 00 	movl   $0x47b4,0x4(%esp)
-    1057:	00 
-    1058:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-  char *names[] = { "f0", "f1", "f2", "f3" };
-    105f:	c7 45 d8 ae 47 00 00 	movl   $0x47ae,-0x28(%ebp)
-    1066:	c7 45 dc f7 48 00 00 	movl   $0x48f7,-0x24(%ebp)
-    106d:	c7 45 e0 fb 48 00 00 	movl   $0x48fb,-0x20(%ebp)
-    1074:	c7 45 e4 b1 47 00 00 	movl   $0x47b1,-0x1c(%ebp)
+    1080:	c7 44 24 04 84 48 00 	movl   $0x4884,0x4(%esp)
+    1087:	00 
+    1088:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+  char *names[] = {"f0", "f1", "f2", "f3"};
+    108f:	c7 45 d8 7e 48 00 00 	movl   $0x487e,-0x28(%ebp)
+    1096:	c7 45 dc c7 49 00 00 	movl   $0x49c7,-0x24(%ebp)
+    109d:	c7 45 e0 cb 49 00 00 	movl   $0x49cb,-0x20(%ebp)
+    10a4:	c7 45 e4 81 48 00 00 	movl   $0x4881,-0x1c(%ebp)
   printf(1, "fourfiles test\n");
-    107b:	e8 60 2f 00 00       	call   3fe0 <printf>
+    10ab:	e8 00 30 00 00       	call   40b0 <printf>
     unlink(fname);
-    1080:	89 34 24             	mov    %esi,(%esp)
-    1083:	e8 5a 2e 00 00       	call   3ee2 <unlink>
+    10b0:	89 34 24             	mov    %esi,(%esp)
+    10b3:	e8 fa 2e 00 00       	call   3fb2 <unlink>
     pid = fork();
-    1088:	e8 fd 2d 00 00       	call   3e8a <fork>
-    if(pid < 0){
-    108d:	85 c0                	test   %eax,%eax
-    108f:	0f 88 9f 01 00 00    	js     1234 <fourfiles+0x1f4>
-    if(pid == 0){
-    1095:	0f 84 eb 00 00 00    	je     1186 <fourfiles+0x146>
-  for(pi = 0; pi < 4; pi++){
-    109b:	83 c3 01             	add    $0x1,%ebx
-    109e:	83 fb 04             	cmp    $0x4,%ebx
-    10a1:	74 06                	je     10a9 <fourfiles+0x69>
-    10a3:	8b 74 9d d8          	mov    -0x28(%ebp,%ebx,4),%esi
-    10a7:	eb d7                	jmp    1080 <fourfiles+0x40>
-    wait();
-    10a9:	e8 ec 2d 00 00       	call   3e9a <wait>
-    10ae:	bf 30 00 00 00       	mov    $0x30,%edi
-    10b3:	e8 e2 2d 00 00       	call   3e9a <wait>
-    10b8:	e8 dd 2d 00 00       	call   3e9a <wait>
-    10bd:	e8 d8 2d 00 00       	call   3e9a <wait>
-    10c2:	c7 45 d4 ae 47 00 00 	movl   $0x47ae,-0x2c(%ebp)
+    10b8:	e8 9d 2e 00 00       	call   3f5a <fork>
+    if (pid < 0)
+    10bd:	85 c0                	test   %eax,%eax
+    10bf:	0f 88 9b 01 00 00    	js     1260 <fourfiles+0x1f0>
+    if (pid == 0)
+    10c5:	0f 84 0b 01 00 00    	je     11d6 <fourfiles+0x166>
+  for (pi = 0; pi < 4; pi++)
+    10cb:	83 c3 01             	add    $0x1,%ebx
+    10ce:	83 fb 04             	cmp    $0x4,%ebx
+    10d1:	74 06                	je     10d9 <fourfiles+0x69>
+    10d3:	8b 74 9d d8          	mov    -0x28(%ebp,%ebx,4),%esi
+    10d7:	eb d7                	jmp    10b0 <fourfiles+0x40>
+    wait(0);
+    10d9:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    10e0:	bf 30 00 00 00       	mov    $0x30,%edi
+    10e5:	e8 80 2e 00 00       	call   3f6a <wait>
+    10ea:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    10f1:	e8 74 2e 00 00       	call   3f6a <wait>
+    10f6:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    10fd:	e8 68 2e 00 00       	call   3f6a <wait>
+    1102:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    1109:	e8 5c 2e 00 00       	call   3f6a <wait>
+    110e:	c7 45 d4 7e 48 00 00 	movl   $0x487e,-0x2c(%ebp)
     fd = open(fname, 0);
-    10c9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+    1115:	8b 45 d4             	mov    -0x2c(%ebp),%eax
     total = 0;
-    10cc:	31 db                	xor    %ebx,%ebx
+    1118:	31 db                	xor    %ebx,%ebx
     fd = open(fname, 0);
-    10ce:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-    10d5:	00 
-    10d6:	89 04 24             	mov    %eax,(%esp)
-    10d9:	e8 f4 2d 00 00       	call   3ed2 <open>
-    10de:	89 c6                	mov    %eax,%esi
-    while((n = read(fd, buf, sizeof(buf))) > 0){
-    10e0:	c7 44 24 08 00 20 00 	movl   $0x2000,0x8(%esp)
-    10e7:	00 
-    10e8:	c7 44 24 04 a0 8b 00 	movl   $0x8ba0,0x4(%esp)
-    10ef:	00 
-    10f0:	89 34 24             	mov    %esi,(%esp)
-    10f3:	e8 b2 2d 00 00       	call   3eaa <read>
-    10f8:	85 c0                	test   %eax,%eax
-    10fa:	7e 1a                	jle    1116 <fourfiles+0xd6>
-    10fc:	31 d2                	xor    %edx,%edx
-    10fe:	66 90                	xchg   %ax,%ax
-        if(buf[j] != '0'+i){
-    1100:	0f be 8a a0 8b 00 00 	movsbl 0x8ba0(%edx),%ecx
-    1107:	39 cf                	cmp    %ecx,%edi
-    1109:	75 5b                	jne    1166 <fourfiles+0x126>
-      for(j = 0; j < n; j++){
-    110b:	83 c2 01             	add    $0x1,%edx
-    110e:	39 c2                	cmp    %eax,%edx
-    1110:	75 ee                	jne    1100 <fourfiles+0xc0>
+    111a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+    1121:	00 
+    1122:	89 04 24             	mov    %eax,(%esp)
+    1125:	e8 78 2e 00 00       	call   3fa2 <open>
+    112a:	89 c6                	mov    %eax,%esi
+    112c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    while ((n = read(fd, buf, sizeof(buf))) > 0)
+    1130:	c7 44 24 08 00 20 00 	movl   $0x2000,0x8(%esp)
+    1137:	00 
+    1138:	c7 44 24 04 80 8c 00 	movl   $0x8c80,0x4(%esp)
+    113f:	00 
+    1140:	89 34 24             	mov    %esi,(%esp)
+    1143:	e8 32 2e 00 00       	call   3f7a <read>
+    1148:	85 c0                	test   %eax,%eax
+    114a:	7e 1a                	jle    1166 <fourfiles+0xf6>
+    114c:	31 d2                	xor    %edx,%edx
+    114e:	66 90                	xchg   %ax,%ax
+        if (buf[j] != '0' + i)
+    1150:	0f be 8a 80 8c 00 00 	movsbl 0x8c80(%edx),%ecx
+    1157:	39 f9                	cmp    %edi,%ecx
+    1159:	75 5b                	jne    11b6 <fourfiles+0x146>
+      for (j = 0; j < n; j++)
+    115b:	83 c2 01             	add    $0x1,%edx
+    115e:	39 c2                	cmp    %eax,%edx
+    1160:	75 ee                	jne    1150 <fourfiles+0xe0>
       total += n;
-    1112:	01 d3                	add    %edx,%ebx
-    1114:	eb ca                	jmp    10e0 <fourfiles+0xa0>
+    1162:	01 d3                	add    %edx,%ebx
+    1164:	eb ca                	jmp    1130 <fourfiles+0xc0>
     close(fd);
-    1116:	89 34 24             	mov    %esi,(%esp)
-    1119:	e8 9c 2d 00 00       	call   3eba <close>
-    if(total != 12*500){
-    111e:	81 fb 70 17 00 00    	cmp    $0x1770,%ebx
-    1124:	0f 85 e6 00 00 00    	jne    1210 <fourfiles+0x1d0>
+    1166:	89 34 24             	mov    %esi,(%esp)
+    1169:	e8 1c 2e 00 00       	call   3f8a <close>
+    if (total != 12 * 500)
+    116e:	81 fb 70 17 00 00    	cmp    $0x1770,%ebx
+    1174:	0f 85 06 01 00 00    	jne    1280 <fourfiles+0x210>
     unlink(fname);
-    112a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
-    112d:	89 04 24             	mov    %eax,(%esp)
-    1130:	e8 ad 2d 00 00       	call   3ee2 <unlink>
-  for(i = 0; i < 2; i++){
-    1135:	83 ff 31             	cmp    $0x31,%edi
-    1138:	75 1c                	jne    1156 <fourfiles+0x116>
+    117a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+    117d:	89 04 24             	mov    %eax,(%esp)
+    1180:	e8 2d 2e 00 00       	call   3fb2 <unlink>
+  for (i = 0; i < 2; i++)
+    1185:	83 ff 31             	cmp    $0x31,%edi
+    1188:	75 1c                	jne    11a6 <fourfiles+0x136>
   printf(1, "fourfiles ok\n");
-    113a:	c7 44 24 04 f2 47 00 	movl   $0x47f2,0x4(%esp)
-    1141:	00 
-    1142:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    1149:	e8 92 2e 00 00       	call   3fe0 <printf>
+    118a:	c7 44 24 04 c2 48 00 	movl   $0x48c2,0x4(%esp)
+    1191:	00 
+    1192:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    1199:	e8 12 2f 00 00       	call   40b0 <printf>
 }
-    114e:	83 c4 2c             	add    $0x2c,%esp
-    1151:	5b                   	pop    %ebx
-    1152:	5e                   	pop    %esi
-    1153:	5f                   	pop    %edi
-    1154:	5d                   	pop    %ebp
-    1155:	c3                   	ret    
-    1156:	8b 45 dc             	mov    -0x24(%ebp),%eax
-    1159:	bf 31 00 00 00       	mov    $0x31,%edi
-    115e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
-    1161:	e9 63 ff ff ff       	jmp    10c9 <fourfiles+0x89>
+    119e:	83 c4 2c             	add    $0x2c,%esp
+    11a1:	5b                   	pop    %ebx
+    11a2:	5e                   	pop    %esi
+    11a3:	5f                   	pop    %edi
+    11a4:	5d                   	pop    %ebp
+    11a5:	c3                   	ret    
+    11a6:	8b 45 dc             	mov    -0x24(%ebp),%eax
+    11a9:	bf 31 00 00 00       	mov    $0x31,%edi
+    11ae:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    11b1:	e9 5f ff ff ff       	jmp    1115 <fourfiles+0xa5>
           printf(1, "wrong char\n");
-    1166:	c7 44 24 04 d5 47 00 	movl   $0x47d5,0x4(%esp)
-    116d:	00 
-    116e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    1175:	e8 66 2e 00 00       	call   3fe0 <printf>
+    11b6:	c7 44 24 04 a5 48 00 	movl   $0x48a5,0x4(%esp)
+    11bd:	00 
+    11be:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    11c5:	e8 e6 2e 00 00       	call   40b0 <printf>
           exit(0);
-    117a:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    1181:	e8 0c 2d 00 00       	call   3e92 <exit>
+    11ca:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    11d1:	e8 8c 2d 00 00       	call   3f62 <exit>
       fd = open(fname, O_CREATE | O_RDWR);
-    1186:	89 34 24             	mov    %esi,(%esp)
-    1189:	c7 44 24 04 02 02 00 	movl   $0x202,0x4(%esp)
-    1190:	00 
-    1191:	e8 3c 2d 00 00       	call   3ed2 <open>
-      if(fd < 0){
-    1196:	85 c0                	test   %eax,%eax
+    11d6:	89 34 24             	mov    %esi,(%esp)
+    11d9:	c7 44 24 04 02 02 00 	movl   $0x202,0x4(%esp)
+    11e0:	00 
+    11e1:	e8 bc 2d 00 00       	call   3fa2 <open>
+      if (fd < 0)
+    11e6:	85 c0                	test   %eax,%eax
       fd = open(fname, O_CREATE | O_RDWR);
-    1198:	89 c6                	mov    %eax,%esi
-      if(fd < 0){
-    119a:	0f 88 b4 00 00 00    	js     1254 <fourfiles+0x214>
-      memset(buf, '0'+pi, 512);
-    11a0:	83 c3 30             	add    $0x30,%ebx
-    11a3:	89 5c 24 04          	mov    %ebx,0x4(%esp)
-    11a7:	bb 0c 00 00 00       	mov    $0xc,%ebx
-    11ac:	c7 44 24 08 00 02 00 	movl   $0x200,0x8(%esp)
-    11b3:	00 
-    11b4:	c7 04 24 a0 8b 00 00 	movl   $0x8ba0,(%esp)
-    11bb:	e8 60 2b 00 00       	call   3d20 <memset>
-    11c0:	eb 0b                	jmp    11cd <fourfiles+0x18d>
-    11c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-      for(i = 0; i < 12; i++){
-    11c8:	83 eb 01             	sub    $0x1,%ebx
-    11cb:	74 ad                	je     117a <fourfiles+0x13a>
-        if((n = write(fd, buf, 500)) != 500){
-    11cd:	c7 44 24 08 f4 01 00 	movl   $0x1f4,0x8(%esp)
-    11d4:	00 
-    11d5:	c7 44 24 04 a0 8b 00 	movl   $0x8ba0,0x4(%esp)
-    11dc:	00 
-    11dd:	89 34 24             	mov    %esi,(%esp)
-    11e0:	e8 cd 2c 00 00       	call   3eb2 <write>
-    11e5:	3d f4 01 00 00       	cmp    $0x1f4,%eax
-    11ea:	74 dc                	je     11c8 <fourfiles+0x188>
+    11e8:	89 c6                	mov    %eax,%esi
+      if (fd < 0)
+    11ea:	0f 88 b4 00 00 00    	js     12a4 <fourfiles+0x234>
+      memset(buf, '0' + pi, 512);
+    11f0:	83 c3 30             	add    $0x30,%ebx
+    11f3:	89 5c 24 04          	mov    %ebx,0x4(%esp)
+    11f7:	bb 0c 00 00 00       	mov    $0xc,%ebx
+    11fc:	c7 44 24 08 00 02 00 	movl   $0x200,0x8(%esp)
+    1203:	00 
+    1204:	c7 04 24 80 8c 00 00 	movl   $0x8c80,(%esp)
+    120b:	e8 e0 2b 00 00       	call   3df0 <memset>
+    1210:	eb 0b                	jmp    121d <fourfiles+0x1ad>
+    1212:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      for (i = 0; i < 12; i++)
+    1218:	83 eb 01             	sub    $0x1,%ebx
+    121b:	74 ad                	je     11ca <fourfiles+0x15a>
+        if ((n = write(fd, buf, 500)) != 500)
+    121d:	c7 44 24 08 f4 01 00 	movl   $0x1f4,0x8(%esp)
+    1224:	00 
+    1225:	c7 44 24 04 80 8c 00 	movl   $0x8c80,0x4(%esp)
+    122c:	00 
+    122d:	89 34 24             	mov    %esi,(%esp)
+    1230:	e8 4d 2d 00 00       	call   3f82 <write>
+    1235:	3d f4 01 00 00       	cmp    $0x1f4,%eax
+    123a:	74 dc                	je     1218 <fourfiles+0x1a8>
           printf(1, "write failed %d\n", n);
-    11ec:	89 44 24 08          	mov    %eax,0x8(%esp)
-    11f0:	c7 44 24 04 c4 47 00 	movl   $0x47c4,0x4(%esp)
-    11f7:	00 
-    11f8:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    11ff:	e8 dc 2d 00 00       	call   3fe0 <printf>
+    123c:	89 44 24 08          	mov    %eax,0x8(%esp)
+    1240:	c7 44 24 04 94 48 00 	movl   $0x4894,0x4(%esp)
+    1247:	00 
+    1248:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    124f:	e8 5c 2e 00 00       	call   40b0 <printf>
           exit(0);
-    1204:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    120b:	e8 82 2c 00 00       	call   3e92 <exit>
-      printf(1, "wrong length %d\n", total);
-    1210:	89 5c 24 08          	mov    %ebx,0x8(%esp)
-    1214:	c7 44 24 04 e1 47 00 	movl   $0x47e1,0x4(%esp)
-    121b:	00 
-    121c:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    1223:	e8 b8 2d 00 00       	call   3fe0 <printf>
-      exit(0);
-    1228:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    122f:	e8 5e 2c 00 00       	call   3e92 <exit>
+    1254:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    125b:	e8 02 2d 00 00       	call   3f62 <exit>
       printf(1, "fork failed\n");
-    1234:	c7 44 24 04 89 52 00 	movl   $0x5289,0x4(%esp)
-    123b:	00 
-    123c:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    1243:	e8 98 2d 00 00       	call   3fe0 <printf>
+    1260:	c7 44 24 04 59 53 00 	movl   $0x5359,0x4(%esp)
+    1267:	00 
+    1268:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    126f:	e8 3c 2e 00 00       	call   40b0 <printf>
       exit(0);
-    1248:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    124f:	e8 3e 2c 00 00       	call   3e92 <exit>
+    1274:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    127b:	e8 e2 2c 00 00       	call   3f62 <exit>
+      printf(1, "wrong length %d\n", total);
+    1280:	89 5c 24 08          	mov    %ebx,0x8(%esp)
+    1284:	c7 44 24 04 b1 48 00 	movl   $0x48b1,0x4(%esp)
+    128b:	00 
+    128c:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    1293:	e8 18 2e 00 00       	call   40b0 <printf>
+      exit(0);
+    1298:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    129f:	e8 be 2c 00 00       	call   3f62 <exit>
         printf(1, "create failed\n");
-    1254:	c7 44 24 04 4f 4a 00 	movl   $0x4a4f,0x4(%esp)
-    125b:	00 
-    125c:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    1263:	e8 78 2d 00 00       	call   3fe0 <printf>
+    12a4:	c7 44 24 04 1f 4b 00 	movl   $0x4b1f,0x4(%esp)
+    12ab:	00 
+    12ac:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    12b3:	e8 f8 2d 00 00       	call   40b0 <printf>
         exit(0);
-    1268:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    126f:	e8 1e 2c 00 00       	call   3e92 <exit>
-    1274:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    127a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+    12b8:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    12bf:	e8 9e 2c 00 00       	call   3f62 <exit>
+    12c4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    12ca:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
 
-00001280 <createdelete>:
+000012d0 <createdelete>:
 {
-    1280:	55                   	push   %ebp
-    1281:	89 e5                	mov    %esp,%ebp
-    1283:	57                   	push   %edi
-    1284:	56                   	push   %esi
-    1285:	53                   	push   %ebx
-  for(pi = 0; pi < 4; pi++){
-    1286:	31 db                	xor    %ebx,%ebx
+    12d0:	55                   	push   %ebp
+    12d1:	89 e5                	mov    %esp,%ebp
+    12d3:	57                   	push   %edi
+    12d4:	56                   	push   %esi
+    12d5:	53                   	push   %ebx
+  for (pi = 0; pi < 4; pi++)
+    12d6:	31 db                	xor    %ebx,%ebx
 {
-    1288:	83 ec 4c             	sub    $0x4c,%esp
+    12d8:	83 ec 4c             	sub    $0x4c,%esp
   printf(1, "createdelete test\n");
-    128b:	c7 44 24 04 00 48 00 	movl   $0x4800,0x4(%esp)
-    1292:	00 
-    1293:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    129a:	e8 41 2d 00 00       	call   3fe0 <printf>
+    12db:	c7 44 24 04 d0 48 00 	movl   $0x48d0,0x4(%esp)
+    12e2:	00 
+    12e3:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    12ea:	e8 c1 2d 00 00       	call   40b0 <printf>
     pid = fork();
-    129f:	e8 e6 2b 00 00       	call   3e8a <fork>
-    if(pid < 0){
-    12a4:	85 c0                	test   %eax,%eax
-    12a6:	0f 88 e8 01 00 00    	js     1494 <createdelete+0x214>
-    12ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    if(pid == 0){
-    12b0:	0f 84 14 01 00 00    	je     13ca <createdelete+0x14a>
-  for(pi = 0; pi < 4; pi++){
-    12b6:	83 c3 01             	add    $0x1,%ebx
-    12b9:	83 fb 04             	cmp    $0x4,%ebx
-    12bc:	75 e1                	jne    129f <createdelete+0x1f>
-    12be:	66 90                	xchg   %ax,%ax
-    wait();
-    12c0:	e8 d5 2b 00 00       	call   3e9a <wait>
-  for(i = 0; i < N; i++){
-    12c5:	31 f6                	xor    %esi,%esi
-    wait();
-    12c7:	e8 ce 2b 00 00       	call   3e9a <wait>
-    12cc:	8d 7d c8             	lea    -0x38(%ebp),%edi
-    12cf:	e8 c6 2b 00 00       	call   3e9a <wait>
-    12d4:	e8 c1 2b 00 00       	call   3e9a <wait>
+    12ef:	e8 66 2c 00 00       	call   3f5a <fork>
+    if (pid < 0)
+    12f4:	85 c0                	test   %eax,%eax
+    12f6:	0f 88 00 02 00 00    	js     14fc <createdelete+0x22c>
+    12fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if (pid == 0)
+    1300:	0f 84 2c 01 00 00    	je     1432 <createdelete+0x162>
+  for (pi = 0; pi < 4; pi++)
+    1306:	83 c3 01             	add    $0x1,%ebx
+    1309:	83 fb 04             	cmp    $0x4,%ebx
+    130c:	75 e1                	jne    12ef <createdelete+0x1f>
+    wait(0);
+    130e:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  for (i = 0; i < N; i++)
+    1315:	31 f6                	xor    %esi,%esi
+    wait(0);
+    1317:	e8 4e 2c 00 00       	call   3f6a <wait>
+    131c:	8d 7d c8             	lea    -0x38(%ebp),%edi
+    131f:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    1326:	e8 3f 2c 00 00       	call   3f6a <wait>
+    132b:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    1332:	e8 33 2c 00 00       	call   3f6a <wait>
+    1337:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    133e:	e8 27 2c 00 00       	call   3f6a <wait>
   name[0] = name[1] = name[2] = 0;
-    12d9:	c6 45 ca 00          	movb   $0x0,-0x36(%ebp)
-    12dd:	8d 76 00             	lea    0x0(%esi),%esi
-    12e0:	85 f6                	test   %esi,%esi
+    1343:	c6 45 ca 00          	movb   $0x0,-0x36(%ebp)
+    1347:	90                   	nop
+    1348:	83 fe 09             	cmp    $0x9,%esi
       name[2] = '\0';
-    12e2:	bb 70 00 00 00       	mov    $0x70,%ebx
-    12e7:	8d 46 30             	lea    0x30(%esi),%eax
-    12ea:	0f 94 45 c7          	sete   -0x39(%ebp)
-    12ee:	83 fe 09             	cmp    $0x9,%esi
-    12f1:	88 45 c6             	mov    %al,-0x3a(%ebp)
-    12f4:	0f 9f c0             	setg   %al
-    12f7:	08 45 c7             	or     %al,-0x39(%ebp)
-    12fa:	8d 46 ff             	lea    -0x1(%esi),%eax
-    12fd:	89 45 c0             	mov    %eax,-0x40(%ebp)
+    134b:	bb 70 00 00 00       	mov    $0x70,%ebx
+    1350:	8d 46 30             	lea    0x30(%esi),%eax
+    1353:	0f 9f 45 c7          	setg   -0x39(%ebp)
+    1357:	85 f6                	test   %esi,%esi
+    1359:	88 45 c6             	mov    %al,-0x3a(%ebp)
+    135c:	0f 94 c0             	sete   %al
+    135f:	08 45 c7             	or     %al,-0x39(%ebp)
+    1362:	8d 46 ff             	lea    -0x1(%esi),%eax
+    1365:	89 45 c0             	mov    %eax,-0x40(%ebp)
       name[1] = '0' + i;
-    1300:	0f b6 45 c6          	movzbl -0x3a(%ebp),%eax
+    1368:	0f b6 45 c6          	movzbl -0x3a(%ebp),%eax
       fd = open(name, 0);
-    1304:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-    130b:	00 
-    130c:	89 3c 24             	mov    %edi,(%esp)
+    136c:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+    1373:	00 
+    1374:	89 3c 24             	mov    %edi,(%esp)
       name[0] = 'p' + pi;
-    130f:	88 5d c8             	mov    %bl,-0x38(%ebp)
+    1377:	88 5d c8             	mov    %bl,-0x38(%ebp)
       name[1] = '0' + i;
-    1312:	88 45 c9             	mov    %al,-0x37(%ebp)
+    137a:	88 45 c9             	mov    %al,-0x37(%ebp)
       fd = open(name, 0);
-    1315:	e8 b8 2b 00 00       	call   3ed2 <open>
-      if((i == 0 || i >= N/2) && fd < 0){
-    131a:	80 7d c7 00          	cmpb   $0x0,-0x39(%ebp)
-    131e:	0f 84 84 00 00 00    	je     13a8 <createdelete+0x128>
-    1324:	85 c0                	test   %eax,%eax
-    1326:	0f 88 24 01 00 00    	js     1450 <createdelete+0x1d0>
-      } else if((i >= 1 && i < N/2) && fd >= 0){
-    132c:	83 7d c0 08          	cmpl   $0x8,-0x40(%ebp)
-    1330:	0f 86 7e 01 00 00    	jbe    14b4 <createdelete+0x234>
+    137d:	e8 20 2c 00 00       	call   3fa2 <open>
+      if ((i == 0 || i >= N / 2) && fd < 0)
+    1382:	80 7d c7 00          	cmpb   $0x0,-0x39(%ebp)
+    1386:	0f 84 84 00 00 00    	je     1410 <createdelete+0x140>
+    138c:	85 c0                	test   %eax,%eax
+    138e:	0f 88 24 01 00 00    	js     14b8 <createdelete+0x1e8>
+      else if ((i >= 1 && i < N / 2) && fd >= 0)
+    1394:	83 7d c0 08          	cmpl   $0x8,-0x40(%ebp)
+    1398:	0f 86 7e 01 00 00    	jbe    151c <createdelete+0x24c>
         close(fd);
-    1336:	89 04 24             	mov    %eax,(%esp)
-    1339:	83 c3 01             	add    $0x1,%ebx
-    133c:	e8 79 2b 00 00       	call   3eba <close>
-    for(pi = 0; pi < 4; pi++){
-    1341:	80 fb 74             	cmp    $0x74,%bl
-    1344:	75 ba                	jne    1300 <createdelete+0x80>
-  for(i = 0; i < N; i++){
-    1346:	83 c6 01             	add    $0x1,%esi
-    1349:	83 fe 14             	cmp    $0x14,%esi
-    134c:	75 92                	jne    12e0 <createdelete+0x60>
-    134e:	be 70 00 00 00       	mov    $0x70,%esi
-    1353:	90                   	nop
-    1354:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    1358:	8d 46 c0             	lea    -0x40(%esi),%eax
-    135b:	bb 04 00 00 00       	mov    $0x4,%ebx
-    1360:	88 45 c7             	mov    %al,-0x39(%ebp)
+    139e:	89 04 24             	mov    %eax,(%esp)
+    13a1:	83 c3 01             	add    $0x1,%ebx
+    13a4:	e8 e1 2b 00 00       	call   3f8a <close>
+    for (pi = 0; pi < 4; pi++)
+    13a9:	80 fb 74             	cmp    $0x74,%bl
+    13ac:	75 ba                	jne    1368 <createdelete+0x98>
+  for (i = 0; i < N; i++)
+    13ae:	83 c6 01             	add    $0x1,%esi
+    13b1:	83 fe 14             	cmp    $0x14,%esi
+    13b4:	75 92                	jne    1348 <createdelete+0x78>
+    13b6:	be 70 00 00 00       	mov    $0x70,%esi
+    13bb:	90                   	nop
+    13bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    13c0:	8d 46 c0             	lea    -0x40(%esi),%eax
+    13c3:	bb 04 00 00 00       	mov    $0x4,%ebx
+    13c8:	88 45 c7             	mov    %al,-0x39(%ebp)
       name[0] = 'p' + i;
-    1363:	89 f0                	mov    %esi,%eax
-    1365:	88 45 c8             	mov    %al,-0x38(%ebp)
+    13cb:	89 f0                	mov    %esi,%eax
+    13cd:	88 45 c8             	mov    %al,-0x38(%ebp)
       name[1] = '0' + i;
-    1368:	0f b6 45 c7          	movzbl -0x39(%ebp),%eax
+    13d0:	0f b6 45 c7          	movzbl -0x39(%ebp),%eax
       unlink(name);
-    136c:	89 3c 24             	mov    %edi,(%esp)
+    13d4:	89 3c 24             	mov    %edi,(%esp)
       name[1] = '0' + i;
-    136f:	88 45 c9             	mov    %al,-0x37(%ebp)
+    13d7:	88 45 c9             	mov    %al,-0x37(%ebp)
       unlink(name);
-    1372:	e8 6b 2b 00 00       	call   3ee2 <unlink>
-    for(pi = 0; pi < 4; pi++){
-    1377:	83 eb 01             	sub    $0x1,%ebx
-    137a:	75 e7                	jne    1363 <createdelete+0xe3>
-    137c:	83 c6 01             	add    $0x1,%esi
-  for(i = 0; i < N; i++){
-    137f:	89 f0                	mov    %esi,%eax
-    1381:	3c 84                	cmp    $0x84,%al
-    1383:	75 d3                	jne    1358 <createdelete+0xd8>
+    13da:	e8 d3 2b 00 00       	call   3fb2 <unlink>
+    for (pi = 0; pi < 4; pi++)
+    13df:	83 eb 01             	sub    $0x1,%ebx
+    13e2:	75 e7                	jne    13cb <createdelete+0xfb>
+    13e4:	83 c6 01             	add    $0x1,%esi
+  for (i = 0; i < N; i++)
+    13e7:	89 f0                	mov    %esi,%eax
+    13e9:	3c 84                	cmp    $0x84,%al
+    13eb:	75 d3                	jne    13c0 <createdelete+0xf0>
   printf(1, "createdelete ok\n");
-    1385:	c7 44 24 04 13 48 00 	movl   $0x4813,0x4(%esp)
-    138c:	00 
-    138d:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    1394:	e8 47 2c 00 00       	call   3fe0 <printf>
+    13ed:	c7 44 24 04 e3 48 00 	movl   $0x48e3,0x4(%esp)
+    13f4:	00 
+    13f5:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    13fc:	e8 af 2c 00 00       	call   40b0 <printf>
 }
-    1399:	83 c4 4c             	add    $0x4c,%esp
-    139c:	5b                   	pop    %ebx
-    139d:	5e                   	pop    %esi
-    139e:	5f                   	pop    %edi
-    139f:	5d                   	pop    %ebp
-    13a0:	c3                   	ret    
-    13a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-      } else if((i >= 1 && i < N/2) && fd >= 0){
-    13a8:	85 c0                	test   %eax,%eax
-    13aa:	0f 89 04 01 00 00    	jns    14b4 <createdelete+0x234>
-    13b0:	83 c3 01             	add    $0x1,%ebx
-    for(pi = 0; pi < 4; pi++){
-    13b3:	80 fb 74             	cmp    $0x74,%bl
-    13b6:	0f 85 44 ff ff ff    	jne    1300 <createdelete+0x80>
-  for(i = 0; i < N; i++){
-    13bc:	83 c6 01             	add    $0x1,%esi
-    13bf:	83 fe 14             	cmp    $0x14,%esi
-    13c2:	0f 85 18 ff ff ff    	jne    12e0 <createdelete+0x60>
-    13c8:	eb 84                	jmp    134e <createdelete+0xce>
+    1401:	83 c4 4c             	add    $0x4c,%esp
+    1404:	5b                   	pop    %ebx
+    1405:	5e                   	pop    %esi
+    1406:	5f                   	pop    %edi
+    1407:	5d                   	pop    %ebp
+    1408:	c3                   	ret    
+    1409:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      else if ((i >= 1 && i < N / 2) && fd >= 0)
+    1410:	85 c0                	test   %eax,%eax
+    1412:	0f 89 04 01 00 00    	jns    151c <createdelete+0x24c>
+    1418:	83 c3 01             	add    $0x1,%ebx
+    for (pi = 0; pi < 4; pi++)
+    141b:	80 fb 74             	cmp    $0x74,%bl
+    141e:	0f 85 44 ff ff ff    	jne    1368 <createdelete+0x98>
+  for (i = 0; i < N; i++)
+    1424:	83 c6 01             	add    $0x1,%esi
+    1427:	83 fe 14             	cmp    $0x14,%esi
+    142a:	0f 85 18 ff ff ff    	jne    1348 <createdelete+0x78>
+    1430:	eb 84                	jmp    13b6 <createdelete+0xe6>
       name[0] = 'p' + pi;
-    13ca:	83 c3 70             	add    $0x70,%ebx
+    1432:	83 c3 70             	add    $0x70,%ebx
       name[2] = '\0';
-    13cd:	be 01 00 00 00       	mov    $0x1,%esi
+    1435:	be 01 00 00 00       	mov    $0x1,%esi
       name[0] = 'p' + pi;
-    13d2:	88 5d c8             	mov    %bl,-0x38(%ebp)
-    13d5:	8d 7d c8             	lea    -0x38(%ebp),%edi
+    143a:	88 5d c8             	mov    %bl,-0x38(%ebp)
+    143d:	8d 7d c8             	lea    -0x38(%ebp),%edi
       name[2] = '\0';
-    13d8:	31 db                	xor    %ebx,%ebx
-    13da:	c6 45 ca 00          	movb   $0x0,-0x36(%ebp)
-    13de:	eb 0f                	jmp    13ef <createdelete+0x16f>
-      for(i = 0; i < N; i++){
-    13e0:	83 fe 14             	cmp    $0x14,%esi
-    13e3:	0f 84 7f 00 00 00    	je     1468 <createdelete+0x1e8>
-    13e9:	83 c3 01             	add    $0x1,%ebx
-    13ec:	83 c6 01             	add    $0x1,%esi
-    13ef:	8d 43 30             	lea    0x30(%ebx),%eax
+    1440:	31 db                	xor    %ebx,%ebx
+    1442:	c6 45 ca 00          	movb   $0x0,-0x36(%ebp)
+    1446:	eb 0f                	jmp    1457 <createdelete+0x187>
+      for (i = 0; i < N; i++)
+    1448:	83 fe 14             	cmp    $0x14,%esi
+    144b:	0f 84 7f 00 00 00    	je     14d0 <createdelete+0x200>
+    1451:	83 c3 01             	add    $0x1,%ebx
+    1454:	83 c6 01             	add    $0x1,%esi
+    1457:	8d 43 30             	lea    0x30(%ebx),%eax
         fd = open(name, O_CREATE | O_RDWR);
-    13f2:	c7 44 24 04 02 02 00 	movl   $0x202,0x4(%esp)
-    13f9:	00 
-    13fa:	89 3c 24             	mov    %edi,(%esp)
-    13fd:	88 45 c9             	mov    %al,-0x37(%ebp)
-    1400:	e8 cd 2a 00 00       	call   3ed2 <open>
-        if(fd < 0){
-    1405:	85 c0                	test   %eax,%eax
-    1407:	78 6b                	js     1474 <createdelete+0x1f4>
+    145a:	c7 44 24 04 02 02 00 	movl   $0x202,0x4(%esp)
+    1461:	00 
+    1462:	89 3c 24             	mov    %edi,(%esp)
+    1465:	88 45 c9             	mov    %al,-0x37(%ebp)
+    1468:	e8 35 2b 00 00       	call   3fa2 <open>
+        if (fd < 0)
+    146d:	85 c0                	test   %eax,%eax
+    146f:	78 6b                	js     14dc <createdelete+0x20c>
         close(fd);
-    1409:	89 04 24             	mov    %eax,(%esp)
-    140c:	e8 a9 2a 00 00       	call   3eba <close>
-        if(i > 0 && (i % 2 ) == 0){
-    1411:	85 db                	test   %ebx,%ebx
-    1413:	74 d4                	je     13e9 <createdelete+0x169>
-    1415:	f6 c3 01             	test   $0x1,%bl
-    1418:	75 c6                	jne    13e0 <createdelete+0x160>
+    1471:	89 04 24             	mov    %eax,(%esp)
+    1474:	e8 11 2b 00 00       	call   3f8a <close>
+        if (i > 0 && (i % 2) == 0)
+    1479:	85 db                	test   %ebx,%ebx
+    147b:	74 d4                	je     1451 <createdelete+0x181>
+    147d:	f6 c3 01             	test   $0x1,%bl
+    1480:	75 c6                	jne    1448 <createdelete+0x178>
           name[1] = '0' + (i / 2);
-    141a:	89 d8                	mov    %ebx,%eax
-    141c:	d1 f8                	sar    %eax
-    141e:	83 c0 30             	add    $0x30,%eax
-          if(unlink(name) < 0){
-    1421:	89 3c 24             	mov    %edi,(%esp)
+    1482:	89 d8                	mov    %ebx,%eax
+    1484:	d1 f8                	sar    %eax
+    1486:	83 c0 30             	add    $0x30,%eax
+          if (unlink(name) < 0)
+    1489:	89 3c 24             	mov    %edi,(%esp)
           name[1] = '0' + (i / 2);
-    1424:	88 45 c9             	mov    %al,-0x37(%ebp)
-          if(unlink(name) < 0){
-    1427:	e8 b6 2a 00 00       	call   3ee2 <unlink>
-    142c:	85 c0                	test   %eax,%eax
-    142e:	79 b0                	jns    13e0 <createdelete+0x160>
+    148c:	88 45 c9             	mov    %al,-0x37(%ebp)
+          if (unlink(name) < 0)
+    148f:	e8 1e 2b 00 00       	call   3fb2 <unlink>
+    1494:	85 c0                	test   %eax,%eax
+    1496:	79 b0                	jns    1448 <createdelete+0x178>
             printf(1, "unlink failed\n");
-    1430:	c7 44 24 04 01 44 00 	movl   $0x4401,0x4(%esp)
-    1437:	00 
-    1438:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    143f:	e8 9c 2b 00 00       	call   3fe0 <printf>
+    1498:	c7 44 24 04 d1 44 00 	movl   $0x44d1,0x4(%esp)
+    149f:	00 
+    14a0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    14a7:	e8 04 2c 00 00       	call   40b0 <printf>
             exit(0);
-    1444:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    144b:	e8 42 2a 00 00       	call   3e92 <exit>
+    14ac:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    14b3:	e8 aa 2a 00 00       	call   3f62 <exit>
         printf(1, "oops createdelete %s didn't exist\n", name);
-    1450:	89 7c 24 08          	mov    %edi,0x8(%esp)
-    1454:	c7 44 24 04 c0 54 00 	movl   $0x54c0,0x4(%esp)
-    145b:	00 
-    145c:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    1463:	e8 78 2b 00 00       	call   3fe0 <printf>
+    14b8:	89 7c 24 08          	mov    %edi,0x8(%esp)
+    14bc:	c7 44 24 04 90 55 00 	movl   $0x5590,0x4(%esp)
+    14c3:	00 
+    14c4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    14cb:	e8 e0 2b 00 00       	call   40b0 <printf>
         exit(0);
-    1468:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    146f:	e8 1e 2a 00 00       	call   3e92 <exit>
+    14d0:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    14d7:	e8 86 2a 00 00       	call   3f62 <exit>
           printf(1, "create failed\n");
-    1474:	c7 44 24 04 4f 4a 00 	movl   $0x4a4f,0x4(%esp)
-    147b:	00 
-    147c:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    1483:	e8 58 2b 00 00       	call   3fe0 <printf>
+    14dc:	c7 44 24 04 1f 4b 00 	movl   $0x4b1f,0x4(%esp)
+    14e3:	00 
+    14e4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    14eb:	e8 c0 2b 00 00       	call   40b0 <printf>
           exit(0);
-    1488:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    148f:	e8 fe 29 00 00       	call   3e92 <exit>
+    14f0:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    14f7:	e8 66 2a 00 00       	call   3f62 <exit>
       printf(1, "fork failed\n");
-    1494:	c7 44 24 04 89 52 00 	movl   $0x5289,0x4(%esp)
-    149b:	00 
-    149c:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    14a3:	e8 38 2b 00 00       	call   3fe0 <printf>
+    14fc:	c7 44 24 04 59 53 00 	movl   $0x5359,0x4(%esp)
+    1503:	00 
+    1504:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    150b:	e8 a0 2b 00 00       	call   40b0 <printf>
       exit(0);
-    14a8:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    14af:	e8 de 29 00 00       	call   3e92 <exit>
+    1510:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    1517:	e8 46 2a 00 00       	call   3f62 <exit>
         printf(1, "oops createdelete %s did exist\n", name);
-    14b4:	89 7c 24 08          	mov    %edi,0x8(%esp)
-    14b8:	c7 44 24 04 e4 54 00 	movl   $0x54e4,0x4(%esp)
-    14bf:	00 
-    14c0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    14c7:	e8 14 2b 00 00       	call   3fe0 <printf>
+    151c:	89 7c 24 08          	mov    %edi,0x8(%esp)
+    1520:	c7 44 24 04 b4 55 00 	movl   $0x55b4,0x4(%esp)
+    1527:	00 
+    1528:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    152f:	e8 7c 2b 00 00       	call   40b0 <printf>
         exit(0);
-    14cc:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    14d3:	e8 ba 29 00 00       	call   3e92 <exit>
-    14d8:	90                   	nop
-    14d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    1534:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    153b:	e8 22 2a 00 00       	call   3f62 <exit>
 
-000014e0 <unlinkread>:
+00001540 <unlinkread>:
 {
-    14e0:	55                   	push   %ebp
-    14e1:	89 e5                	mov    %esp,%ebp
-    14e3:	56                   	push   %esi
-    14e4:	53                   	push   %ebx
-    14e5:	83 ec 10             	sub    $0x10,%esp
+    1540:	55                   	push   %ebp
+    1541:	89 e5                	mov    %esp,%ebp
+    1543:	56                   	push   %esi
+    1544:	53                   	push   %ebx
+    1545:	83 ec 10             	sub    $0x10,%esp
   printf(1, "unlinkread test\n");
-    14e8:	c7 44 24 04 24 48 00 	movl   $0x4824,0x4(%esp)
-    14ef:	00 
-    14f0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    14f7:	e8 e4 2a 00 00       	call   3fe0 <printf>
+    1548:	c7 44 24 04 f4 48 00 	movl   $0x48f4,0x4(%esp)
+    154f:	00 
+    1550:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    1557:	e8 54 2b 00 00       	call   40b0 <printf>
   fd = open("unlinkread", O_CREATE | O_RDWR);
-    14fc:	c7 44 24 04 02 02 00 	movl   $0x202,0x4(%esp)
-    1503:	00 
-    1504:	c7 04 24 35 48 00 00 	movl   $0x4835,(%esp)
-    150b:	e8 c2 29 00 00       	call   3ed2 <open>
-  if(fd < 0){
-    1510:	85 c0                	test   %eax,%eax
+    155c:	c7 44 24 04 02 02 00 	movl   $0x202,0x4(%esp)
+    1563:	00 
+    1564:	c7 04 24 05 49 00 00 	movl   $0x4905,(%esp)
+    156b:	e8 32 2a 00 00       	call   3fa2 <open>
+  if (fd < 0)
+    1570:	85 c0                	test   %eax,%eax
   fd = open("unlinkread", O_CREATE | O_RDWR);
-    1512:	89 c3                	mov    %eax,%ebx
-  if(fd < 0){
-    1514:	0f 88 02 01 00 00    	js     161c <unlinkread+0x13c>
+    1572:	89 c3                	mov    %eax,%ebx
+  if (fd < 0)
+    1574:	0f 88 02 01 00 00    	js     167c <unlinkread+0x13c>
   write(fd, "hello", 5);
-    151a:	c7 44 24 08 05 00 00 	movl   $0x5,0x8(%esp)
-    1521:	00 
-    1522:	c7 44 24 04 5a 48 00 	movl   $0x485a,0x4(%esp)
-    1529:	00 
-    152a:	89 04 24             	mov    %eax,(%esp)
-    152d:	e8 80 29 00 00       	call   3eb2 <write>
+    157a:	c7 44 24 08 05 00 00 	movl   $0x5,0x8(%esp)
+    1581:	00 
+    1582:	c7 44 24 04 2a 49 00 	movl   $0x492a,0x4(%esp)
+    1589:	00 
+    158a:	89 04 24             	mov    %eax,(%esp)
+    158d:	e8 f0 29 00 00       	call   3f82 <write>
   close(fd);
-    1532:	89 1c 24             	mov    %ebx,(%esp)
-    1535:	e8 80 29 00 00       	call   3eba <close>
+    1592:	89 1c 24             	mov    %ebx,(%esp)
+    1595:	e8 f0 29 00 00       	call   3f8a <close>
   fd = open("unlinkread", O_RDWR);
-    153a:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
-    1541:	00 
-    1542:	c7 04 24 35 48 00 00 	movl   $0x4835,(%esp)
-    1549:	e8 84 29 00 00       	call   3ed2 <open>
-  if(fd < 0){
-    154e:	85 c0                	test   %eax,%eax
+    159a:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
+    15a1:	00 
+    15a2:	c7 04 24 05 49 00 00 	movl   $0x4905,(%esp)
+    15a9:	e8 f4 29 00 00       	call   3fa2 <open>
+  if (fd < 0)
+    15ae:	85 c0                	test   %eax,%eax
   fd = open("unlinkread", O_RDWR);
-    1550:	89 c3                	mov    %eax,%ebx
-  if(fd < 0){
-    1552:	0f 88 64 01 00 00    	js     16bc <unlinkread+0x1dc>
-  if(unlink("unlinkread") != 0){
-    1558:	c7 04 24 35 48 00 00 	movl   $0x4835,(%esp)
-    155f:	e8 7e 29 00 00       	call   3ee2 <unlink>
-    1564:	85 c0                	test   %eax,%eax
-    1566:	0f 85 30 01 00 00    	jne    169c <unlinkread+0x1bc>
+    15b0:	89 c3                	mov    %eax,%ebx
+  if (fd < 0)
+    15b2:	0f 88 64 01 00 00    	js     171c <unlinkread+0x1dc>
+  if (unlink("unlinkread") != 0)
+    15b8:	c7 04 24 05 49 00 00 	movl   $0x4905,(%esp)
+    15bf:	e8 ee 29 00 00       	call   3fb2 <unlink>
+    15c4:	85 c0                	test   %eax,%eax
+    15c6:	0f 85 30 01 00 00    	jne    16fc <unlinkread+0x1bc>
   fd1 = open("unlinkread", O_CREATE | O_RDWR);
-    156c:	c7 44 24 04 02 02 00 	movl   $0x202,0x4(%esp)
-    1573:	00 
-    1574:	c7 04 24 35 48 00 00 	movl   $0x4835,(%esp)
-    157b:	e8 52 29 00 00       	call   3ed2 <open>
+    15cc:	c7 44 24 04 02 02 00 	movl   $0x202,0x4(%esp)
+    15d3:	00 
+    15d4:	c7 04 24 05 49 00 00 	movl   $0x4905,(%esp)
+    15db:	e8 c2 29 00 00       	call   3fa2 <open>
   write(fd1, "yyy", 3);
-    1580:	c7 44 24 08 03 00 00 	movl   $0x3,0x8(%esp)
-    1587:	00 
-    1588:	c7 44 24 04 92 48 00 	movl   $0x4892,0x4(%esp)
-    158f:	00 
+    15e0:	c7 44 24 08 03 00 00 	movl   $0x3,0x8(%esp)
+    15e7:	00 
+    15e8:	c7 44 24 04 62 49 00 	movl   $0x4962,0x4(%esp)
+    15ef:	00 
   fd1 = open("unlinkread", O_CREATE | O_RDWR);
-    1590:	89 c6                	mov    %eax,%esi
+    15f0:	89 c6                	mov    %eax,%esi
   write(fd1, "yyy", 3);
-    1592:	89 04 24             	mov    %eax,(%esp)
-    1595:	e8 18 29 00 00       	call   3eb2 <write>
+    15f2:	89 04 24             	mov    %eax,(%esp)
+    15f5:	e8 88 29 00 00       	call   3f82 <write>
   close(fd1);
-    159a:	89 34 24             	mov    %esi,(%esp)
-    159d:	e8 18 29 00 00       	call   3eba <close>
-  if(read(fd, buf, sizeof(buf)) != 5){
-    15a2:	c7 44 24 08 00 20 00 	movl   $0x2000,0x8(%esp)
-    15a9:	00 
-    15aa:	c7 44 24 04 a0 8b 00 	movl   $0x8ba0,0x4(%esp)
-    15b1:	00 
-    15b2:	89 1c 24             	mov    %ebx,(%esp)
-    15b5:	e8 f0 28 00 00       	call   3eaa <read>
-    15ba:	83 f8 05             	cmp    $0x5,%eax
-    15bd:	0f 85 b9 00 00 00    	jne    167c <unlinkread+0x19c>
-  if(buf[0] != 'h'){
-    15c3:	80 3d a0 8b 00 00 68 	cmpb   $0x68,0x8ba0
-    15ca:	0f 85 8c 00 00 00    	jne    165c <unlinkread+0x17c>
-  if(write(fd, buf, 10) != 10){
-    15d0:	c7 44 24 08 0a 00 00 	movl   $0xa,0x8(%esp)
-    15d7:	00 
-    15d8:	c7 44 24 04 a0 8b 00 	movl   $0x8ba0,0x4(%esp)
-    15df:	00 
-    15e0:	89 1c 24             	mov    %ebx,(%esp)
-    15e3:	e8 ca 28 00 00       	call   3eb2 <write>
-    15e8:	83 f8 0a             	cmp    $0xa,%eax
-    15eb:	75 4f                	jne    163c <unlinkread+0x15c>
+    15fa:	89 34 24             	mov    %esi,(%esp)
+    15fd:	e8 88 29 00 00       	call   3f8a <close>
+  if (read(fd, buf, sizeof(buf)) != 5)
+    1602:	c7 44 24 08 00 20 00 	movl   $0x2000,0x8(%esp)
+    1609:	00 
+    160a:	c7 44 24 04 80 8c 00 	movl   $0x8c80,0x4(%esp)
+    1611:	00 
+    1612:	89 1c 24             	mov    %ebx,(%esp)
+    1615:	e8 60 29 00 00       	call   3f7a <read>
+    161a:	83 f8 05             	cmp    $0x5,%eax
+    161d:	0f 85 b9 00 00 00    	jne    16dc <unlinkread+0x19c>
+  if (buf[0] != 'h')
+    1623:	80 3d 80 8c 00 00 68 	cmpb   $0x68,0x8c80
+    162a:	0f 85 8c 00 00 00    	jne    16bc <unlinkread+0x17c>
+  if (write(fd, buf, 10) != 10)
+    1630:	c7 44 24 08 0a 00 00 	movl   $0xa,0x8(%esp)
+    1637:	00 
+    1638:	c7 44 24 04 80 8c 00 	movl   $0x8c80,0x4(%esp)
+    163f:	00 
+    1640:	89 1c 24             	mov    %ebx,(%esp)
+    1643:	e8 3a 29 00 00       	call   3f82 <write>
+    1648:	83 f8 0a             	cmp    $0xa,%eax
+    164b:	75 4f                	jne    169c <unlinkread+0x15c>
   close(fd);
-    15ed:	89 1c 24             	mov    %ebx,(%esp)
-    15f0:	e8 c5 28 00 00       	call   3eba <close>
+    164d:	89 1c 24             	mov    %ebx,(%esp)
+    1650:	e8 35 29 00 00       	call   3f8a <close>
   unlink("unlinkread");
-    15f5:	c7 04 24 35 48 00 00 	movl   $0x4835,(%esp)
-    15fc:	e8 e1 28 00 00       	call   3ee2 <unlink>
+    1655:	c7 04 24 05 49 00 00 	movl   $0x4905,(%esp)
+    165c:	e8 51 29 00 00       	call   3fb2 <unlink>
   printf(1, "unlinkread ok\n");
-    1601:	c7 44 24 04 dd 48 00 	movl   $0x48dd,0x4(%esp)
-    1608:	00 
-    1609:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    1610:	e8 cb 29 00 00       	call   3fe0 <printf>
+    1661:	c7 44 24 04 ad 49 00 	movl   $0x49ad,0x4(%esp)
+    1668:	00 
+    1669:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    1670:	e8 3b 2a 00 00       	call   40b0 <printf>
 }
-    1615:	83 c4 10             	add    $0x10,%esp
-    1618:	5b                   	pop    %ebx
-    1619:	5e                   	pop    %esi
-    161a:	5d                   	pop    %ebp
-    161b:	c3                   	ret    
+    1675:	83 c4 10             	add    $0x10,%esp
+    1678:	5b                   	pop    %ebx
+    1679:	5e                   	pop    %esi
+    167a:	5d                   	pop    %ebp
+    167b:	c3                   	ret    
     printf(1, "create unlinkread failed\n");
-    161c:	c7 44 24 04 40 48 00 	movl   $0x4840,0x4(%esp)
-    1623:	00 
-    1624:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    162b:	e8 b0 29 00 00       	call   3fe0 <printf>
-    exit(0);
-    1630:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    1637:	e8 56 28 00 00       	call   3e92 <exit>
-    printf(1, "unlinkread write failed\n");
-    163c:	c7 44 24 04 c4 48 00 	movl   $0x48c4,0x4(%esp)
-    1643:	00 
-    1644:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    164b:	e8 90 29 00 00       	call   3fe0 <printf>
-    exit(0);
-    1650:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    1657:	e8 36 28 00 00       	call   3e92 <exit>
-    printf(1, "unlinkread wrong data\n");
-    165c:	c7 44 24 04 ad 48 00 	movl   $0x48ad,0x4(%esp)
-    1663:	00 
-    1664:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    166b:	e8 70 29 00 00       	call   3fe0 <printf>
-    exit(0);
-    1670:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    1677:	e8 16 28 00 00       	call   3e92 <exit>
-    printf(1, "unlinkread read failed");
-    167c:	c7 44 24 04 96 48 00 	movl   $0x4896,0x4(%esp)
+    167c:	c7 44 24 04 10 49 00 	movl   $0x4910,0x4(%esp)
     1683:	00 
     1684:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    168b:	e8 50 29 00 00       	call   3fe0 <printf>
+    168b:	e8 20 2a 00 00       	call   40b0 <printf>
     exit(0);
     1690:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    1697:	e8 f6 27 00 00       	call   3e92 <exit>
-    printf(1, "unlink unlinkread failed\n");
-    169c:	c7 44 24 04 78 48 00 	movl   $0x4878,0x4(%esp)
+    1697:	e8 c6 28 00 00       	call   3f62 <exit>
+    printf(1, "unlinkread write failed\n");
+    169c:	c7 44 24 04 94 49 00 	movl   $0x4994,0x4(%esp)
     16a3:	00 
     16a4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    16ab:	e8 30 29 00 00       	call   3fe0 <printf>
+    16ab:	e8 00 2a 00 00       	call   40b0 <printf>
     exit(0);
     16b0:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    16b7:	e8 d6 27 00 00       	call   3e92 <exit>
-    printf(1, "open unlinkread failed\n");
-    16bc:	c7 44 24 04 60 48 00 	movl   $0x4860,0x4(%esp)
+    16b7:	e8 a6 28 00 00       	call   3f62 <exit>
+    printf(1, "unlinkread wrong data\n");
+    16bc:	c7 44 24 04 7d 49 00 	movl   $0x497d,0x4(%esp)
     16c3:	00 
     16c4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    16cb:	e8 10 29 00 00       	call   3fe0 <printf>
+    16cb:	e8 e0 29 00 00       	call   40b0 <printf>
     exit(0);
     16d0:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    16d7:	e8 b6 27 00 00       	call   3e92 <exit>
-    16dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    16d7:	e8 86 28 00 00       	call   3f62 <exit>
+    printf(1, "unlinkread read failed");
+    16dc:	c7 44 24 04 66 49 00 	movl   $0x4966,0x4(%esp)
+    16e3:	00 
+    16e4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    16eb:	e8 c0 29 00 00       	call   40b0 <printf>
+    exit(0);
+    16f0:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    16f7:	e8 66 28 00 00       	call   3f62 <exit>
+    printf(1, "unlink unlinkread failed\n");
+    16fc:	c7 44 24 04 48 49 00 	movl   $0x4948,0x4(%esp)
+    1703:	00 
+    1704:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    170b:	e8 a0 29 00 00       	call   40b0 <printf>
+    exit(0);
+    1710:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    1717:	e8 46 28 00 00       	call   3f62 <exit>
+    printf(1, "open unlinkread failed\n");
+    171c:	c7 44 24 04 30 49 00 	movl   $0x4930,0x4(%esp)
+    1723:	00 
+    1724:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    172b:	e8 80 29 00 00       	call   40b0 <printf>
+    exit(0);
+    1730:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    1737:	e8 26 28 00 00       	call   3f62 <exit>
+    173c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-000016e0 <linktest>:
+00001740 <linktest>:
 {
-    16e0:	55                   	push   %ebp
-    16e1:	89 e5                	mov    %esp,%ebp
-    16e3:	53                   	push   %ebx
-    16e4:	83 ec 14             	sub    $0x14,%esp
+    1740:	55                   	push   %ebp
+    1741:	89 e5                	mov    %esp,%ebp
+    1743:	53                   	push   %ebx
+    1744:	83 ec 14             	sub    $0x14,%esp
   printf(1, "linktest\n");
-    16e7:	c7 44 24 04 ec 48 00 	movl   $0x48ec,0x4(%esp)
-    16ee:	00 
-    16ef:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    16f6:	e8 e5 28 00 00       	call   3fe0 <printf>
+    1747:	c7 44 24 04 bc 49 00 	movl   $0x49bc,0x4(%esp)
+    174e:	00 
+    174f:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    1756:	e8 55 29 00 00       	call   40b0 <printf>
   unlink("lf1");
-    16fb:	c7 04 24 f6 48 00 00 	movl   $0x48f6,(%esp)
-    1702:	e8 db 27 00 00       	call   3ee2 <unlink>
+    175b:	c7 04 24 c6 49 00 00 	movl   $0x49c6,(%esp)
+    1762:	e8 4b 28 00 00       	call   3fb2 <unlink>
   unlink("lf2");
-    1707:	c7 04 24 fa 48 00 00 	movl   $0x48fa,(%esp)
-    170e:	e8 cf 27 00 00       	call   3ee2 <unlink>
-  fd = open("lf1", O_CREATE|O_RDWR);
-    1713:	c7 44 24 04 02 02 00 	movl   $0x202,0x4(%esp)
-    171a:	00 
-    171b:	c7 04 24 f6 48 00 00 	movl   $0x48f6,(%esp)
-    1722:	e8 ab 27 00 00       	call   3ed2 <open>
-  if(fd < 0){
-    1727:	85 c0                	test   %eax,%eax
-  fd = open("lf1", O_CREATE|O_RDWR);
-    1729:	89 c3                	mov    %eax,%ebx
-  if(fd < 0){
-    172b:	0f 88 26 01 00 00    	js     1857 <linktest+0x177>
-  if(write(fd, "hello", 5) != 5){
-    1731:	c7 44 24 08 05 00 00 	movl   $0x5,0x8(%esp)
-    1738:	00 
-    1739:	c7 44 24 04 5a 48 00 	movl   $0x485a,0x4(%esp)
-    1740:	00 
-    1741:	89 04 24             	mov    %eax,(%esp)
-    1744:	e8 69 27 00 00       	call   3eb2 <write>
-    1749:	83 f8 05             	cmp    $0x5,%eax
-    174c:	0f 85 05 02 00 00    	jne    1957 <linktest+0x277>
+    1767:	c7 04 24 ca 49 00 00 	movl   $0x49ca,(%esp)
+    176e:	e8 3f 28 00 00       	call   3fb2 <unlink>
+  fd = open("lf1", O_CREATE | O_RDWR);
+    1773:	c7 44 24 04 02 02 00 	movl   $0x202,0x4(%esp)
+    177a:	00 
+    177b:	c7 04 24 c6 49 00 00 	movl   $0x49c6,(%esp)
+    1782:	e8 1b 28 00 00       	call   3fa2 <open>
+  if (fd < 0)
+    1787:	85 c0                	test   %eax,%eax
+  fd = open("lf1", O_CREATE | O_RDWR);
+    1789:	89 c3                	mov    %eax,%ebx
+  if (fd < 0)
+    178b:	0f 88 26 01 00 00    	js     18b7 <linktest+0x177>
+  if (write(fd, "hello", 5) != 5)
+    1791:	c7 44 24 08 05 00 00 	movl   $0x5,0x8(%esp)
+    1798:	00 
+    1799:	c7 44 24 04 2a 49 00 	movl   $0x492a,0x4(%esp)
+    17a0:	00 
+    17a1:	89 04 24             	mov    %eax,(%esp)
+    17a4:	e8 d9 27 00 00       	call   3f82 <write>
+    17a9:	83 f8 05             	cmp    $0x5,%eax
+    17ac:	0f 85 05 02 00 00    	jne    19b7 <linktest+0x277>
   close(fd);
-    1752:	89 1c 24             	mov    %ebx,(%esp)
-    1755:	e8 60 27 00 00       	call   3eba <close>
-  if(link("lf1", "lf2") < 0){
-    175a:	c7 44 24 04 fa 48 00 	movl   $0x48fa,0x4(%esp)
-    1761:	00 
-    1762:	c7 04 24 f6 48 00 00 	movl   $0x48f6,(%esp)
-    1769:	e8 84 27 00 00       	call   3ef2 <link>
-    176e:	85 c0                	test   %eax,%eax
-    1770:	0f 88 c1 01 00 00    	js     1937 <linktest+0x257>
+    17b2:	89 1c 24             	mov    %ebx,(%esp)
+    17b5:	e8 d0 27 00 00       	call   3f8a <close>
+  if (link("lf1", "lf2") < 0)
+    17ba:	c7 44 24 04 ca 49 00 	movl   $0x49ca,0x4(%esp)
+    17c1:	00 
+    17c2:	c7 04 24 c6 49 00 00 	movl   $0x49c6,(%esp)
+    17c9:	e8 f4 27 00 00       	call   3fc2 <link>
+    17ce:	85 c0                	test   %eax,%eax
+    17d0:	0f 88 c1 01 00 00    	js     1997 <linktest+0x257>
   unlink("lf1");
-    1776:	c7 04 24 f6 48 00 00 	movl   $0x48f6,(%esp)
-    177d:	e8 60 27 00 00       	call   3ee2 <unlink>
-  if(open("lf1", 0) >= 0){
-    1782:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-    1789:	00 
-    178a:	c7 04 24 f6 48 00 00 	movl   $0x48f6,(%esp)
-    1791:	e8 3c 27 00 00       	call   3ed2 <open>
-    1796:	85 c0                	test   %eax,%eax
-    1798:	0f 89 79 01 00 00    	jns    1917 <linktest+0x237>
+    17d6:	c7 04 24 c6 49 00 00 	movl   $0x49c6,(%esp)
+    17dd:	e8 d0 27 00 00       	call   3fb2 <unlink>
+  if (open("lf1", 0) >= 0)
+    17e2:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+    17e9:	00 
+    17ea:	c7 04 24 c6 49 00 00 	movl   $0x49c6,(%esp)
+    17f1:	e8 ac 27 00 00       	call   3fa2 <open>
+    17f6:	85 c0                	test   %eax,%eax
+    17f8:	0f 89 79 01 00 00    	jns    1977 <linktest+0x237>
   fd = open("lf2", 0);
-    179e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-    17a5:	00 
-    17a6:	c7 04 24 fa 48 00 00 	movl   $0x48fa,(%esp)
-    17ad:	e8 20 27 00 00       	call   3ed2 <open>
-  if(fd < 0){
-    17b2:	85 c0                	test   %eax,%eax
+    17fe:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+    1805:	00 
+    1806:	c7 04 24 ca 49 00 00 	movl   $0x49ca,(%esp)
+    180d:	e8 90 27 00 00       	call   3fa2 <open>
+  if (fd < 0)
+    1812:	85 c0                	test   %eax,%eax
   fd = open("lf2", 0);
-    17b4:	89 c3                	mov    %eax,%ebx
-  if(fd < 0){
-    17b6:	0f 88 3b 01 00 00    	js     18f7 <linktest+0x217>
-  if(read(fd, buf, sizeof(buf)) != 5){
-    17bc:	c7 44 24 08 00 20 00 	movl   $0x2000,0x8(%esp)
-    17c3:	00 
-    17c4:	c7 44 24 04 a0 8b 00 	movl   $0x8ba0,0x4(%esp)
-    17cb:	00 
-    17cc:	89 04 24             	mov    %eax,(%esp)
-    17cf:	e8 d6 26 00 00       	call   3eaa <read>
-    17d4:	83 f8 05             	cmp    $0x5,%eax
-    17d7:	0f 85 fa 00 00 00    	jne    18d7 <linktest+0x1f7>
+    1814:	89 c3                	mov    %eax,%ebx
+  if (fd < 0)
+    1816:	0f 88 3b 01 00 00    	js     1957 <linktest+0x217>
+  if (read(fd, buf, sizeof(buf)) != 5)
+    181c:	c7 44 24 08 00 20 00 	movl   $0x2000,0x8(%esp)
+    1823:	00 
+    1824:	c7 44 24 04 80 8c 00 	movl   $0x8c80,0x4(%esp)
+    182b:	00 
+    182c:	89 04 24             	mov    %eax,(%esp)
+    182f:	e8 46 27 00 00       	call   3f7a <read>
+    1834:	83 f8 05             	cmp    $0x5,%eax
+    1837:	0f 85 fa 00 00 00    	jne    1937 <linktest+0x1f7>
   close(fd);
-    17dd:	89 1c 24             	mov    %ebx,(%esp)
-    17e0:	e8 d5 26 00 00       	call   3eba <close>
-  if(link("lf2", "lf2") >= 0){
-    17e5:	c7 44 24 04 fa 48 00 	movl   $0x48fa,0x4(%esp)
-    17ec:	00 
-    17ed:	c7 04 24 fa 48 00 00 	movl   $0x48fa,(%esp)
-    17f4:	e8 f9 26 00 00       	call   3ef2 <link>
-    17f9:	85 c0                	test   %eax,%eax
-    17fb:	0f 89 b6 00 00 00    	jns    18b7 <linktest+0x1d7>
+    183d:	89 1c 24             	mov    %ebx,(%esp)
+    1840:	e8 45 27 00 00       	call   3f8a <close>
+  if (link("lf2", "lf2") >= 0)
+    1845:	c7 44 24 04 ca 49 00 	movl   $0x49ca,0x4(%esp)
+    184c:	00 
+    184d:	c7 04 24 ca 49 00 00 	movl   $0x49ca,(%esp)
+    1854:	e8 69 27 00 00       	call   3fc2 <link>
+    1859:	85 c0                	test   %eax,%eax
+    185b:	0f 89 b6 00 00 00    	jns    1917 <linktest+0x1d7>
   unlink("lf2");
-    1801:	c7 04 24 fa 48 00 00 	movl   $0x48fa,(%esp)
-    1808:	e8 d5 26 00 00       	call   3ee2 <unlink>
-  if(link("lf2", "lf1") >= 0){
-    180d:	c7 44 24 04 f6 48 00 	movl   $0x48f6,0x4(%esp)
-    1814:	00 
-    1815:	c7 04 24 fa 48 00 00 	movl   $0x48fa,(%esp)
-    181c:	e8 d1 26 00 00       	call   3ef2 <link>
-    1821:	85 c0                	test   %eax,%eax
-    1823:	79 72                	jns    1897 <linktest+0x1b7>
-  if(link(".", "lf1") >= 0){
-    1825:	c7 44 24 04 f6 48 00 	movl   $0x48f6,0x4(%esp)
-    182c:	00 
-    182d:	c7 04 24 be 4b 00 00 	movl   $0x4bbe,(%esp)
-    1834:	e8 b9 26 00 00       	call   3ef2 <link>
-    1839:	85 c0                	test   %eax,%eax
-    183b:	79 3a                	jns    1877 <linktest+0x197>
+    1861:	c7 04 24 ca 49 00 00 	movl   $0x49ca,(%esp)
+    1868:	e8 45 27 00 00       	call   3fb2 <unlink>
+  if (link("lf2", "lf1") >= 0)
+    186d:	c7 44 24 04 c6 49 00 	movl   $0x49c6,0x4(%esp)
+    1874:	00 
+    1875:	c7 04 24 ca 49 00 00 	movl   $0x49ca,(%esp)
+    187c:	e8 41 27 00 00       	call   3fc2 <link>
+    1881:	85 c0                	test   %eax,%eax
+    1883:	79 72                	jns    18f7 <linktest+0x1b7>
+  if (link(".", "lf1") >= 0)
+    1885:	c7 44 24 04 c6 49 00 	movl   $0x49c6,0x4(%esp)
+    188c:	00 
+    188d:	c7 04 24 8e 4c 00 00 	movl   $0x4c8e,(%esp)
+    1894:	e8 29 27 00 00       	call   3fc2 <link>
+    1899:	85 c0                	test   %eax,%eax
+    189b:	79 3a                	jns    18d7 <linktest+0x197>
   printf(1, "linktest ok\n");
-    183d:	c7 44 24 04 94 49 00 	movl   $0x4994,0x4(%esp)
-    1844:	00 
-    1845:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    184c:	e8 8f 27 00 00       	call   3fe0 <printf>
+    189d:	c7 44 24 04 64 4a 00 	movl   $0x4a64,0x4(%esp)
+    18a4:	00 
+    18a5:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    18ac:	e8 ff 27 00 00       	call   40b0 <printf>
 }
-    1851:	83 c4 14             	add    $0x14,%esp
-    1854:	5b                   	pop    %ebx
-    1855:	5d                   	pop    %ebp
-    1856:	c3                   	ret    
+    18b1:	83 c4 14             	add    $0x14,%esp
+    18b4:	5b                   	pop    %ebx
+    18b5:	5d                   	pop    %ebp
+    18b6:	c3                   	ret    
     printf(1, "create lf1 failed\n");
-    1857:	c7 44 24 04 fe 48 00 	movl   $0x48fe,0x4(%esp)
-    185e:	00 
-    185f:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    1866:	e8 75 27 00 00       	call   3fe0 <printf>
-    exit(0);
-    186b:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    1872:	e8 1b 26 00 00       	call   3e92 <exit>
-    printf(1, "link . lf1 succeeded! oops\n");
-    1877:	c7 44 24 04 78 49 00 	movl   $0x4978,0x4(%esp)
-    187e:	00 
-    187f:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    1886:	e8 55 27 00 00       	call   3fe0 <printf>
-    exit(0);
-    188b:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    1892:	e8 fb 25 00 00       	call   3e92 <exit>
-    printf(1, "link non-existant succeeded! oops\n");
-    1897:	c7 44 24 04 2c 55 00 	movl   $0x552c,0x4(%esp)
-    189e:	00 
-    189f:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    18a6:	e8 35 27 00 00       	call   3fe0 <printf>
-    exit(0);
-    18ab:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    18b2:	e8 db 25 00 00       	call   3e92 <exit>
-    printf(1, "link lf2 lf2 succeeded! oops\n");
-    18b7:	c7 44 24 04 5a 49 00 	movl   $0x495a,0x4(%esp)
+    18b7:	c7 44 24 04 ce 49 00 	movl   $0x49ce,0x4(%esp)
     18be:	00 
     18bf:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    18c6:	e8 15 27 00 00       	call   3fe0 <printf>
+    18c6:	e8 e5 27 00 00       	call   40b0 <printf>
     exit(0);
     18cb:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    18d2:	e8 bb 25 00 00       	call   3e92 <exit>
-    printf(1, "read lf2 failed\n");
-    18d7:	c7 44 24 04 49 49 00 	movl   $0x4949,0x4(%esp)
+    18d2:	e8 8b 26 00 00       	call   3f62 <exit>
+    printf(1, "link . lf1 succeeded! oops\n");
+    18d7:	c7 44 24 04 48 4a 00 	movl   $0x4a48,0x4(%esp)
     18de:	00 
     18df:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    18e6:	e8 f5 26 00 00       	call   3fe0 <printf>
+    18e6:	e8 c5 27 00 00       	call   40b0 <printf>
     exit(0);
     18eb:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    18f2:	e8 9b 25 00 00       	call   3e92 <exit>
-    printf(1, "open lf2 failed\n");
-    18f7:	c7 44 24 04 38 49 00 	movl   $0x4938,0x4(%esp)
+    18f2:	e8 6b 26 00 00       	call   3f62 <exit>
+    printf(1, "link non-existant succeeded! oops\n");
+    18f7:	c7 44 24 04 fc 55 00 	movl   $0x55fc,0x4(%esp)
     18fe:	00 
     18ff:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    1906:	e8 d5 26 00 00       	call   3fe0 <printf>
+    1906:	e8 a5 27 00 00       	call   40b0 <printf>
     exit(0);
     190b:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    1912:	e8 7b 25 00 00       	call   3e92 <exit>
-    printf(1, "unlinked lf1 but it is still there!\n");
-    1917:	c7 44 24 04 04 55 00 	movl   $0x5504,0x4(%esp)
+    1912:	e8 4b 26 00 00       	call   3f62 <exit>
+    printf(1, "link lf2 lf2 succeeded! oops\n");
+    1917:	c7 44 24 04 2a 4a 00 	movl   $0x4a2a,0x4(%esp)
     191e:	00 
     191f:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    1926:	e8 b5 26 00 00       	call   3fe0 <printf>
+    1926:	e8 85 27 00 00       	call   40b0 <printf>
     exit(0);
     192b:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    1932:	e8 5b 25 00 00       	call   3e92 <exit>
-    printf(1, "link lf1 lf2 failed\n");
-    1937:	c7 44 24 04 23 49 00 	movl   $0x4923,0x4(%esp)
+    1932:	e8 2b 26 00 00       	call   3f62 <exit>
+    printf(1, "read lf2 failed\n");
+    1937:	c7 44 24 04 19 4a 00 	movl   $0x4a19,0x4(%esp)
     193e:	00 
     193f:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    1946:	e8 95 26 00 00       	call   3fe0 <printf>
+    1946:	e8 65 27 00 00       	call   40b0 <printf>
     exit(0);
     194b:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    1952:	e8 3b 25 00 00       	call   3e92 <exit>
-    printf(1, "write lf1 failed\n");
-    1957:	c7 44 24 04 11 49 00 	movl   $0x4911,0x4(%esp)
+    1952:	e8 0b 26 00 00       	call   3f62 <exit>
+    printf(1, "open lf2 failed\n");
+    1957:	c7 44 24 04 08 4a 00 	movl   $0x4a08,0x4(%esp)
     195e:	00 
     195f:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    1966:	e8 75 26 00 00       	call   3fe0 <printf>
+    1966:	e8 45 27 00 00       	call   40b0 <printf>
     exit(0);
     196b:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    1972:	e8 1b 25 00 00       	call   3e92 <exit>
-    1977:	89 f6                	mov    %esi,%esi
-    1979:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    1972:	e8 eb 25 00 00       	call   3f62 <exit>
+    printf(1, "unlinked lf1 but it is still there!\n");
+    1977:	c7 44 24 04 d4 55 00 	movl   $0x55d4,0x4(%esp)
+    197e:	00 
+    197f:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    1986:	e8 25 27 00 00       	call   40b0 <printf>
+    exit(0);
+    198b:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    1992:	e8 cb 25 00 00       	call   3f62 <exit>
+    printf(1, "link lf1 lf2 failed\n");
+    1997:	c7 44 24 04 f3 49 00 	movl   $0x49f3,0x4(%esp)
+    199e:	00 
+    199f:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    19a6:	e8 05 27 00 00       	call   40b0 <printf>
+    exit(0);
+    19ab:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    19b2:	e8 ab 25 00 00       	call   3f62 <exit>
+    printf(1, "write lf1 failed\n");
+    19b7:	c7 44 24 04 e1 49 00 	movl   $0x49e1,0x4(%esp)
+    19be:	00 
+    19bf:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    19c6:	e8 e5 26 00 00       	call   40b0 <printf>
+    exit(0);
+    19cb:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    19d2:	e8 8b 25 00 00       	call   3f62 <exit>
+    19d7:	89 f6                	mov    %esi,%esi
+    19d9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-00001980 <concreate>:
+000019e0 <concreate>:
 {
-    1980:	55                   	push   %ebp
-    1981:	89 e5                	mov    %esp,%ebp
-    1983:	57                   	push   %edi
-    1984:	56                   	push   %esi
-  for(i = 0; i < 40; i++){
-    1985:	31 f6                	xor    %esi,%esi
+    19e0:	55                   	push   %ebp
+    19e1:	89 e5                	mov    %esp,%ebp
+    19e3:	57                   	push   %edi
+    19e4:	56                   	push   %esi
+  for (i = 0; i < 40; i++)
+    19e5:	31 f6                	xor    %esi,%esi
 {
-    1987:	53                   	push   %ebx
-    1988:	83 ec 5c             	sub    $0x5c,%esp
+    19e7:	53                   	push   %ebx
+    19e8:	83 ec 5c             	sub    $0x5c,%esp
   printf(1, "concreate test\n");
-    198b:	c7 44 24 04 a1 49 00 	movl   $0x49a1,0x4(%esp)
-    1992:	00 
-    1993:	8d 5d ad             	lea    -0x53(%ebp),%ebx
-    1996:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    199d:	e8 3e 26 00 00       	call   3fe0 <printf>
+    19eb:	c7 44 24 04 71 4a 00 	movl   $0x4a71,0x4(%esp)
+    19f2:	00 
+    19f3:	8d 5d ad             	lea    -0x53(%ebp),%ebx
+    19f6:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    19fd:	e8 ae 26 00 00       	call   40b0 <printf>
   file[0] = 'C';
-    19a2:	c6 45 ad 43          	movb   $0x43,-0x53(%ebp)
+    1a02:	c6 45 ad 43          	movb   $0x43,-0x53(%ebp)
   file[2] = '\0';
-    19a6:	c6 45 af 00          	movb   $0x0,-0x51(%ebp)
-    19aa:	eb 53                	jmp    19ff <concreate+0x7f>
-    19ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    if(pid && (i % 3) == 1){
-    19b0:	b8 56 55 55 55       	mov    $0x55555556,%eax
-    19b5:	89 f1                	mov    %esi,%ecx
-    19b7:	f7 ee                	imul   %esi
-    19b9:	89 f0                	mov    %esi,%eax
-    19bb:	c1 f8 1f             	sar    $0x1f,%eax
-    19be:	29 c2                	sub    %eax,%edx
-    19c0:	8d 04 52             	lea    (%edx,%edx,2),%eax
-    19c3:	29 c1                	sub    %eax,%ecx
-    19c5:	83 f9 01             	cmp    $0x1,%ecx
-    19c8:	0f 84 82 00 00 00    	je     1a50 <concreate+0xd0>
+    1a06:	c6 45 af 00          	movb   $0x0,-0x51(%ebp)
+    1a0a:	eb 5a                	jmp    1a66 <concreate+0x86>
+    1a0c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if (pid && (i % 3) == 1)
+    1a10:	b8 56 55 55 55       	mov    $0x55555556,%eax
+    1a15:	89 f1                	mov    %esi,%ecx
+    1a17:	f7 ee                	imul   %esi
+    1a19:	89 f0                	mov    %esi,%eax
+    1a1b:	c1 f8 1f             	sar    $0x1f,%eax
+    1a1e:	29 c2                	sub    %eax,%edx
+    1a20:	8d 04 52             	lea    (%edx,%edx,2),%eax
+    1a23:	29 c1                	sub    %eax,%ecx
+    1a25:	83 f9 01             	cmp    $0x1,%ecx
+    1a28:	0f 84 8a 00 00 00    	je     1ab8 <concreate+0xd8>
       fd = open(file, O_CREATE | O_RDWR);
-    19ce:	c7 44 24 04 02 02 00 	movl   $0x202,0x4(%esp)
-    19d5:	00 
-    19d6:	89 1c 24             	mov    %ebx,(%esp)
-    19d9:	e8 f4 24 00 00       	call   3ed2 <open>
-      if(fd < 0){
-    19de:	85 c0                	test   %eax,%eax
-    19e0:	0f 88 4e 02 00 00    	js     1c34 <concreate+0x2b4>
+    1a2e:	c7 44 24 04 02 02 00 	movl   $0x202,0x4(%esp)
+    1a35:	00 
+    1a36:	89 1c 24             	mov    %ebx,(%esp)
+    1a39:	e8 64 25 00 00       	call   3fa2 <open>
+      if (fd < 0)
+    1a3e:	85 c0                	test   %eax,%eax
+    1a40:	0f 88 5e 02 00 00    	js     1ca4 <concreate+0x2c4>
       close(fd);
-    19e6:	89 04 24             	mov    %eax,(%esp)
-    19e9:	e8 cc 24 00 00       	call   3eba <close>
-    if(pid == 0)
-    19ee:	85 ff                	test   %edi,%edi
-    19f0:	74 52                	je     1a44 <concreate+0xc4>
-  for(i = 0; i < 40; i++){
-    19f2:	83 c6 01             	add    $0x1,%esi
-      wait();
-    19f5:	e8 a0 24 00 00       	call   3e9a <wait>
-  for(i = 0; i < 40; i++){
-    19fa:	83 fe 28             	cmp    $0x28,%esi
-    19fd:	74 71                	je     1a70 <concreate+0xf0>
-    19ff:	8d 46 30             	lea    0x30(%esi),%eax
+    1a46:	89 04 24             	mov    %eax,(%esp)
+    1a49:	e8 3c 25 00 00       	call   3f8a <close>
+    if (pid == 0)
+    1a4e:	85 ff                	test   %edi,%edi
+    1a50:	74 59                	je     1aab <concreate+0xcb>
+      wait(0);
+    1a52:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  for (i = 0; i < 40; i++)
+    1a59:	83 c6 01             	add    $0x1,%esi
+      wait(0);
+    1a5c:	e8 09 25 00 00       	call   3f6a <wait>
+  for (i = 0; i < 40; i++)
+    1a61:	83 fe 28             	cmp    $0x28,%esi
+    1a64:	74 6a                	je     1ad0 <concreate+0xf0>
+    1a66:	8d 46 30             	lea    0x30(%esi),%eax
     unlink(file);
-    1a02:	89 1c 24             	mov    %ebx,(%esp)
-    1a05:	88 45 ae             	mov    %al,-0x52(%ebp)
-    1a08:	e8 d5 24 00 00       	call   3ee2 <unlink>
+    1a69:	89 1c 24             	mov    %ebx,(%esp)
+    1a6c:	88 45 ae             	mov    %al,-0x52(%ebp)
+    1a6f:	e8 3e 25 00 00       	call   3fb2 <unlink>
     pid = fork();
-    1a0d:	e8 78 24 00 00       	call   3e8a <fork>
-    if(pid && (i % 3) == 1){
-    1a12:	85 c0                	test   %eax,%eax
+    1a74:	e8 e1 24 00 00       	call   3f5a <fork>
+    if (pid && (i % 3) == 1)
+    1a79:	85 c0                	test   %eax,%eax
     pid = fork();
-    1a14:	89 c7                	mov    %eax,%edi
-    if(pid && (i % 3) == 1){
-    1a16:	75 98                	jne    19b0 <concreate+0x30>
-    } else if(pid == 0 && (i % 5) == 1){
-    1a18:	b8 67 66 66 66       	mov    $0x66666667,%eax
-    1a1d:	89 f1                	mov    %esi,%ecx
-    1a1f:	f7 ee                	imul   %esi
-    1a21:	89 f0                	mov    %esi,%eax
-    1a23:	c1 f8 1f             	sar    $0x1f,%eax
-    1a26:	d1 fa                	sar    %edx
-    1a28:	29 c2                	sub    %eax,%edx
-    1a2a:	8d 04 92             	lea    (%edx,%edx,4),%eax
-    1a2d:	29 c1                	sub    %eax,%ecx
-    1a2f:	83 f9 01             	cmp    $0x1,%ecx
-    1a32:	75 9a                	jne    19ce <concreate+0x4e>
+    1a7b:	89 c7                	mov    %eax,%edi
+    if (pid && (i % 3) == 1)
+    1a7d:	75 91                	jne    1a10 <concreate+0x30>
+    else if (pid == 0 && (i % 5) == 1)
+    1a7f:	b8 67 66 66 66       	mov    $0x66666667,%eax
+    1a84:	89 f1                	mov    %esi,%ecx
+    1a86:	f7 ee                	imul   %esi
+    1a88:	89 f0                	mov    %esi,%eax
+    1a8a:	c1 f8 1f             	sar    $0x1f,%eax
+    1a8d:	d1 fa                	sar    %edx
+    1a8f:	29 c2                	sub    %eax,%edx
+    1a91:	8d 04 92             	lea    (%edx,%edx,4),%eax
+    1a94:	29 c1                	sub    %eax,%ecx
+    1a96:	83 f9 01             	cmp    $0x1,%ecx
+    1a99:	75 93                	jne    1a2e <concreate+0x4e>
       link("C0", file);
-    1a34:	89 5c 24 04          	mov    %ebx,0x4(%esp)
-    1a38:	c7 04 24 b1 49 00 00 	movl   $0x49b1,(%esp)
-    1a3f:	e8 ae 24 00 00       	call   3ef2 <link>
+    1a9b:	89 5c 24 04          	mov    %ebx,0x4(%esp)
+    1a9f:	c7 04 24 81 4a 00 00 	movl   $0x4a81,(%esp)
+    1aa6:	e8 17 25 00 00       	call   3fc2 <link>
         exit(0);
-    1a44:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    1a4b:	e8 42 24 00 00       	call   3e92 <exit>
-      link("C0", file);
-    1a50:	89 5c 24 04          	mov    %ebx,0x4(%esp)
-  for(i = 0; i < 40; i++){
-    1a54:	83 c6 01             	add    $0x1,%esi
+    1aab:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    1ab2:	e8 ab 24 00 00       	call   3f62 <exit>
+    1ab7:	90                   	nop
       link("C0", file);
-    1a57:	c7 04 24 b1 49 00 00 	movl   $0x49b1,(%esp)
-    1a5e:	e8 8f 24 00 00       	call   3ef2 <link>
-      wait();
-    1a63:	e8 32 24 00 00       	call   3e9a <wait>
-  for(i = 0; i < 40; i++){
-    1a68:	83 fe 28             	cmp    $0x28,%esi
-    1a6b:	75 92                	jne    19ff <concreate+0x7f>
-    1a6d:	8d 76 00             	lea    0x0(%esi),%esi
+    1ab8:	89 5c 24 04          	mov    %ebx,0x4(%esp)
+    1abc:	c7 04 24 81 4a 00 00 	movl   $0x4a81,(%esp)
+    1ac3:	e8 fa 24 00 00       	call   3fc2 <link>
+    1ac8:	eb 88                	jmp    1a52 <concreate+0x72>
+    1aca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   memset(fa, 0, sizeof(fa));
-    1a70:	8d 45 c0             	lea    -0x40(%ebp),%eax
-    1a73:	c7 44 24 08 28 00 00 	movl   $0x28,0x8(%esp)
-    1a7a:	00 
-    1a7b:	8d 7d b0             	lea    -0x50(%ebp),%edi
-    1a7e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-    1a85:	00 
-    1a86:	89 04 24             	mov    %eax,(%esp)
-    1a89:	e8 92 22 00 00       	call   3d20 <memset>
+    1ad0:	8d 45 c0             	lea    -0x40(%ebp),%eax
+    1ad3:	c7 44 24 08 28 00 00 	movl   $0x28,0x8(%esp)
+    1ada:	00 
+    1adb:	8d 7d b0             	lea    -0x50(%ebp),%edi
+    1ade:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+    1ae5:	00 
+    1ae6:	89 04 24             	mov    %eax,(%esp)
+    1ae9:	e8 02 23 00 00       	call   3df0 <memset>
   fd = open(".", 0);
-    1a8e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-    1a95:	00 
-    1a96:	c7 04 24 be 4b 00 00 	movl   $0x4bbe,(%esp)
-    1a9d:	e8 30 24 00 00       	call   3ed2 <open>
+    1aee:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+    1af5:	00 
+    1af6:	c7 04 24 8e 4c 00 00 	movl   $0x4c8e,(%esp)
+    1afd:	e8 a0 24 00 00       	call   3fa2 <open>
   n = 0;
-    1aa2:	c7 45 a4 00 00 00 00 	movl   $0x0,-0x5c(%ebp)
+    1b02:	c7 45 a4 00 00 00 00 	movl   $0x0,-0x5c(%ebp)
   fd = open(".", 0);
-    1aa9:	89 c6                	mov    %eax,%esi
-    1aab:	90                   	nop
-    1aac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-  while(read(fd, &de, sizeof(de)) > 0){
-    1ab0:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
-    1ab7:	00 
-    1ab8:	89 7c 24 04          	mov    %edi,0x4(%esp)
-    1abc:	89 34 24             	mov    %esi,(%esp)
-    1abf:	e8 e6 23 00 00       	call   3eaa <read>
-    1ac4:	85 c0                	test   %eax,%eax
-    1ac6:	7e 40                	jle    1b08 <concreate+0x188>
-    if(de.inum == 0)
-    1ac8:	66 83 7d b0 00       	cmpw   $0x0,-0x50(%ebp)
-    1acd:	74 e1                	je     1ab0 <concreate+0x130>
-    if(de.name[0] == 'C' && de.name[2] == '\0'){
-    1acf:	80 7d b2 43          	cmpb   $0x43,-0x4e(%ebp)
-    1ad3:	75 db                	jne    1ab0 <concreate+0x130>
-    1ad5:	80 7d b4 00          	cmpb   $0x0,-0x4c(%ebp)
-    1ad9:	75 d5                	jne    1ab0 <concreate+0x130>
+    1b09:	89 c6                	mov    %eax,%esi
+    1b0b:	90                   	nop
+    1b0c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  while (read(fd, &de, sizeof(de)) > 0)
+    1b10:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
+    1b17:	00 
+    1b18:	89 7c 24 04          	mov    %edi,0x4(%esp)
+    1b1c:	89 34 24             	mov    %esi,(%esp)
+    1b1f:	e8 56 24 00 00       	call   3f7a <read>
+    1b24:	85 c0                	test   %eax,%eax
+    1b26:	7e 40                	jle    1b68 <concreate+0x188>
+    if (de.inum == 0)
+    1b28:	66 83 7d b0 00       	cmpw   $0x0,-0x50(%ebp)
+    1b2d:	74 e1                	je     1b10 <concreate+0x130>
+    if (de.name[0] == 'C' && de.name[2] == '\0')
+    1b2f:	80 7d b2 43          	cmpb   $0x43,-0x4e(%ebp)
+    1b33:	75 db                	jne    1b10 <concreate+0x130>
+    1b35:	80 7d b4 00          	cmpb   $0x0,-0x4c(%ebp)
+    1b39:	75 d5                	jne    1b10 <concreate+0x130>
       i = de.name[1] - '0';
-    1adb:	0f be 45 b3          	movsbl -0x4d(%ebp),%eax
-    1adf:	83 e8 30             	sub    $0x30,%eax
-      if(i < 0 || i >= sizeof(fa)){
-    1ae2:	83 f8 27             	cmp    $0x27,%eax
-    1ae5:	0f 87 6d 01 00 00    	ja     1c58 <concreate+0x2d8>
-      if(fa[i]){
-    1aeb:	80 7c 05 c0 00       	cmpb   $0x0,-0x40(%ebp,%eax,1)
-    1af0:	0f 85 a2 01 00 00    	jne    1c98 <concreate+0x318>
+    1b3b:	0f be 45 b3          	movsbl -0x4d(%ebp),%eax
+    1b3f:	83 e8 30             	sub    $0x30,%eax
+      if (i < 0 || i >= sizeof(fa))
+    1b42:	83 f8 27             	cmp    $0x27,%eax
+    1b45:	0f 87 7d 01 00 00    	ja     1cc8 <concreate+0x2e8>
+      if (fa[i])
+    1b4b:	80 7c 05 c0 00       	cmpb   $0x0,-0x40(%ebp,%eax,1)
+    1b50:	0f 85 b2 01 00 00    	jne    1d08 <concreate+0x328>
       fa[i] = 1;
-    1af6:	c6 44 05 c0 01       	movb   $0x1,-0x40(%ebp,%eax,1)
+    1b56:	c6 44 05 c0 01       	movb   $0x1,-0x40(%ebp,%eax,1)
       n++;
-    1afb:	83 45 a4 01          	addl   $0x1,-0x5c(%ebp)
-    1aff:	eb af                	jmp    1ab0 <concreate+0x130>
-    1b01:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    1b5b:	83 45 a4 01          	addl   $0x1,-0x5c(%ebp)
+    1b5f:	eb af                	jmp    1b10 <concreate+0x130>
+    1b61:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   close(fd);
-    1b08:	89 34 24             	mov    %esi,(%esp)
-    1b0b:	e8 aa 23 00 00       	call   3eba <close>
-  if(n != 40){
-    1b10:	83 7d a4 28          	cmpl   $0x28,-0x5c(%ebp)
-    1b14:	0f 85 5e 01 00 00    	jne    1c78 <concreate+0x2f8>
-    1b1a:	31 f6                	xor    %esi,%esi
-    1b1c:	eb 7f                	jmp    1b9d <concreate+0x21d>
-    1b1e:	66 90                	xchg   %ax,%ax
-       ((i % 3) == 1 && pid != 0)){
-    1b20:	85 ff                	test   %edi,%edi
-    1b22:	0f 84 ae 00 00 00    	je     1bd6 <concreate+0x256>
+    1b68:	89 34 24             	mov    %esi,(%esp)
+    1b6b:	e8 1a 24 00 00       	call   3f8a <close>
+  if (n != 40)
+    1b70:	83 7d a4 28          	cmpl   $0x28,-0x5c(%ebp)
+    1b74:	0f 85 6e 01 00 00    	jne    1ce8 <concreate+0x308>
+    1b7a:	31 f6                	xor    %esi,%esi
+    1b7c:	e9 8b 00 00 00       	jmp    1c0c <concreate+0x22c>
+    1b81:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        ((i % 3) == 1 && pid != 0))
+    1b88:	85 ff                	test   %edi,%edi
+    1b8a:	0f 84 b5 00 00 00    	je     1c45 <concreate+0x265>
       close(open(file, 0));
-    1b28:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-    1b2f:	00 
-    1b30:	89 1c 24             	mov    %ebx,(%esp)
-    1b33:	e8 9a 23 00 00       	call   3ed2 <open>
-    1b38:	89 04 24             	mov    %eax,(%esp)
-    1b3b:	e8 7a 23 00 00       	call   3eba <close>
+    1b90:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+    1b97:	00 
+    1b98:	89 1c 24             	mov    %ebx,(%esp)
+    1b9b:	e8 02 24 00 00       	call   3fa2 <open>
+    1ba0:	89 04 24             	mov    %eax,(%esp)
+    1ba3:	e8 e2 23 00 00       	call   3f8a <close>
       close(open(file, 0));
-    1b40:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-    1b47:	00 
-    1b48:	89 1c 24             	mov    %ebx,(%esp)
-    1b4b:	e8 82 23 00 00       	call   3ed2 <open>
-    1b50:	89 04 24             	mov    %eax,(%esp)
-    1b53:	e8 62 23 00 00       	call   3eba <close>
+    1ba8:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+    1baf:	00 
+    1bb0:	89 1c 24             	mov    %ebx,(%esp)
+    1bb3:	e8 ea 23 00 00       	call   3fa2 <open>
+    1bb8:	89 04 24             	mov    %eax,(%esp)
+    1bbb:	e8 ca 23 00 00       	call   3f8a <close>
       close(open(file, 0));
-    1b58:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-    1b5f:	00 
-    1b60:	89 1c 24             	mov    %ebx,(%esp)
-    1b63:	e8 6a 23 00 00       	call   3ed2 <open>
-    1b68:	89 04 24             	mov    %eax,(%esp)
-    1b6b:	e8 4a 23 00 00       	call   3eba <close>
+    1bc0:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+    1bc7:	00 
+    1bc8:	89 1c 24             	mov    %ebx,(%esp)
+    1bcb:	e8 d2 23 00 00       	call   3fa2 <open>
+    1bd0:	89 04 24             	mov    %eax,(%esp)
+    1bd3:	e8 b2 23 00 00       	call   3f8a <close>
       close(open(file, 0));
-    1b70:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-    1b77:	00 
-    1b78:	89 1c 24             	mov    %ebx,(%esp)
-    1b7b:	e8 52 23 00 00       	call   3ed2 <open>
-    1b80:	89 04 24             	mov    %eax,(%esp)
-    1b83:	e8 32 23 00 00       	call   3eba <close>
-    if(pid == 0)
-    1b88:	85 ff                	test   %edi,%edi
-    1b8a:	0f 84 b4 fe ff ff    	je     1a44 <concreate+0xc4>
-  for(i = 0; i < 40; i++){
-    1b90:	83 c6 01             	add    $0x1,%esi
-      wait();
-    1b93:	e8 02 23 00 00       	call   3e9a <wait>
-  for(i = 0; i < 40; i++){
-    1b98:	83 fe 28             	cmp    $0x28,%esi
-    1b9b:	74 5b                	je     1bf8 <concreate+0x278>
-    1b9d:	8d 46 30             	lea    0x30(%esi),%eax
-    1ba0:	88 45 ae             	mov    %al,-0x52(%ebp)
+    1bd8:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+    1bdf:	00 
+    1be0:	89 1c 24             	mov    %ebx,(%esp)
+    1be3:	e8 ba 23 00 00       	call   3fa2 <open>
+    1be8:	89 04 24             	mov    %eax,(%esp)
+    1beb:	e8 9a 23 00 00       	call   3f8a <close>
+    if (pid == 0)
+    1bf0:	85 ff                	test   %edi,%edi
+    1bf2:	0f 84 b3 fe ff ff    	je     1aab <concreate+0xcb>
+      wait(0);
+    1bf8:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  for (i = 0; i < 40; i++)
+    1bff:	83 c6 01             	add    $0x1,%esi
+      wait(0);
+    1c02:	e8 63 23 00 00       	call   3f6a <wait>
+  for (i = 0; i < 40; i++)
+    1c07:	83 fe 28             	cmp    $0x28,%esi
+    1c0a:	74 5c                	je     1c68 <concreate+0x288>
+    1c0c:	8d 46 30             	lea    0x30(%esi),%eax
+    1c0f:	88 45 ae             	mov    %al,-0x52(%ebp)
     pid = fork();
-    1ba3:	e8 e2 22 00 00       	call   3e8a <fork>
-    if(pid < 0){
-    1ba8:	85 c0                	test   %eax,%eax
+    1c12:	e8 43 23 00 00       	call   3f5a <fork>
+    if (pid < 0)
+    1c17:	85 c0                	test   %eax,%eax
     pid = fork();
-    1baa:	89 c7                	mov    %eax,%edi
-    if(pid < 0){
-    1bac:	78 66                	js     1c14 <concreate+0x294>
-    if(((i % 3) == 0 && pid == 0) ||
-    1bae:	b8 56 55 55 55       	mov    $0x55555556,%eax
-    1bb3:	f7 ee                	imul   %esi
-    1bb5:	89 f0                	mov    %esi,%eax
-    1bb7:	c1 f8 1f             	sar    $0x1f,%eax
-    1bba:	29 c2                	sub    %eax,%edx
-    1bbc:	8d 04 52             	lea    (%edx,%edx,2),%eax
-    1bbf:	89 f2                	mov    %esi,%edx
-    1bc1:	29 c2                	sub    %eax,%edx
-    1bc3:	89 d0                	mov    %edx,%eax
-    1bc5:	09 f8                	or     %edi,%eax
-    1bc7:	0f 84 5b ff ff ff    	je     1b28 <concreate+0x1a8>
-    1bcd:	83 fa 01             	cmp    $0x1,%edx
-    1bd0:	0f 84 4a ff ff ff    	je     1b20 <concreate+0x1a0>
+    1c19:	89 c7                	mov    %eax,%edi
+    if (pid < 0)
+    1c1b:	78 67                	js     1c84 <concreate+0x2a4>
+    if (((i % 3) == 0 && pid == 0) ||
+    1c1d:	b8 56 55 55 55       	mov    $0x55555556,%eax
+    1c22:	f7 ee                	imul   %esi
+    1c24:	89 f0                	mov    %esi,%eax
+    1c26:	c1 f8 1f             	sar    $0x1f,%eax
+    1c29:	29 c2                	sub    %eax,%edx
+    1c2b:	8d 04 52             	lea    (%edx,%edx,2),%eax
+    1c2e:	89 f2                	mov    %esi,%edx
+    1c30:	29 c2                	sub    %eax,%edx
+    1c32:	89 d0                	mov    %edx,%eax
+    1c34:	09 f8                	or     %edi,%eax
+    1c36:	0f 84 54 ff ff ff    	je     1b90 <concreate+0x1b0>
+    1c3c:	83 fa 01             	cmp    $0x1,%edx
+    1c3f:	0f 84 43 ff ff ff    	je     1b88 <concreate+0x1a8>
       unlink(file);
-    1bd6:	89 1c 24             	mov    %ebx,(%esp)
-    1bd9:	e8 04 23 00 00       	call   3ee2 <unlink>
+    1c45:	89 1c 24             	mov    %ebx,(%esp)
+    1c48:	e8 65 23 00 00       	call   3fb2 <unlink>
       unlink(file);
-    1bde:	89 1c 24             	mov    %ebx,(%esp)
-    1be1:	e8 fc 22 00 00       	call   3ee2 <unlink>
+    1c4d:	89 1c 24             	mov    %ebx,(%esp)
+    1c50:	e8 5d 23 00 00       	call   3fb2 <unlink>
       unlink(file);
-    1be6:	89 1c 24             	mov    %ebx,(%esp)
-    1be9:	e8 f4 22 00 00       	call   3ee2 <unlink>
+    1c55:	89 1c 24             	mov    %ebx,(%esp)
+    1c58:	e8 55 23 00 00       	call   3fb2 <unlink>
       unlink(file);
-    1bee:	89 1c 24             	mov    %ebx,(%esp)
-    1bf1:	e8 ec 22 00 00       	call   3ee2 <unlink>
-    1bf6:	eb 90                	jmp    1b88 <concreate+0x208>
+    1c5d:	89 1c 24             	mov    %ebx,(%esp)
+    1c60:	e8 4d 23 00 00       	call   3fb2 <unlink>
+    1c65:	eb 89                	jmp    1bf0 <concreate+0x210>
+    1c67:	90                   	nop
   printf(1, "concreate ok\n");
-    1bf8:	c7 44 24 04 06 4a 00 	movl   $0x4a06,0x4(%esp)
-    1bff:	00 
-    1c00:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    1c07:	e8 d4 23 00 00       	call   3fe0 <printf>
+    1c68:	c7 44 24 04 d6 4a 00 	movl   $0x4ad6,0x4(%esp)
+    1c6f:	00 
+    1c70:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    1c77:	e8 34 24 00 00       	call   40b0 <printf>
 }
-    1c0c:	83 c4 5c             	add    $0x5c,%esp
-    1c0f:	5b                   	pop    %ebx
-    1c10:	5e                   	pop    %esi
-    1c11:	5f                   	pop    %edi
-    1c12:	5d                   	pop    %ebp
-    1c13:	c3                   	ret    
+    1c7c:	83 c4 5c             	add    $0x5c,%esp
+    1c7f:	5b                   	pop    %ebx
+    1c80:	5e                   	pop    %esi
+    1c81:	5f                   	pop    %edi
+    1c82:	5d                   	pop    %ebp
+    1c83:	c3                   	ret    
       printf(1, "fork failed\n");
-    1c14:	c7 44 24 04 89 52 00 	movl   $0x5289,0x4(%esp)
-    1c1b:	00 
-    1c1c:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    1c23:	e8 b8 23 00 00       	call   3fe0 <printf>
+    1c84:	c7 44 24 04 59 53 00 	movl   $0x5359,0x4(%esp)
+    1c8b:	00 
+    1c8c:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    1c93:	e8 18 24 00 00       	call   40b0 <printf>
       exit(0);
-    1c28:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    1c2f:	e8 5e 22 00 00       	call   3e92 <exit>
+    1c98:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    1c9f:	e8 be 22 00 00       	call   3f62 <exit>
         printf(1, "concreate create %s failed\n", file);
-    1c34:	89 5c 24 08          	mov    %ebx,0x8(%esp)
-    1c38:	c7 44 24 04 b4 49 00 	movl   $0x49b4,0x4(%esp)
-    1c3f:	00 
-    1c40:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    1c47:	e8 94 23 00 00       	call   3fe0 <printf>
+    1ca4:	89 5c 24 08          	mov    %ebx,0x8(%esp)
+    1ca8:	c7 44 24 04 84 4a 00 	movl   $0x4a84,0x4(%esp)
+    1caf:	00 
+    1cb0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    1cb7:	e8 f4 23 00 00       	call   40b0 <printf>
         exit(0);
-    1c4c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    1c53:	e8 3a 22 00 00       	call   3e92 <exit>
+    1cbc:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    1cc3:	e8 9a 22 00 00       	call   3f62 <exit>
         printf(1, "concreate weird file %s\n", de.name);
-    1c58:	8d 45 b2             	lea    -0x4e(%ebp),%eax
-    1c5b:	89 44 24 08          	mov    %eax,0x8(%esp)
-    1c5f:	c7 44 24 04 d0 49 00 	movl   $0x49d0,0x4(%esp)
-    1c66:	00 
-    1c67:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    1c6e:	e8 6d 23 00 00       	call   3fe0 <printf>
-    1c73:	e9 cc fd ff ff       	jmp    1a44 <concreate+0xc4>
+    1cc8:	8d 45 b2             	lea    -0x4e(%ebp),%eax
+    1ccb:	89 44 24 08          	mov    %eax,0x8(%esp)
+    1ccf:	c7 44 24 04 a0 4a 00 	movl   $0x4aa0,0x4(%esp)
+    1cd6:	00 
+    1cd7:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    1cde:	e8 cd 23 00 00       	call   40b0 <printf>
+    1ce3:	e9 c3 fd ff ff       	jmp    1aab <concreate+0xcb>
     printf(1, "concreate not enough files in directory listing\n");
-    1c78:	c7 44 24 04 50 55 00 	movl   $0x5550,0x4(%esp)
-    1c7f:	00 
-    1c80:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    1c87:	e8 54 23 00 00       	call   3fe0 <printf>
+    1ce8:	c7 44 24 04 20 56 00 	movl   $0x5620,0x4(%esp)
+    1cef:	00 
+    1cf0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    1cf7:	e8 b4 23 00 00       	call   40b0 <printf>
     exit(0);
-    1c8c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    1c93:	e8 fa 21 00 00       	call   3e92 <exit>
+    1cfc:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    1d03:	e8 5a 22 00 00       	call   3f62 <exit>
         printf(1, "concreate duplicate file %s\n", de.name);
-    1c98:	8d 45 b2             	lea    -0x4e(%ebp),%eax
-    1c9b:	89 44 24 08          	mov    %eax,0x8(%esp)
-    1c9f:	c7 44 24 04 e9 49 00 	movl   $0x49e9,0x4(%esp)
-    1ca6:	00 
-    1ca7:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    1cae:	e8 2d 23 00 00       	call   3fe0 <printf>
+    1d08:	8d 45 b2             	lea    -0x4e(%ebp),%eax
+    1d0b:	89 44 24 08          	mov    %eax,0x8(%esp)
+    1d0f:	c7 44 24 04 b9 4a 00 	movl   $0x4ab9,0x4(%esp)
+    1d16:	00 
+    1d17:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    1d1e:	e8 8d 23 00 00       	call   40b0 <printf>
         exit(0);
-    1cb3:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    1cba:	e8 d3 21 00 00       	call   3e92 <exit>
-    1cbf:	90                   	nop
+    1d23:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    1d2a:	e8 33 22 00 00       	call   3f62 <exit>
+    1d2f:	90                   	nop
 
-00001cc0 <linkunlink>:
+00001d30 <linkunlink>:
 {
-    1cc0:	55                   	push   %ebp
-    1cc1:	89 e5                	mov    %esp,%ebp
-    1cc3:	57                   	push   %edi
-    1cc4:	56                   	push   %esi
-    1cc5:	53                   	push   %ebx
-    1cc6:	83 ec 1c             	sub    $0x1c,%esp
+    1d30:	55                   	push   %ebp
+    1d31:	89 e5                	mov    %esp,%ebp
+    1d33:	57                   	push   %edi
+    1d34:	56                   	push   %esi
+    1d35:	53                   	push   %ebx
+    1d36:	83 ec 1c             	sub    $0x1c,%esp
   printf(1, "linkunlink test\n");
-    1cc9:	c7 44 24 04 14 4a 00 	movl   $0x4a14,0x4(%esp)
-    1cd0:	00 
-    1cd1:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    1cd8:	e8 03 23 00 00       	call   3fe0 <printf>
+    1d39:	c7 44 24 04 e4 4a 00 	movl   $0x4ae4,0x4(%esp)
+    1d40:	00 
+    1d41:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    1d48:	e8 63 23 00 00       	call   40b0 <printf>
   unlink("x");
-    1cdd:	c7 04 24 a1 4c 00 00 	movl   $0x4ca1,(%esp)
-    1ce4:	e8 f9 21 00 00       	call   3ee2 <unlink>
+    1d4d:	c7 04 24 71 4d 00 00 	movl   $0x4d71,(%esp)
+    1d54:	e8 59 22 00 00       	call   3fb2 <unlink>
   pid = fork();
-    1ce9:	e8 9c 21 00 00       	call   3e8a <fork>
-  if(pid < 0){
-    1cee:	85 c0                	test   %eax,%eax
+    1d59:	e8 fc 21 00 00       	call   3f5a <fork>
+  if (pid < 0)
+    1d5e:	85 c0                	test   %eax,%eax
   pid = fork();
-    1cf0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-  if(pid < 0){
-    1cf3:	0f 88 b8 00 00 00    	js     1db1 <linkunlink+0xf1>
+    1d60:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  if (pid < 0)
+    1d63:	0f 88 c0 00 00 00    	js     1e29 <linkunlink+0xf9>
   unsigned int x = (pid ? 1 : 97);
-    1cf9:	83 7d e4 01          	cmpl   $0x1,-0x1c(%ebp)
-    1cfd:	bb 64 00 00 00       	mov    $0x64,%ebx
-    if((x % 3) == 0){
-    1d02:	be ab aa aa aa       	mov    $0xaaaaaaab,%esi
+    1d69:	83 7d e4 01          	cmpl   $0x1,-0x1c(%ebp)
+    1d6d:	bb 64 00 00 00       	mov    $0x64,%ebx
+    if ((x % 3) == 0)
+    1d72:	be ab aa aa aa       	mov    $0xaaaaaaab,%esi
   unsigned int x = (pid ? 1 : 97);
-    1d07:	19 ff                	sbb    %edi,%edi
-    1d09:	83 e7 60             	and    $0x60,%edi
-    1d0c:	83 c7 01             	add    $0x1,%edi
-    1d0f:	eb 1d                	jmp    1d2e <linkunlink+0x6e>
-    1d11:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    } else if((x % 3) == 1){
-    1d18:	83 fa 01             	cmp    $0x1,%edx
-    1d1b:	74 7b                	je     1d98 <linkunlink+0xd8>
+    1d77:	19 ff                	sbb    %edi,%edi
+    1d79:	83 e7 60             	and    $0x60,%edi
+    1d7c:	83 c7 01             	add    $0x1,%edi
+    1d7f:	eb 21                	jmp    1da2 <linkunlink+0x72>
+    1d81:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    else if ((x % 3) == 1)
+    1d88:	83 fa 01             	cmp    $0x1,%edx
+    1d8b:	0f 84 7f 00 00 00    	je     1e10 <linkunlink+0xe0>
       unlink("x");
-    1d1d:	c7 04 24 a1 4c 00 00 	movl   $0x4ca1,(%esp)
-    1d24:	e8 b9 21 00 00       	call   3ee2 <unlink>
-  for(i = 0; i < 100; i++){
-    1d29:	83 eb 01             	sub    $0x1,%ebx
-    1d2c:	74 3c                	je     1d6a <linkunlink+0xaa>
+    1d91:	c7 04 24 71 4d 00 00 	movl   $0x4d71,(%esp)
+    1d98:	e8 15 22 00 00       	call   3fb2 <unlink>
+  for (i = 0; i < 100; i++)
+    1d9d:	83 eb 01             	sub    $0x1,%ebx
+    1da0:	74 3c                	je     1dde <linkunlink+0xae>
     x = x * 1103515245 + 12345;
-    1d2e:	69 cf 6d 4e c6 41    	imul   $0x41c64e6d,%edi,%ecx
-    1d34:	8d b9 39 30 00 00    	lea    0x3039(%ecx),%edi
-    if((x % 3) == 0){
-    1d3a:	89 f8                	mov    %edi,%eax
-    1d3c:	f7 e6                	mul    %esi
-    1d3e:	d1 ea                	shr    %edx
-    1d40:	8d 04 52             	lea    (%edx,%edx,2),%eax
-    1d43:	89 fa                	mov    %edi,%edx
-    1d45:	29 c2                	sub    %eax,%edx
-    1d47:	75 cf                	jne    1d18 <linkunlink+0x58>
+    1da2:	69 cf 6d 4e c6 41    	imul   $0x41c64e6d,%edi,%ecx
+    1da8:	8d b9 39 30 00 00    	lea    0x3039(%ecx),%edi
+    if ((x % 3) == 0)
+    1dae:	89 f8                	mov    %edi,%eax
+    1db0:	f7 e6                	mul    %esi
+    1db2:	d1 ea                	shr    %edx
+    1db4:	8d 04 52             	lea    (%edx,%edx,2),%eax
+    1db7:	89 fa                	mov    %edi,%edx
+    1db9:	29 c2                	sub    %eax,%edx
+    1dbb:	75 cb                	jne    1d88 <linkunlink+0x58>
       close(open("x", O_RDWR | O_CREATE));
-    1d49:	c7 44 24 04 02 02 00 	movl   $0x202,0x4(%esp)
-    1d50:	00 
-    1d51:	c7 04 24 a1 4c 00 00 	movl   $0x4ca1,(%esp)
-    1d58:	e8 75 21 00 00       	call   3ed2 <open>
-    1d5d:	89 04 24             	mov    %eax,(%esp)
-    1d60:	e8 55 21 00 00       	call   3eba <close>
-  for(i = 0; i < 100; i++){
-    1d65:	83 eb 01             	sub    $0x1,%ebx
-    1d68:	75 c4                	jne    1d2e <linkunlink+0x6e>
-  if(pid)
-    1d6a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-    1d6d:	85 c0                	test   %eax,%eax
-    1d6f:	74 60                	je     1dd1 <linkunlink+0x111>
-    wait();
-    1d71:	e8 24 21 00 00       	call   3e9a <wait>
+    1dbd:	c7 44 24 04 02 02 00 	movl   $0x202,0x4(%esp)
+    1dc4:	00 
+    1dc5:	c7 04 24 71 4d 00 00 	movl   $0x4d71,(%esp)
+    1dcc:	e8 d1 21 00 00       	call   3fa2 <open>
+    1dd1:	89 04 24             	mov    %eax,(%esp)
+    1dd4:	e8 b1 21 00 00       	call   3f8a <close>
+  for (i = 0; i < 100; i++)
+    1dd9:	83 eb 01             	sub    $0x1,%ebx
+    1ddc:	75 c4                	jne    1da2 <linkunlink+0x72>
+  if (pid)
+    1dde:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+    wait(0);
+    1de1:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  if (pid)
+    1de8:	85 c0                	test   %eax,%eax
+    1dea:	74 5d                	je     1e49 <linkunlink+0x119>
+    wait(0);
+    1dec:	e8 79 21 00 00       	call   3f6a <wait>
   printf(1, "linkunlink ok\n");
-    1d76:	c7 44 24 04 29 4a 00 	movl   $0x4a29,0x4(%esp)
-    1d7d:	00 
-    1d7e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    1d85:	e8 56 22 00 00       	call   3fe0 <printf>
+    1df1:	c7 44 24 04 f9 4a 00 	movl   $0x4af9,0x4(%esp)
+    1df8:	00 
+    1df9:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    1e00:	e8 ab 22 00 00       	call   40b0 <printf>
 }
-    1d8a:	83 c4 1c             	add    $0x1c,%esp
-    1d8d:	5b                   	pop    %ebx
-    1d8e:	5e                   	pop    %esi
-    1d8f:	5f                   	pop    %edi
-    1d90:	5d                   	pop    %ebp
-    1d91:	c3                   	ret    
-    1d92:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    1e05:	83 c4 1c             	add    $0x1c,%esp
+    1e08:	5b                   	pop    %ebx
+    1e09:	5e                   	pop    %esi
+    1e0a:	5f                   	pop    %edi
+    1e0b:	5d                   	pop    %ebp
+    1e0c:	c3                   	ret    
+    1e0d:	8d 76 00             	lea    0x0(%esi),%esi
       link("cat", "x");
-    1d98:	c7 44 24 04 a1 4c 00 	movl   $0x4ca1,0x4(%esp)
-    1d9f:	00 
-    1da0:	c7 04 24 25 4a 00 00 	movl   $0x4a25,(%esp)
-    1da7:	e8 46 21 00 00       	call   3ef2 <link>
-    1dac:	e9 78 ff ff ff       	jmp    1d29 <linkunlink+0x69>
+    1e10:	c7 44 24 04 71 4d 00 	movl   $0x4d71,0x4(%esp)
+    1e17:	00 
+    1e18:	c7 04 24 f5 4a 00 00 	movl   $0x4af5,(%esp)
+    1e1f:	e8 9e 21 00 00       	call   3fc2 <link>
+    1e24:	e9 74 ff ff ff       	jmp    1d9d <linkunlink+0x6d>
     printf(1, "fork failed\n");
-    1db1:	c7 44 24 04 89 52 00 	movl   $0x5289,0x4(%esp)
-    1db8:	00 
-    1db9:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    1dc0:	e8 1b 22 00 00       	call   3fe0 <printf>
+    1e29:	c7 44 24 04 59 53 00 	movl   $0x5359,0x4(%esp)
+    1e30:	00 
+    1e31:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    1e38:	e8 73 22 00 00       	call   40b0 <printf>
     exit(0);
-    1dc5:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    1dcc:	e8 c1 20 00 00       	call   3e92 <exit>
+    1e3d:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    1e44:	e8 19 21 00 00       	call   3f62 <exit>
     exit(0);
-    1dd1:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    1dd8:	e8 b5 20 00 00       	call   3e92 <exit>
-    1ddd:	8d 76 00             	lea    0x0(%esi),%esi
+    1e49:	e8 14 21 00 00       	call   3f62 <exit>
+    1e4e:	66 90                	xchg   %ax,%ax
 
-00001de0 <bigdir>:
+00001e50 <bigdir>:
 {
-    1de0:	55                   	push   %ebp
-    1de1:	89 e5                	mov    %esp,%ebp
-    1de3:	56                   	push   %esi
-    1de4:	53                   	push   %ebx
-    1de5:	83 ec 20             	sub    $0x20,%esp
+    1e50:	55                   	push   %ebp
+    1e51:	89 e5                	mov    %esp,%ebp
+    1e53:	56                   	push   %esi
+    1e54:	53                   	push   %ebx
+    1e55:	83 ec 20             	sub    $0x20,%esp
   printf(1, "bigdir test\n");
-    1de8:	c7 44 24 04 38 4a 00 	movl   $0x4a38,0x4(%esp)
-    1def:	00 
-    1df0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    1df7:	e8 e4 21 00 00       	call   3fe0 <printf>
+    1e58:	c7 44 24 04 08 4b 00 	movl   $0x4b08,0x4(%esp)
+    1e5f:	00 
+    1e60:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    1e67:	e8 44 22 00 00       	call   40b0 <printf>
   unlink("bd");
-    1dfc:	c7 04 24 45 4a 00 00 	movl   $0x4a45,(%esp)
-    1e03:	e8 da 20 00 00       	call   3ee2 <unlink>
+    1e6c:	c7 04 24 15 4b 00 00 	movl   $0x4b15,(%esp)
+    1e73:	e8 3a 21 00 00       	call   3fb2 <unlink>
   fd = open("bd", O_CREATE);
-    1e08:	c7 44 24 04 00 02 00 	movl   $0x200,0x4(%esp)
-    1e0f:	00 
-    1e10:	c7 04 24 45 4a 00 00 	movl   $0x4a45,(%esp)
-    1e17:	e8 b6 20 00 00       	call   3ed2 <open>
-  if(fd < 0){
-    1e1c:	85 c0                	test   %eax,%eax
-    1e1e:	0f 88 f4 00 00 00    	js     1f18 <bigdir+0x138>
+    1e78:	c7 44 24 04 00 02 00 	movl   $0x200,0x4(%esp)
+    1e7f:	00 
+    1e80:	c7 04 24 15 4b 00 00 	movl   $0x4b15,(%esp)
+    1e87:	e8 16 21 00 00       	call   3fa2 <open>
+  if (fd < 0)
+    1e8c:	85 c0                	test   %eax,%eax
+    1e8e:	0f 88 f4 00 00 00    	js     1f88 <bigdir+0x138>
   close(fd);
-    1e24:	89 04 24             	mov    %eax,(%esp)
-  for(i = 0; i < 500; i++){
-    1e27:	31 db                	xor    %ebx,%ebx
+    1e94:	89 04 24             	mov    %eax,(%esp)
+  for (i = 0; i < 500; i++)
+    1e97:	31 db                	xor    %ebx,%ebx
   close(fd);
-    1e29:	e8 8c 20 00 00       	call   3eba <close>
-    1e2e:	8d 75 ee             	lea    -0x12(%ebp),%esi
-    1e31:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    1e99:	e8 ec 20 00 00       	call   3f8a <close>
+    1e9e:	8d 75 ee             	lea    -0x12(%ebp),%esi
+    1ea1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     name[1] = '0' + (i / 64);
-    1e38:	89 d8                	mov    %ebx,%eax
-    1e3a:	c1 f8 06             	sar    $0x6,%eax
-    1e3d:	83 c0 30             	add    $0x30,%eax
-    1e40:	88 45 ef             	mov    %al,-0x11(%ebp)
+    1ea8:	89 d8                	mov    %ebx,%eax
+    1eaa:	c1 f8 06             	sar    $0x6,%eax
+    1ead:	83 c0 30             	add    $0x30,%eax
+    1eb0:	88 45 ef             	mov    %al,-0x11(%ebp)
     name[2] = '0' + (i % 64);
-    1e43:	89 d8                	mov    %ebx,%eax
-    1e45:	83 e0 3f             	and    $0x3f,%eax
-    1e48:	83 c0 30             	add    $0x30,%eax
-    if(link("bd", name) != 0){
-    1e4b:	89 74 24 04          	mov    %esi,0x4(%esp)
-    1e4f:	c7 04 24 45 4a 00 00 	movl   $0x4a45,(%esp)
+    1eb3:	89 d8                	mov    %ebx,%eax
+    1eb5:	83 e0 3f             	and    $0x3f,%eax
+    1eb8:	83 c0 30             	add    $0x30,%eax
+    if (link("bd", name) != 0)
+    1ebb:	89 74 24 04          	mov    %esi,0x4(%esp)
+    1ebf:	c7 04 24 15 4b 00 00 	movl   $0x4b15,(%esp)
     name[0] = 'x';
-    1e56:	c6 45 ee 78          	movb   $0x78,-0x12(%ebp)
+    1ec6:	c6 45 ee 78          	movb   $0x78,-0x12(%ebp)
     name[2] = '0' + (i % 64);
-    1e5a:	88 45 f0             	mov    %al,-0x10(%ebp)
+    1eca:	88 45 f0             	mov    %al,-0x10(%ebp)
     name[3] = '\0';
-    1e5d:	c6 45 f1 00          	movb   $0x0,-0xf(%ebp)
-    if(link("bd", name) != 0){
-    1e61:	e8 8c 20 00 00       	call   3ef2 <link>
-    1e66:	85 c0                	test   %eax,%eax
-    1e68:	75 6e                	jne    1ed8 <bigdir+0xf8>
-  for(i = 0; i < 500; i++){
-    1e6a:	83 c3 01             	add    $0x1,%ebx
-    1e6d:	81 fb f4 01 00 00    	cmp    $0x1f4,%ebx
-    1e73:	75 c3                	jne    1e38 <bigdir+0x58>
+    1ecd:	c6 45 f1 00          	movb   $0x0,-0xf(%ebp)
+    if (link("bd", name) != 0)
+    1ed1:	e8 ec 20 00 00       	call   3fc2 <link>
+    1ed6:	85 c0                	test   %eax,%eax
+    1ed8:	75 6e                	jne    1f48 <bigdir+0xf8>
+  for (i = 0; i < 500; i++)
+    1eda:	83 c3 01             	add    $0x1,%ebx
+    1edd:	81 fb f4 01 00 00    	cmp    $0x1f4,%ebx
+    1ee3:	75 c3                	jne    1ea8 <bigdir+0x58>
   unlink("bd");
-    1e75:	c7 04 24 45 4a 00 00 	movl   $0x4a45,(%esp)
-  for(i = 0; i < 500; i++){
-    1e7c:	66 31 db             	xor    %bx,%bx
+    1ee5:	c7 04 24 15 4b 00 00 	movl   $0x4b15,(%esp)
+  for (i = 0; i < 500; i++)
+    1eec:	66 31 db             	xor    %bx,%bx
   unlink("bd");
-    1e7f:	e8 5e 20 00 00       	call   3ee2 <unlink>
-    1e84:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    1eef:	e8 be 20 00 00       	call   3fb2 <unlink>
+    1ef4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     name[1] = '0' + (i / 64);
-    1e88:	89 d8                	mov    %ebx,%eax
-    1e8a:	c1 f8 06             	sar    $0x6,%eax
-    1e8d:	83 c0 30             	add    $0x30,%eax
-    1e90:	88 45 ef             	mov    %al,-0x11(%ebp)
+    1ef8:	89 d8                	mov    %ebx,%eax
+    1efa:	c1 f8 06             	sar    $0x6,%eax
+    1efd:	83 c0 30             	add    $0x30,%eax
+    1f00:	88 45 ef             	mov    %al,-0x11(%ebp)
     name[2] = '0' + (i % 64);
-    1e93:	89 d8                	mov    %ebx,%eax
-    1e95:	83 e0 3f             	and    $0x3f,%eax
-    1e98:	83 c0 30             	add    $0x30,%eax
-    if(unlink(name) != 0){
-    1e9b:	89 34 24             	mov    %esi,(%esp)
+    1f03:	89 d8                	mov    %ebx,%eax
+    1f05:	83 e0 3f             	and    $0x3f,%eax
+    1f08:	83 c0 30             	add    $0x30,%eax
+    if (unlink(name) != 0)
+    1f0b:	89 34 24             	mov    %esi,(%esp)
     name[0] = 'x';
-    1e9e:	c6 45 ee 78          	movb   $0x78,-0x12(%ebp)
+    1f0e:	c6 45 ee 78          	movb   $0x78,-0x12(%ebp)
     name[2] = '0' + (i % 64);
-    1ea2:	88 45 f0             	mov    %al,-0x10(%ebp)
+    1f12:	88 45 f0             	mov    %al,-0x10(%ebp)
     name[3] = '\0';
-    1ea5:	c6 45 f1 00          	movb   $0x0,-0xf(%ebp)
-    if(unlink(name) != 0){
-    1ea9:	e8 34 20 00 00       	call   3ee2 <unlink>
-    1eae:	85 c0                	test   %eax,%eax
-    1eb0:	75 46                	jne    1ef8 <bigdir+0x118>
-  for(i = 0; i < 500; i++){
-    1eb2:	83 c3 01             	add    $0x1,%ebx
-    1eb5:	81 fb f4 01 00 00    	cmp    $0x1f4,%ebx
-    1ebb:	75 cb                	jne    1e88 <bigdir+0xa8>
+    1f15:	c6 45 f1 00          	movb   $0x0,-0xf(%ebp)
+    if (unlink(name) != 0)
+    1f19:	e8 94 20 00 00       	call   3fb2 <unlink>
+    1f1e:	85 c0                	test   %eax,%eax
+    1f20:	75 46                	jne    1f68 <bigdir+0x118>
+  for (i = 0; i < 500; i++)
+    1f22:	83 c3 01             	add    $0x1,%ebx
+    1f25:	81 fb f4 01 00 00    	cmp    $0x1f4,%ebx
+    1f2b:	75 cb                	jne    1ef8 <bigdir+0xa8>
   printf(1, "bigdir ok\n");
-    1ebd:	c7 44 24 04 87 4a 00 	movl   $0x4a87,0x4(%esp)
-    1ec4:	00 
-    1ec5:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    1ecc:	e8 0f 21 00 00       	call   3fe0 <printf>
+    1f2d:	c7 44 24 04 57 4b 00 	movl   $0x4b57,0x4(%esp)
+    1f34:	00 
+    1f35:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    1f3c:	e8 6f 21 00 00       	call   40b0 <printf>
 }
-    1ed1:	83 c4 20             	add    $0x20,%esp
-    1ed4:	5b                   	pop    %ebx
-    1ed5:	5e                   	pop    %esi
-    1ed6:	5d                   	pop    %ebp
-    1ed7:	c3                   	ret    
+    1f41:	83 c4 20             	add    $0x20,%esp
+    1f44:	5b                   	pop    %ebx
+    1f45:	5e                   	pop    %esi
+    1f46:	5d                   	pop    %ebp
+    1f47:	c3                   	ret    
       printf(1, "bigdir link failed\n");
-    1ed8:	c7 44 24 04 5e 4a 00 	movl   $0x4a5e,0x4(%esp)
-    1edf:	00 
-    1ee0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    1ee7:	e8 f4 20 00 00       	call   3fe0 <printf>
+    1f48:	c7 44 24 04 2e 4b 00 	movl   $0x4b2e,0x4(%esp)
+    1f4f:	00 
+    1f50:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    1f57:	e8 54 21 00 00       	call   40b0 <printf>
       exit(0);
-    1eec:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    1ef3:	e8 9a 1f 00 00       	call   3e92 <exit>
+    1f5c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    1f63:	e8 fa 1f 00 00       	call   3f62 <exit>
       printf(1, "bigdir unlink failed");
-    1ef8:	c7 44 24 04 72 4a 00 	movl   $0x4a72,0x4(%esp)
-    1eff:	00 
-    1f00:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    1f07:	e8 d4 20 00 00       	call   3fe0 <printf>
+    1f68:	c7 44 24 04 42 4b 00 	movl   $0x4b42,0x4(%esp)
+    1f6f:	00 
+    1f70:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    1f77:	e8 34 21 00 00       	call   40b0 <printf>
       exit(0);
-    1f0c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    1f13:	e8 7a 1f 00 00       	call   3e92 <exit>
+    1f7c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    1f83:	e8 da 1f 00 00       	call   3f62 <exit>
     printf(1, "bigdir create failed\n");
-    1f18:	c7 44 24 04 48 4a 00 	movl   $0x4a48,0x4(%esp)
-    1f1f:	00 
-    1f20:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    1f27:	e8 b4 20 00 00       	call   3fe0 <printf>
+    1f88:	c7 44 24 04 18 4b 00 	movl   $0x4b18,0x4(%esp)
+    1f8f:	00 
+    1f90:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    1f97:	e8 14 21 00 00       	call   40b0 <printf>
     exit(0);
-    1f2c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    1f33:	e8 5a 1f 00 00       	call   3e92 <exit>
-    1f38:	90                   	nop
-    1f39:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    1f9c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    1fa3:	e8 ba 1f 00 00       	call   3f62 <exit>
+    1fa8:	90                   	nop
+    1fa9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-00001f40 <subdir>:
+00001fb0 <subdir>:
 {
-    1f40:	55                   	push   %ebp
-    1f41:	89 e5                	mov    %esp,%ebp
-    1f43:	53                   	push   %ebx
-    1f44:	83 ec 14             	sub    $0x14,%esp
+    1fb0:	55                   	push   %ebp
+    1fb1:	89 e5                	mov    %esp,%ebp
+    1fb3:	53                   	push   %ebx
+    1fb4:	83 ec 14             	sub    $0x14,%esp
   printf(1, "subdir test\n");
-    1f47:	c7 44 24 04 92 4a 00 	movl   $0x4a92,0x4(%esp)
-    1f4e:	00 
-    1f4f:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    1f56:	e8 85 20 00 00       	call   3fe0 <printf>
+    1fb7:	c7 44 24 04 62 4b 00 	movl   $0x4b62,0x4(%esp)
+    1fbe:	00 
+    1fbf:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    1fc6:	e8 e5 20 00 00       	call   40b0 <printf>
   unlink("ff");
-    1f5b:	c7 04 24 1b 4b 00 00 	movl   $0x4b1b,(%esp)
-    1f62:	e8 7b 1f 00 00       	call   3ee2 <unlink>
-  if(mkdir("dd") != 0){
-    1f67:	c7 04 24 b8 4b 00 00 	movl   $0x4bb8,(%esp)
-    1f6e:	e8 87 1f 00 00       	call   3efa <mkdir>
-    1f73:	85 c0                	test   %eax,%eax
-    1f75:	0f 85 a1 06 00 00    	jne    261c <subdir+0x6dc>
+    1fcb:	c7 04 24 eb 4b 00 00 	movl   $0x4beb,(%esp)
+    1fd2:	e8 db 1f 00 00       	call   3fb2 <unlink>
+  if (mkdir("dd") != 0)
+    1fd7:	c7 04 24 88 4c 00 00 	movl   $0x4c88,(%esp)
+    1fde:	e8 e7 1f 00 00       	call   3fca <mkdir>
+    1fe3:	85 c0                	test   %eax,%eax
+    1fe5:	0f 85 a1 06 00 00    	jne    268c <subdir+0x6dc>
   fd = open("dd/ff", O_CREATE | O_RDWR);
-    1f7b:	c7 44 24 04 02 02 00 	movl   $0x202,0x4(%esp)
-    1f82:	00 
-    1f83:	c7 04 24 f1 4a 00 00 	movl   $0x4af1,(%esp)
-    1f8a:	e8 43 1f 00 00       	call   3ed2 <open>
-  if(fd < 0){
-    1f8f:	85 c0                	test   %eax,%eax
+    1feb:	c7 44 24 04 02 02 00 	movl   $0x202,0x4(%esp)
+    1ff2:	00 
+    1ff3:	c7 04 24 c1 4b 00 00 	movl   $0x4bc1,(%esp)
+    1ffa:	e8 a3 1f 00 00       	call   3fa2 <open>
+  if (fd < 0)
+    1fff:	85 c0                	test   %eax,%eax
   fd = open("dd/ff", O_CREATE | O_RDWR);
-    1f91:	89 c3                	mov    %eax,%ebx
-  if(fd < 0){
-    1f93:	0f 88 63 06 00 00    	js     25fc <subdir+0x6bc>
+    2001:	89 c3                	mov    %eax,%ebx
+  if (fd < 0)
+    2003:	0f 88 63 06 00 00    	js     266c <subdir+0x6bc>
   write(fd, "ff", 2);
-    1f99:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
-    1fa0:	00 
-    1fa1:	c7 44 24 04 1b 4b 00 	movl   $0x4b1b,0x4(%esp)
-    1fa8:	00 
-    1fa9:	89 04 24             	mov    %eax,(%esp)
-    1fac:	e8 01 1f 00 00       	call   3eb2 <write>
+    2009:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
+    2010:	00 
+    2011:	c7 44 24 04 eb 4b 00 	movl   $0x4beb,0x4(%esp)
+    2018:	00 
+    2019:	89 04 24             	mov    %eax,(%esp)
+    201c:	e8 61 1f 00 00       	call   3f82 <write>
   close(fd);
-    1fb1:	89 1c 24             	mov    %ebx,(%esp)
-    1fb4:	e8 01 1f 00 00       	call   3eba <close>
-  if(unlink("dd") >= 0){
-    1fb9:	c7 04 24 b8 4b 00 00 	movl   $0x4bb8,(%esp)
-    1fc0:	e8 1d 1f 00 00       	call   3ee2 <unlink>
-    1fc5:	85 c0                	test   %eax,%eax
-    1fc7:	0f 89 0f 06 00 00    	jns    25dc <subdir+0x69c>
-  if(mkdir("/dd/dd") != 0){
-    1fcd:	c7 04 24 cc 4a 00 00 	movl   $0x4acc,(%esp)
-    1fd4:	e8 21 1f 00 00       	call   3efa <mkdir>
-    1fd9:	85 c0                	test   %eax,%eax
-    1fdb:	0f 85 db 05 00 00    	jne    25bc <subdir+0x67c>
+    2021:	89 1c 24             	mov    %ebx,(%esp)
+    2024:	e8 61 1f 00 00       	call   3f8a <close>
+  if (unlink("dd") >= 0)
+    2029:	c7 04 24 88 4c 00 00 	movl   $0x4c88,(%esp)
+    2030:	e8 7d 1f 00 00       	call   3fb2 <unlink>
+    2035:	85 c0                	test   %eax,%eax
+    2037:	0f 89 0f 06 00 00    	jns    264c <subdir+0x69c>
+  if (mkdir("/dd/dd") != 0)
+    203d:	c7 04 24 9c 4b 00 00 	movl   $0x4b9c,(%esp)
+    2044:	e8 81 1f 00 00       	call   3fca <mkdir>
+    2049:	85 c0                	test   %eax,%eax
+    204b:	0f 85 db 05 00 00    	jne    262c <subdir+0x67c>
   fd = open("dd/dd/ff", O_CREATE | O_RDWR);
-    1fe1:	c7 44 24 04 02 02 00 	movl   $0x202,0x4(%esp)
-    1fe8:	00 
-    1fe9:	c7 04 24 ee 4a 00 00 	movl   $0x4aee,(%esp)
-    1ff0:	e8 dd 1e 00 00       	call   3ed2 <open>
-  if(fd < 0){
-    1ff5:	85 c0                	test   %eax,%eax
+    2051:	c7 44 24 04 02 02 00 	movl   $0x202,0x4(%esp)
+    2058:	00 
+    2059:	c7 04 24 be 4b 00 00 	movl   $0x4bbe,(%esp)
+    2060:	e8 3d 1f 00 00       	call   3fa2 <open>
+  if (fd < 0)
+    2065:	85 c0                	test   %eax,%eax
   fd = open("dd/dd/ff", O_CREATE | O_RDWR);
-    1ff7:	89 c3                	mov    %eax,%ebx
-  if(fd < 0){
-    1ff9:	0f 88 5d 04 00 00    	js     245c <subdir+0x51c>
+    2067:	89 c3                	mov    %eax,%ebx
+  if (fd < 0)
+    2069:	0f 88 5d 04 00 00    	js     24cc <subdir+0x51c>
   write(fd, "FF", 2);
-    1fff:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
-    2006:	00 
-    2007:	c7 44 24 04 0f 4b 00 	movl   $0x4b0f,0x4(%esp)
-    200e:	00 
-    200f:	89 04 24             	mov    %eax,(%esp)
-    2012:	e8 9b 1e 00 00       	call   3eb2 <write>
+    206f:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
+    2076:	00 
+    2077:	c7 44 24 04 df 4b 00 	movl   $0x4bdf,0x4(%esp)
+    207e:	00 
+    207f:	89 04 24             	mov    %eax,(%esp)
+    2082:	e8 fb 1e 00 00       	call   3f82 <write>
   close(fd);
-    2017:	89 1c 24             	mov    %ebx,(%esp)
-    201a:	e8 9b 1e 00 00       	call   3eba <close>
+    2087:	89 1c 24             	mov    %ebx,(%esp)
+    208a:	e8 fb 1e 00 00       	call   3f8a <close>
   fd = open("dd/dd/../ff", 0);
-    201f:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-    2026:	00 
-    2027:	c7 04 24 12 4b 00 00 	movl   $0x4b12,(%esp)
-    202e:	e8 9f 1e 00 00       	call   3ed2 <open>
-  if(fd < 0){
-    2033:	85 c0                	test   %eax,%eax
+    208f:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+    2096:	00 
+    2097:	c7 04 24 e2 4b 00 00 	movl   $0x4be2,(%esp)
+    209e:	e8 ff 1e 00 00       	call   3fa2 <open>
+  if (fd < 0)
+    20a3:	85 c0                	test   %eax,%eax
   fd = open("dd/dd/../ff", 0);
-    2035:	89 c3                	mov    %eax,%ebx
-  if(fd < 0){
-    2037:	0f 88 ff 03 00 00    	js     243c <subdir+0x4fc>
+    20a5:	89 c3                	mov    %eax,%ebx
+  if (fd < 0)
+    20a7:	0f 88 ff 03 00 00    	js     24ac <subdir+0x4fc>
   cc = read(fd, buf, sizeof(buf));
-    203d:	c7 44 24 08 00 20 00 	movl   $0x2000,0x8(%esp)
-    2044:	00 
-    2045:	c7 44 24 04 a0 8b 00 	movl   $0x8ba0,0x4(%esp)
-    204c:	00 
-    204d:	89 04 24             	mov    %eax,(%esp)
-    2050:	e8 55 1e 00 00       	call   3eaa <read>
-  if(cc != 2 || buf[0] != 'f'){
-    2055:	83 f8 02             	cmp    $0x2,%eax
-    2058:	0f 85 fe 02 00 00    	jne    235c <subdir+0x41c>
-    205e:	80 3d a0 8b 00 00 66 	cmpb   $0x66,0x8ba0
-    2065:	0f 85 f1 02 00 00    	jne    235c <subdir+0x41c>
+    20ad:	c7 44 24 08 00 20 00 	movl   $0x2000,0x8(%esp)
+    20b4:	00 
+    20b5:	c7 44 24 04 80 8c 00 	movl   $0x8c80,0x4(%esp)
+    20bc:	00 
+    20bd:	89 04 24             	mov    %eax,(%esp)
+    20c0:	e8 b5 1e 00 00       	call   3f7a <read>
+  if (cc != 2 || buf[0] != 'f')
+    20c5:	83 f8 02             	cmp    $0x2,%eax
+    20c8:	0f 85 fe 02 00 00    	jne    23cc <subdir+0x41c>
+    20ce:	80 3d 80 8c 00 00 66 	cmpb   $0x66,0x8c80
+    20d5:	0f 85 f1 02 00 00    	jne    23cc <subdir+0x41c>
   close(fd);
-    206b:	89 1c 24             	mov    %ebx,(%esp)
-    206e:	e8 47 1e 00 00       	call   3eba <close>
-  if(link("dd/dd/ff", "dd/dd/ffff") != 0){
-    2073:	c7 44 24 04 52 4b 00 	movl   $0x4b52,0x4(%esp)
-    207a:	00 
-    207b:	c7 04 24 ee 4a 00 00 	movl   $0x4aee,(%esp)
-    2082:	e8 6b 1e 00 00       	call   3ef2 <link>
-    2087:	85 c0                	test   %eax,%eax
-    2089:	0f 85 0d 04 00 00    	jne    249c <subdir+0x55c>
-  if(unlink("dd/dd/ff") != 0){
-    208f:	c7 04 24 ee 4a 00 00 	movl   $0x4aee,(%esp)
-    2096:	e8 47 1e 00 00       	call   3ee2 <unlink>
-    209b:	85 c0                	test   %eax,%eax
-    209d:	0f 85 f9 02 00 00    	jne    239c <subdir+0x45c>
-  if(open("dd/dd/ff", O_RDONLY) >= 0){
-    20a3:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-    20aa:	00 
-    20ab:	c7 04 24 ee 4a 00 00 	movl   $0x4aee,(%esp)
-    20b2:	e8 1b 1e 00 00       	call   3ed2 <open>
-    20b7:	85 c0                	test   %eax,%eax
-    20b9:	0f 89 dd 04 00 00    	jns    259c <subdir+0x65c>
-  if(chdir("dd") != 0){
-    20bf:	c7 04 24 b8 4b 00 00 	movl   $0x4bb8,(%esp)
-    20c6:	e8 37 1e 00 00       	call   3f02 <chdir>
-    20cb:	85 c0                	test   %eax,%eax
-    20cd:	0f 85 a9 04 00 00    	jne    257c <subdir+0x63c>
-  if(chdir("dd/../../dd") != 0){
-    20d3:	c7 04 24 86 4b 00 00 	movl   $0x4b86,(%esp)
-    20da:	e8 23 1e 00 00       	call   3f02 <chdir>
-    20df:	85 c0                	test   %eax,%eax
-    20e1:	0f 85 95 02 00 00    	jne    237c <subdir+0x43c>
-  if(chdir("dd/../../../dd") != 0){
-    20e7:	c7 04 24 ac 4b 00 00 	movl   $0x4bac,(%esp)
-    20ee:	e8 0f 1e 00 00       	call   3f02 <chdir>
-    20f3:	85 c0                	test   %eax,%eax
-    20f5:	0f 85 81 02 00 00    	jne    237c <subdir+0x43c>
-  if(chdir("./..") != 0){
-    20fb:	c7 04 24 bb 4b 00 00 	movl   $0x4bbb,(%esp)
-    2102:	e8 fb 1d 00 00       	call   3f02 <chdir>
-    2107:	85 c0                	test   %eax,%eax
-    2109:	0f 85 6d 03 00 00    	jne    247c <subdir+0x53c>
+    20db:	89 1c 24             	mov    %ebx,(%esp)
+    20de:	e8 a7 1e 00 00       	call   3f8a <close>
+  if (link("dd/dd/ff", "dd/dd/ffff") != 0)
+    20e3:	c7 44 24 04 22 4c 00 	movl   $0x4c22,0x4(%esp)
+    20ea:	00 
+    20eb:	c7 04 24 be 4b 00 00 	movl   $0x4bbe,(%esp)
+    20f2:	e8 cb 1e 00 00       	call   3fc2 <link>
+    20f7:	85 c0                	test   %eax,%eax
+    20f9:	0f 85 0d 04 00 00    	jne    250c <subdir+0x55c>
+  if (unlink("dd/dd/ff") != 0)
+    20ff:	c7 04 24 be 4b 00 00 	movl   $0x4bbe,(%esp)
+    2106:	e8 a7 1e 00 00       	call   3fb2 <unlink>
+    210b:	85 c0                	test   %eax,%eax
+    210d:	0f 85 f9 02 00 00    	jne    240c <subdir+0x45c>
+  if (open("dd/dd/ff", O_RDONLY) >= 0)
+    2113:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+    211a:	00 
+    211b:	c7 04 24 be 4b 00 00 	movl   $0x4bbe,(%esp)
+    2122:	e8 7b 1e 00 00       	call   3fa2 <open>
+    2127:	85 c0                	test   %eax,%eax
+    2129:	0f 89 dd 04 00 00    	jns    260c <subdir+0x65c>
+  if (chdir("dd") != 0)
+    212f:	c7 04 24 88 4c 00 00 	movl   $0x4c88,(%esp)
+    2136:	e8 97 1e 00 00       	call   3fd2 <chdir>
+    213b:	85 c0                	test   %eax,%eax
+    213d:	0f 85 a9 04 00 00    	jne    25ec <subdir+0x63c>
+  if (chdir("dd/../../dd") != 0)
+    2143:	c7 04 24 56 4c 00 00 	movl   $0x4c56,(%esp)
+    214a:	e8 83 1e 00 00       	call   3fd2 <chdir>
+    214f:	85 c0                	test   %eax,%eax
+    2151:	0f 85 95 02 00 00    	jne    23ec <subdir+0x43c>
+  if (chdir("dd/../../../dd") != 0)
+    2157:	c7 04 24 7c 4c 00 00 	movl   $0x4c7c,(%esp)
+    215e:	e8 6f 1e 00 00       	call   3fd2 <chdir>
+    2163:	85 c0                	test   %eax,%eax
+    2165:	0f 85 81 02 00 00    	jne    23ec <subdir+0x43c>
+  if (chdir("./..") != 0)
+    216b:	c7 04 24 8b 4c 00 00 	movl   $0x4c8b,(%esp)
+    2172:	e8 5b 1e 00 00       	call   3fd2 <chdir>
+    2177:	85 c0                	test   %eax,%eax
+    2179:	0f 85 6d 03 00 00    	jne    24ec <subdir+0x53c>
   fd = open("dd/dd/ffff", 0);
-    210f:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-    2116:	00 
-    2117:	c7 04 24 52 4b 00 00 	movl   $0x4b52,(%esp)
-    211e:	e8 af 1d 00 00       	call   3ed2 <open>
-  if(fd < 0){
-    2123:	85 c0                	test   %eax,%eax
+    217f:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+    2186:	00 
+    2187:	c7 04 24 22 4c 00 00 	movl   $0x4c22,(%esp)
+    218e:	e8 0f 1e 00 00       	call   3fa2 <open>
+  if (fd < 0)
+    2193:	85 c0                	test   %eax,%eax
   fd = open("dd/dd/ffff", 0);
-    2125:	89 c3                	mov    %eax,%ebx
-  if(fd < 0){
-    2127:	0f 88 6f 06 00 00    	js     279c <subdir+0x85c>
-  if(read(fd, buf, sizeof(buf)) != 2){
-    212d:	c7 44 24 08 00 20 00 	movl   $0x2000,0x8(%esp)
-    2134:	00 
-    2135:	c7 44 24 04 a0 8b 00 	movl   $0x8ba0,0x4(%esp)
-    213c:	00 
-    213d:	89 04 24             	mov    %eax,(%esp)
-    2140:	e8 65 1d 00 00       	call   3eaa <read>
-    2145:	83 f8 02             	cmp    $0x2,%eax
-    2148:	0f 85 2e 06 00 00    	jne    277c <subdir+0x83c>
+    2195:	89 c3                	mov    %eax,%ebx
+  if (fd < 0)
+    2197:	0f 88 6f 06 00 00    	js     280c <subdir+0x85c>
+  if (read(fd, buf, sizeof(buf)) != 2)
+    219d:	c7 44 24 08 00 20 00 	movl   $0x2000,0x8(%esp)
+    21a4:	00 
+    21a5:	c7 44 24 04 80 8c 00 	movl   $0x8c80,0x4(%esp)
+    21ac:	00 
+    21ad:	89 04 24             	mov    %eax,(%esp)
+    21b0:	e8 c5 1d 00 00       	call   3f7a <read>
+    21b5:	83 f8 02             	cmp    $0x2,%eax
+    21b8:	0f 85 2e 06 00 00    	jne    27ec <subdir+0x83c>
   close(fd);
-    214e:	89 1c 24             	mov    %ebx,(%esp)
-    2151:	e8 64 1d 00 00       	call   3eba <close>
-  if(open("dd/dd/ff", O_RDONLY) >= 0){
-    2156:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-    215d:	00 
-    215e:	c7 04 24 ee 4a 00 00 	movl   $0x4aee,(%esp)
-    2165:	e8 68 1d 00 00       	call   3ed2 <open>
-    216a:	85 c0                	test   %eax,%eax
-    216c:	0f 89 6a 02 00 00    	jns    23dc <subdir+0x49c>
-  if(open("dd/ff/ff", O_CREATE|O_RDWR) >= 0){
-    2172:	c7 44 24 04 02 02 00 	movl   $0x202,0x4(%esp)
-    2179:	00 
-    217a:	c7 04 24 06 4c 00 00 	movl   $0x4c06,(%esp)
-    2181:	e8 4c 1d 00 00       	call   3ed2 <open>
-    2186:	85 c0                	test   %eax,%eax
-    2188:	0f 89 2e 02 00 00    	jns    23bc <subdir+0x47c>
-  if(open("dd/xx/ff", O_CREATE|O_RDWR) >= 0){
-    218e:	c7 44 24 04 02 02 00 	movl   $0x202,0x4(%esp)
-    2195:	00 
-    2196:	c7 04 24 2b 4c 00 00 	movl   $0x4c2b,(%esp)
-    219d:	e8 30 1d 00 00       	call   3ed2 <open>
-    21a2:	85 c0                	test   %eax,%eax
-    21a4:	0f 89 b2 03 00 00    	jns    255c <subdir+0x61c>
-  if(open("dd", O_CREATE) >= 0){
-    21aa:	c7 44 24 04 00 02 00 	movl   $0x200,0x4(%esp)
-    21b1:	00 
-    21b2:	c7 04 24 b8 4b 00 00 	movl   $0x4bb8,(%esp)
-    21b9:	e8 14 1d 00 00       	call   3ed2 <open>
-    21be:	85 c0                	test   %eax,%eax
-    21c0:	0f 89 76 03 00 00    	jns    253c <subdir+0x5fc>
-  if(open("dd", O_RDWR) >= 0){
-    21c6:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
+    21be:	89 1c 24             	mov    %ebx,(%esp)
+    21c1:	e8 c4 1d 00 00       	call   3f8a <close>
+  if (open("dd/dd/ff", O_RDONLY) >= 0)
+    21c6:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
     21cd:	00 
-    21ce:	c7 04 24 b8 4b 00 00 	movl   $0x4bb8,(%esp)
-    21d5:	e8 f8 1c 00 00       	call   3ed2 <open>
+    21ce:	c7 04 24 be 4b 00 00 	movl   $0x4bbe,(%esp)
+    21d5:	e8 c8 1d 00 00       	call   3fa2 <open>
     21da:	85 c0                	test   %eax,%eax
-    21dc:	0f 89 3a 03 00 00    	jns    251c <subdir+0x5dc>
-  if(open("dd", O_WRONLY) >= 0){
-    21e2:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+    21dc:	0f 89 6a 02 00 00    	jns    244c <subdir+0x49c>
+  if (open("dd/ff/ff", O_CREATE | O_RDWR) >= 0)
+    21e2:	c7 44 24 04 02 02 00 	movl   $0x202,0x4(%esp)
     21e9:	00 
-    21ea:	c7 04 24 b8 4b 00 00 	movl   $0x4bb8,(%esp)
-    21f1:	e8 dc 1c 00 00       	call   3ed2 <open>
+    21ea:	c7 04 24 d6 4c 00 00 	movl   $0x4cd6,(%esp)
+    21f1:	e8 ac 1d 00 00       	call   3fa2 <open>
     21f6:	85 c0                	test   %eax,%eax
-    21f8:	0f 89 fe 02 00 00    	jns    24fc <subdir+0x5bc>
-  if(link("dd/ff/ff", "dd/dd/xx") == 0){
-    21fe:	c7 44 24 04 9a 4c 00 	movl   $0x4c9a,0x4(%esp)
+    21f8:	0f 89 2e 02 00 00    	jns    242c <subdir+0x47c>
+  if (open("dd/xx/ff", O_CREATE | O_RDWR) >= 0)
+    21fe:	c7 44 24 04 02 02 00 	movl   $0x202,0x4(%esp)
     2205:	00 
-    2206:	c7 04 24 06 4c 00 00 	movl   $0x4c06,(%esp)
-    220d:	e8 e0 1c 00 00       	call   3ef2 <link>
+    2206:	c7 04 24 fb 4c 00 00 	movl   $0x4cfb,(%esp)
+    220d:	e8 90 1d 00 00       	call   3fa2 <open>
     2212:	85 c0                	test   %eax,%eax
-    2214:	0f 84 c2 02 00 00    	je     24dc <subdir+0x59c>
-  if(link("dd/xx/ff", "dd/dd/xx") == 0){
-    221a:	c7 44 24 04 9a 4c 00 	movl   $0x4c9a,0x4(%esp)
+    2214:	0f 89 b2 03 00 00    	jns    25cc <subdir+0x61c>
+  if (open("dd", O_CREATE) >= 0)
+    221a:	c7 44 24 04 00 02 00 	movl   $0x200,0x4(%esp)
     2221:	00 
-    2222:	c7 04 24 2b 4c 00 00 	movl   $0x4c2b,(%esp)
-    2229:	e8 c4 1c 00 00       	call   3ef2 <link>
+    2222:	c7 04 24 88 4c 00 00 	movl   $0x4c88,(%esp)
+    2229:	e8 74 1d 00 00       	call   3fa2 <open>
     222e:	85 c0                	test   %eax,%eax
-    2230:	0f 84 86 02 00 00    	je     24bc <subdir+0x57c>
-  if(link("dd/ff", "dd/dd/ffff") == 0){
-    2236:	c7 44 24 04 52 4b 00 	movl   $0x4b52,0x4(%esp)
+    2230:	0f 89 76 03 00 00    	jns    25ac <subdir+0x5fc>
+  if (open("dd", O_RDWR) >= 0)
+    2236:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
     223d:	00 
-    223e:	c7 04 24 f1 4a 00 00 	movl   $0x4af1,(%esp)
-    2245:	e8 a8 1c 00 00       	call   3ef2 <link>
+    223e:	c7 04 24 88 4c 00 00 	movl   $0x4c88,(%esp)
+    2245:	e8 58 1d 00 00       	call   3fa2 <open>
     224a:	85 c0                	test   %eax,%eax
-    224c:	0f 84 ca 01 00 00    	je     241c <subdir+0x4dc>
-  if(mkdir("dd/ff/ff") == 0){
-    2252:	c7 04 24 06 4c 00 00 	movl   $0x4c06,(%esp)
-    2259:	e8 9c 1c 00 00       	call   3efa <mkdir>
-    225e:	85 c0                	test   %eax,%eax
-    2260:	0f 84 96 01 00 00    	je     23fc <subdir+0x4bc>
-  if(mkdir("dd/xx/ff") == 0){
-    2266:	c7 04 24 2b 4c 00 00 	movl   $0x4c2b,(%esp)
-    226d:	e8 88 1c 00 00       	call   3efa <mkdir>
-    2272:	85 c0                	test   %eax,%eax
-    2274:	0f 84 e2 04 00 00    	je     275c <subdir+0x81c>
-  if(mkdir("dd/dd/ffff") == 0){
-    227a:	c7 04 24 52 4b 00 00 	movl   $0x4b52,(%esp)
-    2281:	e8 74 1c 00 00       	call   3efa <mkdir>
-    2286:	85 c0                	test   %eax,%eax
-    2288:	0f 84 ae 04 00 00    	je     273c <subdir+0x7fc>
-  if(unlink("dd/xx/ff") == 0){
-    228e:	c7 04 24 2b 4c 00 00 	movl   $0x4c2b,(%esp)
-    2295:	e8 48 1c 00 00       	call   3ee2 <unlink>
-    229a:	85 c0                	test   %eax,%eax
-    229c:	0f 84 7a 04 00 00    	je     271c <subdir+0x7dc>
-  if(unlink("dd/ff/ff") == 0){
-    22a2:	c7 04 24 06 4c 00 00 	movl   $0x4c06,(%esp)
-    22a9:	e8 34 1c 00 00       	call   3ee2 <unlink>
-    22ae:	85 c0                	test   %eax,%eax
-    22b0:	0f 84 46 04 00 00    	je     26fc <subdir+0x7bc>
-  if(chdir("dd/ff") == 0){
-    22b6:	c7 04 24 f1 4a 00 00 	movl   $0x4af1,(%esp)
-    22bd:	e8 40 1c 00 00       	call   3f02 <chdir>
-    22c2:	85 c0                	test   %eax,%eax
-    22c4:	0f 84 12 04 00 00    	je     26dc <subdir+0x79c>
-  if(chdir("dd/xx") == 0){
-    22ca:	c7 04 24 9d 4c 00 00 	movl   $0x4c9d,(%esp)
-    22d1:	e8 2c 1c 00 00       	call   3f02 <chdir>
-    22d6:	85 c0                	test   %eax,%eax
-    22d8:	0f 84 de 03 00 00    	je     26bc <subdir+0x77c>
-  if(unlink("dd/dd/ffff") != 0){
-    22de:	c7 04 24 52 4b 00 00 	movl   $0x4b52,(%esp)
-    22e5:	e8 f8 1b 00 00       	call   3ee2 <unlink>
-    22ea:	85 c0                	test   %eax,%eax
-    22ec:	0f 85 aa 00 00 00    	jne    239c <subdir+0x45c>
-  if(unlink("dd/ff") != 0){
-    22f2:	c7 04 24 f1 4a 00 00 	movl   $0x4af1,(%esp)
-    22f9:	e8 e4 1b 00 00       	call   3ee2 <unlink>
-    22fe:	85 c0                	test   %eax,%eax
-    2300:	0f 85 96 03 00 00    	jne    269c <subdir+0x75c>
-  if(unlink("dd") == 0){
-    2306:	c7 04 24 b8 4b 00 00 	movl   $0x4bb8,(%esp)
-    230d:	e8 d0 1b 00 00       	call   3ee2 <unlink>
-    2312:	85 c0                	test   %eax,%eax
-    2314:	0f 84 62 03 00 00    	je     267c <subdir+0x73c>
-  if(unlink("dd/dd") < 0){
-    231a:	c7 04 24 cd 4a 00 00 	movl   $0x4acd,(%esp)
-    2321:	e8 bc 1b 00 00       	call   3ee2 <unlink>
-    2326:	85 c0                	test   %eax,%eax
-    2328:	0f 88 2e 03 00 00    	js     265c <subdir+0x71c>
-  if(unlink("dd") < 0){
-    232e:	c7 04 24 b8 4b 00 00 	movl   $0x4bb8,(%esp)
-    2335:	e8 a8 1b 00 00       	call   3ee2 <unlink>
-    233a:	85 c0                	test   %eax,%eax
-    233c:	0f 88 fa 02 00 00    	js     263c <subdir+0x6fc>
+    224c:	0f 89 3a 03 00 00    	jns    258c <subdir+0x5dc>
+  if (open("dd", O_WRONLY) >= 0)
+    2252:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
+    2259:	00 
+    225a:	c7 04 24 88 4c 00 00 	movl   $0x4c88,(%esp)
+    2261:	e8 3c 1d 00 00       	call   3fa2 <open>
+    2266:	85 c0                	test   %eax,%eax
+    2268:	0f 89 fe 02 00 00    	jns    256c <subdir+0x5bc>
+  if (link("dd/ff/ff", "dd/dd/xx") == 0)
+    226e:	c7 44 24 04 6a 4d 00 	movl   $0x4d6a,0x4(%esp)
+    2275:	00 
+    2276:	c7 04 24 d6 4c 00 00 	movl   $0x4cd6,(%esp)
+    227d:	e8 40 1d 00 00       	call   3fc2 <link>
+    2282:	85 c0                	test   %eax,%eax
+    2284:	0f 84 c2 02 00 00    	je     254c <subdir+0x59c>
+  if (link("dd/xx/ff", "dd/dd/xx") == 0)
+    228a:	c7 44 24 04 6a 4d 00 	movl   $0x4d6a,0x4(%esp)
+    2291:	00 
+    2292:	c7 04 24 fb 4c 00 00 	movl   $0x4cfb,(%esp)
+    2299:	e8 24 1d 00 00       	call   3fc2 <link>
+    229e:	85 c0                	test   %eax,%eax
+    22a0:	0f 84 86 02 00 00    	je     252c <subdir+0x57c>
+  if (link("dd/ff", "dd/dd/ffff") == 0)
+    22a6:	c7 44 24 04 22 4c 00 	movl   $0x4c22,0x4(%esp)
+    22ad:	00 
+    22ae:	c7 04 24 c1 4b 00 00 	movl   $0x4bc1,(%esp)
+    22b5:	e8 08 1d 00 00       	call   3fc2 <link>
+    22ba:	85 c0                	test   %eax,%eax
+    22bc:	0f 84 ca 01 00 00    	je     248c <subdir+0x4dc>
+  if (mkdir("dd/ff/ff") == 0)
+    22c2:	c7 04 24 d6 4c 00 00 	movl   $0x4cd6,(%esp)
+    22c9:	e8 fc 1c 00 00       	call   3fca <mkdir>
+    22ce:	85 c0                	test   %eax,%eax
+    22d0:	0f 84 96 01 00 00    	je     246c <subdir+0x4bc>
+  if (mkdir("dd/xx/ff") == 0)
+    22d6:	c7 04 24 fb 4c 00 00 	movl   $0x4cfb,(%esp)
+    22dd:	e8 e8 1c 00 00       	call   3fca <mkdir>
+    22e2:	85 c0                	test   %eax,%eax
+    22e4:	0f 84 e2 04 00 00    	je     27cc <subdir+0x81c>
+  if (mkdir("dd/dd/ffff") == 0)
+    22ea:	c7 04 24 22 4c 00 00 	movl   $0x4c22,(%esp)
+    22f1:	e8 d4 1c 00 00       	call   3fca <mkdir>
+    22f6:	85 c0                	test   %eax,%eax
+    22f8:	0f 84 ae 04 00 00    	je     27ac <subdir+0x7fc>
+  if (unlink("dd/xx/ff") == 0)
+    22fe:	c7 04 24 fb 4c 00 00 	movl   $0x4cfb,(%esp)
+    2305:	e8 a8 1c 00 00       	call   3fb2 <unlink>
+    230a:	85 c0                	test   %eax,%eax
+    230c:	0f 84 7a 04 00 00    	je     278c <subdir+0x7dc>
+  if (unlink("dd/ff/ff") == 0)
+    2312:	c7 04 24 d6 4c 00 00 	movl   $0x4cd6,(%esp)
+    2319:	e8 94 1c 00 00       	call   3fb2 <unlink>
+    231e:	85 c0                	test   %eax,%eax
+    2320:	0f 84 46 04 00 00    	je     276c <subdir+0x7bc>
+  if (chdir("dd/ff") == 0)
+    2326:	c7 04 24 c1 4b 00 00 	movl   $0x4bc1,(%esp)
+    232d:	e8 a0 1c 00 00       	call   3fd2 <chdir>
+    2332:	85 c0                	test   %eax,%eax
+    2334:	0f 84 12 04 00 00    	je     274c <subdir+0x79c>
+  if (chdir("dd/xx") == 0)
+    233a:	c7 04 24 6d 4d 00 00 	movl   $0x4d6d,(%esp)
+    2341:	e8 8c 1c 00 00       	call   3fd2 <chdir>
+    2346:	85 c0                	test   %eax,%eax
+    2348:	0f 84 de 03 00 00    	je     272c <subdir+0x77c>
+  if (unlink("dd/dd/ffff") != 0)
+    234e:	c7 04 24 22 4c 00 00 	movl   $0x4c22,(%esp)
+    2355:	e8 58 1c 00 00       	call   3fb2 <unlink>
+    235a:	85 c0                	test   %eax,%eax
+    235c:	0f 85 aa 00 00 00    	jne    240c <subdir+0x45c>
+  if (unlink("dd/ff") != 0)
+    2362:	c7 04 24 c1 4b 00 00 	movl   $0x4bc1,(%esp)
+    2369:	e8 44 1c 00 00       	call   3fb2 <unlink>
+    236e:	85 c0                	test   %eax,%eax
+    2370:	0f 85 96 03 00 00    	jne    270c <subdir+0x75c>
+  if (unlink("dd") == 0)
+    2376:	c7 04 24 88 4c 00 00 	movl   $0x4c88,(%esp)
+    237d:	e8 30 1c 00 00       	call   3fb2 <unlink>
+    2382:	85 c0                	test   %eax,%eax
+    2384:	0f 84 62 03 00 00    	je     26ec <subdir+0x73c>
+  if (unlink("dd/dd") < 0)
+    238a:	c7 04 24 9d 4b 00 00 	movl   $0x4b9d,(%esp)
+    2391:	e8 1c 1c 00 00       	call   3fb2 <unlink>
+    2396:	85 c0                	test   %eax,%eax
+    2398:	0f 88 2e 03 00 00    	js     26cc <subdir+0x71c>
+  if (unlink("dd") < 0)
+    239e:	c7 04 24 88 4c 00 00 	movl   $0x4c88,(%esp)
+    23a5:	e8 08 1c 00 00       	call   3fb2 <unlink>
+    23aa:	85 c0                	test   %eax,%eax
+    23ac:	0f 88 fa 02 00 00    	js     26ac <subdir+0x6fc>
   printf(1, "subdir ok\n");
-    2342:	c7 44 24 04 9a 4d 00 	movl   $0x4d9a,0x4(%esp)
-    2349:	00 
-    234a:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    2351:	e8 8a 1c 00 00       	call   3fe0 <printf>
+    23b2:	c7 44 24 04 6a 4e 00 	movl   $0x4e6a,0x4(%esp)
+    23b9:	00 
+    23ba:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    23c1:	e8 ea 1c 00 00       	call   40b0 <printf>
 }
-    2356:	83 c4 14             	add    $0x14,%esp
-    2359:	5b                   	pop    %ebx
-    235a:	5d                   	pop    %ebp
-    235b:	c3                   	ret    
+    23c6:	83 c4 14             	add    $0x14,%esp
+    23c9:	5b                   	pop    %ebx
+    23ca:	5d                   	pop    %ebp
+    23cb:	c3                   	ret    
     printf(1, "dd/dd/../ff wrong content\n");
-    235c:	c7 44 24 04 37 4b 00 	movl   $0x4b37,0x4(%esp)
-    2363:	00 
-    2364:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    236b:	e8 70 1c 00 00       	call   3fe0 <printf>
+    23cc:	c7 44 24 04 07 4c 00 	movl   $0x4c07,0x4(%esp)
+    23d3:	00 
+    23d4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    23db:	e8 d0 1c 00 00       	call   40b0 <printf>
     exit(0);
-    2370:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    2377:	e8 16 1b 00 00       	call   3e92 <exit>
+    23e0:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    23e7:	e8 76 1b 00 00       	call   3f62 <exit>
     printf(1, "chdir dd/../../dd failed\n");
-    237c:	c7 44 24 04 92 4b 00 	movl   $0x4b92,0x4(%esp)
-    2383:	00 
-    2384:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    238b:	e8 50 1c 00 00       	call   3fe0 <printf>
+    23ec:	c7 44 24 04 62 4c 00 	movl   $0x4c62,0x4(%esp)
+    23f3:	00 
+    23f4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    23fb:	e8 b0 1c 00 00       	call   40b0 <printf>
     exit(0);
-    2390:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    2397:	e8 f6 1a 00 00       	call   3e92 <exit>
+    2400:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    2407:	e8 56 1b 00 00       	call   3f62 <exit>
     printf(1, "unlink dd/dd/ff failed\n");
-    239c:	c7 44 24 04 5d 4b 00 	movl   $0x4b5d,0x4(%esp)
-    23a3:	00 
-    23a4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    23ab:	e8 30 1c 00 00       	call   3fe0 <printf>
+    240c:	c7 44 24 04 2d 4c 00 	movl   $0x4c2d,0x4(%esp)
+    2413:	00 
+    2414:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    241b:	e8 90 1c 00 00       	call   40b0 <printf>
     exit(0);
-    23b0:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    23b7:	e8 d6 1a 00 00       	call   3e92 <exit>
+    2420:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    2427:	e8 36 1b 00 00       	call   3f62 <exit>
     printf(1, "create dd/ff/ff succeeded!\n");
-    23bc:	c7 44 24 04 0f 4c 00 	movl   $0x4c0f,0x4(%esp)
-    23c3:	00 
-    23c4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    23cb:	e8 10 1c 00 00       	call   3fe0 <printf>
+    242c:	c7 44 24 04 df 4c 00 	movl   $0x4cdf,0x4(%esp)
+    2433:	00 
+    2434:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    243b:	e8 70 1c 00 00       	call   40b0 <printf>
     exit(0);
-    23d0:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    23d7:	e8 b6 1a 00 00       	call   3e92 <exit>
+    2440:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    2447:	e8 16 1b 00 00       	call   3f62 <exit>
     printf(1, "open (unlinked) dd/dd/ff succeeded!\n");
-    23dc:	c7 44 24 04 f4 55 00 	movl   $0x55f4,0x4(%esp)
-    23e3:	00 
-    23e4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    23eb:	e8 f0 1b 00 00       	call   3fe0 <printf>
+    244c:	c7 44 24 04 c4 56 00 	movl   $0x56c4,0x4(%esp)
+    2453:	00 
+    2454:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    245b:	e8 50 1c 00 00       	call   40b0 <printf>
     exit(0);
-    23f0:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    23f7:	e8 96 1a 00 00       	call   3e92 <exit>
+    2460:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    2467:	e8 f6 1a 00 00       	call   3f62 <exit>
     printf(1, "mkdir dd/ff/ff succeeded!\n");
-    23fc:	c7 44 24 04 a3 4c 00 	movl   $0x4ca3,0x4(%esp)
-    2403:	00 
-    2404:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    240b:	e8 d0 1b 00 00       	call   3fe0 <printf>
+    246c:	c7 44 24 04 73 4d 00 	movl   $0x4d73,0x4(%esp)
+    2473:	00 
+    2474:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    247b:	e8 30 1c 00 00       	call   40b0 <printf>
     exit(0);
-    2410:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    2417:	e8 76 1a 00 00       	call   3e92 <exit>
+    2480:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    2487:	e8 d6 1a 00 00       	call   3f62 <exit>
     printf(1, "link dd/ff dd/dd/ffff succeeded!\n");
-    241c:	c7 44 24 04 64 56 00 	movl   $0x5664,0x4(%esp)
-    2423:	00 
-    2424:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    242b:	e8 b0 1b 00 00       	call   3fe0 <printf>
+    248c:	c7 44 24 04 34 57 00 	movl   $0x5734,0x4(%esp)
+    2493:	00 
+    2494:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    249b:	e8 10 1c 00 00       	call   40b0 <printf>
     exit(0);
-    2430:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    2437:	e8 56 1a 00 00       	call   3e92 <exit>
+    24a0:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    24a7:	e8 b6 1a 00 00       	call   3f62 <exit>
     printf(1, "open dd/dd/../ff failed\n");
-    243c:	c7 44 24 04 1e 4b 00 	movl   $0x4b1e,0x4(%esp)
-    2443:	00 
-    2444:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    244b:	e8 90 1b 00 00       	call   3fe0 <printf>
+    24ac:	c7 44 24 04 ee 4b 00 	movl   $0x4bee,0x4(%esp)
+    24b3:	00 
+    24b4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    24bb:	e8 f0 1b 00 00       	call   40b0 <printf>
     exit(0);
-    2450:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    2457:	e8 36 1a 00 00       	call   3e92 <exit>
+    24c0:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    24c7:	e8 96 1a 00 00       	call   3f62 <exit>
     printf(1, "create dd/dd/ff failed\n");
-    245c:	c7 44 24 04 f7 4a 00 	movl   $0x4af7,0x4(%esp)
-    2463:	00 
-    2464:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    246b:	e8 70 1b 00 00       	call   3fe0 <printf>
+    24cc:	c7 44 24 04 c7 4b 00 	movl   $0x4bc7,0x4(%esp)
+    24d3:	00 
+    24d4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    24db:	e8 d0 1b 00 00       	call   40b0 <printf>
     exit(0);
-    2470:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    2477:	e8 16 1a 00 00       	call   3e92 <exit>
+    24e0:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    24e7:	e8 76 1a 00 00       	call   3f62 <exit>
     printf(1, "chdir ./.. failed\n");
-    247c:	c7 44 24 04 c0 4b 00 	movl   $0x4bc0,0x4(%esp)
-    2483:	00 
-    2484:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    248b:	e8 50 1b 00 00       	call   3fe0 <printf>
+    24ec:	c7 44 24 04 90 4c 00 	movl   $0x4c90,0x4(%esp)
+    24f3:	00 
+    24f4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    24fb:	e8 b0 1b 00 00       	call   40b0 <printf>
     exit(0);
-    2490:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    2497:	e8 f6 19 00 00       	call   3e92 <exit>
+    2500:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    2507:	e8 56 1a 00 00       	call   3f62 <exit>
     printf(1, "link dd/dd/ff dd/dd/ffff failed\n");
-    249c:	c7 44 24 04 ac 55 00 	movl   $0x55ac,0x4(%esp)
-    24a3:	00 
-    24a4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    24ab:	e8 30 1b 00 00       	call   3fe0 <printf>
+    250c:	c7 44 24 04 7c 56 00 	movl   $0x567c,0x4(%esp)
+    2513:	00 
+    2514:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    251b:	e8 90 1b 00 00       	call   40b0 <printf>
     exit(0);
-    24b0:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    24b7:	e8 d6 19 00 00       	call   3e92 <exit>
+    2520:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    2527:	e8 36 1a 00 00       	call   3f62 <exit>
     printf(1, "link dd/xx/ff dd/dd/xx succeeded!\n");
-    24bc:	c7 44 24 04 40 56 00 	movl   $0x5640,0x4(%esp)
-    24c3:	00 
-    24c4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    24cb:	e8 10 1b 00 00       	call   3fe0 <printf>
+    252c:	c7 44 24 04 10 57 00 	movl   $0x5710,0x4(%esp)
+    2533:	00 
+    2534:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    253b:	e8 70 1b 00 00       	call   40b0 <printf>
     exit(0);
-    24d0:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    24d7:	e8 b6 19 00 00       	call   3e92 <exit>
+    2540:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    2547:	e8 16 1a 00 00       	call   3f62 <exit>
     printf(1, "link dd/ff/ff dd/dd/xx succeeded!\n");
-    24dc:	c7 44 24 04 1c 56 00 	movl   $0x561c,0x4(%esp)
-    24e3:	00 
-    24e4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    24eb:	e8 f0 1a 00 00       	call   3fe0 <printf>
+    254c:	c7 44 24 04 ec 56 00 	movl   $0x56ec,0x4(%esp)
+    2553:	00 
+    2554:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    255b:	e8 50 1b 00 00       	call   40b0 <printf>
     exit(0);
-    24f0:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    24f7:	e8 96 19 00 00       	call   3e92 <exit>
+    2560:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    2567:	e8 f6 19 00 00       	call   3f62 <exit>
     printf(1, "open dd wronly succeeded!\n");
-    24fc:	c7 44 24 04 7f 4c 00 	movl   $0x4c7f,0x4(%esp)
-    2503:	00 
-    2504:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    250b:	e8 d0 1a 00 00       	call   3fe0 <printf>
+    256c:	c7 44 24 04 4f 4d 00 	movl   $0x4d4f,0x4(%esp)
+    2573:	00 
+    2574:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    257b:	e8 30 1b 00 00       	call   40b0 <printf>
     exit(0);
-    2510:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    2517:	e8 76 19 00 00       	call   3e92 <exit>
+    2580:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    2587:	e8 d6 19 00 00       	call   3f62 <exit>
     printf(1, "open dd rdwr succeeded!\n");
-    251c:	c7 44 24 04 66 4c 00 	movl   $0x4c66,0x4(%esp)
-    2523:	00 
-    2524:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    252b:	e8 b0 1a 00 00       	call   3fe0 <printf>
+    258c:	c7 44 24 04 36 4d 00 	movl   $0x4d36,0x4(%esp)
+    2593:	00 
+    2594:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    259b:	e8 10 1b 00 00       	call   40b0 <printf>
     exit(0);
-    2530:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    2537:	e8 56 19 00 00       	call   3e92 <exit>
+    25a0:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    25a7:	e8 b6 19 00 00       	call   3f62 <exit>
     printf(1, "create dd succeeded!\n");
-    253c:	c7 44 24 04 50 4c 00 	movl   $0x4c50,0x4(%esp)
-    2543:	00 
-    2544:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    254b:	e8 90 1a 00 00       	call   3fe0 <printf>
+    25ac:	c7 44 24 04 20 4d 00 	movl   $0x4d20,0x4(%esp)
+    25b3:	00 
+    25b4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    25bb:	e8 f0 1a 00 00       	call   40b0 <printf>
     exit(0);
-    2550:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    2557:	e8 36 19 00 00       	call   3e92 <exit>
+    25c0:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    25c7:	e8 96 19 00 00       	call   3f62 <exit>
     printf(1, "create dd/xx/ff succeeded!\n");
-    255c:	c7 44 24 04 34 4c 00 	movl   $0x4c34,0x4(%esp)
-    2563:	00 
-    2564:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    256b:	e8 70 1a 00 00       	call   3fe0 <printf>
+    25cc:	c7 44 24 04 04 4d 00 	movl   $0x4d04,0x4(%esp)
+    25d3:	00 
+    25d4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    25db:	e8 d0 1a 00 00       	call   40b0 <printf>
     exit(0);
-    2570:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    2577:	e8 16 19 00 00       	call   3e92 <exit>
+    25e0:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    25e7:	e8 76 19 00 00       	call   3f62 <exit>
     printf(1, "chdir dd failed\n");
-    257c:	c7 44 24 04 75 4b 00 	movl   $0x4b75,0x4(%esp)
-    2583:	00 
-    2584:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    258b:	e8 50 1a 00 00       	call   3fe0 <printf>
+    25ec:	c7 44 24 04 45 4c 00 	movl   $0x4c45,0x4(%esp)
+    25f3:	00 
+    25f4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    25fb:	e8 b0 1a 00 00       	call   40b0 <printf>
     exit(0);
-    2590:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    2597:	e8 f6 18 00 00       	call   3e92 <exit>
+    2600:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    2607:	e8 56 19 00 00       	call   3f62 <exit>
     printf(1, "open (unlinked) dd/dd/ff succeeded\n");
-    259c:	c7 44 24 04 d0 55 00 	movl   $0x55d0,0x4(%esp)
-    25a3:	00 
-    25a4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    25ab:	e8 30 1a 00 00       	call   3fe0 <printf>
+    260c:	c7 44 24 04 a0 56 00 	movl   $0x56a0,0x4(%esp)
+    2613:	00 
+    2614:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    261b:	e8 90 1a 00 00       	call   40b0 <printf>
     exit(0);
-    25b0:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    25b7:	e8 d6 18 00 00       	call   3e92 <exit>
+    2620:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    2627:	e8 36 19 00 00       	call   3f62 <exit>
     printf(1, "subdir mkdir dd/dd failed\n");
-    25bc:	c7 44 24 04 d3 4a 00 	movl   $0x4ad3,0x4(%esp)
-    25c3:	00 
-    25c4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    25cb:	e8 10 1a 00 00       	call   3fe0 <printf>
+    262c:	c7 44 24 04 a3 4b 00 	movl   $0x4ba3,0x4(%esp)
+    2633:	00 
+    2634:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    263b:	e8 70 1a 00 00       	call   40b0 <printf>
     exit(0);
-    25d0:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    25d7:	e8 b6 18 00 00       	call   3e92 <exit>
+    2640:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    2647:	e8 16 19 00 00       	call   3f62 <exit>
     printf(1, "unlink dd (non-empty dir) succeeded!\n");
-    25dc:	c7 44 24 04 84 55 00 	movl   $0x5584,0x4(%esp)
-    25e3:	00 
-    25e4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    25eb:	e8 f0 19 00 00       	call   3fe0 <printf>
+    264c:	c7 44 24 04 54 56 00 	movl   $0x5654,0x4(%esp)
+    2653:	00 
+    2654:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    265b:	e8 50 1a 00 00       	call   40b0 <printf>
     exit(0);
-    25f0:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    25f7:	e8 96 18 00 00       	call   3e92 <exit>
+    2660:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    2667:	e8 f6 18 00 00       	call   3f62 <exit>
     printf(1, "create dd/ff failed\n");
-    25fc:	c7 44 24 04 b7 4a 00 	movl   $0x4ab7,0x4(%esp)
-    2603:	00 
-    2604:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    260b:	e8 d0 19 00 00       	call   3fe0 <printf>
+    266c:	c7 44 24 04 87 4b 00 	movl   $0x4b87,0x4(%esp)
+    2673:	00 
+    2674:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    267b:	e8 30 1a 00 00       	call   40b0 <printf>
     exit(0);
-    2610:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    2617:	e8 76 18 00 00       	call   3e92 <exit>
+    2680:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    2687:	e8 d6 18 00 00       	call   3f62 <exit>
     printf(1, "subdir mkdir dd failed\n");
-    261c:	c7 44 24 04 9f 4a 00 	movl   $0x4a9f,0x4(%esp)
-    2623:	00 
-    2624:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    262b:	e8 b0 19 00 00       	call   3fe0 <printf>
+    268c:	c7 44 24 04 6f 4b 00 	movl   $0x4b6f,0x4(%esp)
+    2693:	00 
+    2694:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    269b:	e8 10 1a 00 00       	call   40b0 <printf>
     exit(0);
-    2630:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    2637:	e8 56 18 00 00       	call   3e92 <exit>
+    26a0:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    26a7:	e8 b6 18 00 00       	call   3f62 <exit>
     printf(1, "unlink dd failed\n");
-    263c:	c7 44 24 04 88 4d 00 	movl   $0x4d88,0x4(%esp)
-    2643:	00 
-    2644:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    264b:	e8 90 19 00 00       	call   3fe0 <printf>
+    26ac:	c7 44 24 04 58 4e 00 	movl   $0x4e58,0x4(%esp)
+    26b3:	00 
+    26b4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    26bb:	e8 f0 19 00 00       	call   40b0 <printf>
     exit(0);
-    2650:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    2657:	e8 36 18 00 00       	call   3e92 <exit>
+    26c0:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    26c7:	e8 96 18 00 00       	call   3f62 <exit>
     printf(1, "unlink dd/dd failed\n");
-    265c:	c7 44 24 04 73 4d 00 	movl   $0x4d73,0x4(%esp)
-    2663:	00 
-    2664:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    266b:	e8 70 19 00 00       	call   3fe0 <printf>
+    26cc:	c7 44 24 04 43 4e 00 	movl   $0x4e43,0x4(%esp)
+    26d3:	00 
+    26d4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    26db:	e8 d0 19 00 00       	call   40b0 <printf>
     exit(0);
-    2670:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    2677:	e8 16 18 00 00       	call   3e92 <exit>
+    26e0:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    26e7:	e8 76 18 00 00       	call   3f62 <exit>
     printf(1, "unlink non-empty dd succeeded!\n");
-    267c:	c7 44 24 04 88 56 00 	movl   $0x5688,0x4(%esp)
-    2683:	00 
-    2684:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    268b:	e8 50 19 00 00       	call   3fe0 <printf>
+    26ec:	c7 44 24 04 58 57 00 	movl   $0x5758,0x4(%esp)
+    26f3:	00 
+    26f4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    26fb:	e8 b0 19 00 00       	call   40b0 <printf>
     exit(0);
-    2690:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    2697:	e8 f6 17 00 00       	call   3e92 <exit>
+    2700:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    2707:	e8 56 18 00 00       	call   3f62 <exit>
     printf(1, "unlink dd/ff failed\n");
-    269c:	c7 44 24 04 5e 4d 00 	movl   $0x4d5e,0x4(%esp)
-    26a3:	00 
-    26a4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    26ab:	e8 30 19 00 00       	call   3fe0 <printf>
+    270c:	c7 44 24 04 2e 4e 00 	movl   $0x4e2e,0x4(%esp)
+    2713:	00 
+    2714:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    271b:	e8 90 19 00 00       	call   40b0 <printf>
     exit(0);
-    26b0:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    26b7:	e8 d6 17 00 00       	call   3e92 <exit>
+    2720:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    2727:	e8 36 18 00 00       	call   3f62 <exit>
     printf(1, "chdir dd/xx succeeded!\n");
-    26bc:	c7 44 24 04 46 4d 00 	movl   $0x4d46,0x4(%esp)
-    26c3:	00 
-    26c4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    26cb:	e8 10 19 00 00       	call   3fe0 <printf>
+    272c:	c7 44 24 04 16 4e 00 	movl   $0x4e16,0x4(%esp)
+    2733:	00 
+    2734:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    273b:	e8 70 19 00 00       	call   40b0 <printf>
     exit(0);
-    26d0:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    26d7:	e8 b6 17 00 00       	call   3e92 <exit>
+    2740:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    2747:	e8 16 18 00 00       	call   3f62 <exit>
     printf(1, "chdir dd/ff succeeded!\n");
-    26dc:	c7 44 24 04 2e 4d 00 	movl   $0x4d2e,0x4(%esp)
-    26e3:	00 
-    26e4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    26eb:	e8 f0 18 00 00       	call   3fe0 <printf>
+    274c:	c7 44 24 04 fe 4d 00 	movl   $0x4dfe,0x4(%esp)
+    2753:	00 
+    2754:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    275b:	e8 50 19 00 00       	call   40b0 <printf>
     exit(0);
-    26f0:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    26f7:	e8 96 17 00 00       	call   3e92 <exit>
+    2760:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    2767:	e8 f6 17 00 00       	call   3f62 <exit>
     printf(1, "unlink dd/ff/ff succeeded!\n");
-    26fc:	c7 44 24 04 12 4d 00 	movl   $0x4d12,0x4(%esp)
-    2703:	00 
-    2704:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    270b:	e8 d0 18 00 00       	call   3fe0 <printf>
+    276c:	c7 44 24 04 e2 4d 00 	movl   $0x4de2,0x4(%esp)
+    2773:	00 
+    2774:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    277b:	e8 30 19 00 00       	call   40b0 <printf>
     exit(0);
-    2710:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    2717:	e8 76 17 00 00       	call   3e92 <exit>
+    2780:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    2787:	e8 d6 17 00 00       	call   3f62 <exit>
     printf(1, "unlink dd/xx/ff succeeded!\n");
-    271c:	c7 44 24 04 f6 4c 00 	movl   $0x4cf6,0x4(%esp)
-    2723:	00 
-    2724:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    272b:	e8 b0 18 00 00       	call   3fe0 <printf>
+    278c:	c7 44 24 04 c6 4d 00 	movl   $0x4dc6,0x4(%esp)
+    2793:	00 
+    2794:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    279b:	e8 10 19 00 00       	call   40b0 <printf>
     exit(0);
-    2730:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    2737:	e8 56 17 00 00       	call   3e92 <exit>
+    27a0:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    27a7:	e8 b6 17 00 00       	call   3f62 <exit>
     printf(1, "mkdir dd/dd/ffff succeeded!\n");
-    273c:	c7 44 24 04 d9 4c 00 	movl   $0x4cd9,0x4(%esp)
-    2743:	00 
-    2744:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    274b:	e8 90 18 00 00       	call   3fe0 <printf>
+    27ac:	c7 44 24 04 a9 4d 00 	movl   $0x4da9,0x4(%esp)
+    27b3:	00 
+    27b4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    27bb:	e8 f0 18 00 00       	call   40b0 <printf>
     exit(0);
-    2750:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    2757:	e8 36 17 00 00       	call   3e92 <exit>
+    27c0:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    27c7:	e8 96 17 00 00       	call   3f62 <exit>
     printf(1, "mkdir dd/xx/ff succeeded!\n");
-    275c:	c7 44 24 04 be 4c 00 	movl   $0x4cbe,0x4(%esp)
-    2763:	00 
-    2764:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    276b:	e8 70 18 00 00       	call   3fe0 <printf>
+    27cc:	c7 44 24 04 8e 4d 00 	movl   $0x4d8e,0x4(%esp)
+    27d3:	00 
+    27d4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    27db:	e8 d0 18 00 00       	call   40b0 <printf>
     exit(0);
-    2770:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    2777:	e8 16 17 00 00       	call   3e92 <exit>
+    27e0:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    27e7:	e8 76 17 00 00       	call   3f62 <exit>
     printf(1, "read dd/dd/ffff wrong len\n");
-    277c:	c7 44 24 04 eb 4b 00 	movl   $0x4beb,0x4(%esp)
-    2783:	00 
-    2784:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    278b:	e8 50 18 00 00       	call   3fe0 <printf>
+    27ec:	c7 44 24 04 bb 4c 00 	movl   $0x4cbb,0x4(%esp)
+    27f3:	00 
+    27f4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    27fb:	e8 b0 18 00 00       	call   40b0 <printf>
     exit(0);
-    2790:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    2797:	e8 f6 16 00 00       	call   3e92 <exit>
+    2800:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    2807:	e8 56 17 00 00       	call   3f62 <exit>
     printf(1, "open dd/dd/ffff failed\n");
-    279c:	c7 44 24 04 d3 4b 00 	movl   $0x4bd3,0x4(%esp)
-    27a3:	00 
-    27a4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    27ab:	e8 30 18 00 00       	call   3fe0 <printf>
+    280c:	c7 44 24 04 a3 4c 00 	movl   $0x4ca3,0x4(%esp)
+    2813:	00 
+    2814:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    281b:	e8 90 18 00 00       	call   40b0 <printf>
     exit(0);
-    27b0:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    27b7:	e8 d6 16 00 00       	call   3e92 <exit>
-    27bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    2820:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    2827:	e8 36 17 00 00       	call   3f62 <exit>
+    282c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-000027c0 <bigwrite>:
+00002830 <bigwrite>:
 {
-    27c0:	55                   	push   %ebp
-    27c1:	89 e5                	mov    %esp,%ebp
-    27c3:	56                   	push   %esi
-    27c4:	53                   	push   %ebx
-  for(sz = 499; sz < 12*512; sz += 471){
-    27c5:	bb f3 01 00 00       	mov    $0x1f3,%ebx
+    2830:	55                   	push   %ebp
+    2831:	89 e5                	mov    %esp,%ebp
+    2833:	56                   	push   %esi
+    2834:	53                   	push   %ebx
+  for (sz = 499; sz < 12 * 512; sz += 471)
+    2835:	bb f3 01 00 00       	mov    $0x1f3,%ebx
 {
-    27ca:	83 ec 10             	sub    $0x10,%esp
+    283a:	83 ec 10             	sub    $0x10,%esp
   printf(1, "bigwrite test\n");
-    27cd:	c7 44 24 04 a5 4d 00 	movl   $0x4da5,0x4(%esp)
-    27d4:	00 
-    27d5:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    27dc:	e8 ff 17 00 00       	call   3fe0 <printf>
+    283d:	c7 44 24 04 75 4e 00 	movl   $0x4e75,0x4(%esp)
+    2844:	00 
+    2845:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    284c:	e8 5f 18 00 00       	call   40b0 <printf>
   unlink("bigwrite");
-    27e1:	c7 04 24 b4 4d 00 00 	movl   $0x4db4,(%esp)
-    27e8:	e8 f5 16 00 00       	call   3ee2 <unlink>
-    27ed:	8d 76 00             	lea    0x0(%esi),%esi
+    2851:	c7 04 24 84 4e 00 00 	movl   $0x4e84,(%esp)
+    2858:	e8 55 17 00 00       	call   3fb2 <unlink>
+    285d:	8d 76 00             	lea    0x0(%esi),%esi
     fd = open("bigwrite", O_CREATE | O_RDWR);
-    27f0:	c7 44 24 04 02 02 00 	movl   $0x202,0x4(%esp)
-    27f7:	00 
-    27f8:	c7 04 24 b4 4d 00 00 	movl   $0x4db4,(%esp)
-    27ff:	e8 ce 16 00 00       	call   3ed2 <open>
-    if(fd < 0){
-    2804:	85 c0                	test   %eax,%eax
+    2860:	c7 44 24 04 02 02 00 	movl   $0x202,0x4(%esp)
+    2867:	00 
+    2868:	c7 04 24 84 4e 00 00 	movl   $0x4e84,(%esp)
+    286f:	e8 2e 17 00 00       	call   3fa2 <open>
+    if (fd < 0)
+    2874:	85 c0                	test   %eax,%eax
     fd = open("bigwrite", O_CREATE | O_RDWR);
-    2806:	89 c6                	mov    %eax,%esi
-    if(fd < 0){
-    2808:	0f 88 95 00 00 00    	js     28a3 <bigwrite+0xe3>
+    2876:	89 c6                	mov    %eax,%esi
+    if (fd < 0)
+    2878:	0f 88 95 00 00 00    	js     2913 <bigwrite+0xe3>
       int cc = write(fd, buf, sz);
-    280e:	89 5c 24 08          	mov    %ebx,0x8(%esp)
-    2812:	c7 44 24 04 a0 8b 00 	movl   $0x8ba0,0x4(%esp)
-    2819:	00 
-    281a:	89 04 24             	mov    %eax,(%esp)
-    281d:	e8 90 16 00 00       	call   3eb2 <write>
-      if(cc != sz){
-    2822:	39 d8                	cmp    %ebx,%eax
-    2824:	75 55                	jne    287b <bigwrite+0xbb>
+    287e:	89 5c 24 08          	mov    %ebx,0x8(%esp)
+    2882:	c7 44 24 04 80 8c 00 	movl   $0x8c80,0x4(%esp)
+    2889:	00 
+    288a:	89 04 24             	mov    %eax,(%esp)
+    288d:	e8 f0 16 00 00       	call   3f82 <write>
+      if (cc != sz)
+    2892:	39 d8                	cmp    %ebx,%eax
+    2894:	75 55                	jne    28eb <bigwrite+0xbb>
       int cc = write(fd, buf, sz);
-    2826:	89 5c 24 08          	mov    %ebx,0x8(%esp)
-    282a:	c7 44 24 04 a0 8b 00 	movl   $0x8ba0,0x4(%esp)
-    2831:	00 
-    2832:	89 34 24             	mov    %esi,(%esp)
-    2835:	e8 78 16 00 00       	call   3eb2 <write>
-      if(cc != sz){
-    283a:	39 c3                	cmp    %eax,%ebx
-    283c:	75 3d                	jne    287b <bigwrite+0xbb>
+    2896:	89 5c 24 08          	mov    %ebx,0x8(%esp)
+    289a:	c7 44 24 04 80 8c 00 	movl   $0x8c80,0x4(%esp)
+    28a1:	00 
+    28a2:	89 34 24             	mov    %esi,(%esp)
+    28a5:	e8 d8 16 00 00       	call   3f82 <write>
+      if (cc != sz)
+    28aa:	39 c3                	cmp    %eax,%ebx
+    28ac:	75 3d                	jne    28eb <bigwrite+0xbb>
     close(fd);
-    283e:	89 34 24             	mov    %esi,(%esp)
-  for(sz = 499; sz < 12*512; sz += 471){
-    2841:	81 c3 d7 01 00 00    	add    $0x1d7,%ebx
+    28ae:	89 34 24             	mov    %esi,(%esp)
+  for (sz = 499; sz < 12 * 512; sz += 471)
+    28b1:	81 c3 d7 01 00 00    	add    $0x1d7,%ebx
     close(fd);
-    2847:	e8 6e 16 00 00       	call   3eba <close>
+    28b7:	e8 ce 16 00 00       	call   3f8a <close>
     unlink("bigwrite");
-    284c:	c7 04 24 b4 4d 00 00 	movl   $0x4db4,(%esp)
-    2853:	e8 8a 16 00 00       	call   3ee2 <unlink>
-  for(sz = 499; sz < 12*512; sz += 471){
-    2858:	81 fb 07 18 00 00    	cmp    $0x1807,%ebx
-    285e:	75 90                	jne    27f0 <bigwrite+0x30>
+    28bc:	c7 04 24 84 4e 00 00 	movl   $0x4e84,(%esp)
+    28c3:	e8 ea 16 00 00       	call   3fb2 <unlink>
+  for (sz = 499; sz < 12 * 512; sz += 471)
+    28c8:	81 fb 07 18 00 00    	cmp    $0x1807,%ebx
+    28ce:	75 90                	jne    2860 <bigwrite+0x30>
   printf(1, "bigwrite ok\n");
-    2860:	c7 44 24 04 e7 4d 00 	movl   $0x4de7,0x4(%esp)
-    2867:	00 
-    2868:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    286f:	e8 6c 17 00 00       	call   3fe0 <printf>
+    28d0:	c7 44 24 04 b7 4e 00 	movl   $0x4eb7,0x4(%esp)
+    28d7:	00 
+    28d8:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    28df:	e8 cc 17 00 00       	call   40b0 <printf>
 }
-    2874:	83 c4 10             	add    $0x10,%esp
-    2877:	5b                   	pop    %ebx
-    2878:	5e                   	pop    %esi
-    2879:	5d                   	pop    %ebp
-    287a:	c3                   	ret    
+    28e4:	83 c4 10             	add    $0x10,%esp
+    28e7:	5b                   	pop    %ebx
+    28e8:	5e                   	pop    %esi
+    28e9:	5d                   	pop    %ebp
+    28ea:	c3                   	ret    
         printf(1, "write(%d) ret %d\n", sz, cc);
-    287b:	89 44 24 0c          	mov    %eax,0xc(%esp)
-    287f:	89 5c 24 08          	mov    %ebx,0x8(%esp)
-    2883:	c7 44 24 04 d5 4d 00 	movl   $0x4dd5,0x4(%esp)
-    288a:	00 
-    288b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    2892:	e8 49 17 00 00       	call   3fe0 <printf>
+    28eb:	89 44 24 0c          	mov    %eax,0xc(%esp)
+    28ef:	89 5c 24 08          	mov    %ebx,0x8(%esp)
+    28f3:	c7 44 24 04 a5 4e 00 	movl   $0x4ea5,0x4(%esp)
+    28fa:	00 
+    28fb:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    2902:	e8 a9 17 00 00       	call   40b0 <printf>
         exit(0);
-    2897:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    289e:	e8 ef 15 00 00       	call   3e92 <exit>
+    2907:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    290e:	e8 4f 16 00 00       	call   3f62 <exit>
       printf(1, "cannot create bigwrite\n");
-    28a3:	c7 44 24 04 bd 4d 00 	movl   $0x4dbd,0x4(%esp)
-    28aa:	00 
-    28ab:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    28b2:	e8 29 17 00 00       	call   3fe0 <printf>
+    2913:	c7 44 24 04 8d 4e 00 	movl   $0x4e8d,0x4(%esp)
+    291a:	00 
+    291b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    2922:	e8 89 17 00 00       	call   40b0 <printf>
       exit(0);
-    28b7:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    28be:	e8 cf 15 00 00       	call   3e92 <exit>
-    28c3:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    28c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    2927:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    292e:	e8 2f 16 00 00       	call   3f62 <exit>
+    2933:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    2939:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-000028d0 <bigfile>:
+00002940 <bigfile>:
 {
-    28d0:	55                   	push   %ebp
-    28d1:	89 e5                	mov    %esp,%ebp
-    28d3:	57                   	push   %edi
-    28d4:	56                   	push   %esi
-    28d5:	53                   	push   %ebx
-    28d6:	83 ec 1c             	sub    $0x1c,%esp
+    2940:	55                   	push   %ebp
+    2941:	89 e5                	mov    %esp,%ebp
+    2943:	57                   	push   %edi
+    2944:	56                   	push   %esi
+    2945:	53                   	push   %ebx
+    2946:	83 ec 1c             	sub    $0x1c,%esp
   printf(1, "bigfile test\n");
-    28d9:	c7 44 24 04 f4 4d 00 	movl   $0x4df4,0x4(%esp)
-    28e0:	00 
-    28e1:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    28e8:	e8 f3 16 00 00       	call   3fe0 <printf>
+    2949:	c7 44 24 04 c4 4e 00 	movl   $0x4ec4,0x4(%esp)
+    2950:	00 
+    2951:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    2958:	e8 53 17 00 00       	call   40b0 <printf>
   unlink("bigfile");
-    28ed:	c7 04 24 10 4e 00 00 	movl   $0x4e10,(%esp)
-    28f4:	e8 e9 15 00 00       	call   3ee2 <unlink>
+    295d:	c7 04 24 e0 4e 00 00 	movl   $0x4ee0,(%esp)
+    2964:	e8 49 16 00 00       	call   3fb2 <unlink>
   fd = open("bigfile", O_CREATE | O_RDWR);
-    28f9:	c7 44 24 04 02 02 00 	movl   $0x202,0x4(%esp)
-    2900:	00 
-    2901:	c7 04 24 10 4e 00 00 	movl   $0x4e10,(%esp)
-    2908:	e8 c5 15 00 00       	call   3ed2 <open>
-  if(fd < 0){
-    290d:	85 c0                	test   %eax,%eax
+    2969:	c7 44 24 04 02 02 00 	movl   $0x202,0x4(%esp)
+    2970:	00 
+    2971:	c7 04 24 e0 4e 00 00 	movl   $0x4ee0,(%esp)
+    2978:	e8 25 16 00 00       	call   3fa2 <open>
+  if (fd < 0)
+    297d:	85 c0                	test   %eax,%eax
   fd = open("bigfile", O_CREATE | O_RDWR);
-    290f:	89 c6                	mov    %eax,%esi
-  if(fd < 0){
-    2911:	0f 88 a2 01 00 00    	js     2ab9 <bigfile+0x1e9>
-    2917:	31 db                	xor    %ebx,%ebx
-    2919:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    297f:	89 c6                	mov    %eax,%esi
+  if (fd < 0)
+    2981:	0f 88 a2 01 00 00    	js     2b29 <bigfile+0x1e9>
+    2987:	31 db                	xor    %ebx,%ebx
+    2989:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     memset(buf, i, 600);
-    2920:	c7 44 24 08 58 02 00 	movl   $0x258,0x8(%esp)
-    2927:	00 
-    2928:	89 5c 24 04          	mov    %ebx,0x4(%esp)
-    292c:	c7 04 24 a0 8b 00 00 	movl   $0x8ba0,(%esp)
-    2933:	e8 e8 13 00 00       	call   3d20 <memset>
-    if(write(fd, buf, 600) != 600){
-    2938:	c7 44 24 08 58 02 00 	movl   $0x258,0x8(%esp)
-    293f:	00 
-    2940:	c7 44 24 04 a0 8b 00 	movl   $0x8ba0,0x4(%esp)
-    2947:	00 
-    2948:	89 34 24             	mov    %esi,(%esp)
-    294b:	e8 62 15 00 00       	call   3eb2 <write>
-    2950:	3d 58 02 00 00       	cmp    $0x258,%eax
-    2955:	0f 85 1e 01 00 00    	jne    2a79 <bigfile+0x1a9>
-  for(i = 0; i < 20; i++){
-    295b:	83 c3 01             	add    $0x1,%ebx
-    295e:	83 fb 14             	cmp    $0x14,%ebx
-    2961:	75 bd                	jne    2920 <bigfile+0x50>
+    2990:	c7 44 24 08 58 02 00 	movl   $0x258,0x8(%esp)
+    2997:	00 
+    2998:	89 5c 24 04          	mov    %ebx,0x4(%esp)
+    299c:	c7 04 24 80 8c 00 00 	movl   $0x8c80,(%esp)
+    29a3:	e8 48 14 00 00       	call   3df0 <memset>
+    if (write(fd, buf, 600) != 600)
+    29a8:	c7 44 24 08 58 02 00 	movl   $0x258,0x8(%esp)
+    29af:	00 
+    29b0:	c7 44 24 04 80 8c 00 	movl   $0x8c80,0x4(%esp)
+    29b7:	00 
+    29b8:	89 34 24             	mov    %esi,(%esp)
+    29bb:	e8 c2 15 00 00       	call   3f82 <write>
+    29c0:	3d 58 02 00 00       	cmp    $0x258,%eax
+    29c5:	0f 85 1e 01 00 00    	jne    2ae9 <bigfile+0x1a9>
+  for (i = 0; i < 20; i++)
+    29cb:	83 c3 01             	add    $0x1,%ebx
+    29ce:	83 fb 14             	cmp    $0x14,%ebx
+    29d1:	75 bd                	jne    2990 <bigfile+0x50>
   close(fd);
-    2963:	89 34 24             	mov    %esi,(%esp)
-    2966:	e8 4f 15 00 00       	call   3eba <close>
+    29d3:	89 34 24             	mov    %esi,(%esp)
+    29d6:	e8 af 15 00 00       	call   3f8a <close>
   fd = open("bigfile", 0);
-    296b:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-    2972:	00 
-    2973:	c7 04 24 10 4e 00 00 	movl   $0x4e10,(%esp)
-    297a:	e8 53 15 00 00       	call   3ed2 <open>
-  if(fd < 0){
-    297f:	85 c0                	test   %eax,%eax
+    29db:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+    29e2:	00 
+    29e3:	c7 04 24 e0 4e 00 00 	movl   $0x4ee0,(%esp)
+    29ea:	e8 b3 15 00 00       	call   3fa2 <open>
+  if (fd < 0)
+    29ef:	85 c0                	test   %eax,%eax
   fd = open("bigfile", 0);
-    2981:	89 c6                	mov    %eax,%esi
-  if(fd < 0){
-    2983:	0f 88 10 01 00 00    	js     2a99 <bigfile+0x1c9>
-    2989:	31 db                	xor    %ebx,%ebx
-    298b:	31 ff                	xor    %edi,%edi
-    298d:	eb 2f                	jmp    29be <bigfile+0xee>
-    298f:	90                   	nop
-    if(cc != 300){
-    2990:	3d 2c 01 00 00       	cmp    $0x12c,%eax
-    2995:	0f 85 9e 00 00 00    	jne    2a39 <bigfile+0x169>
-    if(buf[0] != i/2 || buf[299] != i/2){
-    299b:	0f be 05 a0 8b 00 00 	movsbl 0x8ba0,%eax
-    29a2:	89 fa                	mov    %edi,%edx
-    29a4:	d1 fa                	sar    %edx
-    29a6:	39 d0                	cmp    %edx,%eax
-    29a8:	75 6f                	jne    2a19 <bigfile+0x149>
-    29aa:	0f be 15 cb 8c 00 00 	movsbl 0x8ccb,%edx
-    29b1:	39 d0                	cmp    %edx,%eax
-    29b3:	75 64                	jne    2a19 <bigfile+0x149>
+    29f1:	89 c6                	mov    %eax,%esi
+  if (fd < 0)
+    29f3:	0f 88 10 01 00 00    	js     2b09 <bigfile+0x1c9>
+    29f9:	31 db                	xor    %ebx,%ebx
+    29fb:	31 ff                	xor    %edi,%edi
+    29fd:	eb 2f                	jmp    2a2e <bigfile+0xee>
+    29ff:	90                   	nop
+    if (cc != 300)
+    2a00:	3d 2c 01 00 00       	cmp    $0x12c,%eax
+    2a05:	0f 85 9e 00 00 00    	jne    2aa9 <bigfile+0x169>
+    if (buf[0] != i / 2 || buf[299] != i / 2)
+    2a0b:	0f be 05 80 8c 00 00 	movsbl 0x8c80,%eax
+    2a12:	89 fa                	mov    %edi,%edx
+    2a14:	d1 fa                	sar    %edx
+    2a16:	39 d0                	cmp    %edx,%eax
+    2a18:	75 6f                	jne    2a89 <bigfile+0x149>
+    2a1a:	0f be 15 ab 8d 00 00 	movsbl 0x8dab,%edx
+    2a21:	39 d0                	cmp    %edx,%eax
+    2a23:	75 64                	jne    2a89 <bigfile+0x149>
     total += cc;
-    29b5:	81 c3 2c 01 00 00    	add    $0x12c,%ebx
-  for(i = 0; ; i++){
-    29bb:	83 c7 01             	add    $0x1,%edi
+    2a25:	81 c3 2c 01 00 00    	add    $0x12c,%ebx
+  for (i = 0;; i++)
+    2a2b:	83 c7 01             	add    $0x1,%edi
     cc = read(fd, buf, 300);
-    29be:	c7 44 24 08 2c 01 00 	movl   $0x12c,0x8(%esp)
-    29c5:	00 
-    29c6:	c7 44 24 04 a0 8b 00 	movl   $0x8ba0,0x4(%esp)
-    29cd:	00 
-    29ce:	89 34 24             	mov    %esi,(%esp)
-    29d1:	e8 d4 14 00 00       	call   3eaa <read>
-    if(cc < 0){
-    29d6:	85 c0                	test   %eax,%eax
-    29d8:	78 7f                	js     2a59 <bigfile+0x189>
-    if(cc == 0)
-    29da:	75 b4                	jne    2990 <bigfile+0xc0>
+    2a2e:	c7 44 24 08 2c 01 00 	movl   $0x12c,0x8(%esp)
+    2a35:	00 
+    2a36:	c7 44 24 04 80 8c 00 	movl   $0x8c80,0x4(%esp)
+    2a3d:	00 
+    2a3e:	89 34 24             	mov    %esi,(%esp)
+    2a41:	e8 34 15 00 00       	call   3f7a <read>
+    if (cc < 0)
+    2a46:	85 c0                	test   %eax,%eax
+    2a48:	78 7f                	js     2ac9 <bigfile+0x189>
+    if (cc == 0)
+    2a4a:	75 b4                	jne    2a00 <bigfile+0xc0>
   close(fd);
-    29dc:	89 34 24             	mov    %esi,(%esp)
-    29df:	90                   	nop
-    29e0:	e8 d5 14 00 00       	call   3eba <close>
-  if(total != 20*600){
-    29e5:	81 fb e0 2e 00 00    	cmp    $0x2ee0,%ebx
-    29eb:	0f 85 e8 00 00 00    	jne    2ad9 <bigfile+0x209>
+    2a4c:	89 34 24             	mov    %esi,(%esp)
+    2a4f:	90                   	nop
+    2a50:	e8 35 15 00 00       	call   3f8a <close>
+  if (total != 20 * 600)
+    2a55:	81 fb e0 2e 00 00    	cmp    $0x2ee0,%ebx
+    2a5b:	0f 85 e8 00 00 00    	jne    2b49 <bigfile+0x209>
   unlink("bigfile");
-    29f1:	c7 04 24 10 4e 00 00 	movl   $0x4e10,(%esp)
-    29f8:	e8 e5 14 00 00       	call   3ee2 <unlink>
+    2a61:	c7 04 24 e0 4e 00 00 	movl   $0x4ee0,(%esp)
+    2a68:	e8 45 15 00 00       	call   3fb2 <unlink>
   printf(1, "bigfile test ok\n");
-    29fd:	c7 44 24 04 9f 4e 00 	movl   $0x4e9f,0x4(%esp)
-    2a04:	00 
-    2a05:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    2a0c:	e8 cf 15 00 00       	call   3fe0 <printf>
+    2a6d:	c7 44 24 04 6f 4f 00 	movl   $0x4f6f,0x4(%esp)
+    2a74:	00 
+    2a75:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    2a7c:	e8 2f 16 00 00       	call   40b0 <printf>
 }
-    2a11:	83 c4 1c             	add    $0x1c,%esp
-    2a14:	5b                   	pop    %ebx
-    2a15:	5e                   	pop    %esi
-    2a16:	5f                   	pop    %edi
-    2a17:	5d                   	pop    %ebp
-    2a18:	c3                   	ret    
+    2a81:	83 c4 1c             	add    $0x1c,%esp
+    2a84:	5b                   	pop    %ebx
+    2a85:	5e                   	pop    %esi
+    2a86:	5f                   	pop    %edi
+    2a87:	5d                   	pop    %ebp
+    2a88:	c3                   	ret    
       printf(1, "read bigfile wrong data\n");
-    2a19:	c7 44 24 04 6c 4e 00 	movl   $0x4e6c,0x4(%esp)
-    2a20:	00 
-    2a21:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    2a28:	e8 b3 15 00 00       	call   3fe0 <printf>
+    2a89:	c7 44 24 04 3c 4f 00 	movl   $0x4f3c,0x4(%esp)
+    2a90:	00 
+    2a91:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    2a98:	e8 13 16 00 00       	call   40b0 <printf>
       exit(0);
-    2a2d:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    2a34:	e8 59 14 00 00       	call   3e92 <exit>
+    2a9d:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    2aa4:	e8 b9 14 00 00       	call   3f62 <exit>
       printf(1, "short read bigfile\n");
-    2a39:	c7 44 24 04 58 4e 00 	movl   $0x4e58,0x4(%esp)
-    2a40:	00 
-    2a41:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    2a48:	e8 93 15 00 00       	call   3fe0 <printf>
+    2aa9:	c7 44 24 04 28 4f 00 	movl   $0x4f28,0x4(%esp)
+    2ab0:	00 
+    2ab1:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    2ab8:	e8 f3 15 00 00       	call   40b0 <printf>
       exit(0);
-    2a4d:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    2a54:	e8 39 14 00 00       	call   3e92 <exit>
+    2abd:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    2ac4:	e8 99 14 00 00       	call   3f62 <exit>
       printf(1, "read bigfile failed\n");
-    2a59:	c7 44 24 04 43 4e 00 	movl   $0x4e43,0x4(%esp)
-    2a60:	00 
-    2a61:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    2a68:	e8 73 15 00 00       	call   3fe0 <printf>
+    2ac9:	c7 44 24 04 13 4f 00 	movl   $0x4f13,0x4(%esp)
+    2ad0:	00 
+    2ad1:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    2ad8:	e8 d3 15 00 00       	call   40b0 <printf>
       exit(0);
-    2a6d:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    2a74:	e8 19 14 00 00       	call   3e92 <exit>
+    2add:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    2ae4:	e8 79 14 00 00       	call   3f62 <exit>
       printf(1, "write bigfile failed\n");
-    2a79:	c7 44 24 04 18 4e 00 	movl   $0x4e18,0x4(%esp)
-    2a80:	00 
-    2a81:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    2a88:	e8 53 15 00 00       	call   3fe0 <printf>
+    2ae9:	c7 44 24 04 e8 4e 00 	movl   $0x4ee8,0x4(%esp)
+    2af0:	00 
+    2af1:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    2af8:	e8 b3 15 00 00       	call   40b0 <printf>
       exit(0);
-    2a8d:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    2a94:	e8 f9 13 00 00       	call   3e92 <exit>
+    2afd:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    2b04:	e8 59 14 00 00       	call   3f62 <exit>
     printf(1, "cannot open bigfile\n");
-    2a99:	c7 44 24 04 2e 4e 00 	movl   $0x4e2e,0x4(%esp)
-    2aa0:	00 
-    2aa1:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    2aa8:	e8 33 15 00 00       	call   3fe0 <printf>
+    2b09:	c7 44 24 04 fe 4e 00 	movl   $0x4efe,0x4(%esp)
+    2b10:	00 
+    2b11:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    2b18:	e8 93 15 00 00       	call   40b0 <printf>
     exit(0);
-    2aad:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    2ab4:	e8 d9 13 00 00       	call   3e92 <exit>
+    2b1d:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    2b24:	e8 39 14 00 00       	call   3f62 <exit>
     printf(1, "cannot create bigfile");
-    2ab9:	c7 44 24 04 02 4e 00 	movl   $0x4e02,0x4(%esp)
-    2ac0:	00 
-    2ac1:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    2ac8:	e8 13 15 00 00       	call   3fe0 <printf>
+    2b29:	c7 44 24 04 d2 4e 00 	movl   $0x4ed2,0x4(%esp)
+    2b30:	00 
+    2b31:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    2b38:	e8 73 15 00 00       	call   40b0 <printf>
     exit(0);
-    2acd:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    2ad4:	e8 b9 13 00 00       	call   3e92 <exit>
+    2b3d:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    2b44:	e8 19 14 00 00       	call   3f62 <exit>
     printf(1, "read bigfile wrong total\n");
-    2ad9:	c7 44 24 04 85 4e 00 	movl   $0x4e85,0x4(%esp)
-    2ae0:	00 
-    2ae1:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    2ae8:	e8 f3 14 00 00       	call   3fe0 <printf>
+    2b49:	c7 44 24 04 55 4f 00 	movl   $0x4f55,0x4(%esp)
+    2b50:	00 
+    2b51:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    2b58:	e8 53 15 00 00       	call   40b0 <printf>
     exit(0);
-    2aed:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    2af4:	e8 99 13 00 00       	call   3e92 <exit>
-    2af9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    2b5d:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    2b64:	e8 f9 13 00 00       	call   3f62 <exit>
+    2b69:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-00002b00 <fourteen>:
+00002b70 <fourteen>:
 {
-    2b00:	55                   	push   %ebp
-    2b01:	89 e5                	mov    %esp,%ebp
-    2b03:	83 ec 18             	sub    $0x18,%esp
+    2b70:	55                   	push   %ebp
+    2b71:	89 e5                	mov    %esp,%ebp
+    2b73:	83 ec 18             	sub    $0x18,%esp
   printf(1, "fourteen test\n");
-    2b06:	c7 44 24 04 b0 4e 00 	movl   $0x4eb0,0x4(%esp)
-    2b0d:	00 
-    2b0e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    2b15:	e8 c6 14 00 00       	call   3fe0 <printf>
-  if(mkdir("12345678901234") != 0){
-    2b1a:	c7 04 24 eb 4e 00 00 	movl   $0x4eeb,(%esp)
-    2b21:	e8 d4 13 00 00       	call   3efa <mkdir>
-    2b26:	85 c0                	test   %eax,%eax
-    2b28:	0f 85 92 00 00 00    	jne    2bc0 <fourteen+0xc0>
-  if(mkdir("12345678901234/123456789012345") != 0){
-    2b2e:	c7 04 24 a8 56 00 00 	movl   $0x56a8,(%esp)
-    2b35:	e8 c0 13 00 00       	call   3efa <mkdir>
-    2b3a:	85 c0                	test   %eax,%eax
-    2b3c:	0f 85 1e 01 00 00    	jne    2c60 <fourteen+0x160>
+    2b76:	c7 44 24 04 80 4f 00 	movl   $0x4f80,0x4(%esp)
+    2b7d:	00 
+    2b7e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    2b85:	e8 26 15 00 00       	call   40b0 <printf>
+  if (mkdir("12345678901234") != 0)
+    2b8a:	c7 04 24 bb 4f 00 00 	movl   $0x4fbb,(%esp)
+    2b91:	e8 34 14 00 00       	call   3fca <mkdir>
+    2b96:	85 c0                	test   %eax,%eax
+    2b98:	0f 85 92 00 00 00    	jne    2c30 <fourteen+0xc0>
+  if (mkdir("12345678901234/123456789012345") != 0)
+    2b9e:	c7 04 24 78 57 00 00 	movl   $0x5778,(%esp)
+    2ba5:	e8 20 14 00 00       	call   3fca <mkdir>
+    2baa:	85 c0                	test   %eax,%eax
+    2bac:	0f 85 1e 01 00 00    	jne    2cd0 <fourteen+0x160>
   fd = open("123456789012345/123456789012345/123456789012345", O_CREATE);
-    2b42:	c7 44 24 04 00 02 00 	movl   $0x200,0x4(%esp)
-    2b49:	00 
-    2b4a:	c7 04 24 f8 56 00 00 	movl   $0x56f8,(%esp)
-    2b51:	e8 7c 13 00 00       	call   3ed2 <open>
-  if(fd < 0){
-    2b56:	85 c0                	test   %eax,%eax
-    2b58:	0f 88 e2 00 00 00    	js     2c40 <fourteen+0x140>
+    2bb2:	c7 44 24 04 00 02 00 	movl   $0x200,0x4(%esp)
+    2bb9:	00 
+    2bba:	c7 04 24 c8 57 00 00 	movl   $0x57c8,(%esp)
+    2bc1:	e8 dc 13 00 00       	call   3fa2 <open>
+  if (fd < 0)
+    2bc6:	85 c0                	test   %eax,%eax
+    2bc8:	0f 88 e2 00 00 00    	js     2cb0 <fourteen+0x140>
   close(fd);
-    2b5e:	89 04 24             	mov    %eax,(%esp)
-    2b61:	e8 54 13 00 00       	call   3eba <close>
+    2bce:	89 04 24             	mov    %eax,(%esp)
+    2bd1:	e8 b4 13 00 00       	call   3f8a <close>
   fd = open("12345678901234/12345678901234/12345678901234", 0);
-    2b66:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-    2b6d:	00 
-    2b6e:	c7 04 24 68 57 00 00 	movl   $0x5768,(%esp)
-    2b75:	e8 58 13 00 00       	call   3ed2 <open>
-  if(fd < 0){
-    2b7a:	85 c0                	test   %eax,%eax
-    2b7c:	0f 88 9e 00 00 00    	js     2c20 <fourteen+0x120>
+    2bd6:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+    2bdd:	00 
+    2bde:	c7 04 24 38 58 00 00 	movl   $0x5838,(%esp)
+    2be5:	e8 b8 13 00 00       	call   3fa2 <open>
+  if (fd < 0)
+    2bea:	85 c0                	test   %eax,%eax
+    2bec:	0f 88 9e 00 00 00    	js     2c90 <fourteen+0x120>
   close(fd);
-    2b82:	89 04 24             	mov    %eax,(%esp)
-    2b85:	e8 30 13 00 00       	call   3eba <close>
-  if(mkdir("12345678901234/12345678901234") == 0){
-    2b8a:	c7 04 24 dc 4e 00 00 	movl   $0x4edc,(%esp)
-    2b91:	e8 64 13 00 00       	call   3efa <mkdir>
-    2b96:	85 c0                	test   %eax,%eax
-    2b98:	74 66                	je     2c00 <fourteen+0x100>
-  if(mkdir("123456789012345/12345678901234") == 0){
-    2b9a:	c7 04 24 04 58 00 00 	movl   $0x5804,(%esp)
-    2ba1:	e8 54 13 00 00       	call   3efa <mkdir>
-    2ba6:	85 c0                	test   %eax,%eax
-    2ba8:	74 36                	je     2be0 <fourteen+0xe0>
+    2bf2:	89 04 24             	mov    %eax,(%esp)
+    2bf5:	e8 90 13 00 00       	call   3f8a <close>
+  if (mkdir("12345678901234/12345678901234") == 0)
+    2bfa:	c7 04 24 ac 4f 00 00 	movl   $0x4fac,(%esp)
+    2c01:	e8 c4 13 00 00       	call   3fca <mkdir>
+    2c06:	85 c0                	test   %eax,%eax
+    2c08:	74 66                	je     2c70 <fourteen+0x100>
+  if (mkdir("123456789012345/12345678901234") == 0)
+    2c0a:	c7 04 24 d4 58 00 00 	movl   $0x58d4,(%esp)
+    2c11:	e8 b4 13 00 00       	call   3fca <mkdir>
+    2c16:	85 c0                	test   %eax,%eax
+    2c18:	74 36                	je     2c50 <fourteen+0xe0>
   printf(1, "fourteen ok\n");
-    2baa:	c7 44 24 04 fa 4e 00 	movl   $0x4efa,0x4(%esp)
-    2bb1:	00 
-    2bb2:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    2bb9:	e8 22 14 00 00       	call   3fe0 <printf>
+    2c1a:	c7 44 24 04 ca 4f 00 	movl   $0x4fca,0x4(%esp)
+    2c21:	00 
+    2c22:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    2c29:	e8 82 14 00 00       	call   40b0 <printf>
 }
-    2bbe:	c9                   	leave  
-    2bbf:	c3                   	ret    
+    2c2e:	c9                   	leave  
+    2c2f:	c3                   	ret    
     printf(1, "mkdir 12345678901234 failed\n");
-    2bc0:	c7 44 24 04 bf 4e 00 	movl   $0x4ebf,0x4(%esp)
-    2bc7:	00 
-    2bc8:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    2bcf:	e8 0c 14 00 00       	call   3fe0 <printf>
+    2c30:	c7 44 24 04 8f 4f 00 	movl   $0x4f8f,0x4(%esp)
+    2c37:	00 
+    2c38:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    2c3f:	e8 6c 14 00 00       	call   40b0 <printf>
     exit(0);
-    2bd4:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    2bdb:	e8 b2 12 00 00       	call   3e92 <exit>
+    2c44:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    2c4b:	e8 12 13 00 00       	call   3f62 <exit>
     printf(1, "mkdir 12345678901234/123456789012345 succeeded!\n");
-    2be0:	c7 44 24 04 24 58 00 	movl   $0x5824,0x4(%esp)
-    2be7:	00 
-    2be8:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    2bef:	e8 ec 13 00 00       	call   3fe0 <printf>
+    2c50:	c7 44 24 04 f4 58 00 	movl   $0x58f4,0x4(%esp)
+    2c57:	00 
+    2c58:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    2c5f:	e8 4c 14 00 00       	call   40b0 <printf>
     exit(0);
-    2bf4:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    2bfb:	e8 92 12 00 00       	call   3e92 <exit>
+    2c64:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    2c6b:	e8 f2 12 00 00       	call   3f62 <exit>
     printf(1, "mkdir 12345678901234/12345678901234 succeeded!\n");
-    2c00:	c7 44 24 04 d4 57 00 	movl   $0x57d4,0x4(%esp)
-    2c07:	00 
-    2c08:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    2c0f:	e8 cc 13 00 00       	call   3fe0 <printf>
+    2c70:	c7 44 24 04 a4 58 00 	movl   $0x58a4,0x4(%esp)
+    2c77:	00 
+    2c78:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    2c7f:	e8 2c 14 00 00       	call   40b0 <printf>
     exit(0);
-    2c14:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    2c1b:	e8 72 12 00 00       	call   3e92 <exit>
+    2c84:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    2c8b:	e8 d2 12 00 00       	call   3f62 <exit>
     printf(1, "open 12345678901234/12345678901234/12345678901234 failed\n");
-    2c20:	c7 44 24 04 98 57 00 	movl   $0x5798,0x4(%esp)
-    2c27:	00 
-    2c28:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    2c2f:	e8 ac 13 00 00       	call   3fe0 <printf>
+    2c90:	c7 44 24 04 68 58 00 	movl   $0x5868,0x4(%esp)
+    2c97:	00 
+    2c98:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    2c9f:	e8 0c 14 00 00       	call   40b0 <printf>
     exit(0);
-    2c34:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    2c3b:	e8 52 12 00 00       	call   3e92 <exit>
+    2ca4:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    2cab:	e8 b2 12 00 00       	call   3f62 <exit>
     printf(1, "create 123456789012345/123456789012345/123456789012345 failed\n");
-    2c40:	c7 44 24 04 28 57 00 	movl   $0x5728,0x4(%esp)
-    2c47:	00 
-    2c48:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    2c4f:	e8 8c 13 00 00       	call   3fe0 <printf>
+    2cb0:	c7 44 24 04 f8 57 00 	movl   $0x57f8,0x4(%esp)
+    2cb7:	00 
+    2cb8:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    2cbf:	e8 ec 13 00 00       	call   40b0 <printf>
     exit(0);
-    2c54:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    2c5b:	e8 32 12 00 00       	call   3e92 <exit>
+    2cc4:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    2ccb:	e8 92 12 00 00       	call   3f62 <exit>
     printf(1, "mkdir 12345678901234/123456789012345 failed\n");
-    2c60:	c7 44 24 04 c8 56 00 	movl   $0x56c8,0x4(%esp)
-    2c67:	00 
-    2c68:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    2c6f:	e8 6c 13 00 00       	call   3fe0 <printf>
+    2cd0:	c7 44 24 04 98 57 00 	movl   $0x5798,0x4(%esp)
+    2cd7:	00 
+    2cd8:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    2cdf:	e8 cc 13 00 00       	call   40b0 <printf>
     exit(0);
-    2c74:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    2c7b:	e8 12 12 00 00       	call   3e92 <exit>
+    2ce4:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    2ceb:	e8 72 12 00 00       	call   3f62 <exit>
 
-00002c80 <rmdot>:
+00002cf0 <rmdot>:
 {
-    2c80:	55                   	push   %ebp
-    2c81:	89 e5                	mov    %esp,%ebp
-    2c83:	83 ec 18             	sub    $0x18,%esp
+    2cf0:	55                   	push   %ebp
+    2cf1:	89 e5                	mov    %esp,%ebp
+    2cf3:	83 ec 18             	sub    $0x18,%esp
   printf(1, "rmdot test\n");
-    2c86:	c7 44 24 04 07 4f 00 	movl   $0x4f07,0x4(%esp)
-    2c8d:	00 
-    2c8e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    2c95:	e8 46 13 00 00       	call   3fe0 <printf>
-  if(mkdir("dots") != 0){
-    2c9a:	c7 04 24 13 4f 00 00 	movl   $0x4f13,(%esp)
-    2ca1:	e8 54 12 00 00       	call   3efa <mkdir>
-    2ca6:	85 c0                	test   %eax,%eax
-    2ca8:	0f 85 9a 00 00 00    	jne    2d48 <rmdot+0xc8>
-  if(chdir("dots") != 0){
-    2cae:	c7 04 24 13 4f 00 00 	movl   $0x4f13,(%esp)
-    2cb5:	e8 48 12 00 00       	call   3f02 <chdir>
-    2cba:	85 c0                	test   %eax,%eax
-    2cbc:	0f 85 66 01 00 00    	jne    2e28 <rmdot+0x1a8>
-  if(unlink(".") == 0){
-    2cc2:	c7 04 24 be 4b 00 00 	movl   $0x4bbe,(%esp)
-    2cc9:	e8 14 12 00 00       	call   3ee2 <unlink>
-    2cce:	85 c0                	test   %eax,%eax
-    2cd0:	0f 84 32 01 00 00    	je     2e08 <rmdot+0x188>
-  if(unlink("..") == 0){
-    2cd6:	c7 04 24 bd 4b 00 00 	movl   $0x4bbd,(%esp)
-    2cdd:	e8 00 12 00 00       	call   3ee2 <unlink>
-    2ce2:	85 c0                	test   %eax,%eax
-    2ce4:	0f 84 fe 00 00 00    	je     2de8 <rmdot+0x168>
-  if(chdir("/") != 0){
-    2cea:	c7 04 24 91 43 00 00 	movl   $0x4391,(%esp)
-    2cf1:	e8 0c 12 00 00       	call   3f02 <chdir>
-    2cf6:	85 c0                	test   %eax,%eax
-    2cf8:	0f 85 ca 00 00 00    	jne    2dc8 <rmdot+0x148>
-  if(unlink("dots/.") == 0){
-    2cfe:	c7 04 24 5b 4f 00 00 	movl   $0x4f5b,(%esp)
-    2d05:	e8 d8 11 00 00       	call   3ee2 <unlink>
-    2d0a:	85 c0                	test   %eax,%eax
-    2d0c:	0f 84 96 00 00 00    	je     2da8 <rmdot+0x128>
-  if(unlink("dots/..") == 0){
-    2d12:	c7 04 24 79 4f 00 00 	movl   $0x4f79,(%esp)
-    2d19:	e8 c4 11 00 00       	call   3ee2 <unlink>
-    2d1e:	85 c0                	test   %eax,%eax
-    2d20:	74 66                	je     2d88 <rmdot+0x108>
-  if(unlink("dots") != 0){
-    2d22:	c7 04 24 13 4f 00 00 	movl   $0x4f13,(%esp)
-    2d29:	e8 b4 11 00 00       	call   3ee2 <unlink>
-    2d2e:	85 c0                	test   %eax,%eax
-    2d30:	75 36                	jne    2d68 <rmdot+0xe8>
+    2cf6:	c7 44 24 04 d7 4f 00 	movl   $0x4fd7,0x4(%esp)
+    2cfd:	00 
+    2cfe:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    2d05:	e8 a6 13 00 00       	call   40b0 <printf>
+  if (mkdir("dots") != 0)
+    2d0a:	c7 04 24 e3 4f 00 00 	movl   $0x4fe3,(%esp)
+    2d11:	e8 b4 12 00 00       	call   3fca <mkdir>
+    2d16:	85 c0                	test   %eax,%eax
+    2d18:	0f 85 9a 00 00 00    	jne    2db8 <rmdot+0xc8>
+  if (chdir("dots") != 0)
+    2d1e:	c7 04 24 e3 4f 00 00 	movl   $0x4fe3,(%esp)
+    2d25:	e8 a8 12 00 00       	call   3fd2 <chdir>
+    2d2a:	85 c0                	test   %eax,%eax
+    2d2c:	0f 85 66 01 00 00    	jne    2e98 <rmdot+0x1a8>
+  if (unlink(".") == 0)
+    2d32:	c7 04 24 8e 4c 00 00 	movl   $0x4c8e,(%esp)
+    2d39:	e8 74 12 00 00       	call   3fb2 <unlink>
+    2d3e:	85 c0                	test   %eax,%eax
+    2d40:	0f 84 32 01 00 00    	je     2e78 <rmdot+0x188>
+  if (unlink("..") == 0)
+    2d46:	c7 04 24 8d 4c 00 00 	movl   $0x4c8d,(%esp)
+    2d4d:	e8 60 12 00 00       	call   3fb2 <unlink>
+    2d52:	85 c0                	test   %eax,%eax
+    2d54:	0f 84 fe 00 00 00    	je     2e58 <rmdot+0x168>
+  if (chdir("/") != 0)
+    2d5a:	c7 04 24 61 44 00 00 	movl   $0x4461,(%esp)
+    2d61:	e8 6c 12 00 00       	call   3fd2 <chdir>
+    2d66:	85 c0                	test   %eax,%eax
+    2d68:	0f 85 ca 00 00 00    	jne    2e38 <rmdot+0x148>
+  if (unlink("dots/.") == 0)
+    2d6e:	c7 04 24 2b 50 00 00 	movl   $0x502b,(%esp)
+    2d75:	e8 38 12 00 00       	call   3fb2 <unlink>
+    2d7a:	85 c0                	test   %eax,%eax
+    2d7c:	0f 84 96 00 00 00    	je     2e18 <rmdot+0x128>
+  if (unlink("dots/..") == 0)
+    2d82:	c7 04 24 49 50 00 00 	movl   $0x5049,(%esp)
+    2d89:	e8 24 12 00 00       	call   3fb2 <unlink>
+    2d8e:	85 c0                	test   %eax,%eax
+    2d90:	74 66                	je     2df8 <rmdot+0x108>
+  if (unlink("dots") != 0)
+    2d92:	c7 04 24 e3 4f 00 00 	movl   $0x4fe3,(%esp)
+    2d99:	e8 14 12 00 00       	call   3fb2 <unlink>
+    2d9e:	85 c0                	test   %eax,%eax
+    2da0:	75 36                	jne    2dd8 <rmdot+0xe8>
   printf(1, "rmdot ok\n");
-    2d32:	c7 44 24 04 ae 4f 00 	movl   $0x4fae,0x4(%esp)
-    2d39:	00 
-    2d3a:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    2d41:	e8 9a 12 00 00       	call   3fe0 <printf>
+    2da2:	c7 44 24 04 7e 50 00 	movl   $0x507e,0x4(%esp)
+    2da9:	00 
+    2daa:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    2db1:	e8 fa 12 00 00       	call   40b0 <printf>
 }
-    2d46:	c9                   	leave  
-    2d47:	c3                   	ret    
+    2db6:	c9                   	leave  
+    2db7:	c3                   	ret    
     printf(1, "mkdir dots failed\n");
-    2d48:	c7 44 24 04 18 4f 00 	movl   $0x4f18,0x4(%esp)
-    2d4f:	00 
-    2d50:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    2d57:	e8 84 12 00 00       	call   3fe0 <printf>
+    2db8:	c7 44 24 04 e8 4f 00 	movl   $0x4fe8,0x4(%esp)
+    2dbf:	00 
+    2dc0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    2dc7:	e8 e4 12 00 00       	call   40b0 <printf>
     exit(0);
-    2d5c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    2d63:	e8 2a 11 00 00       	call   3e92 <exit>
+    2dcc:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    2dd3:	e8 8a 11 00 00       	call   3f62 <exit>
     printf(1, "unlink dots failed!\n");
-    2d68:	c7 44 24 04 99 4f 00 	movl   $0x4f99,0x4(%esp)
-    2d6f:	00 
-    2d70:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    2d77:	e8 64 12 00 00       	call   3fe0 <printf>
+    2dd8:	c7 44 24 04 69 50 00 	movl   $0x5069,0x4(%esp)
+    2ddf:	00 
+    2de0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    2de7:	e8 c4 12 00 00       	call   40b0 <printf>
     exit(0);
-    2d7c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    2d83:	e8 0a 11 00 00       	call   3e92 <exit>
+    2dec:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    2df3:	e8 6a 11 00 00       	call   3f62 <exit>
     printf(1, "unlink dots/.. worked!\n");
-    2d88:	c7 44 24 04 81 4f 00 	movl   $0x4f81,0x4(%esp)
-    2d8f:	00 
-    2d90:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    2d97:	e8 44 12 00 00       	call   3fe0 <printf>
+    2df8:	c7 44 24 04 51 50 00 	movl   $0x5051,0x4(%esp)
+    2dff:	00 
+    2e00:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    2e07:	e8 a4 12 00 00       	call   40b0 <printf>
     exit(0);
-    2d9c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    2da3:	e8 ea 10 00 00       	call   3e92 <exit>
+    2e0c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    2e13:	e8 4a 11 00 00       	call   3f62 <exit>
     printf(1, "unlink dots/. worked!\n");
-    2da8:	c7 44 24 04 62 4f 00 	movl   $0x4f62,0x4(%esp)
-    2daf:	00 
-    2db0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    2db7:	e8 24 12 00 00       	call   3fe0 <printf>
+    2e18:	c7 44 24 04 32 50 00 	movl   $0x5032,0x4(%esp)
+    2e1f:	00 
+    2e20:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    2e27:	e8 84 12 00 00       	call   40b0 <printf>
     exit(0);
-    2dbc:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    2dc3:	e8 ca 10 00 00       	call   3e92 <exit>
+    2e2c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    2e33:	e8 2a 11 00 00       	call   3f62 <exit>
     printf(1, "chdir / failed\n");
-    2dc8:	c7 44 24 04 93 43 00 	movl   $0x4393,0x4(%esp)
-    2dcf:	00 
-    2dd0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    2dd7:	e8 04 12 00 00       	call   3fe0 <printf>
+    2e38:	c7 44 24 04 63 44 00 	movl   $0x4463,0x4(%esp)
+    2e3f:	00 
+    2e40:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    2e47:	e8 64 12 00 00       	call   40b0 <printf>
     exit(0);
-    2ddc:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    2de3:	e8 aa 10 00 00       	call   3e92 <exit>
+    2e4c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    2e53:	e8 0a 11 00 00       	call   3f62 <exit>
     printf(1, "rm .. worked!\n");
-    2de8:	c7 44 24 04 4c 4f 00 	movl   $0x4f4c,0x4(%esp)
-    2def:	00 
-    2df0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    2df7:	e8 e4 11 00 00       	call   3fe0 <printf>
+    2e58:	c7 44 24 04 1c 50 00 	movl   $0x501c,0x4(%esp)
+    2e5f:	00 
+    2e60:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    2e67:	e8 44 12 00 00       	call   40b0 <printf>
     exit(0);
-    2dfc:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    2e03:	e8 8a 10 00 00       	call   3e92 <exit>
+    2e6c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    2e73:	e8 ea 10 00 00       	call   3f62 <exit>
     printf(1, "rm . worked!\n");
-    2e08:	c7 44 24 04 3e 4f 00 	movl   $0x4f3e,0x4(%esp)
-    2e0f:	00 
-    2e10:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    2e17:	e8 c4 11 00 00       	call   3fe0 <printf>
+    2e78:	c7 44 24 04 0e 50 00 	movl   $0x500e,0x4(%esp)
+    2e7f:	00 
+    2e80:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    2e87:	e8 24 12 00 00       	call   40b0 <printf>
     exit(0);
-    2e1c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    2e23:	e8 6a 10 00 00       	call   3e92 <exit>
+    2e8c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    2e93:	e8 ca 10 00 00       	call   3f62 <exit>
     printf(1, "chdir dots failed\n");
-    2e28:	c7 44 24 04 2b 4f 00 	movl   $0x4f2b,0x4(%esp)
-    2e2f:	00 
-    2e30:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    2e37:	e8 a4 11 00 00       	call   3fe0 <printf>
+    2e98:	c7 44 24 04 fb 4f 00 	movl   $0x4ffb,0x4(%esp)
+    2e9f:	00 
+    2ea0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    2ea7:	e8 04 12 00 00       	call   40b0 <printf>
     exit(0);
-    2e3c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    2e43:	e8 4a 10 00 00       	call   3e92 <exit>
-    2e48:	90                   	nop
-    2e49:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    2eac:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    2eb3:	e8 aa 10 00 00       	call   3f62 <exit>
+    2eb8:	90                   	nop
+    2eb9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-00002e50 <dirfile>:
+00002ec0 <dirfile>:
 {
-    2e50:	55                   	push   %ebp
-    2e51:	89 e5                	mov    %esp,%ebp
-    2e53:	53                   	push   %ebx
-    2e54:	83 ec 14             	sub    $0x14,%esp
+    2ec0:	55                   	push   %ebp
+    2ec1:	89 e5                	mov    %esp,%ebp
+    2ec3:	53                   	push   %ebx
+    2ec4:	83 ec 14             	sub    $0x14,%esp
   printf(1, "dir vs file\n");
-    2e57:	c7 44 24 04 b8 4f 00 	movl   $0x4fb8,0x4(%esp)
-    2e5e:	00 
-    2e5f:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    2e66:	e8 75 11 00 00       	call   3fe0 <printf>
+    2ec7:	c7 44 24 04 88 50 00 	movl   $0x5088,0x4(%esp)
+    2ece:	00 
+    2ecf:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    2ed6:	e8 d5 11 00 00       	call   40b0 <printf>
   fd = open("dirfile", O_CREATE);
-    2e6b:	c7 44 24 04 00 02 00 	movl   $0x200,0x4(%esp)
-    2e72:	00 
-    2e73:	c7 04 24 c5 4f 00 00 	movl   $0x4fc5,(%esp)
-    2e7a:	e8 53 10 00 00       	call   3ed2 <open>
-  if(fd < 0){
-    2e7f:	85 c0                	test   %eax,%eax
-    2e81:	0f 88 60 01 00 00    	js     2fe7 <dirfile+0x197>
+    2edb:	c7 44 24 04 00 02 00 	movl   $0x200,0x4(%esp)
+    2ee2:	00 
+    2ee3:	c7 04 24 95 50 00 00 	movl   $0x5095,(%esp)
+    2eea:	e8 b3 10 00 00       	call   3fa2 <open>
+  if (fd < 0)
+    2eef:	85 c0                	test   %eax,%eax
+    2ef1:	0f 88 60 01 00 00    	js     3057 <dirfile+0x197>
   close(fd);
-    2e87:	89 04 24             	mov    %eax,(%esp)
-    2e8a:	e8 2b 10 00 00       	call   3eba <close>
-  if(chdir("dirfile") == 0){
-    2e8f:	c7 04 24 c5 4f 00 00 	movl   $0x4fc5,(%esp)
-    2e96:	e8 67 10 00 00       	call   3f02 <chdir>
-    2e9b:	85 c0                	test   %eax,%eax
-    2e9d:	0f 84 24 01 00 00    	je     2fc7 <dirfile+0x177>
+    2ef7:	89 04 24             	mov    %eax,(%esp)
+    2efa:	e8 8b 10 00 00       	call   3f8a <close>
+  if (chdir("dirfile") == 0)
+    2eff:	c7 04 24 95 50 00 00 	movl   $0x5095,(%esp)
+    2f06:	e8 c7 10 00 00       	call   3fd2 <chdir>
+    2f0b:	85 c0                	test   %eax,%eax
+    2f0d:	0f 84 24 01 00 00    	je     3037 <dirfile+0x177>
   fd = open("dirfile/xx", 0);
-    2ea3:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-    2eaa:	00 
-    2eab:	c7 04 24 fe 4f 00 00 	movl   $0x4ffe,(%esp)
-    2eb2:	e8 1b 10 00 00       	call   3ed2 <open>
-  if(fd >= 0){
-    2eb7:	85 c0                	test   %eax,%eax
-    2eb9:	0f 89 e8 00 00 00    	jns    2fa7 <dirfile+0x157>
+    2f13:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+    2f1a:	00 
+    2f1b:	c7 04 24 ce 50 00 00 	movl   $0x50ce,(%esp)
+    2f22:	e8 7b 10 00 00       	call   3fa2 <open>
+  if (fd >= 0)
+    2f27:	85 c0                	test   %eax,%eax
+    2f29:	0f 89 e8 00 00 00    	jns    3017 <dirfile+0x157>
   fd = open("dirfile/xx", O_CREATE);
-    2ebf:	c7 44 24 04 00 02 00 	movl   $0x200,0x4(%esp)
-    2ec6:	00 
-    2ec7:	c7 04 24 fe 4f 00 00 	movl   $0x4ffe,(%esp)
-    2ece:	e8 ff 0f 00 00       	call   3ed2 <open>
-  if(fd >= 0){
-    2ed3:	85 c0                	test   %eax,%eax
-    2ed5:	0f 89 cc 00 00 00    	jns    2fa7 <dirfile+0x157>
-  if(mkdir("dirfile/xx") == 0){
-    2edb:	c7 04 24 fe 4f 00 00 	movl   $0x4ffe,(%esp)
-    2ee2:	e8 13 10 00 00       	call   3efa <mkdir>
-    2ee7:	85 c0                	test   %eax,%eax
-    2ee9:	0f 84 b8 01 00 00    	je     30a7 <dirfile+0x257>
-  if(unlink("dirfile/xx") == 0){
-    2eef:	c7 04 24 fe 4f 00 00 	movl   $0x4ffe,(%esp)
-    2ef6:	e8 e7 0f 00 00       	call   3ee2 <unlink>
-    2efb:	85 c0                	test   %eax,%eax
-    2efd:	0f 84 84 01 00 00    	je     3087 <dirfile+0x237>
-  if(link("README", "dirfile/xx") == 0){
-    2f03:	c7 44 24 04 fe 4f 00 	movl   $0x4ffe,0x4(%esp)
-    2f0a:	00 
-    2f0b:	c7 04 24 62 50 00 00 	movl   $0x5062,(%esp)
-    2f12:	e8 db 0f 00 00       	call   3ef2 <link>
-    2f17:	85 c0                	test   %eax,%eax
-    2f19:	0f 84 48 01 00 00    	je     3067 <dirfile+0x217>
-  if(unlink("dirfile") != 0){
-    2f1f:	c7 04 24 c5 4f 00 00 	movl   $0x4fc5,(%esp)
-    2f26:	e8 b7 0f 00 00       	call   3ee2 <unlink>
-    2f2b:	85 c0                	test   %eax,%eax
-    2f2d:	0f 85 14 01 00 00    	jne    3047 <dirfile+0x1f7>
+    2f2f:	c7 44 24 04 00 02 00 	movl   $0x200,0x4(%esp)
+    2f36:	00 
+    2f37:	c7 04 24 ce 50 00 00 	movl   $0x50ce,(%esp)
+    2f3e:	e8 5f 10 00 00       	call   3fa2 <open>
+  if (fd >= 0)
+    2f43:	85 c0                	test   %eax,%eax
+    2f45:	0f 89 cc 00 00 00    	jns    3017 <dirfile+0x157>
+  if (mkdir("dirfile/xx") == 0)
+    2f4b:	c7 04 24 ce 50 00 00 	movl   $0x50ce,(%esp)
+    2f52:	e8 73 10 00 00       	call   3fca <mkdir>
+    2f57:	85 c0                	test   %eax,%eax
+    2f59:	0f 84 b8 01 00 00    	je     3117 <dirfile+0x257>
+  if (unlink("dirfile/xx") == 0)
+    2f5f:	c7 04 24 ce 50 00 00 	movl   $0x50ce,(%esp)
+    2f66:	e8 47 10 00 00       	call   3fb2 <unlink>
+    2f6b:	85 c0                	test   %eax,%eax
+    2f6d:	0f 84 84 01 00 00    	je     30f7 <dirfile+0x237>
+  if (link("README", "dirfile/xx") == 0)
+    2f73:	c7 44 24 04 ce 50 00 	movl   $0x50ce,0x4(%esp)
+    2f7a:	00 
+    2f7b:	c7 04 24 32 51 00 00 	movl   $0x5132,(%esp)
+    2f82:	e8 3b 10 00 00       	call   3fc2 <link>
+    2f87:	85 c0                	test   %eax,%eax
+    2f89:	0f 84 48 01 00 00    	je     30d7 <dirfile+0x217>
+  if (unlink("dirfile") != 0)
+    2f8f:	c7 04 24 95 50 00 00 	movl   $0x5095,(%esp)
+    2f96:	e8 17 10 00 00       	call   3fb2 <unlink>
+    2f9b:	85 c0                	test   %eax,%eax
+    2f9d:	0f 85 14 01 00 00    	jne    30b7 <dirfile+0x1f7>
   fd = open(".", O_RDWR);
-    2f33:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
-    2f3a:	00 
-    2f3b:	c7 04 24 be 4b 00 00 	movl   $0x4bbe,(%esp)
-    2f42:	e8 8b 0f 00 00       	call   3ed2 <open>
-  if(fd >= 0){
-    2f47:	85 c0                	test   %eax,%eax
-    2f49:	0f 89 d8 00 00 00    	jns    3027 <dirfile+0x1d7>
+    2fa3:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
+    2faa:	00 
+    2fab:	c7 04 24 8e 4c 00 00 	movl   $0x4c8e,(%esp)
+    2fb2:	e8 eb 0f 00 00       	call   3fa2 <open>
+  if (fd >= 0)
+    2fb7:	85 c0                	test   %eax,%eax
+    2fb9:	0f 89 d8 00 00 00    	jns    3097 <dirfile+0x1d7>
   fd = open(".", 0);
-    2f4f:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-    2f56:	00 
-    2f57:	c7 04 24 be 4b 00 00 	movl   $0x4bbe,(%esp)
-    2f5e:	e8 6f 0f 00 00       	call   3ed2 <open>
-  if(write(fd, "x", 1) > 0){
-    2f63:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
-    2f6a:	00 
-    2f6b:	c7 44 24 04 a1 4c 00 	movl   $0x4ca1,0x4(%esp)
-    2f72:	00 
-    2f73:	89 04 24             	mov    %eax,(%esp)
+    2fbf:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+    2fc6:	00 
+    2fc7:	c7 04 24 8e 4c 00 00 	movl   $0x4c8e,(%esp)
+    2fce:	e8 cf 0f 00 00       	call   3fa2 <open>
+  if (write(fd, "x", 1) > 0)
+    2fd3:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+    2fda:	00 
+    2fdb:	c7 44 24 04 71 4d 00 	movl   $0x4d71,0x4(%esp)
+    2fe2:	00 
+    2fe3:	89 04 24             	mov    %eax,(%esp)
   fd = open(".", 0);
-    2f76:	89 c3                	mov    %eax,%ebx
-  if(write(fd, "x", 1) > 0){
-    2f78:	e8 35 0f 00 00       	call   3eb2 <write>
-    2f7d:	85 c0                	test   %eax,%eax
-    2f7f:	0f 8f 82 00 00 00    	jg     3007 <dirfile+0x1b7>
+    2fe6:	89 c3                	mov    %eax,%ebx
+  if (write(fd, "x", 1) > 0)
+    2fe8:	e8 95 0f 00 00       	call   3f82 <write>
+    2fed:	85 c0                	test   %eax,%eax
+    2fef:	0f 8f 82 00 00 00    	jg     3077 <dirfile+0x1b7>
   close(fd);
-    2f85:	89 1c 24             	mov    %ebx,(%esp)
-    2f88:	e8 2d 0f 00 00       	call   3eba <close>
+    2ff5:	89 1c 24             	mov    %ebx,(%esp)
+    2ff8:	e8 8d 0f 00 00       	call   3f8a <close>
   printf(1, "dir vs file OK\n");
-    2f8d:	c7 44 24 04 95 50 00 	movl   $0x5095,0x4(%esp)
-    2f94:	00 
-    2f95:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    2f9c:	e8 3f 10 00 00       	call   3fe0 <printf>
+    2ffd:	c7 44 24 04 65 51 00 	movl   $0x5165,0x4(%esp)
+    3004:	00 
+    3005:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    300c:	e8 9f 10 00 00       	call   40b0 <printf>
 }
-    2fa1:	83 c4 14             	add    $0x14,%esp
-    2fa4:	5b                   	pop    %ebx
-    2fa5:	5d                   	pop    %ebp
-    2fa6:	c3                   	ret    
+    3011:	83 c4 14             	add    $0x14,%esp
+    3014:	5b                   	pop    %ebx
+    3015:	5d                   	pop    %ebp
+    3016:	c3                   	ret    
     printf(1, "create dirfile/xx succeeded!\n");
-    2fa7:	c7 44 24 04 09 50 00 	movl   $0x5009,0x4(%esp)
-    2fae:	00 
-    2faf:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    2fb6:	e8 25 10 00 00       	call   3fe0 <printf>
+    3017:	c7 44 24 04 d9 50 00 	movl   $0x50d9,0x4(%esp)
+    301e:	00 
+    301f:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    3026:	e8 85 10 00 00       	call   40b0 <printf>
     exit(0);
-    2fbb:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    2fc2:	e8 cb 0e 00 00       	call   3e92 <exit>
+    302b:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    3032:	e8 2b 0f 00 00       	call   3f62 <exit>
     printf(1, "chdir dirfile succeeded!\n");
-    2fc7:	c7 44 24 04 e4 4f 00 	movl   $0x4fe4,0x4(%esp)
-    2fce:	00 
-    2fcf:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    2fd6:	e8 05 10 00 00       	call   3fe0 <printf>
+    3037:	c7 44 24 04 b4 50 00 	movl   $0x50b4,0x4(%esp)
+    303e:	00 
+    303f:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    3046:	e8 65 10 00 00       	call   40b0 <printf>
     exit(0);
-    2fdb:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    2fe2:	e8 ab 0e 00 00       	call   3e92 <exit>
+    304b:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    3052:	e8 0b 0f 00 00       	call   3f62 <exit>
     printf(1, "create dirfile failed\n");
-    2fe7:	c7 44 24 04 cd 4f 00 	movl   $0x4fcd,0x4(%esp)
-    2fee:	00 
-    2fef:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    2ff6:	e8 e5 0f 00 00       	call   3fe0 <printf>
+    3057:	c7 44 24 04 9d 50 00 	movl   $0x509d,0x4(%esp)
+    305e:	00 
+    305f:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    3066:	e8 45 10 00 00       	call   40b0 <printf>
     exit(0);
-    2ffb:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    3002:	e8 8b 0e 00 00       	call   3e92 <exit>
+    306b:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    3072:	e8 eb 0e 00 00       	call   3f62 <exit>
     printf(1, "write . succeeded!\n");
-    3007:	c7 44 24 04 81 50 00 	movl   $0x5081,0x4(%esp)
-    300e:	00 
-    300f:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    3016:	e8 c5 0f 00 00       	call   3fe0 <printf>
+    3077:	c7 44 24 04 51 51 00 	movl   $0x5151,0x4(%esp)
+    307e:	00 
+    307f:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    3086:	e8 25 10 00 00       	call   40b0 <printf>
     exit(0);
-    301b:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    3022:	e8 6b 0e 00 00       	call   3e92 <exit>
+    308b:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    3092:	e8 cb 0e 00 00       	call   3f62 <exit>
     printf(1, "open . for writing succeeded!\n");
-    3027:	c7 44 24 04 78 58 00 	movl   $0x5878,0x4(%esp)
-    302e:	00 
-    302f:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    3036:	e8 a5 0f 00 00       	call   3fe0 <printf>
+    3097:	c7 44 24 04 48 59 00 	movl   $0x5948,0x4(%esp)
+    309e:	00 
+    309f:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    30a6:	e8 05 10 00 00       	call   40b0 <printf>
     exit(0);
-    303b:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    3042:	e8 4b 0e 00 00       	call   3e92 <exit>
+    30ab:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    30b2:	e8 ab 0e 00 00       	call   3f62 <exit>
     printf(1, "unlink dirfile failed!\n");
-    3047:	c7 44 24 04 69 50 00 	movl   $0x5069,0x4(%esp)
-    304e:	00 
-    304f:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    3056:	e8 85 0f 00 00       	call   3fe0 <printf>
+    30b7:	c7 44 24 04 39 51 00 	movl   $0x5139,0x4(%esp)
+    30be:	00 
+    30bf:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    30c6:	e8 e5 0f 00 00       	call   40b0 <printf>
     exit(0);
-    305b:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    3062:	e8 2b 0e 00 00       	call   3e92 <exit>
+    30cb:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    30d2:	e8 8b 0e 00 00       	call   3f62 <exit>
     printf(1, "link to dirfile/xx succeeded!\n");
-    3067:	c7 44 24 04 58 58 00 	movl   $0x5858,0x4(%esp)
-    306e:	00 
-    306f:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    3076:	e8 65 0f 00 00       	call   3fe0 <printf>
+    30d7:	c7 44 24 04 28 59 00 	movl   $0x5928,0x4(%esp)
+    30de:	00 
+    30df:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    30e6:	e8 c5 0f 00 00       	call   40b0 <printf>
     exit(0);
-    307b:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    3082:	e8 0b 0e 00 00       	call   3e92 <exit>
+    30eb:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    30f2:	e8 6b 0e 00 00       	call   3f62 <exit>
     printf(1, "unlink dirfile/xx succeeded!\n");
-    3087:	c7 44 24 04 44 50 00 	movl   $0x5044,0x4(%esp)
-    308e:	00 
-    308f:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    3096:	e8 45 0f 00 00       	call   3fe0 <printf>
+    30f7:	c7 44 24 04 14 51 00 	movl   $0x5114,0x4(%esp)
+    30fe:	00 
+    30ff:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    3106:	e8 a5 0f 00 00       	call   40b0 <printf>
     exit(0);
-    309b:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    30a2:	e8 eb 0d 00 00       	call   3e92 <exit>
+    310b:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    3112:	e8 4b 0e 00 00       	call   3f62 <exit>
     printf(1, "mkdir dirfile/xx succeeded!\n");
-    30a7:	c7 44 24 04 27 50 00 	movl   $0x5027,0x4(%esp)
-    30ae:	00 
-    30af:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    30b6:	e8 25 0f 00 00       	call   3fe0 <printf>
+    3117:	c7 44 24 04 f7 50 00 	movl   $0x50f7,0x4(%esp)
+    311e:	00 
+    311f:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    3126:	e8 85 0f 00 00       	call   40b0 <printf>
     exit(0);
-    30bb:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    30c2:	e8 cb 0d 00 00       	call   3e92 <exit>
-    30c7:	89 f6                	mov    %esi,%esi
-    30c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    312b:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    3132:	e8 2b 0e 00 00       	call   3f62 <exit>
+    3137:	89 f6                	mov    %esi,%esi
+    3139:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-000030d0 <iref>:
+00003140 <iref>:
 {
-    30d0:	55                   	push   %ebp
-    30d1:	89 e5                	mov    %esp,%ebp
-    30d3:	53                   	push   %ebx
+    3140:	55                   	push   %ebp
+    3141:	89 e5                	mov    %esp,%ebp
+    3143:	53                   	push   %ebx
   printf(1, "empty file name\n");
-    30d4:	bb 33 00 00 00       	mov    $0x33,%ebx
+    3144:	bb 33 00 00 00       	mov    $0x33,%ebx
 {
-    30d9:	83 ec 14             	sub    $0x14,%esp
+    3149:	83 ec 14             	sub    $0x14,%esp
   printf(1, "empty file name\n");
-    30dc:	c7 44 24 04 a5 50 00 	movl   $0x50a5,0x4(%esp)
-    30e3:	00 
-    30e4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    30eb:	e8 f0 0e 00 00       	call   3fe0 <printf>
-    if(mkdir("irefd") != 0){
-    30f0:	c7 04 24 b6 50 00 00 	movl   $0x50b6,(%esp)
-    30f7:	e8 fe 0d 00 00       	call   3efa <mkdir>
-    30fc:	85 c0                	test   %eax,%eax
-    30fe:	0f 85 af 00 00 00    	jne    31b3 <iref+0xe3>
-    if(chdir("irefd") != 0){
-    3104:	c7 04 24 b6 50 00 00 	movl   $0x50b6,(%esp)
-    310b:	e8 f2 0d 00 00       	call   3f02 <chdir>
-    3110:	85 c0                	test   %eax,%eax
-    3112:	0f 85 bb 00 00 00    	jne    31d3 <iref+0x103>
+    314c:	c7 44 24 04 75 51 00 	movl   $0x5175,0x4(%esp)
+    3153:	00 
+    3154:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    315b:	e8 50 0f 00 00       	call   40b0 <printf>
+    if (mkdir("irefd") != 0)
+    3160:	c7 04 24 86 51 00 00 	movl   $0x5186,(%esp)
+    3167:	e8 5e 0e 00 00       	call   3fca <mkdir>
+    316c:	85 c0                	test   %eax,%eax
+    316e:	0f 85 af 00 00 00    	jne    3223 <iref+0xe3>
+    if (chdir("irefd") != 0)
+    3174:	c7 04 24 86 51 00 00 	movl   $0x5186,(%esp)
+    317b:	e8 52 0e 00 00       	call   3fd2 <chdir>
+    3180:	85 c0                	test   %eax,%eax
+    3182:	0f 85 bb 00 00 00    	jne    3243 <iref+0x103>
     mkdir("");
-    3118:	c7 04 24 6b 47 00 00 	movl   $0x476b,(%esp)
-    311f:	e8 d6 0d 00 00       	call   3efa <mkdir>
+    3188:	c7 04 24 3b 48 00 00 	movl   $0x483b,(%esp)
+    318f:	e8 36 0e 00 00       	call   3fca <mkdir>
     link("README", "");
-    3124:	c7 44 24 04 6b 47 00 	movl   $0x476b,0x4(%esp)
-    312b:	00 
-    312c:	c7 04 24 62 50 00 00 	movl   $0x5062,(%esp)
-    3133:	e8 ba 0d 00 00       	call   3ef2 <link>
+    3194:	c7 44 24 04 3b 48 00 	movl   $0x483b,0x4(%esp)
+    319b:	00 
+    319c:	c7 04 24 32 51 00 00 	movl   $0x5132,(%esp)
+    31a3:	e8 1a 0e 00 00       	call   3fc2 <link>
     fd = open("", O_CREATE);
-    3138:	c7 44 24 04 00 02 00 	movl   $0x200,0x4(%esp)
-    313f:	00 
-    3140:	c7 04 24 6b 47 00 00 	movl   $0x476b,(%esp)
-    3147:	e8 86 0d 00 00       	call   3ed2 <open>
-    if(fd >= 0)
-    314c:	85 c0                	test   %eax,%eax
-    314e:	78 08                	js     3158 <iref+0x88>
+    31a8:	c7 44 24 04 00 02 00 	movl   $0x200,0x4(%esp)
+    31af:	00 
+    31b0:	c7 04 24 3b 48 00 00 	movl   $0x483b,(%esp)
+    31b7:	e8 e6 0d 00 00       	call   3fa2 <open>
+    if (fd >= 0)
+    31bc:	85 c0                	test   %eax,%eax
+    31be:	78 08                	js     31c8 <iref+0x88>
       close(fd);
-    3150:	89 04 24             	mov    %eax,(%esp)
-    3153:	e8 62 0d 00 00       	call   3eba <close>
+    31c0:	89 04 24             	mov    %eax,(%esp)
+    31c3:	e8 c2 0d 00 00       	call   3f8a <close>
     fd = open("xx", O_CREATE);
-    3158:	c7 44 24 04 00 02 00 	movl   $0x200,0x4(%esp)
-    315f:	00 
-    3160:	c7 04 24 a0 4c 00 00 	movl   $0x4ca0,(%esp)
-    3167:	e8 66 0d 00 00       	call   3ed2 <open>
-    if(fd >= 0)
-    316c:	85 c0                	test   %eax,%eax
-    316e:	78 08                	js     3178 <iref+0xa8>
+    31c8:	c7 44 24 04 00 02 00 	movl   $0x200,0x4(%esp)
+    31cf:	00 
+    31d0:	c7 04 24 70 4d 00 00 	movl   $0x4d70,(%esp)
+    31d7:	e8 c6 0d 00 00       	call   3fa2 <open>
+    if (fd >= 0)
+    31dc:	85 c0                	test   %eax,%eax
+    31de:	78 08                	js     31e8 <iref+0xa8>
       close(fd);
-    3170:	89 04 24             	mov    %eax,(%esp)
-    3173:	e8 42 0d 00 00       	call   3eba <close>
+    31e0:	89 04 24             	mov    %eax,(%esp)
+    31e3:	e8 a2 0d 00 00       	call   3f8a <close>
     unlink("xx");
-    3178:	c7 04 24 a0 4c 00 00 	movl   $0x4ca0,(%esp)
-    317f:	e8 5e 0d 00 00       	call   3ee2 <unlink>
-  for(i = 0; i < 50 + 1; i++){
-    3184:	83 eb 01             	sub    $0x1,%ebx
-    3187:	0f 85 63 ff ff ff    	jne    30f0 <iref+0x20>
+    31e8:	c7 04 24 70 4d 00 00 	movl   $0x4d70,(%esp)
+    31ef:	e8 be 0d 00 00       	call   3fb2 <unlink>
+  for (i = 0; i < 50 + 1; i++)
+    31f4:	83 eb 01             	sub    $0x1,%ebx
+    31f7:	0f 85 63 ff ff ff    	jne    3160 <iref+0x20>
   chdir("/");
-    318d:	c7 04 24 91 43 00 00 	movl   $0x4391,(%esp)
-    3194:	e8 69 0d 00 00       	call   3f02 <chdir>
+    31fd:	c7 04 24 61 44 00 00 	movl   $0x4461,(%esp)
+    3204:	e8 c9 0d 00 00       	call   3fd2 <chdir>
   printf(1, "empty file name OK\n");
-    3199:	c7 44 24 04 e4 50 00 	movl   $0x50e4,0x4(%esp)
-    31a0:	00 
-    31a1:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    31a8:	e8 33 0e 00 00       	call   3fe0 <printf>
+    3209:	c7 44 24 04 b4 51 00 	movl   $0x51b4,0x4(%esp)
+    3210:	00 
+    3211:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    3218:	e8 93 0e 00 00       	call   40b0 <printf>
 }
-    31ad:	83 c4 14             	add    $0x14,%esp
-    31b0:	5b                   	pop    %ebx
-    31b1:	5d                   	pop    %ebp
-    31b2:	c3                   	ret    
+    321d:	83 c4 14             	add    $0x14,%esp
+    3220:	5b                   	pop    %ebx
+    3221:	5d                   	pop    %ebp
+    3222:	c3                   	ret    
       printf(1, "mkdir irefd failed\n");
-    31b3:	c7 44 24 04 bc 50 00 	movl   $0x50bc,0x4(%esp)
-    31ba:	00 
-    31bb:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    31c2:	e8 19 0e 00 00       	call   3fe0 <printf>
+    3223:	c7 44 24 04 8c 51 00 	movl   $0x518c,0x4(%esp)
+    322a:	00 
+    322b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    3232:	e8 79 0e 00 00       	call   40b0 <printf>
       exit(0);
-    31c7:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    31ce:	e8 bf 0c 00 00       	call   3e92 <exit>
+    3237:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    323e:	e8 1f 0d 00 00       	call   3f62 <exit>
       printf(1, "chdir irefd failed\n");
-    31d3:	c7 44 24 04 d0 50 00 	movl   $0x50d0,0x4(%esp)
-    31da:	00 
-    31db:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    31e2:	e8 f9 0d 00 00       	call   3fe0 <printf>
+    3243:	c7 44 24 04 a0 51 00 	movl   $0x51a0,0x4(%esp)
+    324a:	00 
+    324b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    3252:	e8 59 0e 00 00       	call   40b0 <printf>
       exit(0);
-    31e7:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    31ee:	e8 9f 0c 00 00       	call   3e92 <exit>
-    31f3:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    31f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    3257:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    325e:	e8 ff 0c 00 00       	call   3f62 <exit>
+    3263:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    3269:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-00003200 <forktest>:
+00003270 <forktest>:
 {
-    3200:	55                   	push   %ebp
-    3201:	89 e5                	mov    %esp,%ebp
-    3203:	53                   	push   %ebx
-  for(n=0; n<1000; n++){
-    3204:	31 db                	xor    %ebx,%ebx
+    3270:	55                   	push   %ebp
+    3271:	89 e5                	mov    %esp,%ebp
+    3273:	53                   	push   %ebx
+  for (n = 0; n < 1000; n++)
+    3274:	31 db                	xor    %ebx,%ebx
 {
-    3206:	83 ec 14             	sub    $0x14,%esp
+    3276:	83 ec 14             	sub    $0x14,%esp
   printf(1, "fork test\n");
-    3209:	c7 44 24 04 f8 50 00 	movl   $0x50f8,0x4(%esp)
-    3210:	00 
-    3211:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    3218:	e8 c3 0d 00 00       	call   3fe0 <printf>
-    321d:	eb 13                	jmp    3232 <forktest+0x32>
-    321f:	90                   	nop
-    if(pid == 0)
-    3220:	0f 84 8e 00 00 00    	je     32b4 <forktest+0xb4>
-  for(n=0; n<1000; n++){
-    3226:	83 c3 01             	add    $0x1,%ebx
-    3229:	81 fb e8 03 00 00    	cmp    $0x3e8,%ebx
-    322f:	90                   	nop
-    3230:	74 4e                	je     3280 <forktest+0x80>
+    3279:	c7 44 24 04 c8 51 00 	movl   $0x51c8,0x4(%esp)
+    3280:	00 
+    3281:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    3288:	e8 23 0e 00 00       	call   40b0 <printf>
+    328d:	eb 13                	jmp    32a2 <forktest+0x32>
+    328f:	90                   	nop
+    if (pid == 0)
+    3290:	0f 84 96 00 00 00    	je     332c <forktest+0xbc>
+  for (n = 0; n < 1000; n++)
+    3296:	83 c3 01             	add    $0x1,%ebx
+    3299:	81 fb e8 03 00 00    	cmp    $0x3e8,%ebx
+    329f:	90                   	nop
+    32a0:	74 56                	je     32f8 <forktest+0x88>
     pid = fork();
-    3232:	e8 53 0c 00 00       	call   3e8a <fork>
-    if(pid < 0)
-    3237:	85 c0                	test   %eax,%eax
-    3239:	79 e5                	jns    3220 <forktest+0x20>
-  for(; n > 0; n--){
-    323b:	85 db                	test   %ebx,%ebx
-    323d:	8d 76 00             	lea    0x0(%esi),%esi
-    3240:	74 15                	je     3257 <forktest+0x57>
-    3242:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    if(wait() < 0){
-    3248:	e8 4d 0c 00 00       	call   3e9a <wait>
-    324d:	85 c0                	test   %eax,%eax
-    324f:	90                   	nop
-    3250:	78 4e                	js     32a0 <forktest+0xa0>
-  for(; n > 0; n--){
-    3252:	83 eb 01             	sub    $0x1,%ebx
-    3255:	75 f1                	jne    3248 <forktest+0x48>
-  if(wait() != -1){
-    3257:	e8 3e 0c 00 00       	call   3e9a <wait>
-    325c:	83 f8 ff             	cmp    $0xffffffff,%eax
-    325f:	90                   	nop
-    3260:	75 5e                	jne    32c0 <forktest+0xc0>
+    32a2:	e8 b3 0c 00 00       	call   3f5a <fork>
+    if (pid < 0)
+    32a7:	85 c0                	test   %eax,%eax
+    32a9:	79 e5                	jns    3290 <forktest+0x20>
+  for (; n > 0; n--)
+    32ab:	85 db                	test   %ebx,%ebx
+    32ad:	8d 76 00             	lea    0x0(%esi),%esi
+    32b0:	74 1b                	je     32cd <forktest+0x5d>
+    32b2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    if (wait(0) < 0)
+    32b8:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    32bf:	e8 a6 0c 00 00       	call   3f6a <wait>
+    32c4:	85 c0                	test   %eax,%eax
+    32c6:	78 50                	js     3318 <forktest+0xa8>
+  for (; n > 0; n--)
+    32c8:	83 eb 01             	sub    $0x1,%ebx
+    32cb:	75 eb                	jne    32b8 <forktest+0x48>
+  if (wait(0) != -1)
+    32cd:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    32d4:	e8 91 0c 00 00       	call   3f6a <wait>
+    32d9:	83 f8 ff             	cmp    $0xffffffff,%eax
+    32dc:	75 5a                	jne    3338 <forktest+0xc8>
   printf(1, "fork test OK\n");
-    3262:	c7 44 24 04 2a 51 00 	movl   $0x512a,0x4(%esp)
-    3269:	00 
-    326a:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    3271:	e8 6a 0d 00 00       	call   3fe0 <printf>
+    32de:	c7 44 24 04 fa 51 00 	movl   $0x51fa,0x4(%esp)
+    32e5:	00 
+    32e6:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    32ed:	e8 be 0d 00 00       	call   40b0 <printf>
 }
-    3276:	83 c4 14             	add    $0x14,%esp
-    3279:	5b                   	pop    %ebx
-    327a:	5d                   	pop    %ebp
-    327b:	c3                   	ret    
-    327c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    32f2:	83 c4 14             	add    $0x14,%esp
+    32f5:	5b                   	pop    %ebx
+    32f6:	5d                   	pop    %ebp
+    32f7:	c3                   	ret    
     printf(1, "fork claimed to work 1000 times!\n");
-    3280:	c7 44 24 04 98 58 00 	movl   $0x5898,0x4(%esp)
-    3287:	00 
-    3288:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    328f:	e8 4c 0d 00 00       	call   3fe0 <printf>
+    32f8:	c7 44 24 04 68 59 00 	movl   $0x5968,0x4(%esp)
+    32ff:	00 
+    3300:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    3307:	e8 a4 0d 00 00       	call   40b0 <printf>
     exit(0);
-    3294:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    329b:	e8 f2 0b 00 00       	call   3e92 <exit>
+    330c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    3313:	e8 4a 0c 00 00       	call   3f62 <exit>
       printf(1, "wait stopped early\n");
-    32a0:	c7 44 24 04 03 51 00 	movl   $0x5103,0x4(%esp)
-    32a7:	00 
-    32a8:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    32af:	e8 2c 0d 00 00       	call   3fe0 <printf>
+    3318:	c7 44 24 04 d3 51 00 	movl   $0x51d3,0x4(%esp)
+    331f:	00 
+    3320:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    3327:	e8 84 0d 00 00       	call   40b0 <printf>
       exit(0);
-    32b4:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    32bb:	e8 d2 0b 00 00       	call   3e92 <exit>
+    332c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    3333:	e8 2a 0c 00 00       	call   3f62 <exit>
     printf(1, "wait got too many\n");
-    32c0:	c7 44 24 04 17 51 00 	movl   $0x5117,0x4(%esp)
-    32c7:	00 
-    32c8:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    32cf:	e8 0c 0d 00 00       	call   3fe0 <printf>
+    3338:	c7 44 24 04 e7 51 00 	movl   $0x51e7,0x4(%esp)
+    333f:	00 
+    3340:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    3347:	e8 64 0d 00 00       	call   40b0 <printf>
     exit(0);
-    32d4:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    32db:	e8 b2 0b 00 00       	call   3e92 <exit>
+    334c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    3353:	e8 0a 0c 00 00       	call   3f62 <exit>
+    3358:	90                   	nop
+    3359:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-000032e0 <sbrktest>:
+00003360 <sbrktest>:
 {
-    32e0:	55                   	push   %ebp
-    32e1:	89 e5                	mov    %esp,%ebp
-    32e3:	57                   	push   %edi
-    32e4:	56                   	push   %esi
-  for(i = 0; i < 5000; i++){
-    32e5:	31 f6                	xor    %esi,%esi
+    3360:	55                   	push   %ebp
+    3361:	89 e5                	mov    %esp,%ebp
+    3363:	57                   	push   %edi
+    3364:	56                   	push   %esi
+  for (i = 0; i < 5000; i++)
+    3365:	31 f6                	xor    %esi,%esi
 {
-    32e7:	53                   	push   %ebx
-    32e8:	83 ec 6c             	sub    $0x6c,%esp
+    3367:	53                   	push   %ebx
+    3368:	83 ec 6c             	sub    $0x6c,%esp
   printf(stdout, "sbrk test\n");
-    32eb:	a1 c4 63 00 00       	mov    0x63c4,%eax
-    32f0:	c7 44 24 04 38 51 00 	movl   $0x5138,0x4(%esp)
-    32f7:	00 
-    32f8:	89 04 24             	mov    %eax,(%esp)
-    32fb:	e8 e0 0c 00 00       	call   3fe0 <printf>
+    336b:	a1 94 64 00 00       	mov    0x6494,%eax
+    3370:	c7 44 24 04 08 52 00 	movl   $0x5208,0x4(%esp)
+    3377:	00 
+    3378:	89 04 24             	mov    %eax,(%esp)
+    337b:	e8 30 0d 00 00       	call   40b0 <printf>
   oldbrk = sbrk(0);
-    3300:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    3307:	e8 0e 0c 00 00       	call   3f1a <sbrk>
+    3380:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    3387:	e8 5e 0c 00 00       	call   3fea <sbrk>
   a = sbrk(0);
-    330c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    338c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
   oldbrk = sbrk(0);
-    3313:	89 45 a4             	mov    %eax,-0x5c(%ebp)
+    3393:	89 45 a4             	mov    %eax,-0x5c(%ebp)
   a = sbrk(0);
-    3316:	e8 ff 0b 00 00       	call   3f1a <sbrk>
-    331b:	89 c3                	mov    %eax,%ebx
-    331d:	8d 76 00             	lea    0x0(%esi),%esi
+    3396:	e8 4f 0c 00 00       	call   3fea <sbrk>
+    339b:	89 c3                	mov    %eax,%ebx
+    339d:	8d 76 00             	lea    0x0(%esi),%esi
     b = sbrk(1);
-    3320:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    3327:	e8 ee 0b 00 00       	call   3f1a <sbrk>
-    if(b != a){
-    332c:	39 d8                	cmp    %ebx,%eax
+    33a0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    33a7:	e8 3e 0c 00 00       	call   3fea <sbrk>
+    if (b != a)
+    33ac:	39 d8                	cmp    %ebx,%eax
     b = sbrk(1);
-    332e:	89 c7                	mov    %eax,%edi
-    if(b != a){
-    3330:	0f 85 78 02 00 00    	jne    35ae <sbrktest+0x2ce>
-  for(i = 0; i < 5000; i++){
-    3336:	83 c6 01             	add    $0x1,%esi
+    33ae:	89 c7                	mov    %eax,%edi
+    if (b != a)
+    33b0:	0f 85 90 02 00 00    	jne    3646 <sbrktest+0x2e6>
+  for (i = 0; i < 5000; i++)
+    33b6:	83 c6 01             	add    $0x1,%esi
     a = b + 1;
-    3339:	83 c3 01             	add    $0x1,%ebx
+    33b9:	83 c3 01             	add    $0x1,%ebx
     *b = 1;
-    333c:	c6 43 ff 01          	movb   $0x1,-0x1(%ebx)
-  for(i = 0; i < 5000; i++){
-    3340:	81 fe 88 13 00 00    	cmp    $0x1388,%esi
-    3346:	75 d8                	jne    3320 <sbrktest+0x40>
+    33bc:	c6 43 ff 01          	movb   $0x1,-0x1(%ebx)
+  for (i = 0; i < 5000; i++)
+    33c0:	81 fe 88 13 00 00    	cmp    $0x1388,%esi
+    33c6:	75 d8                	jne    33a0 <sbrktest+0x40>
   pid = fork();
-    3348:	e8 3d 0b 00 00       	call   3e8a <fork>
-  if(pid < 0){
-    334d:	85 c0                	test   %eax,%eax
+    33c8:	e8 8d 0b 00 00       	call   3f5a <fork>
+  if (pid < 0)
+    33cd:	85 c0                	test   %eax,%eax
   pid = fork();
-    334f:	89 c3                	mov    %eax,%ebx
-  if(pid < 0){
-    3351:	0f 88 7a 03 00 00    	js     36d1 <sbrktest+0x3f1>
+    33cf:	89 c3                	mov    %eax,%ebx
+  if (pid < 0)
+    33d1:	0f 88 9c 03 00 00    	js     3773 <sbrktest+0x413>
   c = sbrk(1);
-    3357:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    335e:	e8 b7 0b 00 00       	call   3f1a <sbrk>
+    33d7:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    33de:	e8 07 0c 00 00       	call   3fea <sbrk>
   c = sbrk(1);
-    3363:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    336a:	e8 ab 0b 00 00       	call   3f1a <sbrk>
-  if(c != a + 1){
-    336f:	8d 57 02             	lea    0x2(%edi),%edx
-    3372:	39 d0                	cmp    %edx,%eax
-    3374:	0f 85 4a 03 00 00    	jne    36c4 <sbrktest+0x3e4>
-  if(pid == 0)
-    337a:	85 db                	test   %ebx,%ebx
-    337c:	0f 84 8e 02 00 00    	je     3610 <sbrktest+0x330>
-  wait();
-    3382:	e8 13 0b 00 00       	call   3e9a <wait>
+    33e3:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    33ea:	e8 fb 0b 00 00       	call   3fea <sbrk>
+  if (c != a + 1)
+    33ef:	8d 57 02             	lea    0x2(%edi),%edx
+    33f2:	39 d0                	cmp    %edx,%eax
+    33f4:	0f 85 6c 03 00 00    	jne    3766 <sbrktest+0x406>
+  if (pid == 0)
+    33fa:	85 db                	test   %ebx,%ebx
+    exit(0);
+    33fc:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  if (pid == 0)
+    3403:	0f 84 a6 02 00 00    	je     36af <sbrktest+0x34f>
+  wait(0);
+    3409:	e8 5c 0b 00 00       	call   3f6a <wait>
   a = sbrk(0);
-    3387:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    338e:	e8 87 0b 00 00       	call   3f1a <sbrk>
+    340e:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    3415:	e8 d0 0b 00 00       	call   3fea <sbrk>
   amt = (BIG) - (uint)a;
-    3393:	ba 00 00 40 06       	mov    $0x6400000,%edx
-    3398:	29 c2                	sub    %eax,%edx
+    341a:	ba 00 00 40 06       	mov    $0x6400000,%edx
+    341f:	29 c2                	sub    %eax,%edx
   a = sbrk(0);
-    339a:	89 c3                	mov    %eax,%ebx
+    3421:	89 c3                	mov    %eax,%ebx
   p = sbrk(amt);
-    339c:	89 14 24             	mov    %edx,(%esp)
-    339f:	e8 76 0b 00 00       	call   3f1a <sbrk>
-  if (p != a) {
-    33a4:	39 d8                	cmp    %ebx,%eax
-    33a6:	0f 85 ec 02 00 00    	jne    3698 <sbrktest+0x3b8>
+    3423:	89 14 24             	mov    %edx,(%esp)
+    3426:	e8 bf 0b 00 00       	call   3fea <sbrk>
+  if (p != a)
+    342b:	39 d8                	cmp    %ebx,%eax
+    342d:	0f 85 07 03 00 00    	jne    373a <sbrktest+0x3da>
   *lastaddr = 99;
-    33ac:	c6 05 ff ff 3f 06 63 	movb   $0x63,0x63fffff
+    3433:	c6 05 ff ff 3f 06 63 	movb   $0x63,0x63fffff
   a = sbrk(0);
-    33b3:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    33ba:	e8 5b 0b 00 00       	call   3f1a <sbrk>
+    343a:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    3441:	e8 a4 0b 00 00       	call   3fea <sbrk>
   c = sbrk(-4096);
-    33bf:	c7 04 24 00 f0 ff ff 	movl   $0xfffff000,(%esp)
+    3446:	c7 04 24 00 f0 ff ff 	movl   $0xfffff000,(%esp)
   a = sbrk(0);
-    33c6:	89 c3                	mov    %eax,%ebx
+    344d:	89 c3                	mov    %eax,%ebx
   c = sbrk(-4096);
-    33c8:	e8 4d 0b 00 00       	call   3f1a <sbrk>
-  if(c == (char*)0xffffffff){
-    33cd:	83 f8 ff             	cmp    $0xffffffff,%eax
-    33d0:	0f 84 e1 02 00 00    	je     36b7 <sbrktest+0x3d7>
+    344f:	e8 96 0b 00 00       	call   3fea <sbrk>
+  if (c == (char *)0xffffffff)
+    3454:	83 f8 ff             	cmp    $0xffffffff,%eax
+    3457:	0f 84 fc 02 00 00    	je     3759 <sbrktest+0x3f9>
   c = sbrk(0);
-    33d6:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    33dd:	e8 38 0b 00 00       	call   3f1a <sbrk>
-  if(c != a - 4096){
-    33e2:	8d 93 00 f0 ff ff    	lea    -0x1000(%ebx),%edx
-    33e8:	39 d0                	cmp    %edx,%eax
-    33ea:	0f 85 b5 02 00 00    	jne    36a5 <sbrktest+0x3c5>
+    345d:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    3464:	e8 81 0b 00 00       	call   3fea <sbrk>
+  if (c != a - 4096)
+    3469:	8d 93 00 f0 ff ff    	lea    -0x1000(%ebx),%edx
+    346f:	39 d0                	cmp    %edx,%eax
+    3471:	0f 85 d0 02 00 00    	jne    3747 <sbrktest+0x3e7>
   a = sbrk(0);
-    33f0:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    33f7:	e8 1e 0b 00 00       	call   3f1a <sbrk>
+    3477:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    347e:	e8 67 0b 00 00       	call   3fea <sbrk>
   c = sbrk(4096);
-    33fc:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
+    3483:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
   a = sbrk(0);
-    3403:	89 c6                	mov    %eax,%esi
+    348a:	89 c6                	mov    %eax,%esi
   c = sbrk(4096);
-    3405:	e8 10 0b 00 00       	call   3f1a <sbrk>
-  if(c != a || sbrk(0) != a + 4096){
-    340a:	39 f0                	cmp    %esi,%eax
+    348c:	e8 59 0b 00 00       	call   3fea <sbrk>
+  if (c != a || sbrk(0) != a + 4096)
+    3491:	39 f0                	cmp    %esi,%eax
   c = sbrk(4096);
-    340c:	89 c3                	mov    %eax,%ebx
-  if(c != a || sbrk(0) != a + 4096){
-    340e:	0f 85 72 02 00 00    	jne    3686 <sbrktest+0x3a6>
-    3414:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    341b:	e8 fa 0a 00 00       	call   3f1a <sbrk>
-    3420:	8d 93 00 10 00 00    	lea    0x1000(%ebx),%edx
-    3426:	39 d0                	cmp    %edx,%eax
-    3428:	0f 85 58 02 00 00    	jne    3686 <sbrktest+0x3a6>
-  if(*lastaddr == 99){
-    342e:	80 3d ff ff 3f 06 63 	cmpb   $0x63,0x63fffff
-    3435:	0f 84 3e 02 00 00    	je     3679 <sbrktest+0x399>
+    3493:	89 c3                	mov    %eax,%ebx
+  if (c != a || sbrk(0) != a + 4096)
+    3495:	0f 85 8d 02 00 00    	jne    3728 <sbrktest+0x3c8>
+    349b:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    34a2:	e8 43 0b 00 00       	call   3fea <sbrk>
+    34a7:	8d 93 00 10 00 00    	lea    0x1000(%ebx),%edx
+    34ad:	39 d0                	cmp    %edx,%eax
+    34af:	0f 85 73 02 00 00    	jne    3728 <sbrktest+0x3c8>
+  if (*lastaddr == 99)
+    34b5:	80 3d ff ff 3f 06 63 	cmpb   $0x63,0x63fffff
+    34bc:	0f 84 59 02 00 00    	je     371b <sbrktest+0x3bb>
   a = sbrk(0);
-    343b:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    3442:	e8 d3 0a 00 00       	call   3f1a <sbrk>
+    34c2:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    34c9:	e8 1c 0b 00 00       	call   3fea <sbrk>
   c = sbrk(-(sbrk(0) - oldbrk));
-    3447:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    34ce:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
   a = sbrk(0);
-    344e:	89 c3                	mov    %eax,%ebx
+    34d5:	89 c3                	mov    %eax,%ebx
   c = sbrk(-(sbrk(0) - oldbrk));
-    3450:	e8 c5 0a 00 00       	call   3f1a <sbrk>
-    3455:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
-    3458:	29 c1                	sub    %eax,%ecx
-    345a:	89 0c 24             	mov    %ecx,(%esp)
-    345d:	e8 b8 0a 00 00       	call   3f1a <sbrk>
-  if(c != a){
-    3462:	39 d8                	cmp    %ebx,%eax
-    3464:	0f 85 f0 01 00 00    	jne    365a <sbrktest+0x37a>
-    346a:	bb 00 00 00 80       	mov    $0x80000000,%ebx
-    346f:	90                   	nop
+    34d7:	e8 0e 0b 00 00       	call   3fea <sbrk>
+    34dc:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
+    34df:	29 c1                	sub    %eax,%ecx
+    34e1:	89 0c 24             	mov    %ecx,(%esp)
+    34e4:	e8 01 0b 00 00       	call   3fea <sbrk>
+  if (c != a)
+    34e9:	39 d8                	cmp    %ebx,%eax
+    34eb:	0f 85 01 02 00 00    	jne    36f2 <sbrktest+0x392>
+    34f1:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+    34f6:	66 90                	xchg   %ax,%ax
     ppid = getpid();
-    3470:	e8 9d 0a 00 00       	call   3f12 <getpid>
-    3475:	89 c6                	mov    %eax,%esi
+    34f8:	e8 e5 0a 00 00       	call   3fe2 <getpid>
+    34fd:	89 c6                	mov    %eax,%esi
     pid = fork();
-    3477:	e8 0e 0a 00 00       	call   3e8a <fork>
-    if(pid < 0){
-    347c:	85 c0                	test   %eax,%eax
-    347e:	0f 88 cc 01 00 00    	js     3650 <sbrktest+0x370>
-    if(pid == 0){
-    3484:	0f 84 92 01 00 00    	je     361c <sbrktest+0x33c>
-  for(a = (char*)(KERNBASE); a < (char*) (KERNBASE+2000000); a += 50000){
-    348a:	81 c3 50 c3 00 00    	add    $0xc350,%ebx
-    wait();
-    3490:	e8 05 0a 00 00       	call   3e9a <wait>
-  for(a = (char*)(KERNBASE); a < (char*) (KERNBASE+2000000); a += 50000){
-    3495:	81 fb 80 84 1e 80    	cmp    $0x801e8480,%ebx
-    349b:	75 d3                	jne    3470 <sbrktest+0x190>
-  if(pipe(fds) != 0){
-    349d:	8d 45 b8             	lea    -0x48(%ebp),%eax
-    34a0:	89 04 24             	mov    %eax,(%esp)
-    34a3:	e8 fa 09 00 00       	call   3ea2 <pipe>
-    34a8:	85 c0                	test   %eax,%eax
-    34aa:	0f 85 4c 01 00 00    	jne    35fc <sbrktest+0x31c>
-    34b0:	8d 5d e8             	lea    -0x18(%ebp),%ebx
-    34b3:	8d 75 c0             	lea    -0x40(%ebp),%esi
+    34ff:	e8 56 0a 00 00       	call   3f5a <fork>
+    if (pid < 0)
+    3504:	85 c0                	test   %eax,%eax
+    3506:	0f 88 dc 01 00 00    	js     36e8 <sbrktest+0x388>
+    350c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if (pid == 0)
+    3510:	0f 84 9e 01 00 00    	je     36b4 <sbrktest+0x354>
+    wait(0);
+    3516:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  for (a = (char *)(KERNBASE); a < (char *)(KERNBASE + 2000000); a += 50000)
+    351d:	81 c3 50 c3 00 00    	add    $0xc350,%ebx
+    wait(0);
+    3523:	e8 42 0a 00 00       	call   3f6a <wait>
+  for (a = (char *)(KERNBASE); a < (char *)(KERNBASE + 2000000); a += 50000)
+    3528:	81 fb 80 84 1e 80    	cmp    $0x801e8480,%ebx
+    352e:	75 c8                	jne    34f8 <sbrktest+0x198>
+  if (pipe(fds) != 0)
+    3530:	8d 45 b8             	lea    -0x48(%ebp),%eax
+    3533:	89 04 24             	mov    %eax,(%esp)
+    3536:	e8 37 0a 00 00       	call   3f72 <pipe>
+    353b:	85 c0                	test   %eax,%eax
+    353d:	0f 85 51 01 00 00    	jne    3694 <sbrktest+0x334>
+    3543:	8d 5d e8             	lea    -0x18(%ebp),%ebx
+    3546:	8d 75 c0             	lea    -0x40(%ebp),%esi
       read(fds[0], &scratch, 1);
-    34b6:	8d 7d b7             	lea    -0x49(%ebp),%edi
-    if((pids[i] = fork()) == 0){
-    34b9:	e8 cc 09 00 00       	call   3e8a <fork>
-    34be:	85 c0                	test   %eax,%eax
-    34c0:	89 06                	mov    %eax,(%esi)
-    34c2:	0f 84 9f 00 00 00    	je     3567 <sbrktest+0x287>
-    if(pids[i] != -1)
-    34c8:	83 f8 ff             	cmp    $0xffffffff,%eax
-    34cb:	74 17                	je     34e4 <sbrktest+0x204>
+    3549:	8d 7d b7             	lea    -0x49(%ebp),%edi
+    if ((pids[i] = fork()) == 0)
+    354c:	e8 09 0a 00 00       	call   3f5a <fork>
+    3551:	85 c0                	test   %eax,%eax
+    3553:	89 06                	mov    %eax,(%esi)
+    3555:	0f 84 a6 00 00 00    	je     3601 <sbrktest+0x2a1>
+    if (pids[i] != -1)
+    355b:	83 f8 ff             	cmp    $0xffffffff,%eax
+    355e:	74 17                	je     3577 <sbrktest+0x217>
       read(fds[0], &scratch, 1);
-    34cd:	8b 45 b8             	mov    -0x48(%ebp),%eax
-    34d0:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
-    34d7:	00 
-    34d8:	89 7c 24 04          	mov    %edi,0x4(%esp)
-    34dc:	89 04 24             	mov    %eax,(%esp)
-    34df:	e8 c6 09 00 00       	call   3eaa <read>
-    34e4:	83 c6 04             	add    $0x4,%esi
-  for(i = 0; i < sizeof(pids)/sizeof(pids[0]); i++){
-    34e7:	39 de                	cmp    %ebx,%esi
-    34e9:	75 ce                	jne    34b9 <sbrktest+0x1d9>
+    3560:	8b 45 b8             	mov    -0x48(%ebp),%eax
+    3563:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+    356a:	00 
+    356b:	89 7c 24 04          	mov    %edi,0x4(%esp)
+    356f:	89 04 24             	mov    %eax,(%esp)
+    3572:	e8 03 0a 00 00       	call   3f7a <read>
+    3577:	83 c6 04             	add    $0x4,%esi
+  for (i = 0; i < sizeof(pids) / sizeof(pids[0]); i++)
+    357a:	39 de                	cmp    %ebx,%esi
+    357c:	75 ce                	jne    354c <sbrktest+0x1ec>
   c = sbrk(4096);
-    34eb:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
-    34f2:	8d 75 c0             	lea    -0x40(%ebp),%esi
-    34f5:	e8 20 0a 00 00       	call   3f1a <sbrk>
-    34fa:	89 c7                	mov    %eax,%edi
-    if(pids[i] == -1)
-    34fc:	8b 06                	mov    (%esi),%eax
-    34fe:	83 f8 ff             	cmp    $0xffffffff,%eax
-    3501:	74 0d                	je     3510 <sbrktest+0x230>
+    357e:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
+    3585:	8d 75 c0             	lea    -0x40(%ebp),%esi
+    3588:	e8 5d 0a 00 00       	call   3fea <sbrk>
+    358d:	89 c7                	mov    %eax,%edi
+    if (pids[i] == -1)
+    358f:	8b 06                	mov    (%esi),%eax
+    3591:	83 f8 ff             	cmp    $0xffffffff,%eax
+    3594:	74 14                	je     35aa <sbrktest+0x24a>
     kill(pids[i]);
-    3503:	89 04 24             	mov    %eax,(%esp)
-    3506:	e8 b7 09 00 00       	call   3ec2 <kill>
-    wait();
-    350b:	e8 8a 09 00 00       	call   3e9a <wait>
-    3510:	83 c6 04             	add    $0x4,%esi
-  for(i = 0; i < sizeof(pids)/sizeof(pids[0]); i++){
-    3513:	39 f3                	cmp    %esi,%ebx
-    3515:	75 e5                	jne    34fc <sbrktest+0x21c>
-  if(c == (char*)0xffffffff){
-    3517:	83 ff ff             	cmp    $0xffffffff,%edi
-    351a:	0f 84 bb 00 00 00    	je     35db <sbrktest+0x2fb>
-  if(sbrk(0) > oldbrk)
-    3520:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    3527:	e8 ee 09 00 00       	call   3f1a <sbrk>
-    352c:	39 45 a4             	cmp    %eax,-0x5c(%ebp)
-    352f:	73 19                	jae    354a <sbrktest+0x26a>
+    3596:	89 04 24             	mov    %eax,(%esp)
+    3599:	e8 f4 09 00 00       	call   3f92 <kill>
+    wait(0);
+    359e:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    35a5:	e8 c0 09 00 00       	call   3f6a <wait>
+    35aa:	83 c6 04             	add    $0x4,%esi
+  for (i = 0; i < sizeof(pids) / sizeof(pids[0]); i++)
+    35ad:	39 f3                	cmp    %esi,%ebx
+    35af:	75 de                	jne    358f <sbrktest+0x22f>
+  if (c == (char *)0xffffffff)
+    35b1:	83 ff ff             	cmp    $0xffffffff,%edi
+    35b4:	0f 84 b9 00 00 00    	je     3673 <sbrktest+0x313>
+  if (sbrk(0) > oldbrk)
+    35ba:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    35c1:	e8 24 0a 00 00       	call   3fea <sbrk>
+    35c6:	39 45 a4             	cmp    %eax,-0x5c(%ebp)
+    35c9:	73 19                	jae    35e4 <sbrktest+0x284>
     sbrk(-(sbrk(0) - oldbrk));
-    3531:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    3538:	e8 dd 09 00 00       	call   3f1a <sbrk>
-    353d:	8b 7d a4             	mov    -0x5c(%ebp),%edi
-    3540:	29 c7                	sub    %eax,%edi
-    3542:	89 3c 24             	mov    %edi,(%esp)
-    3545:	e8 d0 09 00 00       	call   3f1a <sbrk>
+    35cb:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    35d2:	e8 13 0a 00 00       	call   3fea <sbrk>
+    35d7:	8b 7d a4             	mov    -0x5c(%ebp),%edi
+    35da:	29 c7                	sub    %eax,%edi
+    35dc:	89 3c 24             	mov    %edi,(%esp)
+    35df:	e8 06 0a 00 00       	call   3fea <sbrk>
   printf(stdout, "sbrk test OK\n");
-    354a:	a1 c4 63 00 00       	mov    0x63c4,%eax
-    354f:	c7 44 24 04 e0 51 00 	movl   $0x51e0,0x4(%esp)
-    3556:	00 
-    3557:	89 04 24             	mov    %eax,(%esp)
-    355a:	e8 81 0a 00 00       	call   3fe0 <printf>
+    35e4:	a1 94 64 00 00       	mov    0x6494,%eax
+    35e9:	c7 44 24 04 b0 52 00 	movl   $0x52b0,0x4(%esp)
+    35f0:	00 
+    35f1:	89 04 24             	mov    %eax,(%esp)
+    35f4:	e8 b7 0a 00 00       	call   40b0 <printf>
 }
-    355f:	83 c4 6c             	add    $0x6c,%esp
-    3562:	5b                   	pop    %ebx
-    3563:	5e                   	pop    %esi
-    3564:	5f                   	pop    %edi
-    3565:	5d                   	pop    %ebp
-    3566:	c3                   	ret    
+    35f9:	83 c4 6c             	add    $0x6c,%esp
+    35fc:	5b                   	pop    %ebx
+    35fd:	5e                   	pop    %esi
+    35fe:	5f                   	pop    %edi
+    35ff:	5d                   	pop    %ebp
+    3600:	c3                   	ret    
       sbrk(BIG - (uint)sbrk(0));
-    3567:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    356e:	e8 a7 09 00 00       	call   3f1a <sbrk>
-    3573:	ba 00 00 40 06       	mov    $0x6400000,%edx
-    3578:	29 c2                	sub    %eax,%edx
-    357a:	89 14 24             	mov    %edx,(%esp)
-    357d:	e8 98 09 00 00       	call   3f1a <sbrk>
+    3601:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    3608:	e8 dd 09 00 00       	call   3fea <sbrk>
+    360d:	ba 00 00 40 06       	mov    $0x6400000,%edx
+    3612:	29 c2                	sub    %eax,%edx
+    3614:	89 14 24             	mov    %edx,(%esp)
+    3617:	e8 ce 09 00 00       	call   3fea <sbrk>
       write(fds[1], "x", 1);
-    3582:	8b 45 bc             	mov    -0x44(%ebp),%eax
-    3585:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
-    358c:	00 
-    358d:	c7 44 24 04 a1 4c 00 	movl   $0x4ca1,0x4(%esp)
-    3594:	00 
-    3595:	89 04 24             	mov    %eax,(%esp)
-    3598:	e8 15 09 00 00       	call   3eb2 <write>
-    359d:	8d 76 00             	lea    0x0(%esi),%esi
-      for(;;) sleep(1000);
-    35a0:	c7 04 24 e8 03 00 00 	movl   $0x3e8,(%esp)
-    35a7:	e8 76 09 00 00       	call   3f22 <sleep>
-    35ac:	eb f2                	jmp    35a0 <sbrktest+0x2c0>
+    361c:	8b 45 bc             	mov    -0x44(%ebp),%eax
+    361f:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+    3626:	00 
+    3627:	c7 44 24 04 71 4d 00 	movl   $0x4d71,0x4(%esp)
+    362e:	00 
+    362f:	89 04 24             	mov    %eax,(%esp)
+    3632:	e8 4b 09 00 00       	call   3f82 <write>
+    3637:	90                   	nop
+        sleep(1000);
+    3638:	c7 04 24 e8 03 00 00 	movl   $0x3e8,(%esp)
+    363f:	e8 ae 09 00 00       	call   3ff2 <sleep>
+    3644:	eb f2                	jmp    3638 <sbrktest+0x2d8>
       printf(stdout, "sbrk test failed %d %x %x\n", i, a, b);
-    35ae:	89 44 24 10          	mov    %eax,0x10(%esp)
-    35b2:	a1 c4 63 00 00       	mov    0x63c4,%eax
-    35b7:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
-    35bb:	89 74 24 08          	mov    %esi,0x8(%esp)
-    35bf:	c7 44 24 04 43 51 00 	movl   $0x5143,0x4(%esp)
-    35c6:	00 
-    35c7:	89 04 24             	mov    %eax,(%esp)
-    35ca:	e8 11 0a 00 00       	call   3fe0 <printf>
+    3646:	89 44 24 10          	mov    %eax,0x10(%esp)
+    364a:	a1 94 64 00 00       	mov    0x6494,%eax
+    364f:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+    3653:	89 74 24 08          	mov    %esi,0x8(%esp)
+    3657:	c7 44 24 04 13 52 00 	movl   $0x5213,0x4(%esp)
+    365e:	00 
+    365f:	89 04 24             	mov    %eax,(%esp)
+    3662:	e8 49 0a 00 00       	call   40b0 <printf>
       exit(0);
-    35cf:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    35d6:	e8 b7 08 00 00       	call   3e92 <exit>
+    3667:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    366e:	e8 ef 08 00 00       	call   3f62 <exit>
     printf(stdout, "failed sbrk leaked memory\n");
-    35db:	c7 44 24 04 c5 51 00 	movl   $0x51c5,0x4(%esp)
-    35e2:	00 
+    3673:	c7 44 24 04 95 52 00 	movl   $0x5295,0x4(%esp)
+    367a:	00 
     printf(stdout, "sbrk test failed post-fork\n");
-    35e3:	a1 c4 63 00 00       	mov    0x63c4,%eax
-    35e8:	89 04 24             	mov    %eax,(%esp)
-    35eb:	e8 f0 09 00 00       	call   3fe0 <printf>
+    367b:	a1 94 64 00 00       	mov    0x6494,%eax
+    3680:	89 04 24             	mov    %eax,(%esp)
+    3683:	e8 28 0a 00 00       	call   40b0 <printf>
     exit(0);
-    35f0:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    35f7:	e8 96 08 00 00       	call   3e92 <exit>
+    3688:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    368f:	e8 ce 08 00 00       	call   3f62 <exit>
     printf(1, "pipe() failed\n");
-    35fc:	c7 44 24 04 81 46 00 	movl   $0x4681,0x4(%esp)
-    3603:	00 
-    3604:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    360b:	e8 d0 09 00 00       	call   3fe0 <printf>
+    3694:	c7 44 24 04 51 47 00 	movl   $0x4751,0x4(%esp)
+    369b:	00 
+    369c:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    36a3:	e8 08 0a 00 00       	call   40b0 <printf>
     exit(0);
-    3610:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    3617:	e8 76 08 00 00       	call   3e92 <exit>
+    36a8:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    36af:	e8 ae 08 00 00       	call   3f62 <exit>
       printf(stdout, "oops could read %x = %x\n", a, *a);
-    361c:	0f be 03             	movsbl (%ebx),%eax
-    361f:	89 5c 24 08          	mov    %ebx,0x8(%esp)
-    3623:	c7 44 24 04 ac 51 00 	movl   $0x51ac,0x4(%esp)
-    362a:	00 
-    362b:	89 44 24 0c          	mov    %eax,0xc(%esp)
-    362f:	a1 c4 63 00 00       	mov    0x63c4,%eax
-    3634:	89 04 24             	mov    %eax,(%esp)
-    3637:	e8 a4 09 00 00       	call   3fe0 <printf>
+    36b4:	0f be 03             	movsbl (%ebx),%eax
+    36b7:	89 5c 24 08          	mov    %ebx,0x8(%esp)
+    36bb:	c7 44 24 04 7c 52 00 	movl   $0x527c,0x4(%esp)
+    36c2:	00 
+    36c3:	89 44 24 0c          	mov    %eax,0xc(%esp)
+    36c7:	a1 94 64 00 00       	mov    0x6494,%eax
+    36cc:	89 04 24             	mov    %eax,(%esp)
+    36cf:	e8 dc 09 00 00       	call   40b0 <printf>
       kill(ppid);
-    363c:	89 34 24             	mov    %esi,(%esp)
-    363f:	e8 7e 08 00 00       	call   3ec2 <kill>
+    36d4:	89 34 24             	mov    %esi,(%esp)
+    36d7:	e8 b6 08 00 00       	call   3f92 <kill>
       exit(0);
-    3644:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    364b:	e8 42 08 00 00       	call   3e92 <exit>
+    36dc:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    36e3:	e8 7a 08 00 00       	call   3f62 <exit>
       printf(stdout, "fork failed\n");
-    3650:	c7 44 24 04 89 52 00 	movl   $0x5289,0x4(%esp)
-    3657:	00 
-    3658:	eb 89                	jmp    35e3 <sbrktest+0x303>
+    36e8:	c7 44 24 04 59 53 00 	movl   $0x5359,0x4(%esp)
+    36ef:	00 
+    36f0:	eb 89                	jmp    367b <sbrktest+0x31b>
     printf(stdout, "sbrk downsize failed, a %x c %x\n", a, c);
-    365a:	89 44 24 0c          	mov    %eax,0xc(%esp)
-    365e:	89 5c 24 08          	mov    %ebx,0x8(%esp)
-    3662:	c7 44 24 04 8c 59 00 	movl   $0x598c,0x4(%esp)
-    3669:	00 
-    366a:	a1 c4 63 00 00       	mov    0x63c4,%eax
-    366f:	89 04 24             	mov    %eax,(%esp)
-    3672:	e8 69 09 00 00       	call   3fe0 <printf>
-    3677:	eb 97                	jmp    3610 <sbrktest+0x330>
+    36f2:	89 44 24 0c          	mov    %eax,0xc(%esp)
+    36f6:	89 5c 24 08          	mov    %ebx,0x8(%esp)
+    36fa:	c7 44 24 04 5c 5a 00 	movl   $0x5a5c,0x4(%esp)
+    3701:	00 
+    3702:	a1 94 64 00 00       	mov    0x6494,%eax
+    3707:	89 04 24             	mov    %eax,(%esp)
+    370a:	e8 a1 09 00 00       	call   40b0 <printf>
+    exit(0);
+    370f:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    3716:	e8 47 08 00 00       	call   3f62 <exit>
     printf(stdout, "sbrk de-allocation didn't really deallocate\n");
-    3679:	c7 44 24 04 5c 59 00 	movl   $0x595c,0x4(%esp)
-    3680:	00 
-    3681:	e9 5d ff ff ff       	jmp    35e3 <sbrktest+0x303>
+    371b:	c7 44 24 04 2c 5a 00 	movl   $0x5a2c,0x4(%esp)
+    3722:	00 
+    3723:	e9 53 ff ff ff       	jmp    367b <sbrktest+0x31b>
     printf(stdout, "sbrk re-allocation failed, a %x c %x\n", a, c);
-    3686:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
-    368a:	89 74 24 08          	mov    %esi,0x8(%esp)
-    368e:	c7 44 24 04 34 59 00 	movl   $0x5934,0x4(%esp)
-    3695:	00 
-    3696:	eb d2                	jmp    366a <sbrktest+0x38a>
+    3728:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+    372c:	89 74 24 08          	mov    %esi,0x8(%esp)
+    3730:	c7 44 24 04 04 5a 00 	movl   $0x5a04,0x4(%esp)
+    3737:	00 
+    3738:	eb c8                	jmp    3702 <sbrktest+0x3a2>
     printf(stdout, "sbrk test failed to grow big address space; enough phys mem?\n");
-    3698:	c7 44 24 04 bc 58 00 	movl   $0x58bc,0x4(%esp)
-    369f:	00 
-    36a0:	e9 3e ff ff ff       	jmp    35e3 <sbrktest+0x303>
+    373a:	c7 44 24 04 8c 59 00 	movl   $0x598c,0x4(%esp)
+    3741:	00 
+    3742:	e9 34 ff ff ff       	jmp    367b <sbrktest+0x31b>
     printf(stdout, "sbrk deallocation produced wrong address, a %x c %x\n", a, c);
-    36a5:	89 44 24 0c          	mov    %eax,0xc(%esp)
-    36a9:	89 5c 24 08          	mov    %ebx,0x8(%esp)
-    36ad:	c7 44 24 04 fc 58 00 	movl   $0x58fc,0x4(%esp)
-    36b4:	00 
-    36b5:	eb b3                	jmp    366a <sbrktest+0x38a>
+    3747:	89 44 24 0c          	mov    %eax,0xc(%esp)
+    374b:	89 5c 24 08          	mov    %ebx,0x8(%esp)
+    374f:	c7 44 24 04 cc 59 00 	movl   $0x59cc,0x4(%esp)
+    3756:	00 
+    3757:	eb a9                	jmp    3702 <sbrktest+0x3a2>
     printf(stdout, "sbrk could not deallocate\n");
-    36b7:	c7 44 24 04 91 51 00 	movl   $0x5191,0x4(%esp)
-    36be:	00 
-    36bf:	e9 1f ff ff ff       	jmp    35e3 <sbrktest+0x303>
+    3759:	c7 44 24 04 61 52 00 	movl   $0x5261,0x4(%esp)
+    3760:	00 
+    3761:	e9 15 ff ff ff       	jmp    367b <sbrktest+0x31b>
     printf(stdout, "sbrk test failed post-fork\n");
-    36c4:	c7 44 24 04 75 51 00 	movl   $0x5175,0x4(%esp)
-    36cb:	00 
-    36cc:	e9 12 ff ff ff       	jmp    35e3 <sbrktest+0x303>
+    3766:	c7 44 24 04 45 52 00 	movl   $0x5245,0x4(%esp)
+    376d:	00 
+    376e:	e9 08 ff ff ff       	jmp    367b <sbrktest+0x31b>
     printf(stdout, "sbrk test fork failed\n");
-    36d1:	c7 44 24 04 5e 51 00 	movl   $0x515e,0x4(%esp)
-    36d8:	00 
-    36d9:	e9 05 ff ff ff       	jmp    35e3 <sbrktest+0x303>
-    36de:	66 90                	xchg   %ax,%ax
+    3773:	c7 44 24 04 2e 52 00 	movl   $0x522e,0x4(%esp)
+    377a:	00 
+    377b:	e9 fb fe ff ff       	jmp    367b <sbrktest+0x31b>
 
-000036e0 <validateint>:
+00003780 <validateint>:
 {
-    36e0:	55                   	push   %ebp
-    36e1:	89 e5                	mov    %esp,%ebp
+    3780:	55                   	push   %ebp
+    3781:	89 e5                	mov    %esp,%ebp
 }
-    36e3:	5d                   	pop    %ebp
-    36e4:	c3                   	ret    
-    36e5:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    36e9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    3783:	5d                   	pop    %ebp
+    3784:	c3                   	ret    
+    3785:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    3789:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-000036f0 <validatetest>:
+00003790 <validatetest>:
 {
-    36f0:	55                   	push   %ebp
-    36f1:	89 e5                	mov    %esp,%ebp
-    36f3:	56                   	push   %esi
-    36f4:	53                   	push   %ebx
-  for(p = 0; p <= (uint)hi; p += 4096){
-    36f5:	31 db                	xor    %ebx,%ebx
+    3790:	55                   	push   %ebp
+    3791:	89 e5                	mov    %esp,%ebp
+    3793:	56                   	push   %esi
+    3794:	53                   	push   %ebx
+  for (p = 0; p <= (uint)hi; p += 4096)
+    3795:	31 db                	xor    %ebx,%ebx
 {
-    36f7:	83 ec 10             	sub    $0x10,%esp
+    3797:	83 ec 10             	sub    $0x10,%esp
   printf(stdout, "validate test\n");
-    36fa:	a1 c4 63 00 00       	mov    0x63c4,%eax
-    36ff:	c7 44 24 04 ee 51 00 	movl   $0x51ee,0x4(%esp)
-    3706:	00 
-    3707:	89 04 24             	mov    %eax,(%esp)
-    370a:	e8 d1 08 00 00       	call   3fe0 <printf>
-    370f:	90                   	nop
-    if((pid = fork()) == 0){
-    3710:	e8 75 07 00 00       	call   3e8a <fork>
+    379a:	a1 94 64 00 00       	mov    0x6494,%eax
+    379f:	c7 44 24 04 be 52 00 	movl   $0x52be,0x4(%esp)
+    37a6:	00 
+    37a7:	89 04 24             	mov    %eax,(%esp)
+    37aa:	e8 01 09 00 00       	call   40b0 <printf>
+    37af:	90                   	nop
+    if ((pid = fork()) == 0)
+    37b0:	e8 a5 07 00 00       	call   3f5a <fork>
       exit(0);
-    3715:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    if((pid = fork()) == 0){
-    371c:	85 c0                	test   %eax,%eax
-    371e:	89 c6                	mov    %eax,%esi
-    3720:	74 79                	je     379b <validatetest+0xab>
+    37b5:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    if ((pid = fork()) == 0)
+    37bc:	85 c0                	test   %eax,%eax
+    37be:	89 c6                	mov    %eax,%esi
+    37c0:	0f 84 80 00 00 00    	je     3846 <validatetest+0xb6>
     sleep(0);
-    3722:	e8 fb 07 00 00       	call   3f22 <sleep>
+    37c6:	e8 27 08 00 00       	call   3ff2 <sleep>
     sleep(0);
-    3727:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    372e:	e8 ef 07 00 00       	call   3f22 <sleep>
+    37cb:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    37d2:	e8 1b 08 00 00       	call   3ff2 <sleep>
     kill(pid);
-    3733:	89 34 24             	mov    %esi,(%esp)
-    3736:	e8 87 07 00 00       	call   3ec2 <kill>
-    wait();
-    373b:	e8 5a 07 00 00       	call   3e9a <wait>
-    if(link("nosuchfile", (char*)p) != -1){
-    3740:	89 5c 24 04          	mov    %ebx,0x4(%esp)
-    3744:	c7 04 24 fd 51 00 00 	movl   $0x51fd,(%esp)
-    374b:	e8 a2 07 00 00       	call   3ef2 <link>
-    3750:	83 f8 ff             	cmp    $0xffffffff,%eax
-    3753:	75 2a                	jne    377f <validatetest+0x8f>
-  for(p = 0; p <= (uint)hi; p += 4096){
-    3755:	81 c3 00 10 00 00    	add    $0x1000,%ebx
-    375b:	81 fb 00 40 11 00    	cmp    $0x114000,%ebx
-    3761:	75 ad                	jne    3710 <validatetest+0x20>
+    37d7:	89 34 24             	mov    %esi,(%esp)
+    37da:	e8 b3 07 00 00       	call   3f92 <kill>
+    wait(0);
+    37df:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    37e6:	e8 7f 07 00 00       	call   3f6a <wait>
+    if (link("nosuchfile", (char *)p) != -1)
+    37eb:	89 5c 24 04          	mov    %ebx,0x4(%esp)
+    37ef:	c7 04 24 cd 52 00 00 	movl   $0x52cd,(%esp)
+    37f6:	e8 c7 07 00 00       	call   3fc2 <link>
+    37fb:	83 f8 ff             	cmp    $0xffffffff,%eax
+    37fe:	75 2a                	jne    382a <validatetest+0x9a>
+  for (p = 0; p <= (uint)hi; p += 4096)
+    3800:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+    3806:	81 fb 00 40 11 00    	cmp    $0x114000,%ebx
+    380c:	75 a2                	jne    37b0 <validatetest+0x20>
   printf(stdout, "validate ok\n");
-    3763:	a1 c4 63 00 00       	mov    0x63c4,%eax
-    3768:	c7 44 24 04 21 52 00 	movl   $0x5221,0x4(%esp)
-    376f:	00 
-    3770:	89 04 24             	mov    %eax,(%esp)
-    3773:	e8 68 08 00 00       	call   3fe0 <printf>
+    380e:	a1 94 64 00 00       	mov    0x6494,%eax
+    3813:	c7 44 24 04 f1 52 00 	movl   $0x52f1,0x4(%esp)
+    381a:	00 
+    381b:	89 04 24             	mov    %eax,(%esp)
+    381e:	e8 8d 08 00 00       	call   40b0 <printf>
 }
-    3778:	83 c4 10             	add    $0x10,%esp
-    377b:	5b                   	pop    %ebx
-    377c:	5e                   	pop    %esi
-    377d:	5d                   	pop    %ebp
-    377e:	c3                   	ret    
+    3823:	83 c4 10             	add    $0x10,%esp
+    3826:	5b                   	pop    %ebx
+    3827:	5e                   	pop    %esi
+    3828:	5d                   	pop    %ebp
+    3829:	c3                   	ret    
       printf(stdout, "link should not succeed\n");
-    377f:	a1 c4 63 00 00       	mov    0x63c4,%eax
-    3784:	c7 44 24 04 08 52 00 	movl   $0x5208,0x4(%esp)
-    378b:	00 
-    378c:	89 04 24             	mov    %eax,(%esp)
-    378f:	e8 4c 08 00 00       	call   3fe0 <printf>
+    382a:	a1 94 64 00 00       	mov    0x6494,%eax
+    382f:	c7 44 24 04 d8 52 00 	movl   $0x52d8,0x4(%esp)
+    3836:	00 
+    3837:	89 04 24             	mov    %eax,(%esp)
+    383a:	e8 71 08 00 00       	call   40b0 <printf>
       exit(0);
-    3794:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    379b:	e8 f2 06 00 00       	call   3e92 <exit>
+    383f:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    3846:	e8 17 07 00 00       	call   3f62 <exit>
+    384b:	90                   	nop
+    384c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-000037a0 <bsstest>:
+00003850 <bsstest>:
 {
-    37a0:	55                   	push   %ebp
-    37a1:	89 e5                	mov    %esp,%ebp
-    37a3:	83 ec 18             	sub    $0x18,%esp
+    3850:	55                   	push   %ebp
+    3851:	89 e5                	mov    %esp,%ebp
+    3853:	83 ec 18             	sub    $0x18,%esp
   printf(stdout, "bss test\n");
-    37a6:	a1 c4 63 00 00       	mov    0x63c4,%eax
-    37ab:	c7 44 24 04 2e 52 00 	movl   $0x522e,0x4(%esp)
-    37b2:	00 
-    37b3:	89 04 24             	mov    %eax,(%esp)
-    37b6:	e8 25 08 00 00       	call   3fe0 <printf>
-    if(uninit[i] != '\0'){
-    37bb:	80 3d 80 64 00 00 00 	cmpb   $0x0,0x6480
-    37c2:	75 36                	jne    37fa <bsstest+0x5a>
-  for(i = 0; i < sizeof(uninit); i++){
-    37c4:	b8 01 00 00 00       	mov    $0x1,%eax
-    37c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    if(uninit[i] != '\0'){
-    37d0:	80 b8 80 64 00 00 00 	cmpb   $0x0,0x6480(%eax)
-    37d7:	75 21                	jne    37fa <bsstest+0x5a>
-  for(i = 0; i < sizeof(uninit); i++){
-    37d9:	83 c0 01             	add    $0x1,%eax
-    37dc:	3d 10 27 00 00       	cmp    $0x2710,%eax
-    37e1:	75 ed                	jne    37d0 <bsstest+0x30>
+    3856:	a1 94 64 00 00       	mov    0x6494,%eax
+    385b:	c7 44 24 04 fe 52 00 	movl   $0x52fe,0x4(%esp)
+    3862:	00 
+    3863:	89 04 24             	mov    %eax,(%esp)
+    3866:	e8 45 08 00 00       	call   40b0 <printf>
+    if (uninit[i] != '\0')
+    386b:	80 3d 60 65 00 00 00 	cmpb   $0x0,0x6560
+    3872:	75 36                	jne    38aa <bsstest+0x5a>
+  for (i = 0; i < sizeof(uninit); i++)
+    3874:	b8 01 00 00 00       	mov    $0x1,%eax
+    3879:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if (uninit[i] != '\0')
+    3880:	80 b8 60 65 00 00 00 	cmpb   $0x0,0x6560(%eax)
+    3887:	75 21                	jne    38aa <bsstest+0x5a>
+  for (i = 0; i < sizeof(uninit); i++)
+    3889:	83 c0 01             	add    $0x1,%eax
+    388c:	3d 10 27 00 00       	cmp    $0x2710,%eax
+    3891:	75 ed                	jne    3880 <bsstest+0x30>
   printf(stdout, "bss test ok\n");
-    37e3:	a1 c4 63 00 00       	mov    0x63c4,%eax
-    37e8:	c7 44 24 04 49 52 00 	movl   $0x5249,0x4(%esp)
-    37ef:	00 
-    37f0:	89 04 24             	mov    %eax,(%esp)
-    37f3:	e8 e8 07 00 00       	call   3fe0 <printf>
+    3893:	a1 94 64 00 00       	mov    0x6494,%eax
+    3898:	c7 44 24 04 19 53 00 	movl   $0x5319,0x4(%esp)
+    389f:	00 
+    38a0:	89 04 24             	mov    %eax,(%esp)
+    38a3:	e8 08 08 00 00       	call   40b0 <printf>
 }
-    37f8:	c9                   	leave  
-    37f9:	c3                   	ret    
+    38a8:	c9                   	leave  
+    38a9:	c3                   	ret    
       printf(stdout, "bss test failed\n");
-    37fa:	a1 c4 63 00 00       	mov    0x63c4,%eax
-    37ff:	c7 44 24 04 38 52 00 	movl   $0x5238,0x4(%esp)
-    3806:	00 
-    3807:	89 04 24             	mov    %eax,(%esp)
-    380a:	e8 d1 07 00 00       	call   3fe0 <printf>
+    38aa:	a1 94 64 00 00       	mov    0x6494,%eax
+    38af:	c7 44 24 04 08 53 00 	movl   $0x5308,0x4(%esp)
+    38b6:	00 
+    38b7:	89 04 24             	mov    %eax,(%esp)
+    38ba:	e8 f1 07 00 00       	call   40b0 <printf>
       exit(0);
-    380f:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    3816:	e8 77 06 00 00       	call   3e92 <exit>
-    381b:	90                   	nop
-    381c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    38bf:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    38c6:	e8 97 06 00 00       	call   3f62 <exit>
+    38cb:	90                   	nop
+    38cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-00003820 <bigargtest>:
+000038d0 <bigargtest>:
 {
-    3820:	55                   	push   %ebp
-    3821:	89 e5                	mov    %esp,%ebp
-    3823:	83 ec 18             	sub    $0x18,%esp
+    38d0:	55                   	push   %ebp
+    38d1:	89 e5                	mov    %esp,%ebp
+    38d3:	83 ec 18             	sub    $0x18,%esp
   unlink("bigarg-ok");
-    3826:	c7 04 24 56 52 00 00 	movl   $0x5256,(%esp)
-    382d:	e8 b0 06 00 00       	call   3ee2 <unlink>
+    38d6:	c7 04 24 26 53 00 00 	movl   $0x5326,(%esp)
+    38dd:	e8 d0 06 00 00       	call   3fb2 <unlink>
   pid = fork();
-    3832:	e8 53 06 00 00       	call   3e8a <fork>
-  if(pid == 0){
-    3837:	85 c0                	test   %eax,%eax
-    3839:	74 45                	je     3880 <bigargtest+0x60>
-    383b:	90                   	nop
-    383c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-  } else if(pid < 0){
-    3840:	0f 88 de 00 00 00    	js     3924 <bigargtest+0x104>
-  wait();
-    3846:	e8 4f 06 00 00       	call   3e9a <wait>
+    38e2:	e8 73 06 00 00       	call   3f5a <fork>
+  if (pid == 0)
+    38e7:	85 c0                	test   %eax,%eax
+    38e9:	74 4d                	je     3938 <bigargtest+0x68>
+    38eb:	90                   	nop
+    38ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  else if (pid < 0)
+    38f0:	0f 88 e6 00 00 00    	js     39dc <bigargtest+0x10c>
+  wait(0);
+    38f6:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    38fd:	e8 68 06 00 00       	call   3f6a <wait>
   fd = open("bigarg-ok", 0);
-    384b:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-    3852:	00 
-    3853:	c7 04 24 56 52 00 00 	movl   $0x5256,(%esp)
-    385a:	e8 73 06 00 00       	call   3ed2 <open>
-  if(fd < 0){
-    385f:	85 c0                	test   %eax,%eax
-    3861:	0f 88 9c 00 00 00    	js     3903 <bigargtest+0xe3>
+    3902:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+    3909:	00 
+    390a:	c7 04 24 26 53 00 00 	movl   $0x5326,(%esp)
+    3911:	e8 8c 06 00 00       	call   3fa2 <open>
+  if (fd < 0)
+    3916:	85 c0                	test   %eax,%eax
+    3918:	0f 88 9d 00 00 00    	js     39bb <bigargtest+0xeb>
   close(fd);
-    3867:	89 04 24             	mov    %eax,(%esp)
-    386a:	e8 4b 06 00 00       	call   3eba <close>
+    391e:	89 04 24             	mov    %eax,(%esp)
+    3921:	e8 64 06 00 00       	call   3f8a <close>
   unlink("bigarg-ok");
-    386f:	c7 04 24 56 52 00 00 	movl   $0x5256,(%esp)
-    3876:	e8 67 06 00 00       	call   3ee2 <unlink>
+    3926:	c7 04 24 26 53 00 00 	movl   $0x5326,(%esp)
+    392d:	e8 80 06 00 00       	call   3fb2 <unlink>
 }
-    387b:	c9                   	leave  
-    387c:	c3                   	ret    
-    387d:	8d 76 00             	lea    0x0(%esi),%esi
+    3932:	c9                   	leave  
+    3933:	c3                   	ret    
+    3934:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
       args[i] = "bigargs test: failed\n                                                                                                                                                                                                       ";
-    3880:	c7 04 85 e0 63 00 00 	movl   $0x59b0,0x63e0(,%eax,4)
-    3887:	b0 59 00 00 
-    for(i = 0; i < MAXARG-1; i++)
-    388b:	83 c0 01             	add    $0x1,%eax
-    388e:	83 f8 1f             	cmp    $0x1f,%eax
-    3891:	75 ed                	jne    3880 <bigargtest+0x60>
+    3938:	c7 04 85 c0 64 00 00 	movl   $0x5a80,0x64c0(,%eax,4)
+    393f:	80 5a 00 00 
+    for (i = 0; i < MAXARG - 1; i++)
+    3943:	83 c0 01             	add    $0x1,%eax
+    3946:	83 f8 1f             	cmp    $0x1f,%eax
+    3949:	75 ed                	jne    3938 <bigargtest+0x68>
     printf(stdout, "bigarg test\n");
-    3893:	a1 c4 63 00 00       	mov    0x63c4,%eax
-    3898:	c7 44 24 04 60 52 00 	movl   $0x5260,0x4(%esp)
-    389f:	00 
-    args[MAXARG-1] = 0;
-    38a0:	c7 05 5c 64 00 00 00 	movl   $0x0,0x645c
-    38a7:	00 00 00 
+    394b:	a1 94 64 00 00       	mov    0x6494,%eax
+    3950:	c7 44 24 04 30 53 00 	movl   $0x5330,0x4(%esp)
+    3957:	00 
+    args[MAXARG - 1] = 0;
+    3958:	c7 05 3c 65 00 00 00 	movl   $0x0,0x653c
+    395f:	00 00 00 
     printf(stdout, "bigarg test\n");
-    38aa:	89 04 24             	mov    %eax,(%esp)
-    38ad:	e8 2e 07 00 00       	call   3fe0 <printf>
+    3962:	89 04 24             	mov    %eax,(%esp)
+    3965:	e8 46 07 00 00       	call   40b0 <printf>
     exec("echo", args);
-    38b2:	c7 44 24 04 e0 63 00 	movl   $0x63e0,0x4(%esp)
-    38b9:	00 
-    38ba:	c7 04 24 2d 44 00 00 	movl   $0x442d,(%esp)
-    38c1:	e8 04 06 00 00       	call   3eca <exec>
+    396a:	c7 44 24 04 c0 64 00 	movl   $0x64c0,0x4(%esp)
+    3971:	00 
+    3972:	c7 04 24 fd 44 00 00 	movl   $0x44fd,(%esp)
+    3979:	e8 1c 06 00 00       	call   3f9a <exec>
     printf(stdout, "bigarg test ok\n");
-    38c6:	a1 c4 63 00 00       	mov    0x63c4,%eax
-    38cb:	c7 44 24 04 6d 52 00 	movl   $0x526d,0x4(%esp)
-    38d2:	00 
-    38d3:	89 04 24             	mov    %eax,(%esp)
-    38d6:	e8 05 07 00 00       	call   3fe0 <printf>
+    397e:	a1 94 64 00 00       	mov    0x6494,%eax
+    3983:	c7 44 24 04 3d 53 00 	movl   $0x533d,0x4(%esp)
+    398a:	00 
+    398b:	89 04 24             	mov    %eax,(%esp)
+    398e:	e8 1d 07 00 00       	call   40b0 <printf>
     fd = open("bigarg-ok", O_CREATE);
-    38db:	c7 44 24 04 00 02 00 	movl   $0x200,0x4(%esp)
-    38e2:	00 
-    38e3:	c7 04 24 56 52 00 00 	movl   $0x5256,(%esp)
-    38ea:	e8 e3 05 00 00       	call   3ed2 <open>
+    3993:	c7 44 24 04 00 02 00 	movl   $0x200,0x4(%esp)
+    399a:	00 
+    399b:	c7 04 24 26 53 00 00 	movl   $0x5326,(%esp)
+    39a2:	e8 fb 05 00 00       	call   3fa2 <open>
     close(fd);
-    38ef:	89 04 24             	mov    %eax,(%esp)
-    38f2:	e8 c3 05 00 00       	call   3eba <close>
+    39a7:	89 04 24             	mov    %eax,(%esp)
+    39aa:	e8 db 05 00 00       	call   3f8a <close>
     exit(0);
-    38f7:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    38fe:	e8 8f 05 00 00       	call   3e92 <exit>
+    39af:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    39b6:	e8 a7 05 00 00       	call   3f62 <exit>
     printf(stdout, "bigarg test failed!\n");
-    3903:	c7 44 24 04 96 52 00 	movl   $0x5296,0x4(%esp)
-    390a:	00 
-    390b:	a1 c4 63 00 00       	mov    0x63c4,%eax
-    3910:	89 04 24             	mov    %eax,(%esp)
-    3913:	e8 c8 06 00 00       	call   3fe0 <printf>
+    39bb:	c7 44 24 04 66 53 00 	movl   $0x5366,0x4(%esp)
+    39c2:	00 
+    39c3:	a1 94 64 00 00       	mov    0x6494,%eax
+    39c8:	89 04 24             	mov    %eax,(%esp)
+    39cb:	e8 e0 06 00 00       	call   40b0 <printf>
     exit(0);
-    3918:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    391f:	e8 6e 05 00 00       	call   3e92 <exit>
+    39d0:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    39d7:	e8 86 05 00 00       	call   3f62 <exit>
     printf(stdout, "bigargtest: fork failed\n");
-    3924:	c7 44 24 04 7d 52 00 	movl   $0x527d,0x4(%esp)
-    392b:	00 
-    392c:	eb dd                	jmp    390b <bigargtest+0xeb>
-    392e:	66 90                	xchg   %ax,%ax
+    39dc:	c7 44 24 04 4d 53 00 	movl   $0x534d,0x4(%esp)
+    39e3:	00 
+    39e4:	eb dd                	jmp    39c3 <bigargtest+0xf3>
+    39e6:	8d 76 00             	lea    0x0(%esi),%esi
+    39e9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-00003930 <fsfull>:
+000039f0 <fsfull>:
 {
-    3930:	55                   	push   %ebp
-    3931:	89 e5                	mov    %esp,%ebp
-    3933:	57                   	push   %edi
-    3934:	56                   	push   %esi
-    3935:	53                   	push   %ebx
-  for(nfiles = 0; ; nfiles++){
-    3936:	31 db                	xor    %ebx,%ebx
+    39f0:	55                   	push   %ebp
+    39f1:	89 e5                	mov    %esp,%ebp
+    39f3:	57                   	push   %edi
+    39f4:	56                   	push   %esi
+    39f5:	53                   	push   %ebx
+  for (nfiles = 0;; nfiles++)
+    39f6:	31 db                	xor    %ebx,%ebx
 {
-    3938:	83 ec 5c             	sub    $0x5c,%esp
+    39f8:	83 ec 5c             	sub    $0x5c,%esp
   printf(1, "fsfull test\n");
-    393b:	c7 44 24 04 ab 52 00 	movl   $0x52ab,0x4(%esp)
-    3942:	00 
-    3943:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    394a:	e8 91 06 00 00       	call   3fe0 <printf>
-    394f:	90                   	nop
+    39fb:	c7 44 24 04 7b 53 00 	movl   $0x537b,0x4(%esp)
+    3a02:	00 
+    3a03:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    3a0a:	e8 a1 06 00 00       	call   40b0 <printf>
+    3a0f:	90                   	nop
     name[1] = '0' + nfiles / 1000;
-    3950:	b8 d3 4d 62 10       	mov    $0x10624dd3,%eax
-    3955:	89 d9                	mov    %ebx,%ecx
-    3957:	f7 eb                	imul   %ebx
+    3a10:	b8 d3 4d 62 10       	mov    $0x10624dd3,%eax
+    3a15:	89 d9                	mov    %ebx,%ecx
+    3a17:	f7 eb                	imul   %ebx
     name[2] = '0' + (nfiles % 1000) / 100;
-    3959:	89 de                	mov    %ebx,%esi
+    3a19:	89 de                	mov    %ebx,%esi
     name[1] = '0' + nfiles / 1000;
-    395b:	c1 f9 1f             	sar    $0x1f,%ecx
+    3a1b:	c1 f9 1f             	sar    $0x1f,%ecx
     name[3] = '0' + (nfiles % 100) / 10;
-    395e:	89 df                	mov    %ebx,%edi
+    3a1e:	89 df                	mov    %ebx,%edi
     printf(1, "writing %s\n", name);
-    3960:	c7 44 24 04 b8 52 00 	movl   $0x52b8,0x4(%esp)
-    3967:	00 
-    3968:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    3a20:	c7 44 24 04 88 53 00 	movl   $0x5388,0x4(%esp)
+    3a27:	00 
+    3a28:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
     name[1] = '0' + nfiles / 1000;
-    396f:	c1 fa 06             	sar    $0x6,%edx
-    3972:	29 ca                	sub    %ecx,%edx
-    3974:	8d 42 30             	lea    0x30(%edx),%eax
+    3a2f:	c1 fa 06             	sar    $0x6,%edx
+    3a32:	29 ca                	sub    %ecx,%edx
+    3a34:	8d 42 30             	lea    0x30(%edx),%eax
     name[2] = '0' + (nfiles % 1000) / 100;
-    3977:	69 d2 e8 03 00 00    	imul   $0x3e8,%edx,%edx
+    3a37:	69 d2 e8 03 00 00    	imul   $0x3e8,%edx,%edx
     name[1] = '0' + nfiles / 1000;
-    397d:	88 45 a9             	mov    %al,-0x57(%ebp)
+    3a3d:	88 45 a9             	mov    %al,-0x57(%ebp)
     name[2] = '0' + (nfiles % 1000) / 100;
-    3980:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
+    3a40:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
     name[0] = 'f';
-    3985:	c6 45 a8 66          	movb   $0x66,-0x58(%ebp)
+    3a45:	c6 45 a8 66          	movb   $0x66,-0x58(%ebp)
     name[5] = '\0';
-    3989:	c6 45 ad 00          	movb   $0x0,-0x53(%ebp)
+    3a49:	c6 45 ad 00          	movb   $0x0,-0x53(%ebp)
     name[2] = '0' + (nfiles % 1000) / 100;
-    398d:	29 d6                	sub    %edx,%esi
-    398f:	f7 ee                	imul   %esi
+    3a4d:	29 d6                	sub    %edx,%esi
+    3a4f:	f7 ee                	imul   %esi
     name[3] = '0' + (nfiles % 100) / 10;
-    3991:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
+    3a51:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
     name[2] = '0' + (nfiles % 1000) / 100;
-    3996:	c1 fe 1f             	sar    $0x1f,%esi
-    3999:	c1 fa 05             	sar    $0x5,%edx
-    399c:	29 f2                	sub    %esi,%edx
+    3a56:	c1 fe 1f             	sar    $0x1f,%esi
+    3a59:	c1 fa 05             	sar    $0x5,%edx
+    3a5c:	29 f2                	sub    %esi,%edx
     name[3] = '0' + (nfiles % 100) / 10;
-    399e:	be 67 66 66 66       	mov    $0x66666667,%esi
+    3a5e:	be 67 66 66 66       	mov    $0x66666667,%esi
     name[2] = '0' + (nfiles % 1000) / 100;
-    39a3:	83 c2 30             	add    $0x30,%edx
-    39a6:	88 55 aa             	mov    %dl,-0x56(%ebp)
+    3a63:	83 c2 30             	add    $0x30,%edx
+    3a66:	88 55 aa             	mov    %dl,-0x56(%ebp)
     name[3] = '0' + (nfiles % 100) / 10;
-    39a9:	f7 eb                	imul   %ebx
-    39ab:	c1 fa 05             	sar    $0x5,%edx
-    39ae:	29 ca                	sub    %ecx,%edx
-    39b0:	6b d2 64             	imul   $0x64,%edx,%edx
-    39b3:	29 d7                	sub    %edx,%edi
-    39b5:	89 f8                	mov    %edi,%eax
-    39b7:	f7 ee                	imul   %esi
+    3a69:	f7 eb                	imul   %ebx
+    3a6b:	c1 fa 05             	sar    $0x5,%edx
+    3a6e:	29 ca                	sub    %ecx,%edx
+    3a70:	6b d2 64             	imul   $0x64,%edx,%edx
+    3a73:	29 d7                	sub    %edx,%edi
+    3a75:	89 f8                	mov    %edi,%eax
+    3a77:	f7 ee                	imul   %esi
     name[4] = '0' + (nfiles % 10);
-    39b9:	89 d8                	mov    %ebx,%eax
+    3a79:	89 d8                	mov    %ebx,%eax
     name[3] = '0' + (nfiles % 100) / 10;
-    39bb:	c1 ff 1f             	sar    $0x1f,%edi
-    39be:	c1 fa 02             	sar    $0x2,%edx
-    39c1:	29 fa                	sub    %edi,%edx
-    39c3:	83 c2 30             	add    $0x30,%edx
-    39c6:	88 55 ab             	mov    %dl,-0x55(%ebp)
+    3a7b:	c1 ff 1f             	sar    $0x1f,%edi
+    3a7e:	c1 fa 02             	sar    $0x2,%edx
+    3a81:	29 fa                	sub    %edi,%edx
+    3a83:	83 c2 30             	add    $0x30,%edx
+    3a86:	88 55 ab             	mov    %dl,-0x55(%ebp)
     name[4] = '0' + (nfiles % 10);
-    39c9:	f7 ee                	imul   %esi
-    39cb:	c1 fa 02             	sar    $0x2,%edx
-    39ce:	29 ca                	sub    %ecx,%edx
-    39d0:	89 d9                	mov    %ebx,%ecx
-    39d2:	8d 04 92             	lea    (%edx,%edx,4),%eax
-    39d5:	01 c0                	add    %eax,%eax
-    39d7:	29 c1                	sub    %eax,%ecx
-    39d9:	89 c8                	mov    %ecx,%eax
-    39db:	83 c0 30             	add    $0x30,%eax
-    39de:	88 45 ac             	mov    %al,-0x54(%ebp)
+    3a89:	f7 ee                	imul   %esi
+    3a8b:	c1 fa 02             	sar    $0x2,%edx
+    3a8e:	29 ca                	sub    %ecx,%edx
+    3a90:	89 d9                	mov    %ebx,%ecx
+    3a92:	8d 04 92             	lea    (%edx,%edx,4),%eax
+    3a95:	01 c0                	add    %eax,%eax
+    3a97:	29 c1                	sub    %eax,%ecx
+    3a99:	89 c8                	mov    %ecx,%eax
+    3a9b:	83 c0 30             	add    $0x30,%eax
+    3a9e:	88 45 ac             	mov    %al,-0x54(%ebp)
     printf(1, "writing %s\n", name);
-    39e1:	8d 45 a8             	lea    -0x58(%ebp),%eax
-    39e4:	89 44 24 08          	mov    %eax,0x8(%esp)
-    39e8:	e8 f3 05 00 00       	call   3fe0 <printf>
-    int fd = open(name, O_CREATE|O_RDWR);
-    39ed:	8d 45 a8             	lea    -0x58(%ebp),%eax
-    39f0:	c7 44 24 04 02 02 00 	movl   $0x202,0x4(%esp)
-    39f7:	00 
-    39f8:	89 04 24             	mov    %eax,(%esp)
-    39fb:	e8 d2 04 00 00       	call   3ed2 <open>
-    if(fd < 0){
-    3a00:	85 c0                	test   %eax,%eax
-    int fd = open(name, O_CREATE|O_RDWR);
-    3a02:	89 c7                	mov    %eax,%edi
-    if(fd < 0){
-    3a04:	78 57                	js     3a5d <fsfull+0x12d>
-    3a06:	31 f6                	xor    %esi,%esi
-    3a08:	eb 08                	jmp    3a12 <fsfull+0xe2>
-    3a0a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    3aa1:	8d 45 a8             	lea    -0x58(%ebp),%eax
+    3aa4:	89 44 24 08          	mov    %eax,0x8(%esp)
+    3aa8:	e8 03 06 00 00       	call   40b0 <printf>
+    int fd = open(name, O_CREATE | O_RDWR);
+    3aad:	8d 45 a8             	lea    -0x58(%ebp),%eax
+    3ab0:	c7 44 24 04 02 02 00 	movl   $0x202,0x4(%esp)
+    3ab7:	00 
+    3ab8:	89 04 24             	mov    %eax,(%esp)
+    3abb:	e8 e2 04 00 00       	call   3fa2 <open>
+    if (fd < 0)
+    3ac0:	85 c0                	test   %eax,%eax
+    int fd = open(name, O_CREATE | O_RDWR);
+    3ac2:	89 c7                	mov    %eax,%edi
+    if (fd < 0)
+    3ac4:	78 57                	js     3b1d <fsfull+0x12d>
+    3ac6:	31 f6                	xor    %esi,%esi
+    3ac8:	eb 08                	jmp    3ad2 <fsfull+0xe2>
+    3aca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
       total += cc;
-    3a10:	01 c6                	add    %eax,%esi
+    3ad0:	01 c6                	add    %eax,%esi
       int cc = write(fd, buf, 512);
-    3a12:	c7 44 24 08 00 02 00 	movl   $0x200,0x8(%esp)
-    3a19:	00 
-    3a1a:	c7 44 24 04 a0 8b 00 	movl   $0x8ba0,0x4(%esp)
-    3a21:	00 
-    3a22:	89 3c 24             	mov    %edi,(%esp)
-    3a25:	e8 88 04 00 00       	call   3eb2 <write>
-      if(cc < 512)
-    3a2a:	3d ff 01 00 00       	cmp    $0x1ff,%eax
-    3a2f:	7f df                	jg     3a10 <fsfull+0xe0>
+    3ad2:	c7 44 24 08 00 02 00 	movl   $0x200,0x8(%esp)
+    3ad9:	00 
+    3ada:	c7 44 24 04 80 8c 00 	movl   $0x8c80,0x4(%esp)
+    3ae1:	00 
+    3ae2:	89 3c 24             	mov    %edi,(%esp)
+    3ae5:	e8 98 04 00 00       	call   3f82 <write>
+      if (cc < 512)
+    3aea:	3d ff 01 00 00       	cmp    $0x1ff,%eax
+    3aef:	7f df                	jg     3ad0 <fsfull+0xe0>
     printf(1, "wrote %d bytes\n", total);
-    3a31:	89 74 24 08          	mov    %esi,0x8(%esp)
-    3a35:	c7 44 24 04 d4 52 00 	movl   $0x52d4,0x4(%esp)
-    3a3c:	00 
-    3a3d:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    3a44:	e8 97 05 00 00       	call   3fe0 <printf>
+    3af1:	89 74 24 08          	mov    %esi,0x8(%esp)
+    3af5:	c7 44 24 04 a4 53 00 	movl   $0x53a4,0x4(%esp)
+    3afc:	00 
+    3afd:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    3b04:	e8 a7 05 00 00       	call   40b0 <printf>
     close(fd);
-    3a49:	89 3c 24             	mov    %edi,(%esp)
-    3a4c:	e8 69 04 00 00       	call   3eba <close>
-    if(total == 0)
-    3a51:	85 f6                	test   %esi,%esi
-    3a53:	74 23                	je     3a78 <fsfull+0x148>
-  for(nfiles = 0; ; nfiles++){
-    3a55:	83 c3 01             	add    $0x1,%ebx
+    3b09:	89 3c 24             	mov    %edi,(%esp)
+    3b0c:	e8 79 04 00 00       	call   3f8a <close>
+    if (total == 0)
+    3b11:	85 f6                	test   %esi,%esi
+    3b13:	74 23                	je     3b38 <fsfull+0x148>
+  for (nfiles = 0;; nfiles++)
+    3b15:	83 c3 01             	add    $0x1,%ebx
   }
-    3a58:	e9 f3 fe ff ff       	jmp    3950 <fsfull+0x20>
+    3b18:	e9 f3 fe ff ff       	jmp    3a10 <fsfull+0x20>
       printf(1, "open %s failed\n", name);
-    3a5d:	8d 45 a8             	lea    -0x58(%ebp),%eax
-    3a60:	89 44 24 08          	mov    %eax,0x8(%esp)
-    3a64:	c7 44 24 04 c4 52 00 	movl   $0x52c4,0x4(%esp)
-    3a6b:	00 
-    3a6c:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    3a73:	e8 68 05 00 00       	call   3fe0 <printf>
+    3b1d:	8d 45 a8             	lea    -0x58(%ebp),%eax
+    3b20:	89 44 24 08          	mov    %eax,0x8(%esp)
+    3b24:	c7 44 24 04 94 53 00 	movl   $0x5394,0x4(%esp)
+    3b2b:	00 
+    3b2c:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    3b33:	e8 78 05 00 00       	call   40b0 <printf>
     name[1] = '0' + nfiles / 1000;
-    3a78:	b8 d3 4d 62 10       	mov    $0x10624dd3,%eax
-    3a7d:	89 d9                	mov    %ebx,%ecx
-    3a7f:	f7 eb                	imul   %ebx
+    3b38:	b8 d3 4d 62 10       	mov    $0x10624dd3,%eax
+    3b3d:	89 d9                	mov    %ebx,%ecx
+    3b3f:	f7 eb                	imul   %ebx
     name[2] = '0' + (nfiles % 1000) / 100;
-    3a81:	89 de                	mov    %ebx,%esi
+    3b41:	89 de                	mov    %ebx,%esi
     name[1] = '0' + nfiles / 1000;
-    3a83:	c1 f9 1f             	sar    $0x1f,%ecx
+    3b43:	c1 f9 1f             	sar    $0x1f,%ecx
     name[3] = '0' + (nfiles % 100) / 10;
-    3a86:	89 df                	mov    %ebx,%edi
+    3b46:	89 df                	mov    %ebx,%edi
     name[0] = 'f';
-    3a88:	c6 45 a8 66          	movb   $0x66,-0x58(%ebp)
+    3b48:	c6 45 a8 66          	movb   $0x66,-0x58(%ebp)
     name[5] = '\0';
-    3a8c:	c6 45 ad 00          	movb   $0x0,-0x53(%ebp)
+    3b4c:	c6 45 ad 00          	movb   $0x0,-0x53(%ebp)
     name[1] = '0' + nfiles / 1000;
-    3a90:	c1 fa 06             	sar    $0x6,%edx
-    3a93:	29 ca                	sub    %ecx,%edx
-    3a95:	8d 42 30             	lea    0x30(%edx),%eax
+    3b50:	c1 fa 06             	sar    $0x6,%edx
+    3b53:	29 ca                	sub    %ecx,%edx
+    3b55:	8d 42 30             	lea    0x30(%edx),%eax
     name[2] = '0' + (nfiles % 1000) / 100;
-    3a98:	69 d2 e8 03 00 00    	imul   $0x3e8,%edx,%edx
+    3b58:	69 d2 e8 03 00 00    	imul   $0x3e8,%edx,%edx
     name[1] = '0' + nfiles / 1000;
-    3a9e:	88 45 a9             	mov    %al,-0x57(%ebp)
+    3b5e:	88 45 a9             	mov    %al,-0x57(%ebp)
     name[2] = '0' + (nfiles % 1000) / 100;
-    3aa1:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
-    3aa6:	29 d6                	sub    %edx,%esi
-    3aa8:	f7 ee                	imul   %esi
+    3b61:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
+    3b66:	29 d6                	sub    %edx,%esi
+    3b68:	f7 ee                	imul   %esi
     name[3] = '0' + (nfiles % 100) / 10;
-    3aaa:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
+    3b6a:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
     name[2] = '0' + (nfiles % 1000) / 100;
-    3aaf:	c1 fe 1f             	sar    $0x1f,%esi
-    3ab2:	c1 fa 05             	sar    $0x5,%edx
-    3ab5:	29 f2                	sub    %esi,%edx
+    3b6f:	c1 fe 1f             	sar    $0x1f,%esi
+    3b72:	c1 fa 05             	sar    $0x5,%edx
+    3b75:	29 f2                	sub    %esi,%edx
     name[3] = '0' + (nfiles % 100) / 10;
-    3ab7:	be 67 66 66 66       	mov    $0x66666667,%esi
+    3b77:	be 67 66 66 66       	mov    $0x66666667,%esi
     name[2] = '0' + (nfiles % 1000) / 100;
-    3abc:	83 c2 30             	add    $0x30,%edx
-    3abf:	88 55 aa             	mov    %dl,-0x56(%ebp)
+    3b7c:	83 c2 30             	add    $0x30,%edx
+    3b7f:	88 55 aa             	mov    %dl,-0x56(%ebp)
     name[3] = '0' + (nfiles % 100) / 10;
-    3ac2:	f7 eb                	imul   %ebx
-    3ac4:	c1 fa 05             	sar    $0x5,%edx
-    3ac7:	29 ca                	sub    %ecx,%edx
-    3ac9:	6b d2 64             	imul   $0x64,%edx,%edx
-    3acc:	29 d7                	sub    %edx,%edi
-    3ace:	89 f8                	mov    %edi,%eax
-    3ad0:	f7 ee                	imul   %esi
+    3b82:	f7 eb                	imul   %ebx
+    3b84:	c1 fa 05             	sar    $0x5,%edx
+    3b87:	29 ca                	sub    %ecx,%edx
+    3b89:	6b d2 64             	imul   $0x64,%edx,%edx
+    3b8c:	29 d7                	sub    %edx,%edi
+    3b8e:	89 f8                	mov    %edi,%eax
+    3b90:	f7 ee                	imul   %esi
     name[4] = '0' + (nfiles % 10);
-    3ad2:	89 d8                	mov    %ebx,%eax
+    3b92:	89 d8                	mov    %ebx,%eax
     name[3] = '0' + (nfiles % 100) / 10;
-    3ad4:	c1 ff 1f             	sar    $0x1f,%edi
-    3ad7:	c1 fa 02             	sar    $0x2,%edx
-    3ada:	29 fa                	sub    %edi,%edx
-    3adc:	83 c2 30             	add    $0x30,%edx
-    3adf:	88 55 ab             	mov    %dl,-0x55(%ebp)
+    3b94:	c1 ff 1f             	sar    $0x1f,%edi
+    3b97:	c1 fa 02             	sar    $0x2,%edx
+    3b9a:	29 fa                	sub    %edi,%edx
+    3b9c:	83 c2 30             	add    $0x30,%edx
+    3b9f:	88 55 ab             	mov    %dl,-0x55(%ebp)
     name[4] = '0' + (nfiles % 10);
-    3ae2:	f7 ee                	imul   %esi
-    3ae4:	c1 fa 02             	sar    $0x2,%edx
-    3ae7:	29 ca                	sub    %ecx,%edx
-    3ae9:	89 d9                	mov    %ebx,%ecx
-    3aeb:	8d 04 92             	lea    (%edx,%edx,4),%eax
+    3ba2:	f7 ee                	imul   %esi
+    3ba4:	c1 fa 02             	sar    $0x2,%edx
+    3ba7:	29 ca                	sub    %ecx,%edx
+    3ba9:	89 d9                	mov    %ebx,%ecx
+    3bab:	8d 04 92             	lea    (%edx,%edx,4),%eax
     nfiles--;
-    3aee:	83 eb 01             	sub    $0x1,%ebx
+    3bae:	83 eb 01             	sub    $0x1,%ebx
     name[4] = '0' + (nfiles % 10);
-    3af1:	01 c0                	add    %eax,%eax
-    3af3:	29 c1                	sub    %eax,%ecx
-    3af5:	89 c8                	mov    %ecx,%eax
-    3af7:	83 c0 30             	add    $0x30,%eax
-    3afa:	88 45 ac             	mov    %al,-0x54(%ebp)
+    3bb1:	01 c0                	add    %eax,%eax
+    3bb3:	29 c1                	sub    %eax,%ecx
+    3bb5:	89 c8                	mov    %ecx,%eax
+    3bb7:	83 c0 30             	add    $0x30,%eax
+    3bba:	88 45 ac             	mov    %al,-0x54(%ebp)
     unlink(name);
-    3afd:	8d 45 a8             	lea    -0x58(%ebp),%eax
-    3b00:	89 04 24             	mov    %eax,(%esp)
-    3b03:	e8 da 03 00 00       	call   3ee2 <unlink>
-  while(nfiles >= 0){
-    3b08:	83 fb ff             	cmp    $0xffffffff,%ebx
-    3b0b:	0f 85 67 ff ff ff    	jne    3a78 <fsfull+0x148>
+    3bbd:	8d 45 a8             	lea    -0x58(%ebp),%eax
+    3bc0:	89 04 24             	mov    %eax,(%esp)
+    3bc3:	e8 ea 03 00 00       	call   3fb2 <unlink>
+  while (nfiles >= 0)
+    3bc8:	83 fb ff             	cmp    $0xffffffff,%ebx
+    3bcb:	0f 85 67 ff ff ff    	jne    3b38 <fsfull+0x148>
   printf(1, "fsfull test finished\n");
-    3b11:	c7 44 24 04 e4 52 00 	movl   $0x52e4,0x4(%esp)
-    3b18:	00 
-    3b19:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    3b20:	e8 bb 04 00 00       	call   3fe0 <printf>
+    3bd1:	c7 44 24 04 b4 53 00 	movl   $0x53b4,0x4(%esp)
+    3bd8:	00 
+    3bd9:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    3be0:	e8 cb 04 00 00       	call   40b0 <printf>
 }
-    3b25:	83 c4 5c             	add    $0x5c,%esp
-    3b28:	5b                   	pop    %ebx
-    3b29:	5e                   	pop    %esi
-    3b2a:	5f                   	pop    %edi
-    3b2b:	5d                   	pop    %ebp
-    3b2c:	c3                   	ret    
-    3b2d:	8d 76 00             	lea    0x0(%esi),%esi
+    3be5:	83 c4 5c             	add    $0x5c,%esp
+    3be8:	5b                   	pop    %ebx
+    3be9:	5e                   	pop    %esi
+    3bea:	5f                   	pop    %edi
+    3beb:	5d                   	pop    %ebp
+    3bec:	c3                   	ret    
+    3bed:	8d 76 00             	lea    0x0(%esi),%esi
 
-00003b30 <uio>:
+00003bf0 <uio>:
 {
-    3b30:	55                   	push   %ebp
-    3b31:	89 e5                	mov    %esp,%ebp
-    3b33:	83 ec 18             	sub    $0x18,%esp
+    3bf0:	55                   	push   %ebp
+    3bf1:	89 e5                	mov    %esp,%ebp
+    3bf3:	83 ec 18             	sub    $0x18,%esp
   printf(1, "uio test\n");
-    3b36:	c7 44 24 04 fa 52 00 	movl   $0x52fa,0x4(%esp)
-    3b3d:	00 
-    3b3e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    3b45:	e8 96 04 00 00       	call   3fe0 <printf>
+    3bf6:	c7 44 24 04 ca 53 00 	movl   $0x53ca,0x4(%esp)
+    3bfd:	00 
+    3bfe:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    3c05:	e8 a6 04 00 00       	call   40b0 <printf>
   pid = fork();
-    3b4a:	e8 3b 03 00 00       	call   3e8a <fork>
-  if(pid == 0){
-    3b4f:	85 c0                	test   %eax,%eax
-    3b51:	74 1d                	je     3b70 <uio+0x40>
-  } else if(pid < 0){
-    3b53:	78 49                	js     3b9e <uio+0x6e>
-  wait();
-    3b55:	e8 40 03 00 00       	call   3e9a <wait>
+    3c0a:	e8 4b 03 00 00       	call   3f5a <fork>
+  if (pid == 0)
+    3c0f:	85 c0                	test   %eax,%eax
+    3c11:	74 24                	je     3c37 <uio+0x47>
+  else if (pid < 0)
+    3c13:	78 50                	js     3c65 <uio+0x75>
+  wait(0);
+    3c15:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    3c1c:	e8 49 03 00 00       	call   3f6a <wait>
   printf(1, "uio test done\n");
-    3b5a:	c7 44 24 04 04 53 00 	movl   $0x5304,0x4(%esp)
-    3b61:	00 
-    3b62:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    3b69:	e8 72 04 00 00       	call   3fe0 <printf>
+    3c21:	c7 44 24 04 d4 53 00 	movl   $0x53d4,0x4(%esp)
+    3c28:	00 
+    3c29:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    3c30:	e8 7b 04 00 00       	call   40b0 <printf>
 }
-    3b6e:	c9                   	leave  
-    3b6f:	c3                   	ret    
-    asm volatile("outb %0,%1"::"a"(val), "d" (port));
-    3b70:	ba 70 00 00 00       	mov    $0x70,%edx
-    3b75:	b8 09 00 00 00       	mov    $0x9,%eax
-    3b7a:	ee                   	out    %al,(%dx)
-    asm volatile("inb %1,%0" : "=a" (val) : "d" (port));
-    3b7b:	b2 71                	mov    $0x71,%dl
-    3b7d:	ec                   	in     (%dx),%al
+    3c35:	c9                   	leave  
+    3c36:	c3                   	ret    
+    asm volatile("outb %0,%1" ::"a"(val), "d"(port));
+    3c37:	ba 70 00 00 00       	mov    $0x70,%edx
+    3c3c:	b8 09 00 00 00       	mov    $0x9,%eax
+    3c41:	ee                   	out    %al,(%dx)
+    asm volatile("inb %1,%0"
+    3c42:	b2 71                	mov    $0x71,%dl
+    3c44:	ec                   	in     (%dx),%al
     printf(1, "uio: uio succeeded; test FAILED\n");
-    3b7e:	c7 44 24 04 90 5a 00 	movl   $0x5a90,0x4(%esp)
-    3b85:	00 
-    3b86:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    3b8d:	e8 4e 04 00 00       	call   3fe0 <printf>
+    3c45:	c7 44 24 04 60 5b 00 	movl   $0x5b60,0x4(%esp)
+    3c4c:	00 
+    3c4d:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    3c54:	e8 57 04 00 00       	call   40b0 <printf>
     exit(0);
-    3b92:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    3b99:	e8 f4 02 00 00       	call   3e92 <exit>
-    printf (1, "fork failed\n");
-    3b9e:	c7 44 24 04 89 52 00 	movl   $0x5289,0x4(%esp)
-    3ba5:	00 
-    3ba6:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    3bad:	e8 2e 04 00 00       	call   3fe0 <printf>
+    3c59:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    3c60:	e8 fd 02 00 00       	call   3f62 <exit>
+    printf(1, "fork failed\n");
+    3c65:	c7 44 24 04 59 53 00 	movl   $0x5359,0x4(%esp)
+    3c6c:	00 
+    3c6d:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    3c74:	e8 37 04 00 00       	call   40b0 <printf>
     exit(0);
-    3bb2:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    3bb9:	e8 d4 02 00 00       	call   3e92 <exit>
-    3bbe:	66 90                	xchg   %ax,%ax
+    3c79:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    3c80:	e8 dd 02 00 00       	call   3f62 <exit>
+    3c85:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    3c89:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-00003bc0 <argptest>:
+00003c90 <argptest>:
 {
-    3bc0:	55                   	push   %ebp
-    3bc1:	89 e5                	mov    %esp,%ebp
-    3bc3:	53                   	push   %ebx
-    3bc4:	83 ec 14             	sub    $0x14,%esp
+    3c90:	55                   	push   %ebp
+    3c91:	89 e5                	mov    %esp,%ebp
+    3c93:	53                   	push   %ebx
+    3c94:	83 ec 14             	sub    $0x14,%esp
   fd = open("init", O_RDONLY);
-    3bc7:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-    3bce:	00 
-    3bcf:	c7 04 24 13 53 00 00 	movl   $0x5313,(%esp)
-    3bd6:	e8 f7 02 00 00       	call   3ed2 <open>
-  if (fd < 0) {
-    3bdb:	85 c0                	test   %eax,%eax
+    3c97:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+    3c9e:	00 
+    3c9f:	c7 04 24 e3 53 00 00 	movl   $0x53e3,(%esp)
+    3ca6:	e8 f7 02 00 00       	call   3fa2 <open>
+  if (fd < 0)
+    3cab:	85 c0                	test   %eax,%eax
   fd = open("init", O_RDONLY);
-    3bdd:	89 c3                	mov    %eax,%ebx
-  if (fd < 0) {
-    3bdf:	78 45                	js     3c26 <argptest+0x66>
+    3cad:	89 c3                	mov    %eax,%ebx
+  if (fd < 0)
+    3caf:	78 45                	js     3cf6 <argptest+0x66>
   read(fd, sbrk(0) - 1, -1);
-    3be1:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    3be8:	e8 2d 03 00 00       	call   3f1a <sbrk>
-    3bed:	89 1c 24             	mov    %ebx,(%esp)
-    3bf0:	c7 44 24 08 ff ff ff 	movl   $0xffffffff,0x8(%esp)
-    3bf7:	ff 
-    3bf8:	83 e8 01             	sub    $0x1,%eax
-    3bfb:	89 44 24 04          	mov    %eax,0x4(%esp)
-    3bff:	e8 a6 02 00 00       	call   3eaa <read>
+    3cb1:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    3cb8:	e8 2d 03 00 00       	call   3fea <sbrk>
+    3cbd:	89 1c 24             	mov    %ebx,(%esp)
+    3cc0:	c7 44 24 08 ff ff ff 	movl   $0xffffffff,0x8(%esp)
+    3cc7:	ff 
+    3cc8:	83 e8 01             	sub    $0x1,%eax
+    3ccb:	89 44 24 04          	mov    %eax,0x4(%esp)
+    3ccf:	e8 a6 02 00 00       	call   3f7a <read>
   close(fd);
-    3c04:	89 1c 24             	mov    %ebx,(%esp)
-    3c07:	e8 ae 02 00 00       	call   3eba <close>
+    3cd4:	89 1c 24             	mov    %ebx,(%esp)
+    3cd7:	e8 ae 02 00 00       	call   3f8a <close>
   printf(1, "arg test passed\n");
-    3c0c:	c7 44 24 04 25 53 00 	movl   $0x5325,0x4(%esp)
-    3c13:	00 
-    3c14:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    3c1b:	e8 c0 03 00 00       	call   3fe0 <printf>
+    3cdc:	c7 44 24 04 f5 53 00 	movl   $0x53f5,0x4(%esp)
+    3ce3:	00 
+    3ce4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    3ceb:	e8 c0 03 00 00       	call   40b0 <printf>
 }
-    3c20:	83 c4 14             	add    $0x14,%esp
-    3c23:	5b                   	pop    %ebx
-    3c24:	5d                   	pop    %ebp
-    3c25:	c3                   	ret    
+    3cf0:	83 c4 14             	add    $0x14,%esp
+    3cf3:	5b                   	pop    %ebx
+    3cf4:	5d                   	pop    %ebp
+    3cf5:	c3                   	ret    
     printf(2, "open failed\n");
-    3c26:	c7 44 24 04 18 53 00 	movl   $0x5318,0x4(%esp)
-    3c2d:	00 
-    3c2e:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    3c35:	e8 a6 03 00 00       	call   3fe0 <printf>
+    3cf6:	c7 44 24 04 e8 53 00 	movl   $0x53e8,0x4(%esp)
+    3cfd:	00 
+    3cfe:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+    3d05:	e8 a6 03 00 00       	call   40b0 <printf>
     exit(0);
-    3c3a:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    3c41:	e8 4c 02 00 00       	call   3e92 <exit>
-    3c46:	8d 76 00             	lea    0x0(%esi),%esi
-    3c49:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    3d0a:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    3d11:	e8 4c 02 00 00       	call   3f62 <exit>
+    3d16:	8d 76 00             	lea    0x0(%esi),%esi
+    3d19:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-00003c50 <rand>:
+00003d20 <rand>:
   randstate = randstate * 1664525 + 1013904223;
-    3c50:	69 05 c0 63 00 00 0d 	imul   $0x19660d,0x63c0,%eax
-    3c57:	66 19 00 
+    3d20:	69 05 90 64 00 00 0d 	imul   $0x19660d,0x6490,%eax
+    3d27:	66 19 00 
 {
-    3c5a:	55                   	push   %ebp
-    3c5b:	89 e5                	mov    %esp,%ebp
+    3d2a:	55                   	push   %ebp
+    3d2b:	89 e5                	mov    %esp,%ebp
 }
-    3c5d:	5d                   	pop    %ebp
+    3d2d:	5d                   	pop    %ebp
   randstate = randstate * 1664525 + 1013904223;
-    3c5e:	05 5f f3 6e 3c       	add    $0x3c6ef35f,%eax
-    3c63:	a3 c0 63 00 00       	mov    %eax,0x63c0
+    3d2e:	05 5f f3 6e 3c       	add    $0x3c6ef35f,%eax
+    3d33:	a3 90 64 00 00       	mov    %eax,0x6490
 }
-    3c68:	c3                   	ret    
-    3c69:	66 90                	xchg   %ax,%ax
-    3c6b:	66 90                	xchg   %ax,%ax
-    3c6d:	66 90                	xchg   %ax,%ax
-    3c6f:	90                   	nop
+    3d38:	c3                   	ret    
+    3d39:	66 90                	xchg   %ax,%ax
+    3d3b:	66 90                	xchg   %ax,%ax
+    3d3d:	66 90                	xchg   %ax,%ax
+    3d3f:	90                   	nop
 
-00003c70 <strcpy>:
+00003d40 <strcpy>:
 #include "user.h"
 #include "x86.h"
 
 char*
 strcpy(char *s, const char *t)
 {
-    3c70:	55                   	push   %ebp
-    3c71:	89 e5                	mov    %esp,%ebp
-    3c73:	8b 45 08             	mov    0x8(%ebp),%eax
-    3c76:	8b 4d 0c             	mov    0xc(%ebp),%ecx
-    3c79:	53                   	push   %ebx
+    3d40:	55                   	push   %ebp
+    3d41:	89 e5                	mov    %esp,%ebp
+    3d43:	8b 45 08             	mov    0x8(%ebp),%eax
+    3d46:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+    3d49:	53                   	push   %ebx
   char *os;
 
   os = s;
   while((*s++ = *t++) != 0)
-    3c7a:	89 c2                	mov    %eax,%edx
-    3c7c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    3c80:	83 c1 01             	add    $0x1,%ecx
-    3c83:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
-    3c87:	83 c2 01             	add    $0x1,%edx
-    3c8a:	84 db                	test   %bl,%bl
-    3c8c:	88 5a ff             	mov    %bl,-0x1(%edx)
-    3c8f:	75 ef                	jne    3c80 <strcpy+0x10>
+    3d4a:	89 c2                	mov    %eax,%edx
+    3d4c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    3d50:	83 c1 01             	add    $0x1,%ecx
+    3d53:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
+    3d57:	83 c2 01             	add    $0x1,%edx
+    3d5a:	84 db                	test   %bl,%bl
+    3d5c:	88 5a ff             	mov    %bl,-0x1(%edx)
+    3d5f:	75 ef                	jne    3d50 <strcpy+0x10>
     ;
   return os;
 }
-    3c91:	5b                   	pop    %ebx
-    3c92:	5d                   	pop    %ebp
-    3c93:	c3                   	ret    
-    3c94:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    3c9a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+    3d61:	5b                   	pop    %ebx
+    3d62:	5d                   	pop    %ebp
+    3d63:	c3                   	ret    
+    3d64:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    3d6a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
 
-00003ca0 <strcmp>:
+00003d70 <strcmp>:
 
 int
 strcmp(const char *p, const char *q)
 {
-    3ca0:	55                   	push   %ebp
-    3ca1:	89 e5                	mov    %esp,%ebp
-    3ca3:	8b 55 08             	mov    0x8(%ebp),%edx
-    3ca6:	53                   	push   %ebx
-    3ca7:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+    3d70:	55                   	push   %ebp
+    3d71:	89 e5                	mov    %esp,%ebp
+    3d73:	8b 55 08             	mov    0x8(%ebp),%edx
+    3d76:	53                   	push   %ebx
+    3d77:	8b 4d 0c             	mov    0xc(%ebp),%ecx
   while(*p && *p == *q)
-    3caa:	0f b6 02             	movzbl (%edx),%eax
-    3cad:	84 c0                	test   %al,%al
-    3caf:	74 2d                	je     3cde <strcmp+0x3e>
-    3cb1:	0f b6 19             	movzbl (%ecx),%ebx
-    3cb4:	38 d8                	cmp    %bl,%al
-    3cb6:	74 0e                	je     3cc6 <strcmp+0x26>
-    3cb8:	eb 2b                	jmp    3ce5 <strcmp+0x45>
-    3cba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    3cc0:	38 c8                	cmp    %cl,%al
-    3cc2:	75 15                	jne    3cd9 <strcmp+0x39>
+    3d7a:	0f b6 02             	movzbl (%edx),%eax
+    3d7d:	84 c0                	test   %al,%al
+    3d7f:	74 2d                	je     3dae <strcmp+0x3e>
+    3d81:	0f b6 19             	movzbl (%ecx),%ebx
+    3d84:	38 d8                	cmp    %bl,%al
+    3d86:	74 0e                	je     3d96 <strcmp+0x26>
+    3d88:	eb 2b                	jmp    3db5 <strcmp+0x45>
+    3d8a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    3d90:	38 c8                	cmp    %cl,%al
+    3d92:	75 15                	jne    3da9 <strcmp+0x39>
     p++, q++;
-    3cc4:	89 d9                	mov    %ebx,%ecx
-    3cc6:	83 c2 01             	add    $0x1,%edx
+    3d94:	89 d9                	mov    %ebx,%ecx
+    3d96:	83 c2 01             	add    $0x1,%edx
   while(*p && *p == *q)
-    3cc9:	0f b6 02             	movzbl (%edx),%eax
+    3d99:	0f b6 02             	movzbl (%edx),%eax
     p++, q++;
-    3ccc:	8d 59 01             	lea    0x1(%ecx),%ebx
+    3d9c:	8d 59 01             	lea    0x1(%ecx),%ebx
   while(*p && *p == *q)
-    3ccf:	0f b6 49 01          	movzbl 0x1(%ecx),%ecx
-    3cd3:	84 c0                	test   %al,%al
-    3cd5:	75 e9                	jne    3cc0 <strcmp+0x20>
-    3cd7:	31 c0                	xor    %eax,%eax
+    3d9f:	0f b6 49 01          	movzbl 0x1(%ecx),%ecx
+    3da3:	84 c0                	test   %al,%al
+    3da5:	75 e9                	jne    3d90 <strcmp+0x20>
+    3da7:	31 c0                	xor    %eax,%eax
   return (uchar)*p - (uchar)*q;
-    3cd9:	29 c8                	sub    %ecx,%eax
+    3da9:	29 c8                	sub    %ecx,%eax
 }
-    3cdb:	5b                   	pop    %ebx
-    3cdc:	5d                   	pop    %ebp
-    3cdd:	c3                   	ret    
-    3cde:	0f b6 09             	movzbl (%ecx),%ecx
+    3dab:	5b                   	pop    %ebx
+    3dac:	5d                   	pop    %ebp
+    3dad:	c3                   	ret    
+    3dae:	0f b6 09             	movzbl (%ecx),%ecx
   while(*p && *p == *q)
-    3ce1:	31 c0                	xor    %eax,%eax
-    3ce3:	eb f4                	jmp    3cd9 <strcmp+0x39>
-    3ce5:	0f b6 cb             	movzbl %bl,%ecx
-    3ce8:	eb ef                	jmp    3cd9 <strcmp+0x39>
-    3cea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    3db1:	31 c0                	xor    %eax,%eax
+    3db3:	eb f4                	jmp    3da9 <strcmp+0x39>
+    3db5:	0f b6 cb             	movzbl %bl,%ecx
+    3db8:	eb ef                	jmp    3da9 <strcmp+0x39>
+    3dba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-00003cf0 <strlen>:
+00003dc0 <strlen>:
 
 uint
 strlen(const char *s)
 {
-    3cf0:	55                   	push   %ebp
-    3cf1:	89 e5                	mov    %esp,%ebp
-    3cf3:	8b 4d 08             	mov    0x8(%ebp),%ecx
+    3dc0:	55                   	push   %ebp
+    3dc1:	89 e5                	mov    %esp,%ebp
+    3dc3:	8b 4d 08             	mov    0x8(%ebp),%ecx
   int n;
 
   for(n = 0; s[n]; n++)
-    3cf6:	80 39 00             	cmpb   $0x0,(%ecx)
-    3cf9:	74 12                	je     3d0d <strlen+0x1d>
-    3cfb:	31 d2                	xor    %edx,%edx
-    3cfd:	8d 76 00             	lea    0x0(%esi),%esi
-    3d00:	83 c2 01             	add    $0x1,%edx
-    3d03:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
-    3d07:	89 d0                	mov    %edx,%eax
-    3d09:	75 f5                	jne    3d00 <strlen+0x10>
+    3dc6:	80 39 00             	cmpb   $0x0,(%ecx)
+    3dc9:	74 12                	je     3ddd <strlen+0x1d>
+    3dcb:	31 d2                	xor    %edx,%edx
+    3dcd:	8d 76 00             	lea    0x0(%esi),%esi
+    3dd0:	83 c2 01             	add    $0x1,%edx
+    3dd3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+    3dd7:	89 d0                	mov    %edx,%eax
+    3dd9:	75 f5                	jne    3dd0 <strlen+0x10>
     ;
   return n;
 }
-    3d0b:	5d                   	pop    %ebp
-    3d0c:	c3                   	ret    
+    3ddb:	5d                   	pop    %ebp
+    3ddc:	c3                   	ret    
   for(n = 0; s[n]; n++)
-    3d0d:	31 c0                	xor    %eax,%eax
+    3ddd:	31 c0                	xor    %eax,%eax
 }
-    3d0f:	5d                   	pop    %ebp
-    3d10:	c3                   	ret    
-    3d11:	eb 0d                	jmp    3d20 <memset>
-    3d13:	90                   	nop
-    3d14:	90                   	nop
-    3d15:	90                   	nop
-    3d16:	90                   	nop
-    3d17:	90                   	nop
-    3d18:	90                   	nop
-    3d19:	90                   	nop
-    3d1a:	90                   	nop
-    3d1b:	90                   	nop
-    3d1c:	90                   	nop
-    3d1d:	90                   	nop
-    3d1e:	90                   	nop
-    3d1f:	90                   	nop
+    3ddf:	5d                   	pop    %ebp
+    3de0:	c3                   	ret    
+    3de1:	eb 0d                	jmp    3df0 <memset>
+    3de3:	90                   	nop
+    3de4:	90                   	nop
+    3de5:	90                   	nop
+    3de6:	90                   	nop
+    3de7:	90                   	nop
+    3de8:	90                   	nop
+    3de9:	90                   	nop
+    3dea:	90                   	nop
+    3deb:	90                   	nop
+    3dec:	90                   	nop
+    3ded:	90                   	nop
+    3dee:	90                   	nop
+    3def:	90                   	nop
 
-00003d20 <memset>:
+00003df0 <memset>:
 
 void*
 memset(void *dst, int c, uint n)
 {
-    3d20:	55                   	push   %ebp
-    3d21:	89 e5                	mov    %esp,%ebp
-    3d23:	8b 55 08             	mov    0x8(%ebp),%edx
-    3d26:	57                   	push   %edi
+    3df0:	55                   	push   %ebp
+    3df1:	89 e5                	mov    %esp,%ebp
+    3df3:	8b 55 08             	mov    0x8(%ebp),%edx
+    3df6:	57                   	push   %edi
 }
 
 static inline void
 stosb(void *addr, int data, int cnt)
 {
   asm volatile("cld; rep stosb" :
-    3d27:	8b 4d 10             	mov    0x10(%ebp),%ecx
-    3d2a:	8b 45 0c             	mov    0xc(%ebp),%eax
-    3d2d:	89 d7                	mov    %edx,%edi
-    3d2f:	fc                   	cld    
-    3d30:	f3 aa                	rep stos %al,%es:(%edi)
+    3df7:	8b 4d 10             	mov    0x10(%ebp),%ecx
+    3dfa:	8b 45 0c             	mov    0xc(%ebp),%eax
+    3dfd:	89 d7                	mov    %edx,%edi
+    3dff:	fc                   	cld    
+    3e00:	f3 aa                	rep stos %al,%es:(%edi)
   stosb(dst, c, n);
   return dst;
 }
-    3d32:	89 d0                	mov    %edx,%eax
-    3d34:	5f                   	pop    %edi
-    3d35:	5d                   	pop    %ebp
-    3d36:	c3                   	ret    
-    3d37:	89 f6                	mov    %esi,%esi
-    3d39:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    3e02:	89 d0                	mov    %edx,%eax
+    3e04:	5f                   	pop    %edi
+    3e05:	5d                   	pop    %ebp
+    3e06:	c3                   	ret    
+    3e07:	89 f6                	mov    %esi,%esi
+    3e09:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-00003d40 <strchr>:
+00003e10 <strchr>:
 
 char*
 strchr(const char *s, char c)
 {
-    3d40:	55                   	push   %ebp
-    3d41:	89 e5                	mov    %esp,%ebp
-    3d43:	8b 45 08             	mov    0x8(%ebp),%eax
-    3d46:	53                   	push   %ebx
-    3d47:	8b 55 0c             	mov    0xc(%ebp),%edx
+    3e10:	55                   	push   %ebp
+    3e11:	89 e5                	mov    %esp,%ebp
+    3e13:	8b 45 08             	mov    0x8(%ebp),%eax
+    3e16:	53                   	push   %ebx
+    3e17:	8b 55 0c             	mov    0xc(%ebp),%edx
   for(; *s; s++)
-    3d4a:	0f b6 18             	movzbl (%eax),%ebx
-    3d4d:	84 db                	test   %bl,%bl
-    3d4f:	74 1d                	je     3d6e <strchr+0x2e>
+    3e1a:	0f b6 18             	movzbl (%eax),%ebx
+    3e1d:	84 db                	test   %bl,%bl
+    3e1f:	74 1d                	je     3e3e <strchr+0x2e>
     if(*s == c)
-    3d51:	38 d3                	cmp    %dl,%bl
-    3d53:	89 d1                	mov    %edx,%ecx
-    3d55:	75 0d                	jne    3d64 <strchr+0x24>
-    3d57:	eb 17                	jmp    3d70 <strchr+0x30>
-    3d59:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    3d60:	38 ca                	cmp    %cl,%dl
-    3d62:	74 0c                	je     3d70 <strchr+0x30>
+    3e21:	38 d3                	cmp    %dl,%bl
+    3e23:	89 d1                	mov    %edx,%ecx
+    3e25:	75 0d                	jne    3e34 <strchr+0x24>
+    3e27:	eb 17                	jmp    3e40 <strchr+0x30>
+    3e29:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    3e30:	38 ca                	cmp    %cl,%dl
+    3e32:	74 0c                	je     3e40 <strchr+0x30>
   for(; *s; s++)
-    3d64:	83 c0 01             	add    $0x1,%eax
-    3d67:	0f b6 10             	movzbl (%eax),%edx
-    3d6a:	84 d2                	test   %dl,%dl
-    3d6c:	75 f2                	jne    3d60 <strchr+0x20>
+    3e34:	83 c0 01             	add    $0x1,%eax
+    3e37:	0f b6 10             	movzbl (%eax),%edx
+    3e3a:	84 d2                	test   %dl,%dl
+    3e3c:	75 f2                	jne    3e30 <strchr+0x20>
       return (char*)s;
   return 0;
-    3d6e:	31 c0                	xor    %eax,%eax
+    3e3e:	31 c0                	xor    %eax,%eax
 }
-    3d70:	5b                   	pop    %ebx
-    3d71:	5d                   	pop    %ebp
-    3d72:	c3                   	ret    
-    3d73:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    3d79:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    3e40:	5b                   	pop    %ebx
+    3e41:	5d                   	pop    %ebp
+    3e42:	c3                   	ret    
+    3e43:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    3e49:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-00003d80 <gets>:
+00003e50 <gets>:
 
 char*
 gets(char *buf, int max)
 {
-    3d80:	55                   	push   %ebp
-    3d81:	89 e5                	mov    %esp,%ebp
-    3d83:	57                   	push   %edi
-    3d84:	56                   	push   %esi
+    3e50:	55                   	push   %ebp
+    3e51:	89 e5                	mov    %esp,%ebp
+    3e53:	57                   	push   %edi
+    3e54:	56                   	push   %esi
   int i, cc;
   char c;
 
   for(i=0; i+1 < max; ){
-    3d85:	31 f6                	xor    %esi,%esi
+    3e55:	31 f6                	xor    %esi,%esi
 {
-    3d87:	53                   	push   %ebx
-    3d88:	83 ec 2c             	sub    $0x2c,%esp
+    3e57:	53                   	push   %ebx
+    3e58:	83 ec 2c             	sub    $0x2c,%esp
     cc = read(0, &c, 1);
-    3d8b:	8d 7d e7             	lea    -0x19(%ebp),%edi
+    3e5b:	8d 7d e7             	lea    -0x19(%ebp),%edi
   for(i=0; i+1 < max; ){
-    3d8e:	eb 31                	jmp    3dc1 <gets+0x41>
+    3e5e:	eb 31                	jmp    3e91 <gets+0x41>
     cc = read(0, &c, 1);
-    3d90:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
-    3d97:	00 
-    3d98:	89 7c 24 04          	mov    %edi,0x4(%esp)
-    3d9c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    3da3:	e8 02 01 00 00       	call   3eaa <read>
+    3e60:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+    3e67:	00 
+    3e68:	89 7c 24 04          	mov    %edi,0x4(%esp)
+    3e6c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    3e73:	e8 02 01 00 00       	call   3f7a <read>
     if(cc < 1)
-    3da8:	85 c0                	test   %eax,%eax
-    3daa:	7e 1d                	jle    3dc9 <gets+0x49>
+    3e78:	85 c0                	test   %eax,%eax
+    3e7a:	7e 1d                	jle    3e99 <gets+0x49>
       break;
     buf[i++] = c;
-    3dac:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+    3e7c:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
   for(i=0; i+1 < max; ){
-    3db0:	89 de                	mov    %ebx,%esi
+    3e80:	89 de                	mov    %ebx,%esi
     buf[i++] = c;
-    3db2:	8b 55 08             	mov    0x8(%ebp),%edx
+    3e82:	8b 55 08             	mov    0x8(%ebp),%edx
     if(c == '\n' || c == '\r')
-    3db5:	3c 0d                	cmp    $0xd,%al
+    3e85:	3c 0d                	cmp    $0xd,%al
     buf[i++] = c;
-    3db7:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
+    3e87:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
     if(c == '\n' || c == '\r')
-    3dbb:	74 0c                	je     3dc9 <gets+0x49>
-    3dbd:	3c 0a                	cmp    $0xa,%al
-    3dbf:	74 08                	je     3dc9 <gets+0x49>
+    3e8b:	74 0c                	je     3e99 <gets+0x49>
+    3e8d:	3c 0a                	cmp    $0xa,%al
+    3e8f:	74 08                	je     3e99 <gets+0x49>
   for(i=0; i+1 < max; ){
-    3dc1:	8d 5e 01             	lea    0x1(%esi),%ebx
-    3dc4:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
-    3dc7:	7c c7                	jl     3d90 <gets+0x10>
+    3e91:	8d 5e 01             	lea    0x1(%esi),%ebx
+    3e94:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+    3e97:	7c c7                	jl     3e60 <gets+0x10>
       break;
   }
   buf[i] = '\0';
-    3dc9:	8b 45 08             	mov    0x8(%ebp),%eax
-    3dcc:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+    3e99:	8b 45 08             	mov    0x8(%ebp),%eax
+    3e9c:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
   return buf;
 }
-    3dd0:	83 c4 2c             	add    $0x2c,%esp
-    3dd3:	5b                   	pop    %ebx
-    3dd4:	5e                   	pop    %esi
-    3dd5:	5f                   	pop    %edi
-    3dd6:	5d                   	pop    %ebp
-    3dd7:	c3                   	ret    
-    3dd8:	90                   	nop
-    3dd9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    3ea0:	83 c4 2c             	add    $0x2c,%esp
+    3ea3:	5b                   	pop    %ebx
+    3ea4:	5e                   	pop    %esi
+    3ea5:	5f                   	pop    %edi
+    3ea6:	5d                   	pop    %ebp
+    3ea7:	c3                   	ret    
+    3ea8:	90                   	nop
+    3ea9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-00003de0 <stat>:
+00003eb0 <stat>:
 
 int
 stat(const char *n, struct stat *st)
 {
-    3de0:	55                   	push   %ebp
-    3de1:	89 e5                	mov    %esp,%ebp
-    3de3:	56                   	push   %esi
-    3de4:	53                   	push   %ebx
-    3de5:	83 ec 10             	sub    $0x10,%esp
+    3eb0:	55                   	push   %ebp
+    3eb1:	89 e5                	mov    %esp,%ebp
+    3eb3:	56                   	push   %esi
+    3eb4:	53                   	push   %ebx
+    3eb5:	83 ec 10             	sub    $0x10,%esp
   int fd;
   int r;
 
   fd = open(n, O_RDONLY);
-    3de8:	8b 45 08             	mov    0x8(%ebp),%eax
-    3deb:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-    3df2:	00 
-    3df3:	89 04 24             	mov    %eax,(%esp)
-    3df6:	e8 d7 00 00 00       	call   3ed2 <open>
+    3eb8:	8b 45 08             	mov    0x8(%ebp),%eax
+    3ebb:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+    3ec2:	00 
+    3ec3:	89 04 24             	mov    %eax,(%esp)
+    3ec6:	e8 d7 00 00 00       	call   3fa2 <open>
   if(fd < 0)
-    3dfb:	85 c0                	test   %eax,%eax
+    3ecb:	85 c0                	test   %eax,%eax
   fd = open(n, O_RDONLY);
-    3dfd:	89 c3                	mov    %eax,%ebx
+    3ecd:	89 c3                	mov    %eax,%ebx
   if(fd < 0)
-    3dff:	78 27                	js     3e28 <stat+0x48>
+    3ecf:	78 27                	js     3ef8 <stat+0x48>
     return -1;
   r = fstat(fd, st);
-    3e01:	8b 45 0c             	mov    0xc(%ebp),%eax
-    3e04:	89 1c 24             	mov    %ebx,(%esp)
-    3e07:	89 44 24 04          	mov    %eax,0x4(%esp)
-    3e0b:	e8 da 00 00 00       	call   3eea <fstat>
+    3ed1:	8b 45 0c             	mov    0xc(%ebp),%eax
+    3ed4:	89 1c 24             	mov    %ebx,(%esp)
+    3ed7:	89 44 24 04          	mov    %eax,0x4(%esp)
+    3edb:	e8 da 00 00 00       	call   3fba <fstat>
   close(fd);
-    3e10:	89 1c 24             	mov    %ebx,(%esp)
+    3ee0:	89 1c 24             	mov    %ebx,(%esp)
   r = fstat(fd, st);
-    3e13:	89 c6                	mov    %eax,%esi
+    3ee3:	89 c6                	mov    %eax,%esi
   close(fd);
-    3e15:	e8 a0 00 00 00       	call   3eba <close>
+    3ee5:	e8 a0 00 00 00       	call   3f8a <close>
   return r;
-    3e1a:	89 f0                	mov    %esi,%eax
+    3eea:	89 f0                	mov    %esi,%eax
 }
-    3e1c:	83 c4 10             	add    $0x10,%esp
-    3e1f:	5b                   	pop    %ebx
-    3e20:	5e                   	pop    %esi
-    3e21:	5d                   	pop    %ebp
-    3e22:	c3                   	ret    
-    3e23:	90                   	nop
-    3e24:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    3eec:	83 c4 10             	add    $0x10,%esp
+    3eef:	5b                   	pop    %ebx
+    3ef0:	5e                   	pop    %esi
+    3ef1:	5d                   	pop    %ebp
+    3ef2:	c3                   	ret    
+    3ef3:	90                   	nop
+    3ef4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     return -1;
-    3e28:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-    3e2d:	eb ed                	jmp    3e1c <stat+0x3c>
-    3e2f:	90                   	nop
+    3ef8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+    3efd:	eb ed                	jmp    3eec <stat+0x3c>
+    3eff:	90                   	nop
 
-00003e30 <atoi>:
+00003f00 <atoi>:
 
 int
 atoi(const char *s)
 {
-    3e30:	55                   	push   %ebp
-    3e31:	89 e5                	mov    %esp,%ebp
-    3e33:	8b 4d 08             	mov    0x8(%ebp),%ecx
-    3e36:	53                   	push   %ebx
+    3f00:	55                   	push   %ebp
+    3f01:	89 e5                	mov    %esp,%ebp
+    3f03:	8b 4d 08             	mov    0x8(%ebp),%ecx
+    3f06:	53                   	push   %ebx
   int n;
 
   n = 0;
   while('0' <= *s && *s <= '9')
-    3e37:	0f be 11             	movsbl (%ecx),%edx
-    3e3a:	8d 42 d0             	lea    -0x30(%edx),%eax
-    3e3d:	3c 09                	cmp    $0x9,%al
+    3f07:	0f be 11             	movsbl (%ecx),%edx
+    3f0a:	8d 42 d0             	lea    -0x30(%edx),%eax
+    3f0d:	3c 09                	cmp    $0x9,%al
   n = 0;
-    3e3f:	b8 00 00 00 00       	mov    $0x0,%eax
+    3f0f:	b8 00 00 00 00       	mov    $0x0,%eax
   while('0' <= *s && *s <= '9')
-    3e44:	77 17                	ja     3e5d <atoi+0x2d>
-    3e46:	66 90                	xchg   %ax,%ax
+    3f14:	77 17                	ja     3f2d <atoi+0x2d>
+    3f16:	66 90                	xchg   %ax,%ax
     n = n*10 + *s++ - '0';
-    3e48:	83 c1 01             	add    $0x1,%ecx
-    3e4b:	8d 04 80             	lea    (%eax,%eax,4),%eax
-    3e4e:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+    3f18:	83 c1 01             	add    $0x1,%ecx
+    3f1b:	8d 04 80             	lea    (%eax,%eax,4),%eax
+    3f1e:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
   while('0' <= *s && *s <= '9')
-    3e52:	0f be 11             	movsbl (%ecx),%edx
-    3e55:	8d 5a d0             	lea    -0x30(%edx),%ebx
-    3e58:	80 fb 09             	cmp    $0x9,%bl
-    3e5b:	76 eb                	jbe    3e48 <atoi+0x18>
+    3f22:	0f be 11             	movsbl (%ecx),%edx
+    3f25:	8d 5a d0             	lea    -0x30(%edx),%ebx
+    3f28:	80 fb 09             	cmp    $0x9,%bl
+    3f2b:	76 eb                	jbe    3f18 <atoi+0x18>
   return n;
 }
-    3e5d:	5b                   	pop    %ebx
-    3e5e:	5d                   	pop    %ebp
-    3e5f:	c3                   	ret    
+    3f2d:	5b                   	pop    %ebx
+    3f2e:	5d                   	pop    %ebp
+    3f2f:	c3                   	ret    
 
-00003e60 <memmove>:
+00003f30 <memmove>:
 
 void*
 memmove(void *vdst, const void *vsrc, int n)
 {
-    3e60:	55                   	push   %ebp
+    3f30:	55                   	push   %ebp
   char *dst;
   const char *src;
 
   dst = vdst;
   src = vsrc;
   while(n-- > 0)
-    3e61:	31 d2                	xor    %edx,%edx
+    3f31:	31 d2                	xor    %edx,%edx
 {
-    3e63:	89 e5                	mov    %esp,%ebp
-    3e65:	56                   	push   %esi
-    3e66:	8b 45 08             	mov    0x8(%ebp),%eax
-    3e69:	53                   	push   %ebx
-    3e6a:	8b 5d 10             	mov    0x10(%ebp),%ebx
-    3e6d:	8b 75 0c             	mov    0xc(%ebp),%esi
+    3f33:	89 e5                	mov    %esp,%ebp
+    3f35:	56                   	push   %esi
+    3f36:	8b 45 08             	mov    0x8(%ebp),%eax
+    3f39:	53                   	push   %ebx
+    3f3a:	8b 5d 10             	mov    0x10(%ebp),%ebx
+    3f3d:	8b 75 0c             	mov    0xc(%ebp),%esi
   while(n-- > 0)
-    3e70:	85 db                	test   %ebx,%ebx
-    3e72:	7e 12                	jle    3e86 <memmove+0x26>
-    3e74:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    3f40:	85 db                	test   %ebx,%ebx
+    3f42:	7e 12                	jle    3f56 <memmove+0x26>
+    3f44:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     *dst++ = *src++;
-    3e78:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
-    3e7c:	88 0c 10             	mov    %cl,(%eax,%edx,1)
-    3e7f:	83 c2 01             	add    $0x1,%edx
+    3f48:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
+    3f4c:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+    3f4f:	83 c2 01             	add    $0x1,%edx
   while(n-- > 0)
-    3e82:	39 da                	cmp    %ebx,%edx
-    3e84:	75 f2                	jne    3e78 <memmove+0x18>
+    3f52:	39 da                	cmp    %ebx,%edx
+    3f54:	75 f2                	jne    3f48 <memmove+0x18>
   return vdst;
 }
-    3e86:	5b                   	pop    %ebx
-    3e87:	5e                   	pop    %esi
-    3e88:	5d                   	pop    %ebp
-    3e89:	c3                   	ret    
-
-00003e8a <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
+    3f56:	5b                   	pop    %ebx
+    3f57:	5e                   	pop    %esi
+    3f58:	5d                   	pop    %ebp
+    3f59:	c3                   	ret    
 
-SYSCALL(fork)
-    3e8a:	b8 01 00 00 00       	mov    $0x1,%eax
-    3e8f:	cd 40                	int    $0x40
-    3e91:	c3                   	ret    
+00003f5a <fork>:
+    3f5a:	b8 01 00 00 00       	mov    $0x1,%eax
+    3f5f:	cd 40                	int    $0x40
+    3f61:	c3                   	ret    
 
-00003e92 <exit>:
-SYSCALL(exit)
-    3e92:	b8 02 00 00 00       	mov    $0x2,%eax
-    3e97:	cd 40                	int    $0x40
-    3e99:	c3                   	ret    
+00003f62 <exit>:
+    3f62:	b8 02 00 00 00       	mov    $0x2,%eax
+    3f67:	cd 40                	int    $0x40
+    3f69:	c3                   	ret    
 
-00003e9a <wait>:
-SYSCALL(wait)
-    3e9a:	b8 03 00 00 00       	mov    $0x3,%eax
-    3e9f:	cd 40                	int    $0x40
-    3ea1:	c3                   	ret    
+00003f6a <wait>:
+    3f6a:	b8 03 00 00 00       	mov    $0x3,%eax
+    3f6f:	cd 40                	int    $0x40
+    3f71:	c3                   	ret    
 
-00003ea2 <pipe>:
-SYSCALL(pipe)
-    3ea2:	b8 04 00 00 00       	mov    $0x4,%eax
-    3ea7:	cd 40                	int    $0x40
-    3ea9:	c3                   	ret    
+00003f72 <pipe>:
+    3f72:	b8 04 00 00 00       	mov    $0x4,%eax
+    3f77:	cd 40                	int    $0x40
+    3f79:	c3                   	ret    
 
-00003eaa <read>:
-SYSCALL(read)
-    3eaa:	b8 05 00 00 00       	mov    $0x5,%eax
-    3eaf:	cd 40                	int    $0x40
-    3eb1:	c3                   	ret    
+00003f7a <read>:
+    3f7a:	b8 05 00 00 00       	mov    $0x5,%eax
+    3f7f:	cd 40                	int    $0x40
+    3f81:	c3                   	ret    
 
-00003eb2 <write>:
-SYSCALL(write)
-    3eb2:	b8 10 00 00 00       	mov    $0x10,%eax
-    3eb7:	cd 40                	int    $0x40
-    3eb9:	c3                   	ret    
+00003f82 <write>:
+    3f82:	b8 10 00 00 00       	mov    $0x10,%eax
+    3f87:	cd 40                	int    $0x40
+    3f89:	c3                   	ret    
 
-00003eba <close>:
-SYSCALL(close)
-    3eba:	b8 15 00 00 00       	mov    $0x15,%eax
-    3ebf:	cd 40                	int    $0x40
-    3ec1:	c3                   	ret    
+00003f8a <close>:
+    3f8a:	b8 15 00 00 00       	mov    $0x15,%eax
+    3f8f:	cd 40                	int    $0x40
+    3f91:	c3                   	ret    
 
-00003ec2 <kill>:
-SYSCALL(kill)
-    3ec2:	b8 06 00 00 00       	mov    $0x6,%eax
-    3ec7:	cd 40                	int    $0x40
-    3ec9:	c3                   	ret    
+00003f92 <kill>:
+    3f92:	b8 06 00 00 00       	mov    $0x6,%eax
+    3f97:	cd 40                	int    $0x40
+    3f99:	c3                   	ret    
 
-00003eca <exec>:
-SYSCALL(exec)
-    3eca:	b8 07 00 00 00       	mov    $0x7,%eax
-    3ecf:	cd 40                	int    $0x40
-    3ed1:	c3                   	ret    
+00003f9a <exec>:
+    3f9a:	b8 07 00 00 00       	mov    $0x7,%eax
+    3f9f:	cd 40                	int    $0x40
+    3fa1:	c3                   	ret    
 
-00003ed2 <open>:
-SYSCALL(open)
-    3ed2:	b8 0f 00 00 00       	mov    $0xf,%eax
-    3ed7:	cd 40                	int    $0x40
-    3ed9:	c3                   	ret    
+00003fa2 <open>:
+    3fa2:	b8 0f 00 00 00       	mov    $0xf,%eax
+    3fa7:	cd 40                	int    $0x40
+    3fa9:	c3                   	ret    
 
-00003eda <mknod>:
-SYSCALL(mknod)
-    3eda:	b8 11 00 00 00       	mov    $0x11,%eax
-    3edf:	cd 40                	int    $0x40
-    3ee1:	c3                   	ret    
+00003faa <mknod>:
+    3faa:	b8 11 00 00 00       	mov    $0x11,%eax
+    3faf:	cd 40                	int    $0x40
+    3fb1:	c3                   	ret    
 
-00003ee2 <unlink>:
-SYSCALL(unlink)
-    3ee2:	b8 12 00 00 00       	mov    $0x12,%eax
-    3ee7:	cd 40                	int    $0x40
-    3ee9:	c3                   	ret    
+00003fb2 <unlink>:
+    3fb2:	b8 12 00 00 00       	mov    $0x12,%eax
+    3fb7:	cd 40                	int    $0x40
+    3fb9:	c3                   	ret    
 
-00003eea <fstat>:
-SYSCALL(fstat)
-    3eea:	b8 08 00 00 00       	mov    $0x8,%eax
-    3eef:	cd 40                	int    $0x40
-    3ef1:	c3                   	ret    
+00003fba <fstat>:
+    3fba:	b8 08 00 00 00       	mov    $0x8,%eax
+    3fbf:	cd 40                	int    $0x40
+    3fc1:	c3                   	ret    
 
-00003ef2 <link>:
-SYSCALL(link)
-    3ef2:	b8 13 00 00 00       	mov    $0x13,%eax
-    3ef7:	cd 40                	int    $0x40
-    3ef9:	c3                   	ret    
+00003fc2 <link>:
+    3fc2:	b8 13 00 00 00       	mov    $0x13,%eax
+    3fc7:	cd 40                	int    $0x40
+    3fc9:	c3                   	ret    
 
-00003efa <mkdir>:
-SYSCALL(mkdir)
-    3efa:	b8 14 00 00 00       	mov    $0x14,%eax
-    3eff:	cd 40                	int    $0x40
-    3f01:	c3                   	ret    
+00003fca <mkdir>:
+    3fca:	b8 14 00 00 00       	mov    $0x14,%eax
+    3fcf:	cd 40                	int    $0x40
+    3fd1:	c3                   	ret    
 
-00003f02 <chdir>:
-SYSCALL(chdir)
-    3f02:	b8 09 00 00 00       	mov    $0x9,%eax
-    3f07:	cd 40                	int    $0x40
-    3f09:	c3                   	ret    
+00003fd2 <chdir>:
+    3fd2:	b8 09 00 00 00       	mov    $0x9,%eax
+    3fd7:	cd 40                	int    $0x40
+    3fd9:	c3                   	ret    
 
-00003f0a <dup>:
-SYSCALL(dup)
-    3f0a:	b8 0a 00 00 00       	mov    $0xa,%eax
-    3f0f:	cd 40                	int    $0x40
-    3f11:	c3                   	ret    
+00003fda <dup>:
+    3fda:	b8 0a 00 00 00       	mov    $0xa,%eax
+    3fdf:	cd 40                	int    $0x40
+    3fe1:	c3                   	ret    
 
-00003f12 <getpid>:
-SYSCALL(getpid)
-    3f12:	b8 0b 00 00 00       	mov    $0xb,%eax
-    3f17:	cd 40                	int    $0x40
-    3f19:	c3                   	ret    
+00003fe2 <getpid>:
+    3fe2:	b8 0b 00 00 00       	mov    $0xb,%eax
+    3fe7:	cd 40                	int    $0x40
+    3fe9:	c3                   	ret    
 
-00003f1a <sbrk>:
-SYSCALL(sbrk)
-    3f1a:	b8 0c 00 00 00       	mov    $0xc,%eax
-    3f1f:	cd 40                	int    $0x40
-    3f21:	c3                   	ret    
+00003fea <sbrk>:
+    3fea:	b8 0c 00 00 00       	mov    $0xc,%eax
+    3fef:	cd 40                	int    $0x40
+    3ff1:	c3                   	ret    
 
-00003f22 <sleep>:
-SYSCALL(sleep)
-    3f22:	b8 0d 00 00 00       	mov    $0xd,%eax
-    3f27:	cd 40                	int    $0x40
-    3f29:	c3                   	ret    
+00003ff2 <sleep>:
+    3ff2:	b8 0d 00 00 00       	mov    $0xd,%eax
+    3ff7:	cd 40                	int    $0x40
+    3ff9:	c3                   	ret    
 
-00003f2a <uptime>:
-SYSCALL(uptime)
-    3f2a:	b8 0e 00 00 00       	mov    $0xe,%eax
-    3f2f:	cd 40                	int    $0x40
-    3f31:	c3                   	ret    
-    3f32:	66 90                	xchg   %ax,%ax
-    3f34:	66 90                	xchg   %ax,%ax
-    3f36:	66 90                	xchg   %ax,%ax
-    3f38:	66 90                	xchg   %ax,%ax
-    3f3a:	66 90                	xchg   %ax,%ax
-    3f3c:	66 90                	xchg   %ax,%ax
-    3f3e:	66 90                	xchg   %ax,%ax
+00003ffa <uptime>:
+    3ffa:	b8 0e 00 00 00       	mov    $0xe,%eax
+    3fff:	cd 40                	int    $0x40
+    4001:	c3                   	ret    
+    4002:	66 90                	xchg   %ax,%ax
+    4004:	66 90                	xchg   %ax,%ax
+    4006:	66 90                	xchg   %ax,%ax
+    4008:	66 90                	xchg   %ax,%ax
+    400a:	66 90                	xchg   %ax,%ax
+    400c:	66 90                	xchg   %ax,%ax
+    400e:	66 90                	xchg   %ax,%ax
 
-00003f40 <printint>:
+00004010 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
-    3f40:	55                   	push   %ebp
-    3f41:	89 e5                	mov    %esp,%ebp
-    3f43:	57                   	push   %edi
-    3f44:	56                   	push   %esi
-    3f45:	89 c6                	mov    %eax,%esi
-    3f47:	53                   	push   %ebx
-    3f48:	83 ec 4c             	sub    $0x4c,%esp
+    4010:	55                   	push   %ebp
+    4011:	89 e5                	mov    %esp,%ebp
+    4013:	57                   	push   %edi
+    4014:	56                   	push   %esi
+    4015:	89 c6                	mov    %eax,%esi
+    4017:	53                   	push   %ebx
+    4018:	83 ec 4c             	sub    $0x4c,%esp
   char buf[16];
   int i, neg;
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
-    3f4b:	8b 5d 08             	mov    0x8(%ebp),%ebx
-    3f4e:	85 db                	test   %ebx,%ebx
-    3f50:	74 09                	je     3f5b <printint+0x1b>
-    3f52:	89 d0                	mov    %edx,%eax
-    3f54:	c1 e8 1f             	shr    $0x1f,%eax
-    3f57:	84 c0                	test   %al,%al
-    3f59:	75 75                	jne    3fd0 <printint+0x90>
+    401b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+    401e:	85 db                	test   %ebx,%ebx
+    4020:	74 09                	je     402b <printint+0x1b>
+    4022:	89 d0                	mov    %edx,%eax
+    4024:	c1 e8 1f             	shr    $0x1f,%eax
+    4027:	84 c0                	test   %al,%al
+    4029:	75 75                	jne    40a0 <printint+0x90>
     neg = 1;
     x = -xx;
   } else {
     x = xx;
-    3f5b:	89 d0                	mov    %edx,%eax
+    402b:	89 d0                	mov    %edx,%eax
   neg = 0;
-    3f5d:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
-    3f64:	89 75 c0             	mov    %esi,-0x40(%ebp)
+    402d:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+    4034:	89 75 c0             	mov    %esi,-0x40(%ebp)
   }
 
   i = 0;
-    3f67:	31 ff                	xor    %edi,%edi
-    3f69:	89 ce                	mov    %ecx,%esi
-    3f6b:	8d 5d d7             	lea    -0x29(%ebp),%ebx
-    3f6e:	eb 02                	jmp    3f72 <printint+0x32>
+    4037:	31 ff                	xor    %edi,%edi
+    4039:	89 ce                	mov    %ecx,%esi
+    403b:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+    403e:	eb 02                	jmp    4042 <printint+0x32>
   do{
     buf[i++] = digits[x % base];
-    3f70:	89 cf                	mov    %ecx,%edi
-    3f72:	31 d2                	xor    %edx,%edx
-    3f74:	f7 f6                	div    %esi
-    3f76:	8d 4f 01             	lea    0x1(%edi),%ecx
-    3f79:	0f b6 92 e7 5a 00 00 	movzbl 0x5ae7(%edx),%edx
+    4040:	89 cf                	mov    %ecx,%edi
+    4042:	31 d2                	xor    %edx,%edx
+    4044:	f7 f6                	div    %esi
+    4046:	8d 4f 01             	lea    0x1(%edi),%ecx
+    4049:	0f b6 92 b7 5b 00 00 	movzbl 0x5bb7(%edx),%edx
   }while((x /= base) != 0);
-    3f80:	85 c0                	test   %eax,%eax
+    4050:	85 c0                	test   %eax,%eax
     buf[i++] = digits[x % base];
-    3f82:	88 14 0b             	mov    %dl,(%ebx,%ecx,1)
+    4052:	88 14 0b             	mov    %dl,(%ebx,%ecx,1)
   }while((x /= base) != 0);
-    3f85:	75 e9                	jne    3f70 <printint+0x30>
+    4055:	75 e9                	jne    4040 <printint+0x30>
   if(neg)
-    3f87:	8b 55 c4             	mov    -0x3c(%ebp),%edx
+    4057:	8b 55 c4             	mov    -0x3c(%ebp),%edx
     buf[i++] = digits[x % base];
-    3f8a:	89 c8                	mov    %ecx,%eax
-    3f8c:	8b 75 c0             	mov    -0x40(%ebp),%esi
+    405a:	89 c8                	mov    %ecx,%eax
+    405c:	8b 75 c0             	mov    -0x40(%ebp),%esi
   if(neg)
-    3f8f:	85 d2                	test   %edx,%edx
-    3f91:	74 08                	je     3f9b <printint+0x5b>
+    405f:	85 d2                	test   %edx,%edx
+    4061:	74 08                	je     406b <printint+0x5b>
     buf[i++] = '-';
-    3f93:	8d 4f 02             	lea    0x2(%edi),%ecx
-    3f96:	c6 44 05 d8 2d       	movb   $0x2d,-0x28(%ebp,%eax,1)
+    4063:	8d 4f 02             	lea    0x2(%edi),%ecx
+    4066:	c6 44 05 d8 2d       	movb   $0x2d,-0x28(%ebp,%eax,1)
 
   while(--i >= 0)
-    3f9b:	8d 79 ff             	lea    -0x1(%ecx),%edi
-    3f9e:	66 90                	xchg   %ax,%ax
-    3fa0:	0f b6 44 3d d8       	movzbl -0x28(%ebp,%edi,1),%eax
-    3fa5:	83 ef 01             	sub    $0x1,%edi
+    406b:	8d 79 ff             	lea    -0x1(%ecx),%edi
+    406e:	66 90                	xchg   %ax,%ax
+    4070:	0f b6 44 3d d8       	movzbl -0x28(%ebp,%edi,1),%eax
+    4075:	83 ef 01             	sub    $0x1,%edi
   write(fd, &c, 1);
-    3fa8:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
-    3faf:	00 
-    3fb0:	89 5c 24 04          	mov    %ebx,0x4(%esp)
-    3fb4:	89 34 24             	mov    %esi,(%esp)
-    3fb7:	88 45 d7             	mov    %al,-0x29(%ebp)
-    3fba:	e8 f3 fe ff ff       	call   3eb2 <write>
+    4078:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+    407f:	00 
+    4080:	89 5c 24 04          	mov    %ebx,0x4(%esp)
+    4084:	89 34 24             	mov    %esi,(%esp)
+    4087:	88 45 d7             	mov    %al,-0x29(%ebp)
+    408a:	e8 f3 fe ff ff       	call   3f82 <write>
   while(--i >= 0)
-    3fbf:	83 ff ff             	cmp    $0xffffffff,%edi
-    3fc2:	75 dc                	jne    3fa0 <printint+0x60>
+    408f:	83 ff ff             	cmp    $0xffffffff,%edi
+    4092:	75 dc                	jne    4070 <printint+0x60>
     putc(fd, buf[i]);
 }
-    3fc4:	83 c4 4c             	add    $0x4c,%esp
-    3fc7:	5b                   	pop    %ebx
-    3fc8:	5e                   	pop    %esi
-    3fc9:	5f                   	pop    %edi
-    3fca:	5d                   	pop    %ebp
-    3fcb:	c3                   	ret    
-    3fcc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    4094:	83 c4 4c             	add    $0x4c,%esp
+    4097:	5b                   	pop    %ebx
+    4098:	5e                   	pop    %esi
+    4099:	5f                   	pop    %edi
+    409a:	5d                   	pop    %ebp
+    409b:	c3                   	ret    
+    409c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     x = -xx;
-    3fd0:	89 d0                	mov    %edx,%eax
-    3fd2:	f7 d8                	neg    %eax
+    40a0:	89 d0                	mov    %edx,%eax
+    40a2:	f7 d8                	neg    %eax
     neg = 1;
-    3fd4:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
-    3fdb:	eb 87                	jmp    3f64 <printint+0x24>
-    3fdd:	8d 76 00             	lea    0x0(%esi),%esi
+    40a4:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+    40ab:	eb 87                	jmp    4034 <printint+0x24>
+    40ad:	8d 76 00             	lea    0x0(%esi),%esi
 
-00003fe0 <printf>:
+000040b0 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
-    3fe0:	55                   	push   %ebp
-    3fe1:	89 e5                	mov    %esp,%ebp
-    3fe3:	57                   	push   %edi
+    40b0:	55                   	push   %ebp
+    40b1:	89 e5                	mov    %esp,%ebp
+    40b3:	57                   	push   %edi
   char *s;
   int c, i, state;
   uint *ap;
 
   state = 0;
-    3fe4:	31 ff                	xor    %edi,%edi
+    40b4:	31 ff                	xor    %edi,%edi
 {
-    3fe6:	56                   	push   %esi
-    3fe7:	53                   	push   %ebx
-    3fe8:	83 ec 3c             	sub    $0x3c,%esp
+    40b6:	56                   	push   %esi
+    40b7:	53                   	push   %ebx
+    40b8:	83 ec 3c             	sub    $0x3c,%esp
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
-    3feb:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+    40bb:	8b 5d 0c             	mov    0xc(%ebp),%ebx
   ap = (uint*)(void*)&fmt + 1;
-    3fee:	8d 45 10             	lea    0x10(%ebp),%eax
+    40be:	8d 45 10             	lea    0x10(%ebp),%eax
 {
-    3ff1:	8b 75 08             	mov    0x8(%ebp),%esi
+    40c1:	8b 75 08             	mov    0x8(%ebp),%esi
   ap = (uint*)(void*)&fmt + 1;
-    3ff4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    40c4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
   for(i = 0; fmt[i]; i++){
-    3ff7:	0f b6 13             	movzbl (%ebx),%edx
-    3ffa:	83 c3 01             	add    $0x1,%ebx
-    3ffd:	84 d2                	test   %dl,%dl
-    3fff:	75 39                	jne    403a <printf+0x5a>
-    4001:	e9 c2 00 00 00       	jmp    40c8 <printf+0xe8>
-    4006:	66 90                	xchg   %ax,%ax
+    40c7:	0f b6 13             	movzbl (%ebx),%edx
+    40ca:	83 c3 01             	add    $0x1,%ebx
+    40cd:	84 d2                	test   %dl,%dl
+    40cf:	75 39                	jne    410a <printf+0x5a>
+    40d1:	e9 c2 00 00 00       	jmp    4198 <printf+0xe8>
+    40d6:	66 90                	xchg   %ax,%ax
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
-    4008:	83 fa 25             	cmp    $0x25,%edx
-    400b:	0f 84 bf 00 00 00    	je     40d0 <printf+0xf0>
+    40d8:	83 fa 25             	cmp    $0x25,%edx
+    40db:	0f 84 bf 00 00 00    	je     41a0 <printf+0xf0>
   write(fd, &c, 1);
-    4011:	8d 45 e2             	lea    -0x1e(%ebp),%eax
-    4014:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
-    401b:	00 
-    401c:	89 44 24 04          	mov    %eax,0x4(%esp)
-    4020:	89 34 24             	mov    %esi,(%esp)
+    40e1:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+    40e4:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+    40eb:	00 
+    40ec:	89 44 24 04          	mov    %eax,0x4(%esp)
+    40f0:	89 34 24             	mov    %esi,(%esp)
         state = '%';
       } else {
         putc(fd, c);
-    4023:	88 55 e2             	mov    %dl,-0x1e(%ebp)
+    40f3:	88 55 e2             	mov    %dl,-0x1e(%ebp)
   write(fd, &c, 1);
-    4026:	e8 87 fe ff ff       	call   3eb2 <write>
-    402b:	83 c3 01             	add    $0x1,%ebx
+    40f6:	e8 87 fe ff ff       	call   3f82 <write>
+    40fb:	83 c3 01             	add    $0x1,%ebx
   for(i = 0; fmt[i]; i++){
-    402e:	0f b6 53 ff          	movzbl -0x1(%ebx),%edx
-    4032:	84 d2                	test   %dl,%dl
-    4034:	0f 84 8e 00 00 00    	je     40c8 <printf+0xe8>
+    40fe:	0f b6 53 ff          	movzbl -0x1(%ebx),%edx
+    4102:	84 d2                	test   %dl,%dl
+    4104:	0f 84 8e 00 00 00    	je     4198 <printf+0xe8>
     if(state == 0){
-    403a:	85 ff                	test   %edi,%edi
+    410a:	85 ff                	test   %edi,%edi
     c = fmt[i] & 0xff;
-    403c:	0f be c2             	movsbl %dl,%eax
+    410c:	0f be c2             	movsbl %dl,%eax
     if(state == 0){
-    403f:	74 c7                	je     4008 <printf+0x28>
+    410f:	74 c7                	je     40d8 <printf+0x28>
       }
     } else if(state == '%'){
-    4041:	83 ff 25             	cmp    $0x25,%edi
-    4044:	75 e5                	jne    402b <printf+0x4b>
+    4111:	83 ff 25             	cmp    $0x25,%edi
+    4114:	75 e5                	jne    40fb <printf+0x4b>
       if(c == 'd'){
-    4046:	83 fa 64             	cmp    $0x64,%edx
-    4049:	0f 84 31 01 00 00    	je     4180 <printf+0x1a0>
+    4116:	83 fa 64             	cmp    $0x64,%edx
+    4119:	0f 84 31 01 00 00    	je     4250 <printf+0x1a0>
         printint(fd, *ap, 10, 1);
         ap++;
       } else if(c == 'x' || c == 'p'){
-    404f:	25 f7 00 00 00       	and    $0xf7,%eax
-    4054:	83 f8 70             	cmp    $0x70,%eax
-    4057:	0f 84 83 00 00 00    	je     40e0 <printf+0x100>
+    411f:	25 f7 00 00 00       	and    $0xf7,%eax
+    4124:	83 f8 70             	cmp    $0x70,%eax
+    4127:	0f 84 83 00 00 00    	je     41b0 <printf+0x100>
         printint(fd, *ap, 16, 0);
         ap++;
       } else if(c == 's'){
-    405d:	83 fa 73             	cmp    $0x73,%edx
-    4060:	0f 84 a2 00 00 00    	je     4108 <printf+0x128>
+    412d:	83 fa 73             	cmp    $0x73,%edx
+    4130:	0f 84 a2 00 00 00    	je     41d8 <printf+0x128>
           s = "(null)";
         while(*s != 0){
           putc(fd, *s);
           s++;
         }
       } else if(c == 'c'){
-    4066:	83 fa 63             	cmp    $0x63,%edx
-    4069:	0f 84 35 01 00 00    	je     41a4 <printf+0x1c4>
+    4136:	83 fa 63             	cmp    $0x63,%edx
+    4139:	0f 84 35 01 00 00    	je     4274 <printf+0x1c4>
         putc(fd, *ap);
         ap++;
       } else if(c == '%'){
-    406f:	83 fa 25             	cmp    $0x25,%edx
-    4072:	0f 84 e0 00 00 00    	je     4158 <printf+0x178>
+    413f:	83 fa 25             	cmp    $0x25,%edx
+    4142:	0f 84 e0 00 00 00    	je     4228 <printf+0x178>
   write(fd, &c, 1);
-    4078:	8d 45 e6             	lea    -0x1a(%ebp),%eax
-    407b:	83 c3 01             	add    $0x1,%ebx
-    407e:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
-    4085:	00 
+    4148:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+    414b:	83 c3 01             	add    $0x1,%ebx
+    414e:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+    4155:	00 
       } else {
         // Unknown % sequence.  Print it to draw attention.
         putc(fd, '%');
         putc(fd, c);
       }
       state = 0;
-    4086:	31 ff                	xor    %edi,%edi
+    4156:	31 ff                	xor    %edi,%edi
   write(fd, &c, 1);
-    4088:	89 44 24 04          	mov    %eax,0x4(%esp)
-    408c:	89 34 24             	mov    %esi,(%esp)
-    408f:	89 55 d0             	mov    %edx,-0x30(%ebp)
-    4092:	c6 45 e6 25          	movb   $0x25,-0x1a(%ebp)
-    4096:	e8 17 fe ff ff       	call   3eb2 <write>
+    4158:	89 44 24 04          	mov    %eax,0x4(%esp)
+    415c:	89 34 24             	mov    %esi,(%esp)
+    415f:	89 55 d0             	mov    %edx,-0x30(%ebp)
+    4162:	c6 45 e6 25          	movb   $0x25,-0x1a(%ebp)
+    4166:	e8 17 fe ff ff       	call   3f82 <write>
         putc(fd, c);
-    409b:	8b 55 d0             	mov    -0x30(%ebp),%edx
+    416b:	8b 55 d0             	mov    -0x30(%ebp),%edx
   write(fd, &c, 1);
-    409e:	8d 45 e7             	lea    -0x19(%ebp),%eax
-    40a1:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
-    40a8:	00 
-    40a9:	89 44 24 04          	mov    %eax,0x4(%esp)
-    40ad:	89 34 24             	mov    %esi,(%esp)
+    416e:	8d 45 e7             	lea    -0x19(%ebp),%eax
+    4171:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+    4178:	00 
+    4179:	89 44 24 04          	mov    %eax,0x4(%esp)
+    417d:	89 34 24             	mov    %esi,(%esp)
         putc(fd, c);
-    40b0:	88 55 e7             	mov    %dl,-0x19(%ebp)
+    4180:	88 55 e7             	mov    %dl,-0x19(%ebp)
   write(fd, &c, 1);
-    40b3:	e8 fa fd ff ff       	call   3eb2 <write>
+    4183:	e8 fa fd ff ff       	call   3f82 <write>
   for(i = 0; fmt[i]; i++){
-    40b8:	0f b6 53 ff          	movzbl -0x1(%ebx),%edx
-    40bc:	84 d2                	test   %dl,%dl
-    40be:	0f 85 76 ff ff ff    	jne    403a <printf+0x5a>
-    40c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    4188:	0f b6 53 ff          	movzbl -0x1(%ebx),%edx
+    418c:	84 d2                	test   %dl,%dl
+    418e:	0f 85 76 ff ff ff    	jne    410a <printf+0x5a>
+    4194:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     }
   }
 }
-    40c8:	83 c4 3c             	add    $0x3c,%esp
-    40cb:	5b                   	pop    %ebx
-    40cc:	5e                   	pop    %esi
-    40cd:	5f                   	pop    %edi
-    40ce:	5d                   	pop    %ebp
-    40cf:	c3                   	ret    
+    4198:	83 c4 3c             	add    $0x3c,%esp
+    419b:	5b                   	pop    %ebx
+    419c:	5e                   	pop    %esi
+    419d:	5f                   	pop    %edi
+    419e:	5d                   	pop    %ebp
+    419f:	c3                   	ret    
         state = '%';
-    40d0:	bf 25 00 00 00       	mov    $0x25,%edi
-    40d5:	e9 51 ff ff ff       	jmp    402b <printf+0x4b>
-    40da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    41a0:	bf 25 00 00 00       	mov    $0x25,%edi
+    41a5:	e9 51 ff ff ff       	jmp    40fb <printf+0x4b>
+    41aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         printint(fd, *ap, 16, 0);
-    40e0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
-    40e3:	b9 10 00 00 00       	mov    $0x10,%ecx
+    41b0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+    41b3:	b9 10 00 00 00       	mov    $0x10,%ecx
       state = 0;
-    40e8:	31 ff                	xor    %edi,%edi
+    41b8:	31 ff                	xor    %edi,%edi
         printint(fd, *ap, 16, 0);
-    40ea:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    40f1:	8b 10                	mov    (%eax),%edx
-    40f3:	89 f0                	mov    %esi,%eax
-    40f5:	e8 46 fe ff ff       	call   3f40 <printint>
+    41ba:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    41c1:	8b 10                	mov    (%eax),%edx
+    41c3:	89 f0                	mov    %esi,%eax
+    41c5:	e8 46 fe ff ff       	call   4010 <printint>
         ap++;
-    40fa:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
-    40fe:	e9 28 ff ff ff       	jmp    402b <printf+0x4b>
-    4103:	90                   	nop
-    4104:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    41ca:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
+    41ce:	e9 28 ff ff ff       	jmp    40fb <printf+0x4b>
+    41d3:	90                   	nop
+    41d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         s = (char*)*ap;
-    4108:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+    41d8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
         ap++;
-    410b:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
+    41db:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
         s = (char*)*ap;
-    410f:	8b 38                	mov    (%eax),%edi
+    41df:	8b 38                	mov    (%eax),%edi
           s = "(null)";
-    4111:	b8 e0 5a 00 00       	mov    $0x5ae0,%eax
-    4116:	85 ff                	test   %edi,%edi
-    4118:	0f 44 f8             	cmove  %eax,%edi
+    41e1:	b8 b0 5b 00 00       	mov    $0x5bb0,%eax
+    41e6:	85 ff                	test   %edi,%edi
+    41e8:	0f 44 f8             	cmove  %eax,%edi
         while(*s != 0){
-    411b:	0f b6 07             	movzbl (%edi),%eax
-    411e:	84 c0                	test   %al,%al
-    4120:	74 2a                	je     414c <printf+0x16c>
-    4122:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    4128:	88 45 e3             	mov    %al,-0x1d(%ebp)
+    41eb:	0f b6 07             	movzbl (%edi),%eax
+    41ee:	84 c0                	test   %al,%al
+    41f0:	74 2a                	je     421c <printf+0x16c>
+    41f2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    41f8:	88 45 e3             	mov    %al,-0x1d(%ebp)
   write(fd, &c, 1);
-    412b:	8d 45 e3             	lea    -0x1d(%ebp),%eax
+    41fb:	8d 45 e3             	lea    -0x1d(%ebp),%eax
           s++;
-    412e:	83 c7 01             	add    $0x1,%edi
+    41fe:	83 c7 01             	add    $0x1,%edi
   write(fd, &c, 1);
-    4131:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
-    4138:	00 
-    4139:	89 44 24 04          	mov    %eax,0x4(%esp)
-    413d:	89 34 24             	mov    %esi,(%esp)
-    4140:	e8 6d fd ff ff       	call   3eb2 <write>
+    4201:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+    4208:	00 
+    4209:	89 44 24 04          	mov    %eax,0x4(%esp)
+    420d:	89 34 24             	mov    %esi,(%esp)
+    4210:	e8 6d fd ff ff       	call   3f82 <write>
         while(*s != 0){
-    4145:	0f b6 07             	movzbl (%edi),%eax
-    4148:	84 c0                	test   %al,%al
-    414a:	75 dc                	jne    4128 <printf+0x148>
+    4215:	0f b6 07             	movzbl (%edi),%eax
+    4218:	84 c0                	test   %al,%al
+    421a:	75 dc                	jne    41f8 <printf+0x148>
       state = 0;
-    414c:	31 ff                	xor    %edi,%edi
-    414e:	e9 d8 fe ff ff       	jmp    402b <printf+0x4b>
-    4153:	90                   	nop
-    4154:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    421c:	31 ff                	xor    %edi,%edi
+    421e:	e9 d8 fe ff ff       	jmp    40fb <printf+0x4b>
+    4223:	90                   	nop
+    4224:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   write(fd, &c, 1);
-    4158:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+    4228:	8d 45 e5             	lea    -0x1b(%ebp),%eax
       state = 0;
-    415b:	31 ff                	xor    %edi,%edi
+    422b:	31 ff                	xor    %edi,%edi
   write(fd, &c, 1);
-    415d:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
-    4164:	00 
-    4165:	89 44 24 04          	mov    %eax,0x4(%esp)
-    4169:	89 34 24             	mov    %esi,(%esp)
-    416c:	c6 45 e5 25          	movb   $0x25,-0x1b(%ebp)
-    4170:	e8 3d fd ff ff       	call   3eb2 <write>
-    4175:	e9 b1 fe ff ff       	jmp    402b <printf+0x4b>
-    417a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    422d:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+    4234:	00 
+    4235:	89 44 24 04          	mov    %eax,0x4(%esp)
+    4239:	89 34 24             	mov    %esi,(%esp)
+    423c:	c6 45 e5 25          	movb   $0x25,-0x1b(%ebp)
+    4240:	e8 3d fd ff ff       	call   3f82 <write>
+    4245:	e9 b1 fe ff ff       	jmp    40fb <printf+0x4b>
+    424a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         printint(fd, *ap, 10, 1);
-    4180:	8b 45 d4             	mov    -0x2c(%ebp),%eax
-    4183:	b9 0a 00 00 00       	mov    $0xa,%ecx
+    4250:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+    4253:	b9 0a 00 00 00       	mov    $0xa,%ecx
       state = 0;
-    4188:	66 31 ff             	xor    %di,%di
+    4258:	66 31 ff             	xor    %di,%di
         printint(fd, *ap, 10, 1);
-    418b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    4192:	8b 10                	mov    (%eax),%edx
-    4194:	89 f0                	mov    %esi,%eax
-    4196:	e8 a5 fd ff ff       	call   3f40 <printint>
+    425b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    4262:	8b 10                	mov    (%eax),%edx
+    4264:	89 f0                	mov    %esi,%eax
+    4266:	e8 a5 fd ff ff       	call   4010 <printint>
         ap++;
-    419b:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
-    419f:	e9 87 fe ff ff       	jmp    402b <printf+0x4b>
+    426b:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
+    426f:	e9 87 fe ff ff       	jmp    40fb <printf+0x4b>
         putc(fd, *ap);
-    41a4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+    4274:	8b 45 d4             	mov    -0x2c(%ebp),%eax
       state = 0;
-    41a7:	31 ff                	xor    %edi,%edi
+    4277:	31 ff                	xor    %edi,%edi
         putc(fd, *ap);
-    41a9:	8b 00                	mov    (%eax),%eax
+    4279:	8b 00                	mov    (%eax),%eax
   write(fd, &c, 1);
-    41ab:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
-    41b2:	00 
-    41b3:	89 34 24             	mov    %esi,(%esp)
+    427b:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+    4282:	00 
+    4283:	89 34 24             	mov    %esi,(%esp)
         putc(fd, *ap);
-    41b6:	88 45 e4             	mov    %al,-0x1c(%ebp)
+    4286:	88 45 e4             	mov    %al,-0x1c(%ebp)
   write(fd, &c, 1);
-    41b9:	8d 45 e4             	lea    -0x1c(%ebp),%eax
-    41bc:	89 44 24 04          	mov    %eax,0x4(%esp)
-    41c0:	e8 ed fc ff ff       	call   3eb2 <write>
+    4289:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+    428c:	89 44 24 04          	mov    %eax,0x4(%esp)
+    4290:	e8 ed fc ff ff       	call   3f82 <write>
         ap++;
-    41c5:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
-    41c9:	e9 5d fe ff ff       	jmp    402b <printf+0x4b>
-    41ce:	66 90                	xchg   %ax,%ax
+    4295:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
+    4299:	e9 5d fe ff ff       	jmp    40fb <printf+0x4b>
+    429e:	66 90                	xchg   %ax,%ax
 
-000041d0 <free>:
+000042a0 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
-    41d0:	55                   	push   %ebp
+    42a0:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
-    41d1:	a1 60 64 00 00       	mov    0x6460,%eax
+    42a1:	a1 40 65 00 00       	mov    0x6540,%eax
 {
-    41d6:	89 e5                	mov    %esp,%ebp
-    41d8:	57                   	push   %edi
-    41d9:	56                   	push   %esi
-    41da:	53                   	push   %ebx
-    41db:	8b 5d 08             	mov    0x8(%ebp),%ebx
+    42a6:	89 e5                	mov    %esp,%ebp
+    42a8:	57                   	push   %edi
+    42a9:	56                   	push   %esi
+    42aa:	53                   	push   %ebx
+    42ab:	8b 5d 08             	mov    0x8(%ebp),%ebx
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
-    41de:	8b 08                	mov    (%eax),%ecx
+    42ae:	8b 08                	mov    (%eax),%ecx
   bp = (Header*)ap - 1;
-    41e0:	8d 53 f8             	lea    -0x8(%ebx),%edx
+    42b0:	8d 53 f8             	lea    -0x8(%ebx),%edx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
-    41e3:	39 d0                	cmp    %edx,%eax
-    41e5:	72 11                	jb     41f8 <free+0x28>
-    41e7:	90                   	nop
+    42b3:	39 d0                	cmp    %edx,%eax
+    42b5:	72 11                	jb     42c8 <free+0x28>
+    42b7:	90                   	nop
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
-    41e8:	39 c8                	cmp    %ecx,%eax
-    41ea:	72 04                	jb     41f0 <free+0x20>
-    41ec:	39 ca                	cmp    %ecx,%edx
-    41ee:	72 10                	jb     4200 <free+0x30>
-    41f0:	89 c8                	mov    %ecx,%eax
+    42b8:	39 c8                	cmp    %ecx,%eax
+    42ba:	72 04                	jb     42c0 <free+0x20>
+    42bc:	39 ca                	cmp    %ecx,%edx
+    42be:	72 10                	jb     42d0 <free+0x30>
+    42c0:	89 c8                	mov    %ecx,%eax
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
-    41f2:	39 d0                	cmp    %edx,%eax
+    42c2:	39 d0                	cmp    %edx,%eax
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
-    41f4:	8b 08                	mov    (%eax),%ecx
+    42c4:	8b 08                	mov    (%eax),%ecx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
-    41f6:	73 f0                	jae    41e8 <free+0x18>
-    41f8:	39 ca                	cmp    %ecx,%edx
-    41fa:	72 04                	jb     4200 <free+0x30>
+    42c6:	73 f0                	jae    42b8 <free+0x18>
+    42c8:	39 ca                	cmp    %ecx,%edx
+    42ca:	72 04                	jb     42d0 <free+0x30>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
-    41fc:	39 c8                	cmp    %ecx,%eax
-    41fe:	72 f0                	jb     41f0 <free+0x20>
+    42cc:	39 c8                	cmp    %ecx,%eax
+    42ce:	72 f0                	jb     42c0 <free+0x20>
       break;
   if(bp + bp->s.size == p->s.ptr){
-    4200:	8b 73 fc             	mov    -0x4(%ebx),%esi
-    4203:	8d 3c f2             	lea    (%edx,%esi,8),%edi
-    4206:	39 cf                	cmp    %ecx,%edi
-    4208:	74 1e                	je     4228 <free+0x58>
+    42d0:	8b 73 fc             	mov    -0x4(%ebx),%esi
+    42d3:	8d 3c f2             	lea    (%edx,%esi,8),%edi
+    42d6:	39 cf                	cmp    %ecx,%edi
+    42d8:	74 1e                	je     42f8 <free+0x58>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
   } else
     bp->s.ptr = p->s.ptr;
-    420a:	89 4b f8             	mov    %ecx,-0x8(%ebx)
+    42da:	89 4b f8             	mov    %ecx,-0x8(%ebx)
   if(p + p->s.size == bp){
-    420d:	8b 48 04             	mov    0x4(%eax),%ecx
-    4210:	8d 34 c8             	lea    (%eax,%ecx,8),%esi
-    4213:	39 f2                	cmp    %esi,%edx
-    4215:	74 28                	je     423f <free+0x6f>
+    42dd:	8b 48 04             	mov    0x4(%eax),%ecx
+    42e0:	8d 34 c8             	lea    (%eax,%ecx,8),%esi
+    42e3:	39 f2                	cmp    %esi,%edx
+    42e5:	74 28                	je     430f <free+0x6f>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
   } else
     p->s.ptr = bp;
-    4217:	89 10                	mov    %edx,(%eax)
+    42e7:	89 10                	mov    %edx,(%eax)
   freep = p;
-    4219:	a3 60 64 00 00       	mov    %eax,0x6460
+    42e9:	a3 40 65 00 00       	mov    %eax,0x6540
 }
-    421e:	5b                   	pop    %ebx
-    421f:	5e                   	pop    %esi
-    4220:	5f                   	pop    %edi
-    4221:	5d                   	pop    %ebp
-    4222:	c3                   	ret    
-    4223:	90                   	nop
-    4224:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    42ee:	5b                   	pop    %ebx
+    42ef:	5e                   	pop    %esi
+    42f0:	5f                   	pop    %edi
+    42f1:	5d                   	pop    %ebp
+    42f2:	c3                   	ret    
+    42f3:	90                   	nop
+    42f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     bp->s.size += p->s.ptr->s.size;
-    4228:	03 71 04             	add    0x4(%ecx),%esi
-    422b:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    42f8:	03 71 04             	add    0x4(%ecx),%esi
+    42fb:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
-    422e:	8b 08                	mov    (%eax),%ecx
-    4230:	8b 09                	mov    (%ecx),%ecx
-    4232:	89 4b f8             	mov    %ecx,-0x8(%ebx)
+    42fe:	8b 08                	mov    (%eax),%ecx
+    4300:	8b 09                	mov    (%ecx),%ecx
+    4302:	89 4b f8             	mov    %ecx,-0x8(%ebx)
   if(p + p->s.size == bp){
-    4235:	8b 48 04             	mov    0x4(%eax),%ecx
-    4238:	8d 34 c8             	lea    (%eax,%ecx,8),%esi
-    423b:	39 f2                	cmp    %esi,%edx
-    423d:	75 d8                	jne    4217 <free+0x47>
+    4305:	8b 48 04             	mov    0x4(%eax),%ecx
+    4308:	8d 34 c8             	lea    (%eax,%ecx,8),%esi
+    430b:	39 f2                	cmp    %esi,%edx
+    430d:	75 d8                	jne    42e7 <free+0x47>
     p->s.size += bp->s.size;
-    423f:	03 4b fc             	add    -0x4(%ebx),%ecx
+    430f:	03 4b fc             	add    -0x4(%ebx),%ecx
   freep = p;
-    4242:	a3 60 64 00 00       	mov    %eax,0x6460
+    4312:	a3 40 65 00 00       	mov    %eax,0x6540
     p->s.size += bp->s.size;
-    4247:	89 48 04             	mov    %ecx,0x4(%eax)
+    4317:	89 48 04             	mov    %ecx,0x4(%eax)
     p->s.ptr = bp->s.ptr;
-    424a:	8b 53 f8             	mov    -0x8(%ebx),%edx
-    424d:	89 10                	mov    %edx,(%eax)
+    431a:	8b 53 f8             	mov    -0x8(%ebx),%edx
+    431d:	89 10                	mov    %edx,(%eax)
 }
-    424f:	5b                   	pop    %ebx
-    4250:	5e                   	pop    %esi
-    4251:	5f                   	pop    %edi
-    4252:	5d                   	pop    %ebp
-    4253:	c3                   	ret    
-    4254:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    425a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+    431f:	5b                   	pop    %ebx
+    4320:	5e                   	pop    %esi
+    4321:	5f                   	pop    %edi
+    4322:	5d                   	pop    %ebp
+    4323:	c3                   	ret    
+    4324:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    432a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
 
-00004260 <malloc>:
+00004330 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
-    4260:	55                   	push   %ebp
-    4261:	89 e5                	mov    %esp,%ebp
-    4263:	57                   	push   %edi
-    4264:	56                   	push   %esi
-    4265:	53                   	push   %ebx
-    4266:	83 ec 1c             	sub    $0x1c,%esp
+    4330:	55                   	push   %ebp
+    4331:	89 e5                	mov    %esp,%ebp
+    4333:	57                   	push   %edi
+    4334:	56                   	push   %esi
+    4335:	53                   	push   %ebx
+    4336:	83 ec 1c             	sub    $0x1c,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
-    4269:	8b 45 08             	mov    0x8(%ebp),%eax
+    4339:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
-    426c:	8b 1d 60 64 00 00    	mov    0x6460,%ebx
+    433c:	8b 1d 40 65 00 00    	mov    0x6540,%ebx
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
-    4272:	8d 48 07             	lea    0x7(%eax),%ecx
-    4275:	c1 e9 03             	shr    $0x3,%ecx
+    4342:	8d 48 07             	lea    0x7(%eax),%ecx
+    4345:	c1 e9 03             	shr    $0x3,%ecx
   if((prevp = freep) == 0){
-    4278:	85 db                	test   %ebx,%ebx
+    4348:	85 db                	test   %ebx,%ebx
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
-    427a:	8d 71 01             	lea    0x1(%ecx),%esi
+    434a:	8d 71 01             	lea    0x1(%ecx),%esi
   if((prevp = freep) == 0){
-    427d:	0f 84 9b 00 00 00    	je     431e <malloc+0xbe>
-    4283:	8b 13                	mov    (%ebx),%edx
-    4285:	8b 7a 04             	mov    0x4(%edx),%edi
+    434d:	0f 84 9b 00 00 00    	je     43ee <malloc+0xbe>
+    4353:	8b 13                	mov    (%ebx),%edx
+    4355:	8b 7a 04             	mov    0x4(%edx),%edi
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
     if(p->s.size >= nunits){
-    4288:	39 fe                	cmp    %edi,%esi
-    428a:	76 64                	jbe    42f0 <malloc+0x90>
-    428c:	8d 04 f5 00 00 00 00 	lea    0x0(,%esi,8),%eax
+    4358:	39 fe                	cmp    %edi,%esi
+    435a:	76 64                	jbe    43c0 <malloc+0x90>
+    435c:	8d 04 f5 00 00 00 00 	lea    0x0(,%esi,8),%eax
   if(nu < 4096)
-    4293:	bb 00 80 00 00       	mov    $0x8000,%ebx
-    4298:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-    429b:	eb 0e                	jmp    42ab <malloc+0x4b>
-    429d:	8d 76 00             	lea    0x0(%esi),%esi
+    4363:	bb 00 80 00 00       	mov    $0x8000,%ebx
+    4368:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    436b:	eb 0e                	jmp    437b <malloc+0x4b>
+    436d:	8d 76 00             	lea    0x0(%esi),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
-    42a0:	8b 02                	mov    (%edx),%eax
+    4370:	8b 02                	mov    (%edx),%eax
     if(p->s.size >= nunits){
-    42a2:	8b 78 04             	mov    0x4(%eax),%edi
-    42a5:	39 fe                	cmp    %edi,%esi
-    42a7:	76 4f                	jbe    42f8 <malloc+0x98>
-    42a9:	89 c2                	mov    %eax,%edx
+    4372:	8b 78 04             	mov    0x4(%eax),%edi
+    4375:	39 fe                	cmp    %edi,%esi
+    4377:	76 4f                	jbe    43c8 <malloc+0x98>
+    4379:	89 c2                	mov    %eax,%edx
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
-    42ab:	3b 15 60 64 00 00    	cmp    0x6460,%edx
-    42b1:	75 ed                	jne    42a0 <malloc+0x40>
+    437b:	3b 15 40 65 00 00    	cmp    0x6540,%edx
+    4381:	75 ed                	jne    4370 <malloc+0x40>
   if(nu < 4096)
-    42b3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-    42b6:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
-    42bc:	bf 00 10 00 00       	mov    $0x1000,%edi
-    42c1:	0f 43 fe             	cmovae %esi,%edi
-    42c4:	0f 42 c3             	cmovb  %ebx,%eax
+    4383:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+    4386:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+    438c:	bf 00 10 00 00       	mov    $0x1000,%edi
+    4391:	0f 43 fe             	cmovae %esi,%edi
+    4394:	0f 42 c3             	cmovb  %ebx,%eax
   p = sbrk(nu * sizeof(Header));
-    42c7:	89 04 24             	mov    %eax,(%esp)
-    42ca:	e8 4b fc ff ff       	call   3f1a <sbrk>
+    4397:	89 04 24             	mov    %eax,(%esp)
+    439a:	e8 4b fc ff ff       	call   3fea <sbrk>
   if(p == (char*)-1)
-    42cf:	83 f8 ff             	cmp    $0xffffffff,%eax
-    42d2:	74 18                	je     42ec <malloc+0x8c>
+    439f:	83 f8 ff             	cmp    $0xffffffff,%eax
+    43a2:	74 18                	je     43bc <malloc+0x8c>
   hp->s.size = nu;
-    42d4:	89 78 04             	mov    %edi,0x4(%eax)
+    43a4:	89 78 04             	mov    %edi,0x4(%eax)
   free((void*)(hp + 1));
-    42d7:	83 c0 08             	add    $0x8,%eax
-    42da:	89 04 24             	mov    %eax,(%esp)
-    42dd:	e8 ee fe ff ff       	call   41d0 <free>
+    43a7:	83 c0 08             	add    $0x8,%eax
+    43aa:	89 04 24             	mov    %eax,(%esp)
+    43ad:	e8 ee fe ff ff       	call   42a0 <free>
   return freep;
-    42e2:	8b 15 60 64 00 00    	mov    0x6460,%edx
+    43b2:	8b 15 40 65 00 00    	mov    0x6540,%edx
       if((p = morecore(nunits)) == 0)
-    42e8:	85 d2                	test   %edx,%edx
-    42ea:	75 b4                	jne    42a0 <malloc+0x40>
+    43b8:	85 d2                	test   %edx,%edx
+    43ba:	75 b4                	jne    4370 <malloc+0x40>
         return 0;
-    42ec:	31 c0                	xor    %eax,%eax
-    42ee:	eb 20                	jmp    4310 <malloc+0xb0>
+    43bc:	31 c0                	xor    %eax,%eax
+    43be:	eb 20                	jmp    43e0 <malloc+0xb0>
     if(p->s.size >= nunits){
-    42f0:	89 d0                	mov    %edx,%eax
-    42f2:	89 da                	mov    %ebx,%edx
-    42f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    43c0:	89 d0                	mov    %edx,%eax
+    43c2:	89 da                	mov    %ebx,%edx
+    43c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
       if(p->s.size == nunits)
-    42f8:	39 fe                	cmp    %edi,%esi
-    42fa:	74 1c                	je     4318 <malloc+0xb8>
+    43c8:	39 fe                	cmp    %edi,%esi
+    43ca:	74 1c                	je     43e8 <malloc+0xb8>
         p->s.size -= nunits;
-    42fc:	29 f7                	sub    %esi,%edi
-    42fe:	89 78 04             	mov    %edi,0x4(%eax)
+    43cc:	29 f7                	sub    %esi,%edi
+    43ce:	89 78 04             	mov    %edi,0x4(%eax)
         p += p->s.size;
-    4301:	8d 04 f8             	lea    (%eax,%edi,8),%eax
+    43d1:	8d 04 f8             	lea    (%eax,%edi,8),%eax
         p->s.size = nunits;
-    4304:	89 70 04             	mov    %esi,0x4(%eax)
+    43d4:	89 70 04             	mov    %esi,0x4(%eax)
       freep = prevp;
-    4307:	89 15 60 64 00 00    	mov    %edx,0x6460
+    43d7:	89 15 40 65 00 00    	mov    %edx,0x6540
       return (void*)(p + 1);
-    430d:	83 c0 08             	add    $0x8,%eax
+    43dd:	83 c0 08             	add    $0x8,%eax
   }
 }
-    4310:	83 c4 1c             	add    $0x1c,%esp
-    4313:	5b                   	pop    %ebx
-    4314:	5e                   	pop    %esi
-    4315:	5f                   	pop    %edi
-    4316:	5d                   	pop    %ebp
-    4317:	c3                   	ret    
+    43e0:	83 c4 1c             	add    $0x1c,%esp
+    43e3:	5b                   	pop    %ebx
+    43e4:	5e                   	pop    %esi
+    43e5:	5f                   	pop    %edi
+    43e6:	5d                   	pop    %ebp
+    43e7:	c3                   	ret    
         prevp->s.ptr = p->s.ptr;
-    4318:	8b 08                	mov    (%eax),%ecx
-    431a:	89 0a                	mov    %ecx,(%edx)
-    431c:	eb e9                	jmp    4307 <malloc+0xa7>
+    43e8:	8b 08                	mov    (%eax),%ecx
+    43ea:	89 0a                	mov    %ecx,(%edx)
+    43ec:	eb e9                	jmp    43d7 <malloc+0xa7>
     base.s.ptr = freep = prevp = &base;
-    431e:	c7 05 60 64 00 00 64 	movl   $0x6464,0x6460
-    4325:	64 00 00 
+    43ee:	c7 05 40 65 00 00 44 	movl   $0x6544,0x6540
+    43f5:	65 00 00 
     base.s.size = 0;
-    4328:	ba 64 64 00 00       	mov    $0x6464,%edx
+    43f8:	ba 44 65 00 00       	mov    $0x6544,%edx
     base.s.ptr = freep = prevp = &base;
-    432d:	c7 05 64 64 00 00 64 	movl   $0x6464,0x6464
-    4334:	64 00 00 
+    43fd:	c7 05 44 65 00 00 44 	movl   $0x6544,0x6544
+    4404:	65 00 00 
     base.s.size = 0;
-    4337:	c7 05 68 64 00 00 00 	movl   $0x0,0x6468
-    433e:	00 00 00 
-    4341:	e9 46 ff ff ff       	jmp    428c <malloc+0x2c>
+    4407:	c7 05 48 65 00 00 00 	movl   $0x0,0x6548
+    440e:	00 00 00 
+    4411:	e9 46 ff ff ff       	jmp    435c <malloc+0x2c>
diff --git a/usertests.c b/usertests.c
index d25d9ef..d1662c5 100644
--- a/usertests.c
+++ b/usertests.c
@@ -10,28 +10,31 @@
 
 char buf[8192];
 char name[3];
-char *echoargv[] = { "echo", "ALL", "TESTS", "PASSED", 0 };
+char *echoargv[] = {"echo", "ALL", "TESTS", "PASSED", 0};
 int stdout = 1;
 
 // does chdir() call iput(p->cwd) in a transaction?
-void
-iputtest(void)
+void iputtest(void)
 {
   printf(stdout, "iput test\n");
 
-  if(mkdir("iputdir") < 0){
+  if (mkdir("iputdir") < 0)
+  {
     printf(stdout, "mkdir failed\n");
     exit(0);
   }
-  if(chdir("iputdir") < 0){
+  if (chdir("iputdir") < 0)
+  {
     printf(stdout, "chdir iputdir failed\n");
     exit(0);
   }
-  if(unlink("../iputdir") < 0){
+  if (unlink("../iputdir") < 0)
+  {
     printf(stdout, "unlink ../iputdir failed\n");
     exit(0);
   }
-  if(chdir("/") < 0){
+  if (chdir("/") < 0)
+  {
     printf(stdout, "chdir / failed\n");
     exit(0);
   }
@@ -39,34 +42,39 @@ iputtest(void)
 }
 
 // does exit(0) call iput(p->cwd) in a transaction?
-void
-exitiputtest(void)
+void exitiputtest(void)
 {
   int pid;
 
   printf(stdout, "exitiput test\n");
 
   pid = fork();
-  if(pid < 0){
+  if (pid < 0)
+  {
     printf(stdout, "fork failed\n");
     exit(0);
   }
-  if(pid == 0){
-    if(mkdir("iputdir") < 0){
+  if (pid == 0)
+  {
+    if (mkdir("iputdir") < 0)
+    {
       printf(stdout, "mkdir failed\n");
       exit(0);
     }
-    if(chdir("iputdir") < 0){
+    if (chdir("iputdir") < 0)
+    {
       printf(stdout, "child chdir failed\n");
       exit(0);
     }
-    if(unlink("../iputdir") < 0){
+    if (unlink("../iputdir") < 0)
+    {
       printf(stdout, "unlink ../iputdir failed\n");
       exit(0);
     }
     exit(0);
   }
-  wait();
+  wait(0);
+  ;
   printf(stdout, "exitiput test ok\n");
 }
 
@@ -81,80 +89,91 @@ exitiputtest(void)
 //      for(i = 0; i < 10000; i++)
 //        yield();
 //    }
-void
-openiputtest(void)
+void openiputtest(void)
 {
   int pid;
 
   printf(stdout, "openiput test\n");
-  if(mkdir("oidir") < 0){
+  if (mkdir("oidir") < 0)
+  {
     printf(stdout, "mkdir oidir failed\n");
     exit(0);
   }
   pid = fork();
-  if(pid < 0){
+  if (pid < 0)
+  {
     printf(stdout, "fork failed\n");
     exit(0);
   }
-  if(pid == 0){
+  if (pid == 0)
+  {
     int fd = open("oidir", O_RDWR);
-    if(fd >= 0){
+    if (fd >= 0)
+    {
       printf(stdout, "open directory for write succeeded\n");
       exit(0);
     }
     exit(0);
   }
   sleep(1);
-  if(unlink("oidir") != 0){
+  if (unlink("oidir") != 0)
+  {
     printf(stdout, "unlink failed\n");
     exit(0);
   }
-  wait();
+  wait(0);
+  ;
   printf(stdout, "openiput test ok\n");
 }
 
 // simple file system tests
 
-void
-opentest(void)
+void opentest(void)
 {
   int fd;
 
   printf(stdout, "open test\n");
   fd = open("echo", 0);
-  if(fd < 0){
+  if (fd < 0)
+  {
     printf(stdout, "open echo failed!\n");
     exit(0);
   }
   close(fd);
   fd = open("doesnotexist", 0);
-  if(fd >= 0){
+  if (fd >= 0)
+  {
     printf(stdout, "open doesnotexist succeeded!\n");
     exit(0);
   }
   printf(stdout, "open test ok\n");
 }
 
-void
-writetest(void)
+void writetest(void)
 {
   int fd;
   int i;
 
   printf(stdout, "small file test\n");
-  fd = open("small", O_CREATE|O_RDWR);
-  if(fd >= 0){
+  fd = open("small", O_CREATE | O_RDWR);
+  if (fd >= 0)
+  {
     printf(stdout, "creat small succeeded; ok\n");
-  } else {
+  }
+  else
+  {
     printf(stdout, "error: creat small failed!\n");
     exit(0);
   }
-  for(i = 0; i < 100; i++){
-    if(write(fd, "aaaaaaaaaa", 10) != 10){
+  for (i = 0; i < 100; i++)
+  {
+    if (write(fd, "aaaaaaaaaa", 10) != 10)
+    {
       printf(stdout, "error: write aa %d new file failed\n", i);
       exit(0);
     }
-    if(write(fd, "bbbbbbbbbb", 10) != 10){
+    if (write(fd, "bbbbbbbbbb", 10) != 10)
+    {
       printf(stdout, "error: write bb %d new file failed\n", i);
       exit(0);
     }
@@ -162,44 +181,53 @@ writetest(void)
   printf(stdout, "writes ok\n");
   close(fd);
   fd = open("small", O_RDONLY);
-  if(fd >= 0){
+  if (fd >= 0)
+  {
     printf(stdout, "open small succeeded ok\n");
-  } else {
+  }
+  else
+  {
     printf(stdout, "error: open small failed!\n");
     exit(0);
   }
   i = read(fd, buf, 2000);
-  if(i == 2000){
+  if (i == 2000)
+  {
     printf(stdout, "read succeeded ok\n");
-  } else {
+  }
+  else
+  {
     printf(stdout, "read failed\n");
     exit(0);
   }
   close(fd);
 
-  if(unlink("small") < 0){
+  if (unlink("small") < 0)
+  {
     printf(stdout, "unlink small failed\n");
     exit(0);
   }
   printf(stdout, "small file test ok\n");
 }
 
-void
-writetest1(void)
+void writetest1(void)
 {
   int i, fd, n;
 
   printf(stdout, "big files test\n");
 
-  fd = open("big", O_CREATE|O_RDWR);
-  if(fd < 0){
+  fd = open("big", O_CREATE | O_RDWR);
+  if (fd < 0)
+  {
     printf(stdout, "error: creat big failed!\n");
     exit(0);
   }
 
-  for(i = 0; i < MAXFILE; i++){
-    ((int*)buf)[0] = i;
-    if(write(fd, buf, 512) != 512){
+  for (i = 0; i < MAXFILE; i++)
+  {
+    ((int *)buf)[0] = i;
+    if (write(fd, buf, 512) != 512)
+    {
       printf(stdout, "error: write big file failed\n", i);
       exit(0);
     }
@@ -208,41 +236,48 @@ writetest1(void)
   close(fd);
 
   fd = open("big", O_RDONLY);
-  if(fd < 0){
+  if (fd < 0)
+  {
     printf(stdout, "error: open big failed!\n");
     exit(0);
   }
 
   n = 0;
-  for(;;){
+  for (;;)
+  {
     i = read(fd, buf, 512);
-    if(i == 0){
-      if(n == MAXFILE - 1){
+    if (i == 0)
+    {
+      if (n == MAXFILE - 1)
+      {
         printf(stdout, "read only %d blocks from big", n);
         exit(0);
       }
       break;
-    } else if(i != 512){
+    }
+    else if (i != 512)
+    {
       printf(stdout, "read failed %d\n", i);
       exit(0);
     }
-    if(((int*)buf)[0] != n){
+    if (((int *)buf)[0] != n)
+    {
       printf(stdout, "read content of block %d is %d\n",
-             n, ((int*)buf)[0]);
+             n, ((int *)buf)[0]);
       exit(0);
     }
     n++;
   }
   close(fd);
-  if(unlink("big") < 0){
+  if (unlink("big") < 0)
+  {
     printf(stdout, "unlink big failed\n");
     exit(0);
   }
   printf(stdout, "big files ok\n");
 }
 
-void
-createtest(void)
+void createtest(void)
 {
   int i, fd;
 
@@ -250,14 +285,16 @@ createtest(void)
 
   name[0] = 'a';
   name[2] = '\0';
-  for(i = 0; i < 52; i++){
+  for (i = 0; i < 52; i++)
+  {
     name[1] = '0' + i;
-    fd = open(name, O_CREATE|O_RDWR);
+    fd = open(name, O_CREATE | O_RDWR);
     close(fd);
   }
   name[0] = 'a';
   name[2] = '\0';
-  for(i = 0; i < 52; i++){
+  for (i = 0; i < 52; i++)
+  {
     name[1] = '0' + i;
     unlink(name);
   }
@@ -268,33 +305,37 @@ void dirtest(void)
 {
   printf(stdout, "mkdir test\n");
 
-  if(mkdir("dir0") < 0){
+  if (mkdir("dir0") < 0)
+  {
     printf(stdout, "mkdir failed\n");
     exit(0);
   }
 
-  if(chdir("dir0") < 0){
+  if (chdir("dir0") < 0)
+  {
     printf(stdout, "chdir dir0 failed\n");
     exit(0);
   }
 
-  if(chdir("..") < 0){
+  if (chdir("..") < 0)
+  {
     printf(stdout, "chdir .. failed\n");
     exit(0);
   }
 
-  if(unlink("dir0") < 0){
+  if (unlink("dir0") < 0)
+  {
     printf(stdout, "unlink dir0 failed\n");
     exit(0);
   }
   printf(stdout, "mkdir test ok\n");
 }
 
-void
-exectest(void)
+void exectest(void)
 {
   printf(stdout, "exec test\n");
-  if(exec("echo", echoargv) < 0){
+  if (exec("echo", echoargv) < 0)
+  {
     printf(stdout, "exec echo failed\n");
     exit(0);
   }
@@ -302,52 +343,64 @@ exectest(void)
 
 // simple fork and pipe read/write
 
-void
-pipe1(void)
+void pipe1(void)
 {
   int fds[2], pid;
   int seq, i, n, cc, total;
 
-  if(pipe(fds) != 0){
+  if (pipe(fds) != 0)
+  {
     printf(1, "pipe() failed\n");
     exit(0);
   }
   pid = fork();
   seq = 0;
-  if(pid == 0){
+  if (pid == 0)
+  {
     close(fds[0]);
-    for(n = 0; n < 5; n++){
-      for(i = 0; i < 1033; i++)
+    for (n = 0; n < 5; n++)
+    {
+      for (i = 0; i < 1033; i++)
         buf[i] = seq++;
-      if(write(fds[1], buf, 1033) != 1033){
+      if (write(fds[1], buf, 1033) != 1033)
+      {
         printf(1, "pipe1 oops 1\n");
         exit(0);
       }
     }
     exit(0);
-  } else if(pid > 0){
+  }
+  else if (pid > 0)
+  {
     close(fds[1]);
     total = 0;
     cc = 1;
-    while((n = read(fds[0], buf, cc)) > 0){
-      for(i = 0; i < n; i++){
-        if((buf[i] & 0xff) != (seq++ & 0xff)){
+    while ((n = read(fds[0], buf, cc)) > 0)
+    {
+      for (i = 0; i < n; i++)
+      {
+        if ((buf[i] & 0xff) != (seq++ & 0xff))
+        {
           printf(1, "pipe1 oops 2\n");
           return;
         }
       }
       total += n;
       cc = cc * 2;
-      if(cc > sizeof(buf))
+      if (cc > sizeof(buf))
         cc = sizeof(buf);
     }
-    if(total != 5 * 1033){
+    if (total != 5 * 1033)
+    {
       printf(1, "pipe1 oops 3 total %d\n", total);
       exit(0);
     }
     close(fds[0]);
-    wait();
-  } else {
+    wait(0);
+    ;
+  }
+  else
+  {
     printf(1, "fork() failed\n");
     exit(0);
   }
@@ -355,36 +408,37 @@ pipe1(void)
 }
 
 // meant to be run w/ at most two CPUs
-void
-preempt(void)
+void preempt(void)
 {
   int pid1, pid2, pid3;
   int pfds[2];
 
   printf(1, "preempt: ");
   pid1 = fork();
-  if(pid1 == 0)
-    for(;;)
+  if (pid1 == 0)
+    for (;;)
       ;
 
   pid2 = fork();
-  if(pid2 == 0)
-    for(;;)
+  if (pid2 == 0)
+    for (;;)
       ;
 
   pipe(pfds);
   pid3 = fork();
-  if(pid3 == 0){
+  if (pid3 == 0)
+  {
     close(pfds[0]);
-    if(write(pfds[1], "x", 1) != 1)
+    if (write(pfds[1], "x", 1) != 1)
       printf(1, "preempt write error");
     close(pfds[1]);
-    for(;;)
+    for (;;)
       ;
   }
 
   close(pfds[1]);
-  if(read(pfds[0], buf, sizeof(buf)) != 1){
+  if (read(pfds[0], buf, sizeof(buf)) != 1)
+  {
     printf(1, "preempt read error");
     return;
   }
@@ -394,57 +448,68 @@ preempt(void)
   kill(pid2);
   kill(pid3);
   printf(1, "wait... ");
-  wait();
-  wait();
-  wait();
+  wait(0);
+  ;
+  wait(0);
+  ;
+  wait(0);
+  ;
   printf(1, "preempt ok\n");
 }
 
 // try to find any races between exit and wait
-void
-exitwait(void)
+void exitwait(void)
 {
   int i, pid;
 
-  for(i = 0; i < 100; i++){
+  for (i = 0; i < 100; i++)
+  {
     pid = fork();
-    if(pid < 0){
+    if (pid < 0)
+    {
       printf(1, "fork failed\n");
       return;
     }
-    if(pid){
-      if(wait() != pid){
+    if (pid)
+    {
+      if (wait(0) != pid)
+      {
         printf(1, "wait wrong pid\n");
         return;
       }
-    } else {
+    }
+    else
+    {
       exit(0);
     }
   }
   printf(1, "exitwait ok\n");
 }
 
-void
-mem(void)
+void mem(void)
 {
   void *m1, *m2;
   int pid, ppid;
 
   printf(1, "mem test\n");
   ppid = getpid();
-  if((pid = fork()) == 0){
+  if ((pid = fork()) == 0)
+  {
     m1 = 0;
-    while((m2 = malloc(10001)) != 0){
-      *(char**)m2 = m1;
+    while ((m2 = malloc(10001)) != 0)
+    {
+      *(char **)m2 = m1;
       m1 = m2;
     }
-    while(m1){
-      m2 = *(char**)m1;
+    while (m1)
+    {
+      m2 = *(char **)m1;
       free(m1);
       m1 = m2;
     }
-    m1 = malloc(1024*20);
-    if(m1 == 0){
+    m1 = malloc(1024 * 20);
+    if (m1 == 0)
+    {
       printf(1, "couldn't allocate mem?!!\n");
       kill(ppid);
       exit(0);
@@ -452,8 +517,11 @@ mem(void)
     free(m1);
     printf(1, "mem ok\n");
     exit(0);
-  } else {
-    wait();
+  }
+  else
+  {
+    wait(0);
+    ;
   }
 }
 
@@ -461,8 +529,7 @@ mem(void)
 
 // two processes write to the same file descriptor
 // is the offset shared? does inode locking work?
-void
-sharedfd(void)
+void sharedfd(void)
 {
   int fd, pid, i, n, nc, np;
   char buf[10];
@@ -470,43 +537,53 @@ sharedfd(void)
   printf(1, "sharedfd test\n");
 
   unlink("sharedfd");
-  fd = open("sharedfd", O_CREATE|O_RDWR);
-  if(fd < 0){
+  fd = open("sharedfd", O_CREATE | O_RDWR);
+  if (fd < 0)
+  {
     printf(1, "fstests: cannot open sharedfd for writing");
     return;
   }
   pid = fork();
-  memset(buf, pid==0?'c':'p', sizeof(buf));
-  for(i = 0; i < 1000; i++){
-    if(write(fd, buf, sizeof(buf)) != sizeof(buf)){
+  memset(buf, pid == 0 ? 'c' : 'p', sizeof(buf));
+  for (i = 0; i < 1000; i++)
+  {
+    if (write(fd, buf, sizeof(buf)) != sizeof(buf))
+    {
       printf(1, "fstests: write sharedfd failed\n");
       break;
     }
   }
-  if(pid == 0)
+  if (pid == 0)
     exit(0);
   else
-    wait();
+    wait(0);
+  ;
   close(fd);
   fd = open("sharedfd", 0);
-  if(fd < 0){
+  if (fd < 0)
+  {
     printf(1, "fstests: cannot open sharedfd for reading\n");
     return;
   }
   nc = np = 0;
-  while((n = read(fd, buf, sizeof(buf))) > 0){
-    for(i = 0; i < sizeof(buf); i++){
-      if(buf[i] == 'c')
+  while ((n = read(fd, buf, sizeof(buf))) > 0)
+  {
+    for (i = 0; i < sizeof(buf); i++)
+    {
+      if (buf[i] == 'c')
         nc++;
-      if(buf[i] == 'p')
+      if (buf[i] == 'p')
         np++;
     }
   }
   close(fd);
   unlink("sharedfd");
-  if(nc == 10000 && np == 10000){
+  if (nc == 10000 && np == 10000)
+  {
     printf(1, "sharedfd ok\n");
-  } else {
+  }
+  else
+  {
     printf(1, "sharedfd oops %d %d\n", nc, np);
     exit(0);
   }
@@ -514,35 +591,40 @@ sharedfd(void)
 
 // four processes write different files at the same
 // time, to test block allocation.
-void
-fourfiles(void)
+void fourfiles(void)
 {
   int fd, pid, i, j, n, total, pi;
-  char *names[] = { "f0", "f1", "f2", "f3" };
+  char *names[] = {"f0", "f1", "f2", "f3"};
   char *fname;
 
   printf(1, "fourfiles test\n");
 
-  for(pi = 0; pi < 4; pi++){
+  for (pi = 0; pi < 4; pi++)
+  {
     fname = names[pi];
     unlink(fname);
 
     pid = fork();
-    if(pid < 0){
+    if (pid < 0)
+    {
       printf(1, "fork failed\n");
       exit(0);
     }
 
-    if(pid == 0){
+    if (pid == 0)
+    {
       fd = open(fname, O_CREATE | O_RDWR);
-      if(fd < 0){
+      if (fd < 0)
+      {
         printf(1, "create failed\n");
         exit(0);
       }
 
-      memset(buf, '0'+pi, 512);
-      for(i = 0; i < 12; i++){
-        if((n = write(fd, buf, 500)) != 500){
+      memset(buf, '0' + pi, 512);
+      for (i = 0; i < 12; i++)
+      {
+        if ((n = write(fd, buf, 500)) != 500)
+        {
           printf(1, "write failed %d\n", n);
           exit(0);
         }
@@ -551,17 +633,23 @@ fourfiles(void)
     }
   }
 
-  for(pi = 0; pi < 4; pi++){
-    wait();
+  for (pi = 0; pi < 4; pi++)
+  {
+    wait(0);
+    ;
   }
 
-  for(i = 0; i < 2; i++){
+  for (i = 0; i < 2; i++)
+  {
     fname = names[i];
     fd = open(fname, 0);
     total = 0;
-    while((n = read(fd, buf, sizeof(buf))) > 0){
-      for(j = 0; j < n; j++){
-        if(buf[j] != '0'+i){
+    while ((n = read(fd, buf, sizeof(buf))) > 0)
+    {
+      for (j = 0; j < n; j++)
+      {
+        if (buf[j] != '0' + i)
+        {
           printf(1, "wrong char\n");
           exit(0);
         }
@@ -569,7 +657,8 @@ fourfiles(void)
       total += n;
     }
     close(fd);
-    if(total != 12*500){
+    if (total != 12 * 500)
+    {
       printf(1, "wrong length %d\n", total);
       exit(0);
     }
@@ -580,36 +669,45 @@ fourfiles(void)
 }
 
 // four processes create and delete different files in same directory
-void
-createdelete(void)
+void createdelete(void)
 {
-  enum { N = 20 };
+  enum
+  {
+    N = 20
+  };
   int pid, i, fd, pi;
   char name[32];
 
   printf(1, "createdelete test\n");
 
-  for(pi = 0; pi < 4; pi++){
+  for (pi = 0; pi < 4; pi++)
+  {
     pid = fork();
-    if(pid < 0){
+    if (pid < 0)
+    {
       printf(1, "fork failed\n");
       exit(0);
     }
 
-    if(pid == 0){
+    if (pid == 0)
+    {
       name[0] = 'p' + pi;
       name[2] = '\0';
-      for(i = 0; i < N; i++){
+      for (i = 0; i < N; i++)
+      {
         name[1] = '0' + i;
         fd = open(name, O_CREATE | O_RDWR);
-        if(fd < 0){
+        if (fd < 0)
+        {
           printf(1, "create failed\n");
           exit(0);
         }
         close(fd);
-        if(i > 0 && (i % 2 ) == 0){
+        if (i > 0 && (i % 2) == 0)
+        {
           name[1] = '0' + (i / 2);
-          if(unlink(name) < 0){
+          if (unlink(name) < 0)
+          {
             printf(1, "unlink failed\n");
             exit(0);
           }
@@ -619,30 +717,39 @@ createdelete(void)
     }
   }
 
-  for(pi = 0; pi < 4; pi++){
-    wait();
+  for (pi = 0; pi < 4; pi++)
+  {
+    wait(0);
+    ;
   }
 
   name[0] = name[1] = name[2] = 0;
-  for(i = 0; i < N; i++){
-    for(pi = 0; pi < 4; pi++){
+  for (i = 0; i < N; i++)
+  {
+    for (pi = 0; pi < 4; pi++)
+    {
       name[0] = 'p' + pi;
       name[1] = '0' + i;
       fd = open(name, 0);
-      if((i == 0 || i >= N/2) && fd < 0){
+      if ((i == 0 || i >= N / 2) && fd < 0)
+      {
         printf(1, "oops createdelete %s didn't exist\n", name);
         exit(0);
-      } else if((i >= 1 && i < N/2) && fd >= 0){
+      }
+      else if ((i >= 1 && i < N / 2) && fd >= 0)
+      {
         printf(1, "oops createdelete %s did exist\n", name);
         exit(0);
       }
-      if(fd >= 0)
+      if (fd >= 0)
         close(fd);
     }
   }
 
-  for(i = 0; i < N; i++){
-    for(pi = 0; pi < 4; pi++){
+  for (i = 0; i < N; i++)
+  {
+    for (pi = 0; pi < 4; pi++)
+    {
       name[0] = 'p' + i;
       name[1] = '0' + i;
       unlink(name);
@@ -653,14 +760,14 @@ createdelete(void)
 }
 
 // can I unlink a file and still read it?
-void
-unlinkread(void)
+void unlinkread(void)
 {
   int fd, fd1;
 
   printf(1, "unlinkread test\n");
   fd = open("unlinkread", O_CREATE | O_RDWR);
-  if(fd < 0){
+  if (fd < 0)
+  {
     printf(1, "create unlinkread failed\n");
     exit(0);
   }
@@ -668,11 +775,13 @@ unlinkread(void)
   close(fd);
 
   fd = open("unlinkread", O_RDWR);
-  if(fd < 0){
+  if (fd < 0)
+  {
     printf(1, "open unlinkread failed\n");
     exit(0);
   }
-  if(unlink("unlinkread") != 0){
+  if (unlink("unlinkread") != 0)
+  {
     printf(1, "unlink unlinkread failed\n");
     exit(0);
   }
@@ -681,15 +790,18 @@ unlinkread(void)
   write(fd1, "yyy", 3);
   close(fd1);
 
-  if(read(fd, buf, sizeof(buf)) != 5){
+  if (read(fd, buf, sizeof(buf)) != 5)
+  {
     printf(1, "unlinkread read failed");
     exit(0);
   }
-  if(buf[0] != 'h'){
+  if (buf[0] != 'h')
+  {
     printf(1, "unlinkread wrong data\n");
     exit(0);
   }
-  if(write(fd, buf, 10) != 10){
+  if (write(fd, buf, 10) != 10)
+  {
     printf(1, "unlinkread write failed\n");
     exit(0);
   }
@@ -698,8 +810,7 @@ unlinkread(void)
   printf(1, "unlinkread ok\n");
 }
 
-void
-linktest(void)
+void linktest(void)
 {
   int fd;
 
@@ -708,51 +819,60 @@ linktest(void)
   unlink("lf1");
   unlink("lf2");
 
-  fd = open("lf1", O_CREATE|O_RDWR);
-  if(fd < 0){
+  fd = open("lf1", O_CREATE | O_RDWR);
+  if (fd < 0)
+  {
     printf(1, "create lf1 failed\n");
     exit(0);
   }
-  if(write(fd, "hello", 5) != 5){
+  if (write(fd, "hello", 5) != 5)
+  {
     printf(1, "write lf1 failed\n");
     exit(0);
   }
   close(fd);
 
-  if(link("lf1", "lf2") < 0){
+  if (link("lf1", "lf2") < 0)
+  {
     printf(1, "link lf1 lf2 failed\n");
     exit(0);
   }
   unlink("lf1");
 
-  if(open("lf1", 0) >= 0){
+  if (open("lf1", 0) >= 0)
+  {
     printf(1, "unlinked lf1 but it is still there!\n");
     exit(0);
   }
 
   fd = open("lf2", 0);
-  if(fd < 0){
+  if (fd < 0)
+  {
     printf(1, "open lf2 failed\n");
     exit(0);
   }
-  if(read(fd, buf, sizeof(buf)) != 5){
+  if (read(fd, buf, sizeof(buf)) != 5)
+  {
     printf(1, "read lf2 failed\n");
     exit(0);
   }
   close(fd);
 
-  if(link("lf2", "lf2") >= 0){
+  if (link("lf2", "lf2") >= 0)
+  {
     printf(1, "link lf2 lf2 succeeded! oops\n");
     exit(0);
   }
 
   unlink("lf2");
-  if(link("lf2", "lf1") >= 0){
+  if (link("lf2", "lf1") >= 0)
+  {
     printf(1, "link non-existant succeeded! oops\n");
     exit(0);
   }
 
-  if(link(".", "lf1") >= 0){
+  if (link(".", "lf1") >= 0)
+  {
     printf(1, "link . lf1 succeeded! oops\n");
     exit(0);
   }
@@ -761,13 +881,13 @@ linktest(void)
 }
 
 // test concurrent create/link/unlink of the same file
-void
-concreate(void)
+void concreate(void)
 {
   char file[3];
   int i, pid, n, fd;
   char fa[40];
-  struct {
+  struct
+  {
     ushort inum;
     char name[14];
   } de;
@@ -775,41 +895,53 @@ concreate(void)
   printf(1, "concreate test\n");
   file[0] = 'C';
   file[2] = '\0';
-  for(i = 0; i < 40; i++){
+  for (i = 0; i < 40; i++)
+  {
     file[1] = '0' + i;
     unlink(file);
     pid = fork();
-    if(pid && (i % 3) == 1){
+    if (pid && (i % 3) == 1)
+    {
       link("C0", file);
-    } else if(pid == 0 && (i % 5) == 1){
+    }
+    else if (pid == 0 && (i % 5) == 1)
+    {
       link("C0", file);
-    } else {
+    }
+    else
+    {
       fd = open(file, O_CREATE | O_RDWR);
-      if(fd < 0){
+      if (fd < 0)
+      {
         printf(1, "concreate create %s failed\n", file);
         exit(0);
       }
       close(fd);
     }
-    if(pid == 0)
+    if (pid == 0)
       exit(0);
     else
-      wait();
+      wait(0);
+    ;
   }
 
   memset(fa, 0, sizeof(fa));
   fd = open(".", 0);
   n = 0;
-  while(read(fd, &de, sizeof(de)) > 0){
-    if(de.inum == 0)
+  while (read(fd, &de, sizeof(de)) > 0)
+  {
+    if (de.inum == 0)
       continue;
-    if(de.name[0] == 'C' && de.name[2] == '\0'){
+    if (de.name[0] == 'C' && de.name[2] == '\0')
+    {
       i = de.name[1] - '0';
-      if(i < 0 || i >= sizeof(fa)){
+      if (i < 0 || i >= sizeof(fa))
+      {
         printf(1, "concreate weird file %s\n", de.name);
         exit(0);
       }
-      if(fa[i]){
+      if (fa[i])
+      {
         printf(1, "concreate duplicate file %s\n", de.name);
         exit(0);
       }
@@ -819,34 +951,41 @@ concreate(void)
   }
   close(fd);
 
-  if(n != 40){
+  if (n != 40)
+  {
     printf(1, "concreate not enough files in directory listing\n");
     exit(0);
   }
 
-  for(i = 0; i < 40; i++){
+  for (i = 0; i < 40; i++)
+  {
     file[1] = '0' + i;
     pid = fork();
-    if(pid < 0){
+    if (pid < 0)
+    {
       printf(1, "fork failed\n");
       exit(0);
     }
-    if(((i % 3) == 0 && pid == 0) ||
-       ((i % 3) == 1 && pid != 0)){
+    if (((i % 3) == 0 && pid == 0) ||
+        ((i % 3) == 1 && pid != 0))
+    {
       close(open(file, 0));
       close(open(file, 0));
       close(open(file, 0));
       close(open(file, 0));
-    } else {
+    }
+    else
+    {
       unlink(file);
       unlink(file);
       unlink(file);
       unlink(file);
     }
-    if(pid == 0)
+    if (pid == 0)
       exit(0);
     else
-      wait();
+      wait(0);
+    ;
   }
 
   printf(1, "concreate ok\n");
@@ -854,8 +993,7 @@ concreate(void)
 
 // another concurrent link/unlink/create test,
 // to look for deadlocks.
-void
-linkunlink()
+void linkunlink()
 {
   int pid, i;
 
@@ -863,25 +1001,33 @@ linkunlink()
 
   unlink("x");
   pid = fork();
-  if(pid < 0){
+  if (pid < 0)
+  {
     printf(1, "fork failed\n");
     exit(0);
   }
 
   unsigned int x = (pid ? 1 : 97);
-  for(i = 0; i < 100; i++){
+  for (i = 0; i < 100; i++)
+  {
     x = x * 1103515245 + 12345;
-    if((x % 3) == 0){
+    if ((x % 3) == 0)
+    {
       close(open("x", O_RDWR | O_CREATE));
-    } else if((x % 3) == 1){
+    }
+    else if ((x % 3) == 1)
+    {
       link("cat", "x");
-    } else {
+    }
+    else
+    {
       unlink("x");
     }
   }
 
-  if(pid)
-    wait();
+  if (pid)
+    wait(0);
+
   else
     exit(0);
 
@@ -889,8 +1035,7 @@ linkunlink()
 }
 
 // directory that uses indirect blocks
-void
-bigdir(void)
+void bigdir(void)
 {
   int i, fd;
   char name[10];
@@ -899,30 +1044,35 @@ bigdir(void)
   unlink("bd");
 
   fd = open("bd", O_CREATE);
-  if(fd < 0){
+  if (fd < 0)
+  {
     printf(1, "bigdir create failed\n");
     exit(0);
   }
   close(fd);
 
-  for(i = 0; i < 500; i++){
+  for (i = 0; i < 500; i++)
+  {
     name[0] = 'x';
     name[1] = '0' + (i / 64);
     name[2] = '0' + (i % 64);
     name[3] = '\0';
-    if(link("bd", name) != 0){
+    if (link("bd", name) != 0)
+    {
       printf(1, "bigdir link failed\n");
       exit(0);
     }
   }
 
   unlink("bd");
-  for(i = 0; i < 500; i++){
+  for (i = 0; i < 500; i++)
+  {
     name[0] = 'x';
     name[1] = '0' + (i / 64);
     name[2] = '0' + (i % 64);
     name[3] = '\0';
-    if(unlink(name) != 0){
+    if (unlink(name) != 0)
+    {
       printf(1, "bigdir unlink failed");
       exit(0);
     }
@@ -931,39 +1081,43 @@ bigdir(void)
   printf(1, "bigdir ok\n");
 }
 
-void
-subdir(void)
+void subdir(void)
 {
   int fd, cc;
 
   printf(1, "subdir test\n");
 
   unlink("ff");
-  if(mkdir("dd") != 0){
+  if (mkdir("dd") != 0)
+  {
     printf(1, "subdir mkdir dd failed\n");
     exit(0);
   }
 
   fd = open("dd/ff", O_CREATE | O_RDWR);
-  if(fd < 0){
+  if (fd < 0)
+  {
     printf(1, "create dd/ff failed\n");
     exit(0);
   }
   write(fd, "ff", 2);
   close(fd);
 
-  if(unlink("dd") >= 0){
+  if (unlink("dd") >= 0)
+  {
     printf(1, "unlink dd (non-empty dir) succeeded!\n");
     exit(0);
   }
 
-  if(mkdir("/dd/dd") != 0){
+  if (mkdir("/dd/dd") != 0)
+  {
     printf(1, "subdir mkdir dd/dd failed\n");
     exit(0);
   }
 
   fd = open("dd/dd/ff", O_CREATE | O_RDWR);
-  if(fd < 0){
+  if (fd < 0)
+  {
     printf(1, "create dd/dd/ff failed\n");
     exit(0);
   }
@@ -971,142 +1125,174 @@ subdir(void)
   close(fd);
 
   fd = open("dd/dd/../ff", 0);
-  if(fd < 0){
+  if (fd < 0)
+  {
     printf(1, "open dd/dd/../ff failed\n");
     exit(0);
   }
   cc = read(fd, buf, sizeof(buf));
-  if(cc != 2 || buf[0] != 'f'){
+  if (cc != 2 || buf[0] != 'f')
+  {
     printf(1, "dd/dd/../ff wrong content\n");
     exit(0);
   }
   close(fd);
 
-  if(link("dd/dd/ff", "dd/dd/ffff") != 0){
+  if (link("dd/dd/ff", "dd/dd/ffff") != 0)
+  {
     printf(1, "link dd/dd/ff dd/dd/ffff failed\n");
     exit(0);
   }
 
-  if(unlink("dd/dd/ff") != 0){
+  if (unlink("dd/dd/ff") != 0)
+  {
     printf(1, "unlink dd/dd/ff failed\n");
     exit(0);
   }
-  if(open("dd/dd/ff", O_RDONLY) >= 0){
+  if (open("dd/dd/ff", O_RDONLY) >= 0)
+  {
     printf(1, "open (unlinked) dd/dd/ff succeeded\n");
     exit(0);
   }
 
-  if(chdir("dd") != 0){
+  if (chdir("dd") != 0)
+  {
     printf(1, "chdir dd failed\n");
     exit(0);
   }
-  if(chdir("dd/../../dd") != 0){
+  if (chdir("dd/../../dd") != 0)
+  {
     printf(1, "chdir dd/../../dd failed\n");
     exit(0);
   }
-  if(chdir("dd/../../../dd") != 0){
+  if (chdir("dd/../../../dd") != 0)
+  {
     printf(1, "chdir dd/../../dd failed\n");
     exit(0);
   }
-  if(chdir("./..") != 0){
+  if (chdir("./..") != 0)
+  {
     printf(1, "chdir ./.. failed\n");
     exit(0);
   }
 
   fd = open("dd/dd/ffff", 0);
-  if(fd < 0){
+  if (fd < 0)
+  {
     printf(1, "open dd/dd/ffff failed\n");
     exit(0);
   }
-  if(read(fd, buf, sizeof(buf)) != 2){
+  if (read(fd, buf, sizeof(buf)) != 2)
+  {
     printf(1, "read dd/dd/ffff wrong len\n");
     exit(0);
   }
   close(fd);
 
-  if(open("dd/dd/ff", O_RDONLY) >= 0){
+  if (open("dd/dd/ff", O_RDONLY) >= 0)
+  {
     printf(1, "open (unlinked) dd/dd/ff succeeded!\n");
     exit(0);
   }
 
-  if(open("dd/ff/ff", O_CREATE|O_RDWR) >= 0){
+  if (open("dd/ff/ff", O_CREATE | O_RDWR) >= 0)
+  {
     printf(1, "create dd/ff/ff succeeded!\n");
     exit(0);
   }
-  if(open("dd/xx/ff", O_CREATE|O_RDWR) >= 0){
+  if (open("dd/xx/ff", O_CREATE | O_RDWR) >= 0)
+  {
     printf(1, "create dd/xx/ff succeeded!\n");
     exit(0);
   }
-  if(open("dd", O_CREATE) >= 0){
+  if (open("dd", O_CREATE) >= 0)
+  {
     printf(1, "create dd succeeded!\n");
     exit(0);
   }
-  if(open("dd", O_RDWR) >= 0){
+  if (open("dd", O_RDWR) >= 0)
+  {
     printf(1, "open dd rdwr succeeded!\n");
     exit(0);
   }
-  if(open("dd", O_WRONLY) >= 0){
+  if (open("dd", O_WRONLY) >= 0)
+  {
     printf(1, "open dd wronly succeeded!\n");
     exit(0);
   }
-  if(link("dd/ff/ff", "dd/dd/xx") == 0){
+  if (link("dd/ff/ff", "dd/dd/xx") == 0)
+  {
     printf(1, "link dd/ff/ff dd/dd/xx succeeded!\n");
     exit(0);
   }
-  if(link("dd/xx/ff", "dd/dd/xx") == 0){
+  if (link("dd/xx/ff", "dd/dd/xx") == 0)
+  {
     printf(1, "link dd/xx/ff dd/dd/xx succeeded!\n");
     exit(0);
   }
-  if(link("dd/ff", "dd/dd/ffff") == 0){
+  if (link("dd/ff", "dd/dd/ffff") == 0)
+  {
     printf(1, "link dd/ff dd/dd/ffff succeeded!\n");
     exit(0);
   }
-  if(mkdir("dd/ff/ff") == 0){
+  if (mkdir("dd/ff/ff") == 0)
+  {
     printf(1, "mkdir dd/ff/ff succeeded!\n");
     exit(0);
   }
-  if(mkdir("dd/xx/ff") == 0){
+  if (mkdir("dd/xx/ff") == 0)
+  {
     printf(1, "mkdir dd/xx/ff succeeded!\n");
     exit(0);
   }
-  if(mkdir("dd/dd/ffff") == 0){
+  if (mkdir("dd/dd/ffff") == 0)
+  {
     printf(1, "mkdir dd/dd/ffff succeeded!\n");
     exit(0);
   }
-  if(unlink("dd/xx/ff") == 0){
+  if (unlink("dd/xx/ff") == 0)
+  {
     printf(1, "unlink dd/xx/ff succeeded!\n");
     exit(0);
   }
-  if(unlink("dd/ff/ff") == 0){
+  if (unlink("dd/ff/ff") == 0)
+  {
     printf(1, "unlink dd/ff/ff succeeded!\n");
     exit(0);
   }
-  if(chdir("dd/ff") == 0){
+  if (chdir("dd/ff") == 0)
+  {
     printf(1, "chdir dd/ff succeeded!\n");
     exit(0);
   }
-  if(chdir("dd/xx") == 0){
+  if (chdir("dd/xx") == 0)
+  {
     printf(1, "chdir dd/xx succeeded!\n");
     exit(0);
   }
 
-  if(unlink("dd/dd/ffff") != 0){
+  if (unlink("dd/dd/ffff") != 0)
+  {
     printf(1, "unlink dd/dd/ff failed\n");
     exit(0);
   }
-  if(unlink("dd/ff") != 0){
+  if (unlink("dd/ff") != 0)
+  {
     printf(1, "unlink dd/ff failed\n");
     exit(0);
   }
-  if(unlink("dd") == 0){
+  if (unlink("dd") == 0)
+  {
     printf(1, "unlink non-empty dd succeeded!\n");
     exit(0);
   }
-  if(unlink("dd/dd") < 0){
+  if (unlink("dd/dd") < 0)
+  {
     printf(1, "unlink dd/dd failed\n");
     exit(0);
   }
-  if(unlink("dd") < 0){
+  if (unlink("dd") < 0)
+  {
     printf(1, "unlink dd failed\n");
     exit(0);
   }
@@ -1115,24 +1301,27 @@ subdir(void)
 }
 
 // test writes that are larger than the log.
-void
-bigwrite(void)
+void bigwrite(void)
 {
   int fd, sz;
 
   printf(1, "bigwrite test\n");
 
   unlink("bigwrite");
-  for(sz = 499; sz < 12*512; sz += 471){
+  for (sz = 499; sz < 12 * 512; sz += 471)
+  {
     fd = open("bigwrite", O_CREATE | O_RDWR);
-    if(fd < 0){
+    if (fd < 0)
+    {
       printf(1, "cannot create bigwrite\n");
       exit(0);
     }
     int i;
-    for(i = 0; i < 2; i++){
+    for (i = 0; i < 2; i++)
+    {
       int cc = write(fd, buf, sz);
-      if(cc != sz){
+      if (cc != sz)
+      {
         printf(1, "write(%d) ret %d\n", sz, cc);
         exit(0);
       }
@@ -1144,8 +1333,7 @@ bigwrite(void)
   printf(1, "bigwrite ok\n");
 }
 
-void
-bigfile(void)
+void bigfile(void)
 {
   int fd, i, total, cc;
 
@@ -1153,13 +1341,16 @@ bigfile(void)
 
   unlink("bigfile");
   fd = open("bigfile", O_CREATE | O_RDWR);
-  if(fd < 0){
+  if (fd < 0)
+  {
     printf(1, "cannot create bigfile");
     exit(0);
   }
-  for(i = 0; i < 20; i++){
+  for (i = 0; i < 20; i++)
+  {
     memset(buf, i, 600);
-    if(write(fd, buf, 600) != 600){
+    if (write(fd, buf, 600) != 600)
+    {
       printf(1, "write bigfile failed\n");
       exit(0);
     }
@@ -1167,31 +1358,37 @@ bigfile(void)
   close(fd);
 
   fd = open("bigfile", 0);
-  if(fd < 0){
+  if (fd < 0)
+  {
     printf(1, "cannot open bigfile\n");
     exit(0);
   }
   total = 0;
-  for(i = 0; ; i++){
+  for (i = 0;; i++)
+  {
     cc = read(fd, buf, 300);
-    if(cc < 0){
+    if (cc < 0)
+    {
       printf(1, "read bigfile failed\n");
       exit(0);
     }
-    if(cc == 0)
+    if (cc == 0)
       break;
-    if(cc != 300){
+    if (cc != 300)
+    {
       printf(1, "short read bigfile\n");
       exit(0);
     }
-    if(buf[0] != i/2 || buf[299] != i/2){
+    if (buf[0] != i / 2 || buf[299] != i / 2)
+    {
       printf(1, "read bigfile wrong data\n");
       exit(0);
     }
     total += cc;
   }
   close(fd);
-  if(total != 20*600){
+  if (total != 20 * 600)
+  {
     printf(1, "read bigfile wrong total\n");
     exit(0);
   }
@@ -1200,40 +1397,45 @@ bigfile(void)
   printf(1, "bigfile test ok\n");
 }
 
-void
-fourteen(void)
+void fourteen(void)
 {
   int fd;
 
   // DIRSIZ is 14.
   printf(1, "fourteen test\n");
 
-  if(mkdir("12345678901234") != 0){
+  if (mkdir("12345678901234") != 0)
+  {
     printf(1, "mkdir 12345678901234 failed\n");
     exit(0);
   }
-  if(mkdir("12345678901234/123456789012345") != 0){
+  if (mkdir("12345678901234/123456789012345") != 0)
+  {
     printf(1, "mkdir 12345678901234/123456789012345 failed\n");
     exit(0);
   }
   fd = open("123456789012345/123456789012345/123456789012345", O_CREATE);
-  if(fd < 0){
+  if (fd < 0)
+  {
     printf(1, "create 123456789012345/123456789012345/123456789012345 failed\n");
     exit(0);
   }
   close(fd);
   fd = open("12345678901234/12345678901234/12345678901234", 0);
-  if(fd < 0){
+  if (fd < 0)
+  {
     printf(1, "open 12345678901234/12345678901234/12345678901234 failed\n");
     exit(0);
   }
   close(fd);
 
-  if(mkdir("12345678901234/12345678901234") == 0){
+  if (mkdir("12345678901234/12345678901234") == 0)
+  {
     printf(1, "mkdir 12345678901234/12345678901234 succeeded!\n");
     exit(0);
   }
-  if(mkdir("123456789012345/12345678901234") == 0){
+  if (mkdir("123456789012345/12345678901234") == 0)
+  {
     printf(1, "mkdir 12345678901234/123456789012345 succeeded!\n");
     exit(0);
   }
@@ -1241,96 +1443,112 @@ fourteen(void)
   printf(1, "fourteen ok\n");
 }
 
-void
-rmdot(void)
+void rmdot(void)
 {
   printf(1, "rmdot test\n");
-  if(mkdir("dots") != 0){
+  if (mkdir("dots") != 0)
+  {
     printf(1, "mkdir dots failed\n");
     exit(0);
   }
-  if(chdir("dots") != 0){
+  if (chdir("dots") != 0)
+  {
     printf(1, "chdir dots failed\n");
     exit(0);
   }
-  if(unlink(".") == 0){
+  if (unlink(".") == 0)
+  {
     printf(1, "rm . worked!\n");
     exit(0);
   }
-  if(unlink("..") == 0){
+  if (unlink("..") == 0)
+  {
     printf(1, "rm .. worked!\n");
     exit(0);
   }
-  if(chdir("/") != 0){
+  if (chdir("/") != 0)
+  {
     printf(1, "chdir / failed\n");
     exit(0);
   }
-  if(unlink("dots/.") == 0){
+  if (unlink("dots/.") == 0)
+  {
     printf(1, "unlink dots/. worked!\n");
     exit(0);
   }
-  if(unlink("dots/..") == 0){
+  if (unlink("dots/..") == 0)
+  {
     printf(1, "unlink dots/.. worked!\n");
     exit(0);
   }
-  if(unlink("dots") != 0){
+  if (unlink("dots") != 0)
+  {
     printf(1, "unlink dots failed!\n");
     exit(0);
   }
   printf(1, "rmdot ok\n");
 }
 
-void
-dirfile(void)
+void dirfile(void)
 {
   int fd;
 
   printf(1, "dir vs file\n");
 
   fd = open("dirfile", O_CREATE);
-  if(fd < 0){
+  if (fd < 0)
+  {
     printf(1, "create dirfile failed\n");
     exit(0);
   }
   close(fd);
-  if(chdir("dirfile") == 0){
+  if (chdir("dirfile") == 0)
+  {
     printf(1, "chdir dirfile succeeded!\n");
     exit(0);
   }
   fd = open("dirfile/xx", 0);
-  if(fd >= 0){
+  if (fd >= 0)
+  {
     printf(1, "create dirfile/xx succeeded!\n");
     exit(0);
   }
   fd = open("dirfile/xx", O_CREATE);
-  if(fd >= 0){
+  if (fd >= 0)
+  {
     printf(1, "create dirfile/xx succeeded!\n");
     exit(0);
   }
-  if(mkdir("dirfile/xx") == 0){
+  if (mkdir("dirfile/xx") == 0)
+  {
     printf(1, "mkdir dirfile/xx succeeded!\n");
     exit(0);
   }
-  if(unlink("dirfile/xx") == 0){
+  if (unlink("dirfile/xx") == 0)
+  {
     printf(1, "unlink dirfile/xx succeeded!\n");
     exit(0);
   }
-  if(link("README", "dirfile/xx") == 0){
+  if (link("README", "dirfile/xx") == 0)
+  {
     printf(1, "link to dirfile/xx succeeded!\n");
     exit(0);
   }
-  if(unlink("dirfile") != 0){
+  if (unlink("dirfile") != 0)
+  {
     printf(1, "unlink dirfile failed!\n");
     exit(0);
   }
 
   fd = open(".", O_RDWR);
-  if(fd >= 0){
+  if (fd >= 0)
+  {
     printf(1, "open . for writing succeeded!\n");
     exit(0);
   }
   fd = open(".", 0);
-  if(write(fd, "x", 1) > 0){
+  if (write(fd, "x", 1) > 0)
+  {
     printf(1, "write . succeeded!\n");
     exit(0);
   }
@@ -1340,20 +1558,22 @@ dirfile(void)
 }
 
 // test that iput() is called at the end of _namei()
-void
-iref(void)
+void iref(void)
 {
   int i, fd;
 
   printf(1, "empty file name\n");
 
   // the 50 is NINODE
-  for(i = 0; i < 50 + 1; i++){
-    if(mkdir("irefd") != 0){
+  for (i = 0; i < 50 + 1; i++)
+  {
+    if (mkdir("irefd") != 0)
+    {
       printf(1, "mkdir irefd failed\n");
       exit(0);
     }
-    if(chdir("irefd") != 0){
+    if (chdir("irefd") != 0)
+    {
       printf(1, "chdir irefd failed\n");
       exit(0);
     }
@@ -1361,10 +1581,10 @@ iref(void)
     mkdir("");
     link("README", "");
     fd = open("", O_CREATE);
-    if(fd >= 0)
+    if (fd >= 0)
       close(fd);
     fd = open("xx", O_CREATE);
-    if(fd >= 0)
+    if (fd >= 0)
       close(fd);
     unlink("xx");
   }
@@ -1376,34 +1596,38 @@ iref(void)
 // test that fork fails gracefully
 // the forktest binary also does this, but it runs out of proc entries first.
 // inside the bigger usertests binary, we run out of memory first.
-void
-forktest(void)
+void forktest(void)
 {
   int n, pid;
 
   printf(1, "fork test\n");
 
-  for(n=0; n<1000; n++){
+  for (n = 0; n < 1000; n++)
+  {
     pid = fork();
-    if(pid < 0)
+    if (pid < 0)
       break;
-    if(pid == 0)
+    if (pid == 0)
       exit(0);
   }
 
-  if(n == 1000){
+  if (n == 1000)
+  {
     printf(1, "fork claimed to work 1000 times!\n");
     exit(0);
   }
 
-  for(; n > 0; n--){
-    if(wait() < 0){
+  for (; n > 0; n--)
+  {
+    if (wait(0) < 0)
+    {
       printf(1, "wait stopped early\n");
       exit(0);
     }
   }
 
-  if(wait() != -1){
+  if (wait(0) != -1)
+  {
     printf(1, "wait got too many\n");
     exit(0);
   }
@@ -1411,8 +1635,7 @@ forktest(void)
   printf(1, "fork test OK\n");
 }
 
-void
-sbrktest(void)
+void sbrktest(void)
 {
   int fds[2], pid, pids[10], ppid;
   char *a, *b, *c, *lastaddr, *oldbrk, *p, scratch;
@@ -1424,9 +1647,11 @@ sbrktest(void)
   // can one sbrk() less than a page?
   a = sbrk(0);
   int i;
-  for(i = 0; i < 5000; i++){
+  for (i = 0; i < 5000; i++)
+  {
     b = sbrk(1);
-    if(b != a){
+    if (b != a)
+    {
       printf(stdout, "sbrk test failed %d %x %x\n", i, a, b);
       exit(0);
     }
@@ -1434,41 +1659,47 @@ sbrktest(void)
     a = b + 1;
   }
   pid = fork();
-  if(pid < 0){
+  if (pid < 0)
+  {
     printf(stdout, "sbrk test fork failed\n");
     exit(0);
   }
   c = sbrk(1);
   c = sbrk(1);
-  if(c != a + 1){
+  if (c != a + 1)
+  {
     printf(stdout, "sbrk test failed post-fork\n");
     exit(0);
   }
-  if(pid == 0)
+  if (pid == 0)
     exit(0);
-  wait();
+  wait(0);
+  ;
 
   // can one grow address space to something big?
-#define BIG (100*1024*1024)
+#define BIG (100 * 1024 * 1024)
   a = sbrk(0);
   amt = (BIG) - (uint)a;
   p = sbrk(amt);
-  if (p != a) {
+  if (p != a)
+  {
     printf(stdout, "sbrk test failed to grow big address space; enough phys mem?\n");
     exit(0);
   }
-  lastaddr = (char*) (BIG-1);
+  lastaddr = (char *)(BIG - 1);
   *lastaddr = 99;
 
   // can one de-allocate?
   a = sbrk(0);
   c = sbrk(-4096);
-  if(c == (char*)0xffffffff){
+  if (c == (char *)0xffffffff)
+  {
     printf(stdout, "sbrk could not deallocate\n");
     exit(0);
   }
   c = sbrk(0);
-  if(c != a - 4096){
+  if (c != a - 4096)
+  {
     printf(stdout, "sbrk deallocation produced wrong address, a %x c %x\n", a, c);
     exit(0);
   }
@@ -1476,11 +1707,13 @@ sbrktest(void)
   // can one re-allocate that page?
   a = sbrk(0);
   c = sbrk(4096);
-  if(c != a || sbrk(0) != a + 4096){
+  if (c != a || sbrk(0) != a + 4096)
+  {
     printf(stdout, "sbrk re-allocation failed, a %x c %x\n", a, c);
     exit(0);
   }
-  if(*lastaddr == 99){
+  if (*lastaddr == 99)
+  {
     // should be zero
     printf(stdout, "sbrk de-allocation didn't really deallocate\n");
     exit(0);
@@ -1488,99 +1721,113 @@ sbrktest(void)
 
   a = sbrk(0);
   c = sbrk(-(sbrk(0) - oldbrk));
-  if(c != a){
+  if (c != a)
+  {
     printf(stdout, "sbrk downsize failed, a %x c %x\n", a, c);
     exit(0);
   }
 
   // can we read the kernel's memory?
-  for(a = (char*)(KERNBASE); a < (char*) (KERNBASE+2000000); a += 50000){
+  for (a = (char *)(KERNBASE); a < (char *)(KERNBASE + 2000000); a += 50000)
+  {
     ppid = getpid();
     pid = fork();
-    if(pid < 0){
+    if (pid < 0)
+    {
       printf(stdout, "fork failed\n");
       exit(0);
     }
-    if(pid == 0){
+    if (pid == 0)
+    {
       printf(stdout, "oops could read %x = %x\n", a, *a);
       kill(ppid);
       exit(0);
     }
-    wait();
+    wait(0);
+    ;
   }
 
   // if we run the system out of memory, does it clean up the last
   // failed allocation?
-  if(pipe(fds) != 0){
+  if (pipe(fds) != 0)
+  {
     printf(1, "pipe() failed\n");
     exit(0);
   }
-  for(i = 0; i < sizeof(pids)/sizeof(pids[0]); i++){
-    if((pids[i] = fork()) == 0){
+  for (i = 0; i < sizeof(pids) / sizeof(pids[0]); i++)
+  {
+    if ((pids[i] = fork()) == 0)
+    {
       // allocate a lot of memory
       sbrk(BIG - (uint)sbrk(0));
       write(fds[1], "x", 1);
       // sit around until killed
-      for(;;) sleep(1000);
+      for (;;)
+        sleep(1000);
     }
-    if(pids[i] != -1)
+    if (pids[i] != -1)
       read(fds[0], &scratch, 1);
   }
   // if those failed allocations freed up the pages they did allocate,
   // we'll be able to allocate here
   c = sbrk(4096);
-  for(i = 0; i < sizeof(pids)/sizeof(pids[0]); i++){
-    if(pids[i] == -1)
+  for (i = 0; i < sizeof(pids) / sizeof(pids[0]); i++)
+  {
+    if (pids[i] == -1)
       continue;
     kill(pids[i]);
-    wait();
+    wait(0);
+    ;
   }
-  if(c == (char*)0xffffffff){
+  if (c == (char *)0xffffffff)
+  {
     printf(stdout, "failed sbrk leaked memory\n");
     exit(0);
   }
 
-  if(sbrk(0) > oldbrk)
+  if (sbrk(0) > oldbrk)
     sbrk(-(sbrk(0) - oldbrk));
 
   printf(stdout, "sbrk test OK\n");
 }
 
-void
-validateint(int *p)
+void validateint(int *p)
 {
   int res;
   asm("mov %%esp, %%ebx\n\t"
       "mov %3, %%esp\n\t"
       "int %2\n\t"
-      "mov %%ebx, %%esp" :
-      "=a" (res) :
-      "a" (SYS_sleep), "n" (T_SYSCALL), "c" (p) :
-      "ebx");
+      "mov %%ebx, %%esp"
+      : "=a"(res)
+      : "a"(SYS_sleep), "n"(T_SYSCALL), "c"(p)
+      : "ebx");
 }
 
-void
-validatetest(void)
+void validatetest(void)
 {
   int hi, pid;
   uint p;
 
   printf(stdout, "validate test\n");
-  hi = 1100*1024;
+  hi = 1100 * 1024;
 
-  for(p = 0; p <= (uint)hi; p += 4096){
-    if((pid = fork()) == 0){
+  for (p = 0; p <= (uint)hi; p += 4096)
+  {
+    if ((pid = fork()) == 0)
+    {
       // try to crash the kernel by passing in a badly placed integer
-      validateint((int*)p);
+      validateint((int *)p);
       exit(0);
     }
     sleep(0);
     sleep(0);
     kill(pid);
-    wait();
+    wait(0);
+    ;
 
     // try to crash the kernel by passing in a bad string pointer
-    if(link("nosuchfile", (char*)p) != -1){
+    if (link("nosuchfile", (char *)p) != -1)
+    {
       printf(stdout, "link should not succeed\n");
       exit(0);
     }
@@ -1591,14 +1838,15 @@ validatetest(void)
 
 // does unintialized data start out zero?
 char uninit[10000];
-void
-bsstest(void)
+void bsstest(void)
 {
   int i;
 
   printf(stdout, "bss test\n");
-  for(i = 0; i < sizeof(uninit); i++){
-    if(uninit[i] != '\0'){
+  for (i = 0; i < sizeof(uninit); i++)
+  {
+    if (uninit[i] != '\0')
+    {
       printf(stdout, "bss test failed\n");
       exit(0);
     }
@@ -1609,32 +1857,36 @@ bsstest(void)
 // does exec return an error if the arguments
 // are larger than a page? or does it write
 // below the stack and wreck the instructions/data?
-void
-bigargtest(void)
+void bigargtest(void)
 {
   int pid, fd;
 
   unlink("bigarg-ok");
   pid = fork();
-  if(pid == 0){
+  if (pid == 0)
+  {
     static char *args[MAXARG];
     int i;
-    for(i = 0; i < MAXARG-1; i++)
+    for (i = 0; i < MAXARG - 1; i++)
       args[i] = "bigargs test: failed\n                                                                                                                                                                                                       ";
-    args[MAXARG-1] = 0;
+    args[MAXARG - 1] = 0;
     printf(stdout, "bigarg test\n");
     exec("echo", args);
     printf(stdout, "bigarg test ok\n");
     fd = open("bigarg-ok", O_CREATE);
     close(fd);
     exit(0);
-  } else if(pid < 0){
+  }
+  else if (pid < 0)
+  {
     printf(stdout, "bigargtest: fork failed\n");
     exit(0);
   }
-  wait();
+  wait(0);
+  ;
   fd = open("bigarg-ok", 0);
-  if(fd < 0){
+  if (fd < 0)
+  {
     printf(stdout, "bigarg test failed!\n");
     exit(0);
   }
@@ -1644,15 +1896,15 @@ bigargtest(void)
 
 // what happens when the file system runs out of blocks?
 // answer: balloc panics, so this test is not useful.
-void
-fsfull()
+void fsfull()
 {
   int nfiles;
   int fsblocks = 0;
 
   printf(1, "fsfull test\n");
 
-  for(nfiles = 0; ; nfiles++){
+  for (nfiles = 0;; nfiles++)
+  {
     char name[64];
     name[0] = 'f';
     name[1] = '0' + nfiles / 1000;
@@ -1661,26 +1913,29 @@ fsfull()
     name[4] = '0' + (nfiles % 10);
     name[5] = '\0';
     printf(1, "writing %s\n", name);
-    int fd = open(name, O_CREATE|O_RDWR);
-    if(fd < 0){
+    int fd = open(name, O_CREATE | O_RDWR);
+    if (fd < 0)
+    {
       printf(1, "open %s failed\n", name);
       break;
     }
     int total = 0;
-    while(1){
+    while (1)
+    {
       int cc = write(fd, buf, 512);
-      if(cc < 512)
+      if (cc < 512)
         break;
       total += cc;
       fsblocks++;
     }
     printf(1, "wrote %d bytes\n", total);
     close(fd);
-    if(total == 0)
+    if (total == 0)
       break;
   }
 
-  while(nfiles >= 0){
+  while (nfiles >= 0)
+  {
     char name[64];
     name[0] = 'f';
     name[1] = '0' + nfiles / 1000;
@@ -1695,11 +1950,10 @@ fsfull()
   printf(1, "fsfull test finished\n");
 }
 
-void
-uio()
+void uio()
 {
-  #define RTC_ADDR 0x70
-  #define RTC_DATA 0x71
+#define RTC_ADDR 0x70
+#define RTC_DATA 0x71
 
   ushort port = 0;
   uchar val = 0;
@@ -1707,20 +1961,26 @@ uio()
 
   printf(1, "uio test\n");
   pid = fork();
-  if(pid == 0){
+  if (pid == 0)
+  {
     port = RTC_ADDR;
-    val = 0x09;  /* year */
+    val = 0x09; /* year */
     /* http://wiki.osdev.org/Inline_Assembly/Examples */
-    asm volatile("outb %0,%1"::"a"(val), "d" (port));
+    asm volatile("outb %0,%1" ::"a"(val), "d"(port));
     port = RTC_DATA;
-    asm volatile("inb %1,%0" : "=a" (val) : "d" (port));
+    asm volatile("inb %1,%0"
+                 : "=a"(val)
+                 : "d"(port));
     printf(1, "uio: uio succeeded; test FAILED\n");
     exit(0);
-  } else if(pid < 0){
-    printf (1, "fork failed\n");
+  }
+  else if (pid < 0)
+  {
+    printf(1, "fork failed\n");
     exit(0);
   }
-  wait();
+  wait(0);
+  ;
   printf(1, "uio test done\n");
 }
 
@@ -1728,7 +1988,8 @@ void argptest()
 {
   int fd;
   fd = open("init", O_RDONLY);
-  if (fd < 0) {
+  if (fd < 0)
+  {
     printf(2, "open failed\n");
     exit(0);
   }
@@ -1745,12 +2006,12 @@ rand()
   return randstate;
 }
 
-int
-main(int argc, char *argv[])
+int main(int argc, char *argv[])
 {
   printf(1, "usertests starting\n");
 
-  if(open("usertests.ran", 0) >= 0){
+  if (open("usertests.ran", 0) >= 0)
+  {
     printf(1, "already ran user tests -- rebuild fs.img\n");
     exit(0);
   }
@@ -1783,6 +2044,7 @@ main(int argc, char *argv[])
   pipe1();
   preempt();
   exitwait();
+  ;
 
   rmdot();
   fourteen();
diff --git a/usertests.o b/usertests.o
index d243241..be0b0c9 100644
Binary files a/usertests.o and b/usertests.o differ
diff --git a/usertests.sym b/usertests.sym
index b2ac84e..5ba9e9e 100644
--- a/usertests.sym
+++ b/usertests.sym
@@ -1,8 +1,8 @@
 00000000 .text
-00004348 .rodata
-00005af8 .eh_frame
-000063c0 .data
-000063e0 .bss
+00004418 .rodata
+00005bc8 .eh_frame
+00006490 .data
+000064c0 .bss
 00000000 .comment
 00000000 .debug_aranges
 00000000 .debug_info
@@ -12,92 +12,92 @@
 00000000 .debug_loc
 00000000 .debug_ranges
 00000000 usertests.c
-000063e0 args.1718
+000064c0 args.1718
 00000000 ulib.c
 00000000 printf.c
-00003f40 printint
-00005ae7 digits.1354
+00004010 printint
+00005bb7 digits.1354
 00000000 umalloc.c
-00006460 freep
-00006464 base
-00003c70 strcpy
-00000ce0 exitwait
-00003fe0 printf
-000063c4 stdout
-00003820 bigargtest
-00003e60 memmove
-000002d0 openiputtest
-00003eda mknod
-00003d80 gets
-00003f12 getpid
-000009a0 pipe1
-000030d0 iref
-00004260 malloc
-00003f22 sleep
+00006540 freep
+00006544 base
+00003d40 strcpy
+00000d10 exitwait
+000040b0 printf
+00006494 stdout
+000038d0 bigargtest
+00003f30 memmove
+000002e0 openiputtest
+00003faa mknod
+00003e50 gets
+00003fe2 getpid
+000009c0 pipe1
+00003140 iref
+00004330 malloc
+00003ff2 sleep
 00000200 exitiputtest
-00003930 fsfull
-00001de0 bigdir
-00003200 forktest
-00000610 writetest1
-000027c0 bigwrite
-00000e50 sharedfd
-000063c0 randstate
-00003ea2 pipe
-00006480 uninit
-00002e50 dirfile
-00003eb2 write
-000037a0 bsstest
-000063c8 echoargv
-00003eea fstat
-00003ec2 kill
-000036f0 validatetest
-00002c80 rmdot
-00003f02 chdir
-00000940 exectest
-00003eca exec
-00003e9a wait
-00003c50 rand
-00003eaa read
-00000b80 preempt
-00003ee2 unlink
-00003bc0 argptest
-00000d70 mem
-00003e8a fork
-00003f1a sbrk
-00003f2a uptime
-000063dc __bss_start
-00003d20 memset
-000007d0 createtest
+000039f0 fsfull
+00001e50 bigdir
+00003270 forktest
+00000630 writetest1
+00002830 bigwrite
+00000e80 sharedfd
+00006490 randstate
+00003f72 pipe
+00006560 uninit
+00002ec0 dirfile
+00003f82 write
+00003850 bsstest
+00006498 echoargv
+00003fba fstat
+00003f92 kill
+00003790 validatetest
+00002cf0 rmdot
+00003fd2 chdir
+00000960 exectest
+00003f9a exec
+00003f6a wait
+00003d20 rand
+00003f7a read
+00000ba0 preempt
+00003fb2 unlink
+00003c90 argptest
+00000da0 mem
+00003f5a fork
+00003fea sbrk
+00003ffa uptime
+000064ac __bss_start
+00003df0 memset
+000007f0 createtest
 00000000 main
-00001280 createdelete
-00003ca0 strcmp
-00000440 writetest
-00003f0a dup
-000032e0 sbrktest
-000003a0 opentest
-00001f40 subdir
-00003b30 uio
-000016e0 linktest
-00008ba0 buf
-00000880 dirtest
+000012d0 createdelete
+00003d70 strcmp
+00000460 writetest
+00003fda dup
+00003360 sbrktest
+000003c0 opentest
+00001fb0 subdir
+00003bf0 uio
+00001740 linktest
+00008c80 buf
+000008a0 dirtest
 00000140 iputtest
-00003de0 stat
-000028d0 bigfile
-000063dc _edata
-0000aba4 _end
-000014e0 unlinkread
-00003ef2 link
-00003e92 exit
-00003e30 atoi
-00001cc0 linkunlink
-0000aba0 name
-00003cf0 strlen
-00003ed2 open
-00003d40 strchr
-00001980 concreate
-00002b00 fourteen
-000036e0 validateint
-00001040 fourfiles
-00003efa mkdir
-00003eba close
-000041d0 free
+00003eb0 stat
+00002940 bigfile
+000064ac _edata
+0000ac84 _end
+00001540 unlinkread
+00003fc2 link
+00003f62 exit
+00003f00 atoi
+00001d30 linkunlink
+0000ac80 name
+00003dc0 strlen
+00003fa2 open
+00003e10 strchr
+000019e0 concreate
+00002b70 fourteen
+00003780 validateint
+00001070 fourfiles
+00003fca mkdir
+00003f8a close
+000042a0 free
diff --git a/vm.o b/vm.o
index 4286cd7..be3ea13 100644
Binary files a/vm.o and b/vm.o differ
diff --git a/wc.asm b/wc.asm
index 21713ba..aeeec8a 100644
--- a/wc.asm
+++ b/wc.asm
@@ -574,132 +574,106 @@ memmove(void *vdst, const void *vsrc, int n)
  3b9:	c3                   	ret    
 
 000003ba <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
  3ba:	b8 01 00 00 00       	mov    $0x1,%eax
  3bf:	cd 40                	int    $0x40
  3c1:	c3                   	ret    
 
 000003c2 <exit>:
-SYSCALL(exit)
  3c2:	b8 02 00 00 00       	mov    $0x2,%eax
  3c7:	cd 40                	int    $0x40
  3c9:	c3                   	ret    
 
 000003ca <wait>:
-SYSCALL(wait)
  3ca:	b8 03 00 00 00       	mov    $0x3,%eax
  3cf:	cd 40                	int    $0x40
  3d1:	c3                   	ret    
 
 000003d2 <pipe>:
-SYSCALL(pipe)
  3d2:	b8 04 00 00 00       	mov    $0x4,%eax
  3d7:	cd 40                	int    $0x40
  3d9:	c3                   	ret    
 
 000003da <read>:
-SYSCALL(read)
  3da:	b8 05 00 00 00       	mov    $0x5,%eax
  3df:	cd 40                	int    $0x40
  3e1:	c3                   	ret    
 
 000003e2 <write>:
-SYSCALL(write)
  3e2:	b8 10 00 00 00       	mov    $0x10,%eax
  3e7:	cd 40                	int    $0x40
  3e9:	c3                   	ret    
 
 000003ea <close>:
-SYSCALL(close)
  3ea:	b8 15 00 00 00       	mov    $0x15,%eax
  3ef:	cd 40                	int    $0x40
  3f1:	c3                   	ret    
 
 000003f2 <kill>:
-SYSCALL(kill)
  3f2:	b8 06 00 00 00       	mov    $0x6,%eax
  3f7:	cd 40                	int    $0x40
  3f9:	c3                   	ret    
 
 000003fa <exec>:
-SYSCALL(exec)
  3fa:	b8 07 00 00 00       	mov    $0x7,%eax
  3ff:	cd 40                	int    $0x40
  401:	c3                   	ret    
 
 00000402 <open>:
-SYSCALL(open)
  402:	b8 0f 00 00 00       	mov    $0xf,%eax
  407:	cd 40                	int    $0x40
  409:	c3                   	ret    
 
 0000040a <mknod>:
-SYSCALL(mknod)
  40a:	b8 11 00 00 00       	mov    $0x11,%eax
  40f:	cd 40                	int    $0x40
  411:	c3                   	ret    
 
 00000412 <unlink>:
-SYSCALL(unlink)
  412:	b8 12 00 00 00       	mov    $0x12,%eax
  417:	cd 40                	int    $0x40
  419:	c3                   	ret    
 
 0000041a <fstat>:
-SYSCALL(fstat)
  41a:	b8 08 00 00 00       	mov    $0x8,%eax
  41f:	cd 40                	int    $0x40
  421:	c3                   	ret    
 
 00000422 <link>:
-SYSCALL(link)
  422:	b8 13 00 00 00       	mov    $0x13,%eax
  427:	cd 40                	int    $0x40
  429:	c3                   	ret    
 
 0000042a <mkdir>:
-SYSCALL(mkdir)
  42a:	b8 14 00 00 00       	mov    $0x14,%eax
  42f:	cd 40                	int    $0x40
  431:	c3                   	ret    
 
 00000432 <chdir>:
-SYSCALL(chdir)
  432:	b8 09 00 00 00       	mov    $0x9,%eax
  437:	cd 40                	int    $0x40
  439:	c3                   	ret    
 
 0000043a <dup>:
-SYSCALL(dup)
  43a:	b8 0a 00 00 00       	mov    $0xa,%eax
  43f:	cd 40                	int    $0x40
  441:	c3                   	ret    
 
 00000442 <getpid>:
-SYSCALL(getpid)
  442:	b8 0b 00 00 00       	mov    $0xb,%eax
  447:	cd 40                	int    $0x40
  449:	c3                   	ret    
 
 0000044a <sbrk>:
-SYSCALL(sbrk)
  44a:	b8 0c 00 00 00       	mov    $0xc,%eax
  44f:	cd 40                	int    $0x40
  451:	c3                   	ret    
 
 00000452 <sleep>:
-SYSCALL(sleep)
  452:	b8 0d 00 00 00       	mov    $0xd,%eax
  457:	cd 40                	int    $0x40
  459:	c3                   	ret    
 
 0000045a <uptime>:
-SYSCALL(uptime)
  45a:	b8 0e 00 00 00       	mov    $0xe,%eax
  45f:	cd 40                	int    $0x40
  461:	c3                   	ret    
diff --git a/wc.o b/wc.o
index 0a37ea2..5429937 100644
Binary files a/wc.o and b/wc.o differ
diff --git a/xv6.img b/xv6.img
index dab6b43..e321d5d 100644
Binary files a/xv6.img and b/xv6.img differ
diff --git a/zombie.asm b/zombie.asm
index ba5af38..dc1a36f 100644
--- a/zombie.asm
+++ b/zombie.asm
@@ -412,132 +412,106 @@ memmove(void *vdst, const void *vsrc, int n)
  249:	c3                   	ret    
 
 0000024a <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
  24a:	b8 01 00 00 00       	mov    $0x1,%eax
  24f:	cd 40                	int    $0x40
  251:	c3                   	ret    
 
 00000252 <exit>:
-SYSCALL(exit)
  252:	b8 02 00 00 00       	mov    $0x2,%eax
  257:	cd 40                	int    $0x40
  259:	c3                   	ret    
 
 0000025a <wait>:
-SYSCALL(wait)
  25a:	b8 03 00 00 00       	mov    $0x3,%eax
  25f:	cd 40                	int    $0x40
  261:	c3                   	ret    
 
 00000262 <pipe>:
-SYSCALL(pipe)
  262:	b8 04 00 00 00       	mov    $0x4,%eax
  267:	cd 40                	int    $0x40
  269:	c3                   	ret    
 
 0000026a <read>:
-SYSCALL(read)
  26a:	b8 05 00 00 00       	mov    $0x5,%eax
  26f:	cd 40                	int    $0x40
  271:	c3                   	ret    
 
 00000272 <write>:
-SYSCALL(write)
  272:	b8 10 00 00 00       	mov    $0x10,%eax
  277:	cd 40                	int    $0x40
  279:	c3                   	ret    
 
 0000027a <close>:
-SYSCALL(close)
  27a:	b8 15 00 00 00       	mov    $0x15,%eax
  27f:	cd 40                	int    $0x40
  281:	c3                   	ret    
 
 00000282 <kill>:
-SYSCALL(kill)
  282:	b8 06 00 00 00       	mov    $0x6,%eax
  287:	cd 40                	int    $0x40
  289:	c3                   	ret    
 
 0000028a <exec>:
-SYSCALL(exec)
  28a:	b8 07 00 00 00       	mov    $0x7,%eax
  28f:	cd 40                	int    $0x40
  291:	c3                   	ret    
 
 00000292 <open>:
-SYSCALL(open)
  292:	b8 0f 00 00 00       	mov    $0xf,%eax
  297:	cd 40                	int    $0x40
  299:	c3                   	ret    
 
 0000029a <mknod>:
-SYSCALL(mknod)
  29a:	b8 11 00 00 00       	mov    $0x11,%eax
  29f:	cd 40                	int    $0x40
  2a1:	c3                   	ret    
 
 000002a2 <unlink>:
-SYSCALL(unlink)
  2a2:	b8 12 00 00 00       	mov    $0x12,%eax
  2a7:	cd 40                	int    $0x40
  2a9:	c3                   	ret    
 
 000002aa <fstat>:
-SYSCALL(fstat)
  2aa:	b8 08 00 00 00       	mov    $0x8,%eax
  2af:	cd 40                	int    $0x40
  2b1:	c3                   	ret    
 
 000002b2 <link>:
-SYSCALL(link)
  2b2:	b8 13 00 00 00       	mov    $0x13,%eax
  2b7:	cd 40                	int    $0x40
  2b9:	c3                   	ret    
 
 000002ba <mkdir>:
-SYSCALL(mkdir)
  2ba:	b8 14 00 00 00       	mov    $0x14,%eax
  2bf:	cd 40                	int    $0x40
  2c1:	c3                   	ret    
 
 000002c2 <chdir>:
-SYSCALL(chdir)
  2c2:	b8 09 00 00 00       	mov    $0x9,%eax
  2c7:	cd 40                	int    $0x40
  2c9:	c3                   	ret    
 
 000002ca <dup>:
-SYSCALL(dup)
  2ca:	b8 0a 00 00 00       	mov    $0xa,%eax
  2cf:	cd 40                	int    $0x40
  2d1:	c3                   	ret    
 
 000002d2 <getpid>:
-SYSCALL(getpid)
  2d2:	b8 0b 00 00 00       	mov    $0xb,%eax
  2d7:	cd 40                	int    $0x40
  2d9:	c3                   	ret    
 
 000002da <sbrk>:
-SYSCALL(sbrk)
  2da:	b8 0c 00 00 00       	mov    $0xc,%eax
  2df:	cd 40                	int    $0x40
  2e1:	c3                   	ret    
 
 000002e2 <sleep>:
-SYSCALL(sleep)
  2e2:	b8 0d 00 00 00       	mov    $0xd,%eax
  2e7:	cd 40                	int    $0x40
  2e9:	c3                   	ret    
 
 000002ea <uptime>:
-SYSCALL(uptime)
  2ea:	b8 0e 00 00 00       	mov    $0xe,%eax
  2ef:	cd 40                	int    $0x40
  2f1:	c3                   	ret    
diff --git a/zombie.o b/zombie.o
index 3e6ce70..754ee1a 100644
Binary files a/zombie.o and b/zombie.o differ
